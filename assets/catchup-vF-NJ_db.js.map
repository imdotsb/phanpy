{"version":3,"file":"catchup-vF-NJ_db.js","sources":["../../src/assets/features/catch-up.png","../../src/pages/catchup.jsx"],"sourcesContent":["export default \"__VITE_ASSET__S_9SYp01__\"","import '../components/links-bar.css';\r\nimport './catchup.css';\r\n\r\nimport autoAnimate from '@formkit/auto-animate';\r\nimport { getBlurHashAverageColor } from 'fast-blurhash';\r\nimport { Fragment } from 'preact';\r\nimport { memo } from 'preact/compat';\r\nimport {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { uid } from 'uid/single';\r\n\r\nimport catchupUrl from '../assets/features/catch-up.png';\r\n\r\nimport Avatar from '../components/avatar';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport Modal from '../components/modal';\r\nimport NameText from '../components/name-text';\r\nimport NavMenu from '../components/nav-menu';\r\nimport RelativeTime from '../components/relative-time';\r\nimport { api } from '../utils/api';\r\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\r\nimport db from '../utils/db';\r\nimport emojifyText from '../utils/emojify-text';\r\nimport { isFiltered } from '../utils/filters';\r\nimport htmlContentLength from '../utils/html-content-length';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport showToast from '../utils/show-toast';\r\nimport states, { statusKey } from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport store from '../utils/store';\r\nimport { getCurrentAccountNS } from '../utils/store-utils';\r\nimport { assignFollowedTags } from '../utils/timeline-utils';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst FILTER_CONTEXT = 'home';\r\n\r\nconst RANGES = [\r\n  { label: 'last 1 hour', value: 1 },\r\n  { label: 'last 2 hours', value: 2 },\r\n  { label: 'last 3 hours', value: 3 },\r\n  { label: 'last 4 hours', value: 4 },\r\n  { label: 'last 5 hours', value: 5 },\r\n  { label: 'last 6 hours', value: 6 },\r\n  { label: 'last 7 hours', value: 7 },\r\n  { label: 'last 8 hours', value: 8 },\r\n  { label: 'last 9 hours', value: 9 },\r\n  { label: 'last 10 hours', value: 10 },\r\n  { label: 'last 11 hours', value: 11 },\r\n  { label: 'last 12 hours', value: 12 },\r\n  { label: 'beyond 12 hours', value: 13 },\r\n];\r\n\r\nconst FILTER_LABELS = [\r\n  'Original',\r\n  'Replies',\r\n  'Boosts',\r\n  'Followed tags',\r\n  'Groups',\r\n  'Filtered',\r\n];\r\nconst FILTER_SORTS = [\r\n  'createdAt',\r\n  'repliesCount',\r\n  'favouritesCount',\r\n  'reblogsCount',\r\n  'density',\r\n];\r\nconst FILTER_GROUPS = [null, 'account'];\r\nconst FILTER_VALUES = {\r\n  Filtered: 'filtered',\r\n  Groups: 'group',\r\n  Boosts: 'boost',\r\n  Replies: 'reply',\r\n  'Followed tags': 'followedTags',\r\n  Original: 'original',\r\n};\r\nconst FILTER_CATEGORY_TEXT = {\r\n  Filtered: 'filtered posts',\r\n  Groups: 'group posts',\r\n  Boosts: 'boosts',\r\n  Replies: 'replies',\r\n  'Followed tags': 'followed-tag posts',\r\n  Original: 'original posts',\r\n};\r\nconst SORT_BY_TEXT = {\r\n  // asc, desc\r\n  createdAt: ['oldest', 'latest'],\r\n  repliesCount: ['fewest replies', 'most replies'],\r\n  favouritesCount: ['fewest likes', 'most likes'],\r\n  reblogsCount: ['fewest boosts', 'most boosts'],\r\n  density: ['least dense', 'most dense'],\r\n};\r\n\r\nfunction Catchup() {\r\n  useTitle('Catch-up', '/catchup');\r\n  const { masto, instance } = api();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const id = searchParams.get('id');\r\n  const [uiState, setUIState] = useState('start');\r\n  const [showTopLinks, setShowTopLinks] = useState(false);\r\n\r\n  const currentAccount = useMemo(() => {\r\n    return store.session.get('currentAccount');\r\n  }, []);\r\n  const isSelf = (accountID) => accountID === currentAccount;\r\n\r\n  async function fetchHome({ maxCreatedAt }) {\r\n    const maxCreatedAtDate = maxCreatedAt ? new Date(maxCreatedAt) : null;\r\n    console.debug('fetchHome', maxCreatedAtDate);\r\n    const allResults = [];\r\n    const homeIterator = masto.v1.timelines.home.list({ limit: 40 });\r\n    mainloop: while (true) {\r\n      try {\r\n        const results = await homeIterator.next();\r\n        const { value } = results;\r\n        if (value?.length) {\r\n          // This ignores maxCreatedAt filter, but it's ok for now\r\n          await assignFollowedTags(value, instance);\r\n          let addedResults = false;\r\n          for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const createdAtDate = new Date(item.createdAt);\r\n            if (!maxCreatedAtDate || createdAtDate >= maxCreatedAtDate) {\r\n              // Filtered\r\n              const selfPost = isSelf(\r\n                item.reblog?.account?.id || item.account.id,\r\n              );\r\n              const filterInfo =\r\n                !selfPost &&\r\n                isFiltered(\r\n                  item.reblog?.filtered || item.filtered,\r\n                  FILTER_CONTEXT,\r\n                );\r\n              if (filterInfo?.action === 'hide') continue;\r\n              item._filtered = filterInfo;\r\n\r\n              // Followed tags\r\n              const sKey = statusKey(item.id, instance);\r\n              item._followedTags = states.statusFollowedTags[sKey]\r\n                ? [...states.statusFollowedTags[sKey]]\r\n                : [];\r\n\r\n              allResults.push(item);\r\n              addedResults = true;\r\n            } else {\r\n              // Don't immediately stop, still add the other items that might still be within range\r\n              // break mainloop;\r\n            }\r\n            // Only stop when ALL items are outside of range\r\n            if (!addedResults) {\r\n              break mainloop;\r\n            }\r\n          }\r\n        } else {\r\n          break mainloop;\r\n        }\r\n        // Pause 1s\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      } catch (e) {\r\n        console.error(e);\r\n        break mainloop;\r\n      }\r\n    }\r\n\r\n    // Post-process all results\r\n    // 1. Threadify - tag 1st-post in a thread\r\n    allResults.forEach((status) => {\r\n      if (status?.inReplyToId) {\r\n        const replyToStatus = allResults.find(\r\n          (s) => s.id === status.inReplyToId,\r\n        );\r\n        if (replyToStatus && !replyToStatus.inReplyToId) {\r\n          replyToStatus._thread = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return allResults;\r\n  }\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const catchupRangeRef = useRef();\r\n  const NS = useMemo(() => getCurrentAccountNS(), []);\r\n  const handleCatchupClick = useCallback(async ({ duration } = {}) => {\r\n    const now = Date.now();\r\n    const maxCreatedAt = duration ? now - duration : null;\r\n    setUIState('loading');\r\n    const results = await fetchHome({ maxCreatedAt });\r\n    // Namespaced by account ID\r\n    // Possible conflict if ID matches between different accounts from different instances\r\n    const catchupID = `${NS}-${uid()}`;\r\n    try {\r\n      await db.catchup.set(catchupID, {\r\n        id: catchupID,\r\n        posts: results,\r\n        count: results.length,\r\n        startAt: maxCreatedAt,\r\n        endAt: now,\r\n      });\r\n      setSearchParams({ id: catchupID });\r\n    } catch (e) {\r\n      console.error(e, results);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      (async () => {\r\n        const catchup = await db.catchup.get(id);\r\n        if (catchup) {\r\n          catchup.posts.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\r\n          setPosts(catchup.posts);\r\n          setUIState('results');\r\n        }\r\n      })();\r\n    } else if (uiState === 'results') {\r\n      setPosts([]);\r\n      setUIState('start');\r\n    }\r\n  }, [id]);\r\n\r\n  const [reloadCatchupsCount, reloadCatchups] = useReducer((c) => c + 1, 0);\r\n  const [lastCatchupEndAt, setLastCatchupEndAt] = useState(null);\r\n  const [prevCatchups, setPrevCatchups] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const catchups = await db.catchup.keys();\r\n        if (catchups.length) {\r\n          const ns = getCurrentAccountNS();\r\n          const ownKeys = catchups.filter((key) => key.startsWith(`${ns}-`));\r\n          if (ownKeys.length) {\r\n            let ownCatchups = await db.catchup.getMany(ownKeys);\r\n            ownCatchups.sort((a, b) => b.endAt - a.endAt);\r\n\r\n            // Split to 1st 3 last catchups, and the rest\r\n            let lastCatchups = ownCatchups.slice(0, 3);\r\n            let restCatchups = ownCatchups.slice(3);\r\n\r\n            const trimmedCatchups = lastCatchups.map((c) => {\r\n              const { id, count, startAt, endAt } = c;\r\n              return {\r\n                id,\r\n                count,\r\n                startAt,\r\n                endAt,\r\n              };\r\n            });\r\n            setPrevCatchups(trimmedCatchups);\r\n            setLastCatchupEndAt(lastCatchups[0].endAt);\r\n\r\n            // GC time\r\n            ownCatchups = null;\r\n            lastCatchups = null;\r\n\r\n            queueMicrotask(() => {\r\n              if (restCatchups.length) {\r\n                // delete them\r\n                db.catchup\r\n                  .delMany(restCatchups.map((c) => c.id))\r\n                  .then(() => {\r\n                    // GC time\r\n                    restCatchups = null;\r\n                  })\r\n                  .catch((e) => {\r\n                    console.error(e);\r\n                  });\r\n              }\r\n            });\r\n\r\n            return;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      setPrevCatchups([]);\r\n    })();\r\n  }, [reloadCatchupsCount]);\r\n  useEffect(() => {\r\n    if (uiState === 'start') {\r\n      reloadCatchups();\r\n    }\r\n  }, [uiState === 'start']);\r\n\r\n  const [filterCounts, links] = useMemo(() => {\r\n    let filtereds = 0,\r\n      groups = 0,\r\n      boosts = 0,\r\n      replies = 0,\r\n      followedTags = 0,\r\n      originals = 0;\r\n    const links = {};\r\n    for (const post of posts) {\r\n      if (post._filtered) {\r\n        filtereds++;\r\n        post.__FILTER = 'filtered';\r\n      } else if (post.group) {\r\n        groups++;\r\n        post.__FILTER = 'group';\r\n      } else if (post.reblog) {\r\n        boosts++;\r\n        post.__FILTER = 'boost';\r\n      } else if (post._followedTags?.length) {\r\n        followedTags++;\r\n        post.__FILTER = 'followedTags';\r\n      } else if (\r\n        post.inReplyToId &&\r\n        post.inReplyToAccountId !== post.account?.id\r\n      ) {\r\n        replies++;\r\n        post.__FILTER = 'reply';\r\n      } else {\r\n        originals++;\r\n        post.__FILTER = 'original';\r\n      }\r\n\r\n      const thePost = post.reblog || post;\r\n      if (\r\n        post.__FILTER !== 'filtered' &&\r\n        thePost.card?.url &&\r\n        thePost.card?.image &&\r\n        thePost.card?.type === 'link'\r\n      ) {\r\n        const { card, favouritesCount, reblogsCount } = thePost;\r\n        let { url } = card;\r\n        url = url.replace(/\\/$/, '');\r\n        if (!links[url]) {\r\n          links[url] = {\r\n            postID: thePost.id,\r\n            card,\r\n            shared: 1,\r\n            sharers: [post.account],\r\n            likes: favouritesCount,\r\n            boosts: reblogsCount,\r\n          };\r\n        } else {\r\n          if (links[url].sharers.find((a) => a.id === post.account.id)) {\r\n            continue;\r\n          }\r\n          links[url].shared++;\r\n          links[url].sharers.push(post.account);\r\n          if (links[url].postID !== thePost.id) {\r\n            links[url].likes += favouritesCount;\r\n            links[url].boosts += reblogsCount;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let topLinks = [];\r\n    for (const link in links) {\r\n      topLinks.push({\r\n        url: link,\r\n        ...links[link],\r\n      });\r\n    }\r\n    topLinks.sort((a, b) => {\r\n      if (a.shared > b.shared) return -1;\r\n      if (a.shared < b.shared) return 1;\r\n      if (a.boosts > b.boosts) return -1;\r\n      if (a.boosts < b.boosts) return 1;\r\n      if (a.likes > b.likes) return -1;\r\n      if (a.likes < b.likes) return 1;\r\n      return 0;\r\n    });\r\n\r\n    // Slice links to shared > 1 but min 10 links\r\n    if (topLinks.length > 10) {\r\n      linksLoop: for (let i = 10; i < topLinks.length; i++) {\r\n        const { shared } = topLinks[i];\r\n        if (shared <= 1) {\r\n          topLinks = topLinks.slice(0, i);\r\n          break linksLoop;\r\n        }\r\n      }\r\n    }\r\n\r\n    return [\r\n      {\r\n        Filtered: filtereds,\r\n        Groups: groups,\r\n        Boosts: boosts,\r\n        Replies: replies,\r\n        'Followed tags': followedTags,\r\n        Original: originals,\r\n      },\r\n      topLinks,\r\n    ];\r\n  }, [posts]);\r\n\r\n  const [selectedFilterCategory, setSelectedFilterCategory] = useState('All');\r\n  const [selectedAuthor, setSelectedAuthor] = useState(null);\r\n\r\n  const [range, setRange] = useState(1);\r\n\r\n  const [sortBy, setSortBy] = useState('createdAt');\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n  const [groupBy, setGroupBy] = useState(null);\r\n\r\n  const [filteredPosts, authors, authorCounts] = useMemo(() => {\r\n    const authorsHash = {};\r\n    const authorCountsMap = new Map();\r\n\r\n    let filteredPosts = posts.filter((post) => {\r\n      const postFilterMatches =\r\n        selectedFilterCategory === 'All' ||\r\n        post.__FILTER === FILTER_VALUES[selectedFilterCategory];\r\n\r\n      if (postFilterMatches) {\r\n        authorsHash[post.account.id] = post.account;\r\n        authorCountsMap.set(\r\n          post.account.id,\r\n          (authorCountsMap.get(post.account.id) || 0) + 1,\r\n        );\r\n      }\r\n\r\n      return postFilterMatches;\r\n    });\r\n\r\n    // Deduplicate boosts\r\n    const boostedPosts = {};\r\n    filteredPosts = filteredPosts.filter((post) => {\r\n      if (post.reblog) {\r\n        if (boostedPosts[post.reblog.id]) {\r\n          if (boostedPosts[post.reblog.id].__BOOSTERS) {\r\n            boostedPosts[post.reblog.id].__BOOSTERS.add(post.account);\r\n          } else {\r\n            boostedPosts[post.reblog.id].__BOOSTERS = new Set([post.account]);\r\n          }\r\n          return false;\r\n        } else {\r\n          boostedPosts[post.reblog.id] = post;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    if (selectedAuthor && authorCountsMap.has(selectedAuthor)) {\r\n      filteredPosts = filteredPosts.filter(\r\n        (post) =>\r\n          post.account.id === selectedAuthor ||\r\n          [...(post.__BOOSTERS || [])].find((a) => a.id === selectedAuthor),\r\n      );\r\n    }\r\n\r\n    return [filteredPosts, authorsHash, Object.fromEntries(authorCountsMap)];\r\n  }, [selectedFilterCategory, selectedAuthor, posts]);\r\n\r\n  const filteredPostsMap = useMemo(() => {\r\n    const map = {};\r\n    filteredPosts.forEach((post) => {\r\n      map[post.id] = post;\r\n    });\r\n    return map;\r\n  }, [filteredPosts]);\r\n\r\n  const authorCountsList = useMemo(\r\n    () =>\r\n      Object.keys(authorCounts).sort(\r\n        (a, b) => authorCounts[b] - authorCounts[a],\r\n      ),\r\n    [authorCounts],\r\n  );\r\n\r\n  const sortedFilteredPosts = useMemo(() => {\r\n    const authorIndices = {};\r\n    authorCountsList.forEach((authorID, index) => {\r\n      authorIndices[authorID] = index;\r\n    });\r\n    return filteredPosts.sort((a, b) => {\r\n      if (groupBy === 'account') {\r\n        const aAccountID = a.account.id;\r\n        const bAccountID = b.account.id;\r\n        const aIndex = authorIndices[aAccountID];\r\n        const bIndex = authorIndices[bAccountID];\r\n        const order = aIndex - bIndex;\r\n        if (order !== 0) {\r\n          return order;\r\n        }\r\n      }\r\n      if (sortBy !== 'createdAt') {\r\n        a = a.reblog || a;\r\n        b = b.reblog || b;\r\n        if (sortBy !== 'density' && a[sortBy] === b[sortBy]) {\r\n          return a.createdAt > b.createdAt ? 1 : -1;\r\n        }\r\n      }\r\n      if (sortBy === 'density') {\r\n        const aDensity = postDensity(a);\r\n        const bDensity = postDensity(b);\r\n        if (sortOrder === 'asc') {\r\n          return aDensity > bDensity ? 1 : -1;\r\n        } else {\r\n          return bDensity > aDensity ? 1 : -1;\r\n        }\r\n      }\r\n      if (sortOrder === 'asc') {\r\n        return a[sortBy] > b[sortBy] ? 1 : -1;\r\n      } else {\r\n        return b[sortBy] > a[sortBy] ? 1 : -1;\r\n      }\r\n    });\r\n  }, [filteredPosts, sortBy, sortOrder, groupBy, authorCountsList]);\r\n\r\n  const prevGroup = useRef(null);\r\n\r\n  const authorsListParent = useRef(null);\r\n  const autoAnimated = useRef(false);\r\n  useEffect(() => {\r\n    if (posts.length > 100 || autoAnimated.current) return;\r\n    if (authorsListParent.current) {\r\n      autoAnimate(authorsListParent.current, {\r\n        duration: 200,\r\n      });\r\n      autoAnimated.current = true;\r\n    }\r\n  }, [posts, authorsListParent]);\r\n\r\n  const postsBarType = posts.length > 160 ? '3d' : '2d';\r\n\r\n  const postsBar = useMemo(() => {\r\n    if (postsBarType !== '2d') return null;\r\n    return posts.map((post) => {\r\n      // If part of filteredPosts\r\n      const isFiltered = filteredPostsMap[post.id];\r\n      return (\r\n        <span\r\n          key={post.id}\r\n          class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\r\n        />\r\n      );\r\n    });\r\n  }, [filteredPostsMap]);\r\n\r\n  const postsBins = useMemo(() => {\r\n    if (postsBarType !== '3d') return null;\r\n    if (!posts?.length) return null;\r\n    const bins = binByTime(posts, 'createdAt', 320);\r\n    return bins.map((posts, i) => {\r\n      return (\r\n        <div class=\"posts-bin\" key={i}>\r\n          {posts.map((post) => {\r\n            const isFiltered = filteredPostsMap[post.id];\r\n            return (\r\n              <span\r\n                key={post.id}\r\n                class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  }, [filteredPostsMap]);\r\n\r\n  const scrollableRef = useRef(null);\r\n\r\n  // if range value exceeded lastCatchupEndAt, show error\r\n  const lastCatchupRange = useMemo(() => {\r\n    // return hour, not ms\r\n    if (!lastCatchupEndAt) return null;\r\n    return (Date.now() - lastCatchupEndAt) / 1000 / 60 / 60;\r\n  }, [lastCatchupEndAt, range]);\r\n\r\n  useEffect(() => {\r\n    if (uiState !== 'results') return;\r\n    const authorUsername =\r\n      selectedAuthor && authors[selectedAuthor]\r\n        ? authors[selectedAuthor].username\r\n        : '';\r\n    const sortOrderIndex = sortOrder === 'asc' ? 0 : 1;\r\n    const groupByText = {\r\n      account: 'authors',\r\n    };\r\n    let toast = showToast({\r\n      duration: 5_000, // 5 seconds\r\n      text: `Showing ${\r\n        FILTER_CATEGORY_TEXT[selectedFilterCategory] || 'all posts'\r\n      }${authorUsername ? ` by @${authorUsername}` : ''}, ${\r\n        SORT_BY_TEXT[sortBy][sortOrderIndex]\r\n      } first${\r\n        !!groupBy\r\n          ? `, grouped by ${groupBy === 'account' ? groupByText[groupBy] : ''}`\r\n          : ''\r\n      }`,\r\n    });\r\n    return () => {\r\n      toast?.hideToast?.();\r\n    };\r\n  }, [\r\n    uiState,\r\n    selectedFilterCategory,\r\n    selectedAuthor,\r\n    sortBy,\r\n    sortOrder,\r\n    groupBy,\r\n    authors,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (selectedAuthor) {\r\n      if (authors[selectedAuthor]) {\r\n        // Check if author is visible and within the scrollable area viewport\r\n        const authorElement = authorsListParent.current.querySelector(\r\n          `[data-author=\"${selectedAuthor}\"]`,\r\n        );\r\n        const scrollableRect =\r\n          authorsListParent.current?.getBoundingClientRect();\r\n        const authorRect = authorElement?.getBoundingClientRect();\r\n        console.log({\r\n          sLeft: scrollableRect.left,\r\n          sRight: scrollableRect.right,\r\n          aLeft: authorRect.left,\r\n          aRight: authorRect.right,\r\n        });\r\n        if (\r\n          authorRect.left < scrollableRect.left ||\r\n          authorRect.right > scrollableRect.right\r\n        ) {\r\n          authorElement.scrollIntoView({\r\n            block: 'nearest',\r\n            inline: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        } else if (authorRect.top < 0) {\r\n          authorElement.scrollIntoView({\r\n            block: 'nearest',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [selectedAuthor, authors]);\r\n\r\n  const [showHelp, setShowHelp] = useState(false);\r\n\r\n  const itemsSelector = '.catchup-list > li > a';\r\n  const jRef = useHotkeys(\r\n    'j',\r\n    () => {\r\n      const activeItem = document.activeElement.closest(itemsSelector);\r\n      const activeItemRect = activeItem?.getBoundingClientRect();\r\n      const allItems = Array.from(\r\n        scrollableRef.current.querySelectorAll(itemsSelector),\r\n      );\r\n      if (\r\n        activeItem &&\r\n        activeItemRect.top < scrollableRef.current.clientHeight &&\r\n        activeItemRect.bottom > 0\r\n      ) {\r\n        const activeItemIndex = allItems.indexOf(activeItem);\r\n        const nextItem = allItems[activeItemIndex + 1];\r\n        if (nextItem) {\r\n          nextItem.focus();\r\n          nextItem.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      } else {\r\n        const topmostItem = allItems.find((item) => {\r\n          const itemRect = item.getBoundingClientRect();\r\n          return itemRect.top >= 0;\r\n        });\r\n        if (topmostItem) {\r\n          topmostItem.focus();\r\n          topmostItem.scrollIntoView({\r\n            block: 'nearest',\r\n            inline: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      }\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreModifiers: true,\r\n    },\r\n  );\r\n\r\n  const kRef = useHotkeys(\r\n    'k',\r\n    () => {\r\n      const activeItem = document.activeElement.closest(itemsSelector);\r\n      const activeItemRect = activeItem?.getBoundingClientRect();\r\n      const allItems = Array.from(\r\n        scrollableRef.current.querySelectorAll(itemsSelector),\r\n      );\r\n      if (\r\n        activeItem &&\r\n        activeItemRect.top < scrollableRef.current.clientHeight &&\r\n        activeItemRect.bottom > 0\r\n      ) {\r\n        const activeItemIndex = allItems.indexOf(activeItem);\r\n        let prevItem = allItems[activeItemIndex - 1];\r\n        if (prevItem) {\r\n          prevItem.focus();\r\n          prevItem.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      } else {\r\n        const topmostItem = allItems.find((item) => {\r\n          const itemRect = item.getBoundingClientRect();\r\n          return itemRect.top >= 44 && itemRect.left >= 0;\r\n        });\r\n        if (topmostItem) {\r\n          topmostItem.focus();\r\n          topmostItem.scrollIntoView({\r\n            block: 'nearest',\r\n            inline: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      }\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreModifiers: true,\r\n    },\r\n  );\r\n\r\n  const hlRef = useHotkeys(\r\n    'h, l',\r\n    (_, handler) => {\r\n      // Go next/prev selectedAuthor in authorCountsList list\r\n      const key = handler.keys[0];\r\n      if (selectedAuthor) {\r\n        const index = authorCountsList.indexOf(selectedAuthor);\r\n        if (key === 'h') {\r\n          if (index > 0 && index < authorCountsList.length) {\r\n            setSelectedAuthor(authorCountsList[index - 1]);\r\n            scrollableRef.current?.focus();\r\n          }\r\n        } else if (key === 'l') {\r\n          if (index < authorCountsList.length - 1 && index >= 0) {\r\n            setSelectedAuthor(authorCountsList[index + 1]);\r\n            scrollableRef.current?.focus();\r\n          }\r\n        }\r\n      } else if (key === 'l') {\r\n        setSelectedAuthor(authorCountsList[0]);\r\n        scrollableRef.current?.focus();\r\n      }\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreModifiers: true,\r\n      enableOnFormTags: ['input'],\r\n    },\r\n  );\r\n\r\n  const escRef = useHotkeys(\r\n    'esc',\r\n    () => {\r\n      setSelectedAuthor(null);\r\n      scrollableRef.current?.focus();\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreModifiers: true,\r\n      enableOnFormTags: ['input'],\r\n    },\r\n  );\r\n\r\n  const dotRef = useHotkeys(\r\n    '.',\r\n    () => {\r\n      scrollableRef.current?.scrollTo({\r\n        top: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreModifiers: true,\r\n      enableOnFormTags: ['input'],\r\n    },\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={(node) => {\r\n        scrollableRef.current = node;\r\n        jRef.current = node;\r\n        kRef.current = node;\r\n        hlRef.current = node;\r\n        escRef.current = node;\r\n      }}\r\n      id=\"catchup-page\"\r\n      class=\"deck-container\"\r\n      tabIndex=\"-1\"\r\n    >\r\n      <div class=\"timeline-deck deck wide\">\r\n        <header\r\n          class={`${uiState === 'loading' ? 'loading' : ''}`}\r\n          onClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              scrollableRef.current?.scrollTo({\r\n                top: 0,\r\n                behavior: 'smooth',\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              {uiState === 'results' && (\r\n                <Link to=\"/catchup\" class=\"button plain\">\r\n                  <Icon icon=\"history2\" size=\"l\" />\r\n                </Link>\r\n              )}\r\n              {uiState === 'start' && (\r\n                <Link to=\"/\" class=\"button plain\">\r\n                  <Icon icon=\"home\" size=\"l\" />\r\n                </Link>\r\n              )}\r\n            </div>\r\n            <h1>\r\n              {uiState !== 'start' && (\r\n                <>\r\n                  Catch-up <sup>beta</sup>\r\n                </>\r\n              )}\r\n            </h1>\r\n            <div class=\"header-side\">\r\n              {uiState !== 'start' && uiState !== 'loading' && (\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"plain\"\r\n                  onClick={() => {\r\n                    setShowHelp(true);\r\n                  }}\r\n                >\r\n                  Help\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {uiState === 'start' && (\r\n            <div class=\"catchup-start\">\r\n              <h1>\r\n                Catch-up <sup>beta</sup>\r\n              </h1>\r\n              <details>\r\n                <summary>What is this?</summary>\r\n                <p>\r\n                  Catch-up is a separate timeline for your followings, offering\r\n                  a high-level view at a glance, with a simple, email-inspired\r\n                  interface to effortlessly sort and filter through posts.\r\n                </p>\r\n                <img\r\n                  src={catchupUrl}\r\n                  width=\"1200\"\r\n                  height=\"900\"\r\n                  alt=\"Preview of Catch-up UI\"\r\n                />\r\n                <p>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.target.closest('details').open = false;\r\n                    }}\r\n                  >\r\n                    Let's catch up\r\n                  </button>\r\n                </p>\r\n              </details>\r\n              <p>Let's catch up on the posts from your followings.</p>\r\n              <p>\r\n                <b>Show me all posts from…</b>\r\n              </p>\r\n              <div class=\"catchup-form\">\r\n                <input\r\n                  ref={catchupRangeRef}\r\n                  type=\"range\"\r\n                  value={range}\r\n                  min={RANGES[0].value}\r\n                  max={RANGES[RANGES.length - 1].value}\r\n                  step=\"1\"\r\n                  list=\"catchup-ranges\"\r\n                  onChange={(e) => setRange(+e.target.value)}\r\n                />{' '}\r\n                <span\r\n                  style={{\r\n                    width: '8em',\r\n                  }}\r\n                >\r\n                  {RANGES[range - 1].label}\r\n                  <br />\r\n                  <small class=\"insignificant\">\r\n                    {range == RANGES[RANGES.length - 1].value\r\n                      ? 'until the max'\r\n                      : niceDateTime(\r\n                          new Date(Date.now() - range * 60 * 60 * 1000),\r\n                        )}\r\n                  </small>\r\n                </span>\r\n                <datalist id=\"catchup-ranges\">\r\n                  {RANGES.map(({ label, value }) => (\r\n                    <option value={value} label={label} />\r\n                  ))}\r\n                </datalist>{' '}\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    if (range < RANGES[RANGES.length - 1].value) {\r\n                      const duration = range * 60 * 60 * 1000;\r\n                      handleCatchupClick({ duration });\r\n                    } else {\r\n                      handleCatchupClick();\r\n                    }\r\n                  }}\r\n                >\r\n                  Catch up\r\n                </button>\r\n              </div>\r\n              {lastCatchupRange && range > lastCatchupRange && (\r\n                <p class=\"catchup-info\">\r\n                  <Icon icon=\"info\" /> Overlaps with your last catch-up\r\n                </p>\r\n              )}\r\n              <p class=\"insignificant\">\r\n                <small>\r\n                  Note: your instance might only show a maximum of 800 posts in\r\n                  the Home timeline regardless of the time range. Could be less\r\n                  or more.\r\n                </small>\r\n              </p>\r\n              {!!prevCatchups?.length && (\r\n                <div class=\"catchup-prev\">\r\n                  <p>Previously…</p>\r\n                  <ul>\r\n                    {prevCatchups.map((pc) => (\r\n                      <li key={pc.id}>\r\n                        <Link to={`/catchup?id=${pc.id}`}>\r\n                          <Icon icon=\"history2\" />{' '}\r\n                          <span>\r\n                            {formatRange(\r\n                              new Date(pc.startAt),\r\n                              new Date(pc.endAt),\r\n                            )}\r\n                          </span>\r\n                        </Link>{' '}\r\n                        <span>\r\n                          <small class=\"ib insignificant\">\r\n                            {pc.count} posts\r\n                          </small>{' '}\r\n                          <button\r\n                            type=\"button\"\r\n                            class=\"light danger small\"\r\n                            onClick={async () => {\r\n                              const yes = confirm('Remove this catch-up?');\r\n                              if (yes) {\r\n                                let t = showToast(`Removing Catch-up ${pc.id}`);\r\n                                await db.catchup.del(pc.id);\r\n                                t?.hideToast?.();\r\n                                showToast(`Catch-up ${pc.id} removed`);\r\n                                reloadCatchups();\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Icon icon=\"x\" />\r\n                          </button>\r\n                        </span>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                  {prevCatchups.length >= 3 && (\r\n                    <p>\r\n                      <small>\r\n                        Note: Only max 3 will be stored. The rest will be\r\n                        automatically removed.\r\n                      </small>\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {uiState === 'loading' && (\r\n            <div class=\"ui-state catchup-start\">\r\n              <Loader abrupt />\r\n              <p class=\"insignificant\">Fetching posts…</p>\r\n              <p class=\"insignificant\">This might take a while.</p>\r\n            </div>\r\n          )}\r\n          {uiState === 'results' && (\r\n            <>\r\n              <div class=\"catchup-header\">\r\n                {posts.length > 0 && (\r\n                  <p>\r\n                    <b class=\"ib\">\r\n                      {formatRange(\r\n                        new Date(posts[0].createdAt),\r\n                        new Date(posts[posts.length - 1].createdAt),\r\n                      )}\r\n                    </b>\r\n                  </p>\r\n                )}\r\n                <aside>\r\n                  <button\r\n                    hidden={\r\n                      selectedFilterCategory === 'All' &&\r\n                      !selectedAuthor &&\r\n                      sortBy === 'createdAt' &&\r\n                      sortOrder === 'asc'\r\n                    }\r\n                    type=\"button\"\r\n                    class=\"plain4 small\"\r\n                    onClick={() => {\r\n                      setSelectedFilterCategory('All');\r\n                      setSelectedAuthor(null);\r\n                      setSortBy('createdAt');\r\n                      setGroupBy(null);\r\n                      setSortOrder('asc');\r\n                    }}\r\n                  >\r\n                    Reset filters\r\n                  </button>\r\n                  {links?.length > 0 && (\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      onClick={() => setShowTopLinks(!showTopLinks)}\r\n                    >\r\n                      Top links{' '}\r\n                      <Icon\r\n                        icon=\"chevron-down\"\r\n                        style={{\r\n                          transform: showTopLinks\r\n                            ? 'rotate(180deg)'\r\n                            : 'rotate(0deg)',\r\n                        }}\r\n                      />\r\n                    </button>\r\n                  )}\r\n                </aside>\r\n              </div>\r\n              <div class=\"shazam-container no-animation\" hidden={!showTopLinks}>\r\n                <div class=\"shazam-container-inner\">\r\n                  <div class=\"catchup-top-links links-bar\">\r\n                    {links.map((link) => {\r\n                      const { card, shared, sharers, likes, boosts } = link;\r\n                      const {\r\n                        blurhash,\r\n                        title,\r\n                        description,\r\n                        url,\r\n                        image,\r\n                        imageDescription,\r\n                        language,\r\n                        width,\r\n                        height,\r\n                        publishedAt,\r\n                      } = card;\r\n                      const domain = new URL(url).hostname\r\n                        .replace(/^www\\./, '')\r\n                        .replace(/\\/$/, '');\r\n                      let accentColor;\r\n                      if (blurhash) {\r\n                        const averageColor = getBlurHashAverageColor(blurhash);\r\n                        const labAverageColor = rgb2oklab(averageColor);\r\n                        accentColor = oklab2rgb([\r\n                          0.6,\r\n                          labAverageColor[1],\r\n                          labAverageColor[2],\r\n                        ]);\r\n                      }\r\n\r\n                      return (\r\n                        <a\r\n                          key={url}\r\n                          href={url}\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          style={\r\n                            accentColor\r\n                              ? {\r\n                                  '--accent-color': `rgb(${accentColor.join(\r\n                                    ',',\r\n                                  )})`,\r\n                                  '--accent-alpha-color': `rgba(${accentColor.join(\r\n                                    ',',\r\n                                  )}, 0.4)`,\r\n                                }\r\n                              : {}\r\n                          }\r\n                        >\r\n                          <article>\r\n                            <figure>\r\n                              <img\r\n                                src={image}\r\n                                alt={imageDescription}\r\n                                width={width}\r\n                                height={height}\r\n                                loading=\"lazy\"\r\n                              />\r\n                            </figure>\r\n                            <div class=\"article-body\">\r\n                              <header>\r\n                                <div class=\"article-meta\">\r\n                                  <span class=\"domain\">{domain}</span>{' '}\r\n                                  {!!publishedAt && <>&middot; </>}\r\n                                  {!!publishedAt && (\r\n                                    <>\r\n                                      <RelativeTime\r\n                                        datetime={publishedAt}\r\n                                        format=\"micro\"\r\n                                      />\r\n                                    </>\r\n                                  )}\r\n                                </div>\r\n                                {!!title && (\r\n                                  <h1 class=\"title\" lang={language} dir=\"auto\">\r\n                                    {title}\r\n                                  </h1>\r\n                                )}\r\n                              </header>\r\n                              {!!description && (\r\n                                <p\r\n                                  class=\"description\"\r\n                                  lang={language}\r\n                                  dir=\"auto\"\r\n                                >\r\n                                  {description}\r\n                                </p>\r\n                              )}\r\n                              <hr />\r\n                              <p\r\n                                style={{\r\n                                  whiteSpace: 'nowrap',\r\n                                }}\r\n                              >\r\n                                Shared by{' '}\r\n                                {sharers.map((s) => {\r\n                                  const { avatarStatic, displayName } = s;\r\n                                  return (\r\n                                    <Avatar\r\n                                      url={avatarStatic}\r\n                                      size=\"s\"\r\n                                      alt={displayName}\r\n                                    />\r\n                                  );\r\n                                })}\r\n                              </p>\r\n                            </div>\r\n                          </article>\r\n                        </a>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {posts.length >= 5 &&\r\n                (postsBarType === '3d' ? (\r\n                  <div class=\"catchup-posts-viz-time-bar\">{postsBins}</div>\r\n                ) : (\r\n                  <div class=\"catchup-posts-viz-bar\">{postsBar}</div>\r\n                ))}\r\n              {posts.length >= 2 && (\r\n                <div class=\"catchup-filters\">\r\n                  <label class=\"filter-cat\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"filter-cat\"\r\n                      checked={selectedFilterCategory.toLowerCase() === 'all'}\r\n                      onChange={() => {\r\n                        setSelectedFilterCategory('All');\r\n                      }}\r\n                    />\r\n                    All <span class=\"count\">{posts.length}</span>\r\n                  </label>\r\n                  {FILTER_LABELS.map(\r\n                    (label) =>\r\n                      !!filterCounts[label] && (\r\n                        <label\r\n                          class=\"filter-cat\"\r\n                          key={label}\r\n                          title={\r\n                            (\r\n                              (filterCounts[label] / posts.length) *\r\n                              100\r\n                            ).toFixed(2) + '%'\r\n                          }\r\n                        >\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"filter-cat\"\r\n                            checked={\r\n                              selectedFilterCategory.toLowerCase() ===\r\n                              label.toLowerCase()\r\n                            }\r\n                            onChange={() => {\r\n                              setSelectedFilterCategory(label);\r\n                              // setSelectedAuthor(null);\r\n                            }}\r\n                          />\r\n                          {label}{' '}\r\n                          <span class=\"count\">{filterCounts[label]}</span>\r\n                        </label>\r\n                      ),\r\n                  )}\r\n                </div>\r\n              )}\r\n              {posts.length >= 2 && !!authorCounts && (\r\n                <div\r\n                  class=\"catchup-filters authors-filters\"\r\n                  ref={authorsListParent}\r\n                >\r\n                  {authorCountsList.map((author) => (\r\n                    <label\r\n                      class=\"filter-author\"\r\n                      data-author={author}\r\n                      key={`${author}-${authorCounts[author]}`}\r\n                      // Preact messed up the order sometimes, need additional key besides just `author`\r\n                      // https://github.com/preactjs/preact/issues/2849\r\n                    >\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"filter-author\"\r\n                        checked={selectedAuthor === author}\r\n                        onChange={() => {\r\n                          setSelectedAuthor(author);\r\n                          // setGroupBy(null);\r\n                        }}\r\n                        onClick={() => {\r\n                          if (selectedAuthor === author) {\r\n                            setSelectedAuthor(null);\r\n                          }\r\n                        }}\r\n                      />\r\n                      <Avatar\r\n                        url={\r\n                          authors[author].avatarStatic || authors[author].avatar\r\n                        }\r\n                        size=\"xxl\"\r\n                        alt={`${authors[author].displayName} (@${authors[author].username})`}\r\n                      />{' '}\r\n                      <span class=\"count\">{authorCounts[author]}</span>\r\n                      <span class=\"username\">{authors[author].username}</span>\r\n                    </label>\r\n                  ))}\r\n                  {authorCountsList.length > 5 && (\r\n                    <small\r\n                      key=\"authors-count\"\r\n                      style={{\r\n                        whiteSpace: 'nowrap',\r\n                        paddingInline: '1em',\r\n                        opacity: 0.33,\r\n                      }}\r\n                    >\r\n                      {authorCountsList.length} authors\r\n                    </small>\r\n                  )}\r\n                </div>\r\n              )}\r\n              {posts.length >= 2 && (\r\n                <div class=\"catchup-filters\">\r\n                  <span class=\"filter-label\">Sort</span>{' '}\r\n                  <fieldset class=\"radio-field-group\">\r\n                    {FILTER_SORTS.map((key) => (\r\n                      <label\r\n                        class=\"filter-sort\"\r\n                        key={key}\r\n                        onClick={(e) => {\r\n                          if (sortBy === key) {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n                          }\r\n                        }}\r\n                      >\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"filter-sort-cat\"\r\n                          checked={sortBy === key}\r\n                          onChange={() => {\r\n                            setSortBy(key);\r\n                            const order = /(replies|favourites|reblogs)/.test(\r\n                              key,\r\n                            )\r\n                              ? 'desc'\r\n                              : 'asc';\r\n                            setSortOrder(order);\r\n                          }}\r\n                        />\r\n                        {\r\n                          {\r\n                            createdAt: 'Date',\r\n                            repliesCount: 'Replies',\r\n                            favouritesCount: 'Likes',\r\n                            reblogsCount: 'Boosts',\r\n                            density: 'Density',\r\n                          }[key]\r\n                        }\r\n                        {sortBy === key && (sortOrder === 'asc' ? ' ↑' : ' ↓')}\r\n                      </label>\r\n                    ))}\r\n                  </fieldset>\r\n                  {/* <fieldset class=\"radio-field-group\">\r\n                    {['asc', 'desc'].map((key) => (\r\n                      <label class=\"filter-sort\" key={key}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"filter-sort-dir\"\r\n                          checked={sortOrder === key}\r\n                          onChange={() => {\r\n                            setSortOrder(key);\r\n                          }}\r\n                        />\r\n                        {key === 'asc' ? '↑' : '↓'}\r\n                      </label>\r\n                    ))}\r\n                  </fieldset> */}\r\n                  <span class=\"filter-label\">Group</span>{' '}\r\n                  <fieldset class=\"radio-field-group\">\r\n                    {FILTER_GROUPS.map((key) => (\r\n                      <label class=\"filter-group\" key={key || 'none'}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"filter-group\"\r\n                          checked={groupBy === key}\r\n                          onChange={() => {\r\n                            setGroupBy(key);\r\n                          }}\r\n                          disabled={key === 'account' && selectedAuthor}\r\n                        />\r\n                        {{\r\n                          account: 'Authors',\r\n                        }[key] || 'None'}\r\n                      </label>\r\n                    ))}\r\n                  </fieldset>\r\n                  {\r\n                    selectedAuthor && authorCountsList.length > 1 ? (\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain6 small\"\r\n                        onClick={() => {\r\n                          setSelectedAuthor(null);\r\n                        }}\r\n                        style={{\r\n                          whiteSpace: 'nowrap',\r\n                        }}\r\n                      >\r\n                        Show all authors\r\n                      </button>\r\n                    ) : null\r\n                    // <button\r\n                    //   type=\"button\"\r\n                    //   class=\"plain4 small\"\r\n                    //   onClick={() => {}}\r\n                    // >\r\n                    //   Group by authors\r\n                    // </button>\r\n                  }\r\n                </div>\r\n              )}\r\n              <ul\r\n                class={`catchup-list catchup-filter-${\r\n                  FILTER_VALUES[selectedFilterCategory] || ''\r\n                } ${sortBy ? `catchup-sort-${sortBy}` : ''} ${\r\n                  selectedAuthor && authors[selectedAuthor]\r\n                    ? `catchup-selected-author`\r\n                    : ''\r\n                } ${groupBy ? `catchup-group-${groupBy}` : ''}`}\r\n              >\r\n                {sortedFilteredPosts.map((post, i) => {\r\n                  const id = post.reblog?.id || post.id;\r\n                  let showSeparator = false;\r\n                  if (groupBy === 'account') {\r\n                    if (\r\n                      prevGroup.current &&\r\n                      post.account.id !== prevGroup.current &&\r\n                      i > 0\r\n                    ) {\r\n                      showSeparator = true;\r\n                    }\r\n                    prevGroup.current = post.account.id;\r\n                  }\r\n                  return (\r\n                    <Fragment key={`${post.id}-${showSeparator}`}>\r\n                      {showSeparator && <li class=\"separator\" />}\r\n                      <IntersectionPostLineItem\r\n                        to={`/${instance}/s/${id}`}\r\n                        post={post}\r\n                        root={scrollableRef.current}\r\n                      />\r\n                    </Fragment>\r\n                  );\r\n                })}\r\n              </ul>\r\n              <footer>\r\n                {filteredPosts.length > 5 && (\r\n                  <p>\r\n                    {selectedFilterCategory === 'Boosts'\r\n                      ? \"You don't have to read everything.\"\r\n                      : \"That's all.\"}{' '}\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"textual\"\r\n                      onClick={() => {\r\n                        scrollableRef.current.scrollTop = 0;\r\n                      }}\r\n                    >\r\n                      Back to top\r\n                    </button>\r\n                    .\r\n                  </p>\r\n                )}\r\n              </footer>\r\n            </>\r\n          )}\r\n        </main>\r\n      </div>\r\n      {showHelp && (\r\n        <Modal onClose={() => setShowHelp(false)}>\r\n          <div class=\"sheet\" id=\"catchup-help-sheet\">\r\n            <button\r\n              type=\"button\"\r\n              class=\"sheet-close\"\r\n              onClick={() => setShowHelp(false)}\r\n            >\r\n              <Icon icon=\"x\" />\r\n            </button>\r\n            <header>\r\n              <h2>Help</h2>\r\n            </header>\r\n            <main>\r\n              <dl>\r\n                <dt>Top links</dt>\r\n                <dd>\r\n                  Links shared by followings, sorted by shared counts, boosts\r\n                  and likes.\r\n                </dd>\r\n                <dt>Sort: Density</dt>\r\n                <dd>\r\n                  Posts are sorted by information density or depth. Shorter\r\n                  posts are \"lighter\" while longer posts are \"heavier\". Posts\r\n                  with photos are \"heavier\" than posts without photos.\r\n                </dd>\r\n                <dt>Group: Authors</dt>\r\n                <dd>\r\n                  Posts are grouped by authors, sorted by posts count per\r\n                  author.\r\n                </dd>\r\n                <dt>Keyboard shortcuts</dt>\r\n                <dd>\r\n                  <kbd>j</kbd>: Next post\r\n                </dd>\r\n                <dd>\r\n                  <kbd>k</kbd>: Previous post\r\n                </dd>\r\n                <dd>\r\n                  <kbd>l</kbd>: Next author\r\n                </dd>\r\n                <dd>\r\n                  <kbd>h</kbd>: Previous author\r\n                </dd>\r\n                <dd>\r\n                  <kbd>Enter</kbd>: Open post details\r\n                </dd>\r\n                <dd>\r\n                  <kbd>.</kbd>: Scroll to top\r\n                </dd>\r\n              </dl>\r\n            </main>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst PostLine = memo(\r\n  function ({ post }) {\r\n    const {\r\n      id,\r\n      account,\r\n      group,\r\n      reblog,\r\n      inReplyToId,\r\n      inReplyToAccountId,\r\n      _followedTags: isFollowedTags,\r\n      _filtered: filterInfo,\r\n      visibility,\r\n      __BOOSTERS,\r\n    } = post;\r\n    const isReplyTo = inReplyToId && inReplyToAccountId !== account.id;\r\n    const isFiltered = !!filterInfo;\r\n\r\n    const debugHover = (e) => {\r\n      if (e.shiftKey) {\r\n        console.log({\r\n          ...post,\r\n        });\r\n      }\r\n    };\r\n\r\n    return (\r\n      <article\r\n        class={`post-line ${\r\n          group\r\n            ? 'group'\r\n            : reblog\r\n            ? 'reblog'\r\n            : isFollowedTags?.length\r\n            ? 'followed-tags'\r\n            : ''\r\n        } ${isReplyTo ? 'reply-to' : ''} ${\r\n          isFiltered ? 'filtered' : ''\r\n        } visibility-${visibility}`}\r\n        onMouseEnter={debugHover}\r\n      >\r\n        <span class=\"post-author\">\r\n          {reblog ? (\r\n            <span class=\"post-reblog-avatar\">\r\n              <Avatar\r\n                url={account.avatarStatic || account.avatar}\r\n                squircle={account.bot}\r\n              />\r\n              {__BOOSTERS?.size > 0\r\n                ? [...__BOOSTERS].map((b) => (\r\n                    <Avatar url={b.avatarStatic || b.avatar} squircle={b.bot} />\r\n                  ))\r\n                : ''}{' '}\r\n              <Icon icon=\"rocket\" />{' '}\r\n              {/* <Avatar\r\n              url={reblog.account.avatarStatic || reblog.account.avatar}\r\n              squircle={reblog.account.bot}\r\n            /> */}\r\n              <NameText account={reblog.account} showAvatar />\r\n            </span>\r\n          ) : (\r\n            <NameText account={account} showAvatar />\r\n          )}\r\n        </span>\r\n        <PostPeek post={reblog || post} filterInfo={filterInfo} />\r\n        <span class=\"post-meta\">\r\n          <PostStats post={reblog || post} />{' '}\r\n          <RelativeTime\r\n            datetime={new Date(reblog?.createdAt || post.createdAt)}\r\n            format=\"micro\"\r\n          />\r\n        </span>\r\n      </article>\r\n    );\r\n  },\r\n  (oldProps, newProps) => {\r\n    return oldProps?.post?.id === newProps?.post?.id;\r\n  },\r\n);\r\n\r\nconst IntersectionPostLineItem = ({ root, to, ...props }) => {\r\n  const ref = useRef();\r\n  const [show, setShow] = useState(false);\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        const entry = entries[0];\r\n        if (entry.isIntersecting) {\r\n          queueMicrotask(() => setShow(true));\r\n          observer.unobserve(ref.current);\r\n        }\r\n      },\r\n      {\r\n        root,\r\n        rootMargin: `${Math.max(320, screen.height * 0.75)}px`,\r\n      },\r\n    );\r\n    if (ref.current) observer.observe(ref.current);\r\n    return () => {\r\n      if (ref.current) observer.unobserve(ref.current);\r\n    };\r\n  }, []);\r\n\r\n  return show ? (\r\n    <li>\r\n      <Link to={to}>\r\n        <PostLine {...props} />\r\n      </Link>\r\n    </li>\r\n  ) : (\r\n    <li ref={ref} style={{ height: '4em' }} />\r\n  );\r\n};\r\n\r\n// A media speak a thousand words\r\nconst MEDIA_DENSITY = 8;\r\nconst CARD_DENSITY = 8;\r\nfunction postDensity(post) {\r\n  const { spoilerText, content, poll, mediaAttachments, card } = post;\r\n  const pollContent = poll?.options?.length\r\n    ? poll.options.reduce((acc, cur) => acc + cur.title, '')\r\n    : '';\r\n  const density =\r\n    (spoilerText.length + htmlContentLength(content) + pollContent.length) /\r\n      140 +\r\n    (mediaAttachments?.length\r\n      ? MEDIA_DENSITY * mediaAttachments.length\r\n      : card?.image\r\n      ? CARD_DENSITY\r\n      : 0);\r\n  return density;\r\n}\r\n\r\nconst MEDIA_SIZE = 48;\r\n\r\nfunction PostPeek({ post, filterInfo }) {\r\n  const {\r\n    spoilerText,\r\n    sensitive,\r\n    content,\r\n    emojis,\r\n    poll,\r\n    mediaAttachments,\r\n    card,\r\n    inReplyToId,\r\n    inReplyToAccountId,\r\n    account,\r\n    _thread,\r\n  } = post;\r\n  const isThread =\r\n    (inReplyToId && inReplyToAccountId === account.id) || !!_thread;\r\n  const showMedia = !spoilerText && !sensitive;\r\n  const postText = content ? statusPeek(post) : '';\r\n\r\n  return (\r\n    <div class=\"post-peek\" title={!spoilerText ? postText : ''}>\r\n      <span class=\"post-peek-content\">\r\n        {!!filterInfo ? (\r\n          <>\r\n            {isThread && (\r\n              <>\r\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\r\n              </>\r\n            )}\r\n            <span class=\"post-peek-filtered\">\r\n              Filtered{filterInfo?.titlesStr ? `: ${filterInfo.titlesStr}` : ''}\r\n            </span>\r\n          </>\r\n        ) : !!spoilerText ? (\r\n          <>\r\n            {isThread && (\r\n              <>\r\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\r\n              </>\r\n            )}\r\n            <span class=\"post-peek-spoiler\">\r\n              <Icon icon=\"eye-close\" /> {spoilerText}\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <div class=\"post-peek-html\">\r\n            {isThread && (\r\n              <>\r\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\r\n              </>\r\n            )}\r\n            {!!content && (\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: emojifyText(content, emojis),\r\n                }}\r\n              />\r\n            )}\r\n            {!!poll?.options?.length &&\r\n              poll.options.map((o) => (\r\n                <div>\r\n                  {poll.multiple ? '▪️' : '•'} {o.title}\r\n                </div>\r\n              ))}\r\n            {!content &&\r\n              mediaAttachments?.length === 1 &&\r\n              mediaAttachments[0].description && (\r\n                <>\r\n                  <span class=\"post-peek-tag post-peek-alt\">ALT</span>{' '}\r\n                  <div>{mediaAttachments[0].description}</div>\r\n                </>\r\n              )}\r\n          </div>\r\n        )}\r\n      </span>\r\n      {!filterInfo && (\r\n        <span class=\"post-peek-post-content\">\r\n          {!!poll && (\r\n            <span class=\"post-peek-tag post-peek-poll\">\r\n              <Icon icon=\"poll\" size=\"s\" />\r\n              Poll\r\n            </span>\r\n          )}\r\n          {!!mediaAttachments?.length\r\n            ? mediaAttachments.map((m) => {\r\n                const mediaURL = m.previewUrl || m.url;\r\n                const remoteMediaURL = m.previewRemoteUrl || m.remoteUrl;\r\n                return (\r\n                  <span key={m.id} class=\"post-peek-media\">\r\n                    {{\r\n                      image:\r\n                        (mediaURL || remoteMediaURL) && showMedia ? (\r\n                          <img\r\n                            src={mediaURL}\r\n                            width={MEDIA_SIZE}\r\n                            height={MEDIA_SIZE}\r\n                            alt={m.description}\r\n                            loading=\"lazy\"\r\n                            onError={(e) => {\r\n                              const { src } = e.target;\r\n                              if (src === mediaURL) {\r\n                                e.target.src = remoteMediaURL;\r\n                              }\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <span class=\"post-peek-faux-media\">🖼</span>\r\n                        ),\r\n                      gifv:\r\n                        (mediaURL || remoteMediaURL) && showMedia ? (\r\n                          <img\r\n                            src={mediaURL}\r\n                            width={MEDIA_SIZE}\r\n                            height={MEDIA_SIZE}\r\n                            alt={m.description}\r\n                            loading=\"lazy\"\r\n                            onError={(e) => {\r\n                              const { src } = e.target;\r\n                              if (src === mediaURL) {\r\n                                e.target.src = remoteMediaURL;\r\n                              }\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <span class=\"post-peek-faux-media\">🎞️</span>\r\n                        ),\r\n                      video:\r\n                        (mediaURL || remoteMediaURL) && showMedia ? (\r\n                          <img\r\n                            src={mediaURL}\r\n                            width={MEDIA_SIZE}\r\n                            height={MEDIA_SIZE}\r\n                            alt={m.description}\r\n                            loading=\"lazy\"\r\n                            onError={(e) => {\r\n                              const { src } = e.target;\r\n                              if (src === mediaURL) {\r\n                                e.target.src = remoteMediaURL;\r\n                              }\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <span class=\"post-peek-faux-media\">📹</span>\r\n                        ),\r\n                      audio: <span class=\"post-peek-faux-media\">🎵</span>,\r\n                    }[m.type] || null}\r\n                  </span>\r\n                );\r\n              })\r\n            : !!card &&\r\n              card.image &&\r\n              showMedia && (\r\n                <span\r\n                  class={`post-peek-media post-peek-card card-${\r\n                    card.type || ''\r\n                  }`}\r\n                >\r\n                  {card.image ? (\r\n                    <img\r\n                      src={card.image}\r\n                      width={MEDIA_SIZE}\r\n                      height={MEDIA_SIZE}\r\n                      alt={\r\n                        card.title || card.description || card.imageDescription\r\n                      }\r\n                      loading=\"lazy\"\r\n                    />\r\n                  ) : (\r\n                    <span class=\"post-peek-faux-media\">🔗</span>\r\n                  )}\r\n                </span>\r\n              )}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PostStats({ post }) {\r\n  const { reblogsCount, repliesCount, favouritesCount } = post;\r\n  return (\r\n    <span class=\"post-stats\">\r\n      {repliesCount > 0 && (\r\n        <span class=\"post-stat-replies\">\r\n          <Icon icon=\"comment2\" size=\"s\" /> {shortenNumber(repliesCount)}\r\n        </span>\r\n      )}\r\n      {favouritesCount > 0 && (\r\n        <span class=\"post-stat-likes\">\r\n          <Icon icon=\"heart\" size=\"s\" /> {shortenNumber(favouritesCount)}\r\n        </span>\r\n      )}\r\n      {reblogsCount > 0 && (\r\n        <span class=\"post-stat-boosts\">\r\n          <Icon icon=\"rocket\" size=\"s\" /> {shortenNumber(reblogsCount)}\r\n        </span>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\nconst { locale } = new Intl.DateTimeFormat().resolvedOptions();\r\nconst dtf = new Intl.DateTimeFormat(locale, {\r\n  year: 'numeric',\r\n  month: 'short',\r\n  day: 'numeric',\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n});\r\nfunction formatRange(startDate, endDate) {\r\n  return dtf.formatRange(startDate, endDate);\r\n}\r\n\r\nfunction binByTime(data, key, numBins) {\r\n  // Extract dates from data objects\r\n  const dates = data.map((item) => new Date(item[key]));\r\n\r\n  // Find minimum and maximum dates directly (avoiding Math.min/max)\r\n  const minDate = dates.reduce(\r\n    (acc, date) => (date < acc ? date : acc),\r\n    dates[0],\r\n  );\r\n  const maxDate = dates.reduce(\r\n    (acc, date) => (date > acc ? date : acc),\r\n    dates[0],\r\n  );\r\n\r\n  // Calculate the time span in milliseconds\r\n  const range = maxDate.getTime() - minDate.getTime();\r\n\r\n  // Create empty bins and loop through data\r\n  const bins = Array.from({ length: numBins }, () => []);\r\n  data.forEach((item) => {\r\n    const date = new Date(item[key]);\r\n    const normalized = (date.getTime() - minDate.getTime()) / range;\r\n    const binIndex = Math.floor(normalized * (numBins - 1));\r\n    bins[binIndex].push(item);\r\n  });\r\n\r\n  return bins;\r\n}\r\n\r\nexport default Catchup;\r\n"],"names":["catchupUrl","FILTER_CONTEXT","RANGES","label","value","FILTER_LABELS","FILTER_SORTS","FILTER_GROUPS","FILTER_VALUES","Filtered","Groups","Boosts","Replies","Original","FILTER_CATEGORY_TEXT","SORT_BY_TEXT","createdAt","repliesCount","favouritesCount","reblogsCount","density","Catchup","useTitle","masto","instance","api","searchParams","setSearchParams","useSearchParams","id","get","uiState","setUIState","useState","showTopLinks","setShowTopLinks","currentAccount","useMemo","store","session","isSelf","accountID","fetchHome","maxCreatedAt","maxCreatedAtDate","Date","debug","allResults","mainloop","results","homeIterator","assignFollowedTags","i","item","createdAtDate","selfPost","reblog","filterInfo","isFiltered","statusKey","sKey","states","addedResults","resolve","Promise","console","status","s","replyToStatus","find","catchupRangeRef","useRef","NS","setPosts","useCallback","duration","handleCatchupClick","now","db","catchupID","catchup","posts","count","length","useEffect","error","a","b","reloadCatchups","useReducer","c","setLastCatchupEndAt","prevCatchups","setPrevCatchups","lastCatchupEndAt","catchups","ns","getCurrentAccountNS","ownKeys","key","ownCatchups","trimmedCatchups","lastCatchups","restCatchups","endAt","startAt","queueMicrotask","reloadCatchupsCount","filtereds","groups","boosts","replies","followedTags","originals","post","_followedTags","inReplyToId","inReplyToAccountId","_e","thePost","__FILTER","card","url","links","sharers","links2","link","topLinks","sort","shared","linksLoop","likes","filteredPosts","authors","authorCounts","selectedFilterCategory","filteredPosts2","setSelectedAuthor","range","sortBy","authorsHash","setSortOrder","authorCountsMap","postFilterMatches","account","set","boostedPosts","selectedAuthor","filteredPostsMap","map","authorID","index","authorCountsList","Object","sortedFilteredPosts","aAccountID","forEach","authorIndices","order","bAccountID","aIndex","bIndex","postDensity","bDensity","aDensity","sortOrder","groupBy","prevGroup","authorsListParent","autoAnimated","current","postsBarType","autoAnimate","_jsx","postsBar","postsBins","binByTime","posts2","isFiltered2","children","lastCatchupRange","scrollableRef","groupByText","showToast","authorUsername","sortOrderIndex","authorElement","scrollableRect","_a","authorRect","left","right","showHelp","setShowHelp","itemsSelector","jRef","useHotkeys","activeItem","activeItemRect","top","inline","allItems","behavior","activeItemIndex","nextItem","document","from","topmostItem","scrollIntoView","block","itemRect","kRef","prevItem","hlRef","_","handler","_b","keys","indexOf","escRef","dotRef","_jsxs","ignoreModifiers","node","enableOnFormTags","preventDefault","e","NavMenu","Link","closest","Icon","to","_Fragment","icon","size","type","class","onClick","width","alt","setRange","min","max","pc","formatRange","t","yes","setSelectedFilterCategory","setSortBy","hidden","setGroupBy","style","transform","blurhash","description","image","language","title","imageDescription","height","publishedAt","domain","accentColor","averageColor","labAverageColor","oklab2rgb","join","lang","avatarStatic","displayName","filterCounts","name","checked","toLowerCase","onChange","author","Avatar","avatar","paddingInline","opacity","disabled","id2","showSeparator","Fragment","IntersectionPostLineItem","Modal","onClose","group","isFollowedTags","visibility","__BOOSTERS","PostLine","debugHover","isReplyTo","shiftKey","log","NameText","bot","squircle","oldProps","newProps","root","props","show","setShow","RelativeTime","format","observer","ref","IntersectionObserver","entry","isIntersecting","unobserve","rootMargin","observe","MEDIA_DENSITY","pollContent","poll","acc","cur","spoilerText","htmlContentLength","content","mediaAttachments","CARD_DENSITY","PostPeek","sensitive","isThread","_thread","showMedia","postText","emojis","emojifyText","o","__html","options","multiple","m","remoteMediaURL","mediaURL","MEDIA_SIZE","src","loading","onError","target","gifv","video","audio","PostStats","shortenNumber","locale","dtf","startDate","endDate","data","numBins","dates","minDate","date","bins","Intl","DateTimeFormat","normalized","binIndex"],"mappings":"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"}