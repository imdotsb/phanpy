{"version":3,"file":"main-49df07f3.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\r\n\r\nexport default function usePageVisibility(fn = () => {}, deps = []) {\r\n  const savedCallback = useRef(fn);\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [deps]);\r\n\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      const hidden = document.hidden || document.visibilityState === 'hidden';\r\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\r\n      savedCallback.current(!hidden);\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () =>\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, []);\r\n}\r\n","import { memo } from 'preact/compat';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport useInterval from '../utils/useInterval';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\n\r\nexport default memo(function BackgroundService({ isLoggedIn }) {\r\n  // Notifications service\r\n  // - WebSocket to receive notifications when page is visible\r\n  const [visible, setVisible] = useState(true);\r\n  usePageVisibility(setVisible);\r\n  const notificationStream = useRef();\r\n  useEffect(() => {\r\n    if (isLoggedIn && visible) {\r\n      const { masto, instance } = api();\r\n      (async () => {\r\n        // 1. Get the latest notification\r\n        if (states.notificationsLast) {\r\n          const notificationsIterator = masto.v1.notifications.list({\r\n            limit: 1,\r\n            since_id: states.notificationsLast.id,\r\n          });\r\n          const { value: notifications } = await notificationsIterator.next();\r\n          if (notifications?.length) {\r\n            let lastReadId;\r\n            try {\r\n              const markers = await masto.v1.markers.fetch({\r\n                timeline: 'notifications',\r\n              });\r\n              lastReadId = markers?.notifications?.lastReadId;\r\n            } catch (e) {}\r\n            if (lastReadId) {\r\n              if (notifications[0].id !== lastReadId) {\r\n                states.notificationsShowNew = true;\r\n              }\r\n            } else {\r\n              states.notificationsShowNew = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        // 2. Start streaming\r\n        notificationStream.current = await masto.ws.stream(\r\n          '/api/v1/streaming',\r\n          {\r\n            stream: 'user:notification',\r\n          },\r\n        );\r\n        console.log('🎏 Streaming notification', notificationStream.current);\r\n\r\n        notificationStream.current.on('notification', (notification) => {\r\n          console.log('🔔🔔 Notification', notification);\r\n          if (notification.status) {\r\n            saveStatus(notification.status, instance, {\r\n              skipThreading: true,\r\n            });\r\n          }\r\n          states.notificationsShowNew = true;\r\n        });\r\n\r\n        notificationStream.current.ws.onclose = () => {\r\n          console.log('🔔🔔 Notification stream closed');\r\n        };\r\n      })();\r\n    }\r\n    return () => {\r\n      if (notificationStream.current) {\r\n        notificationStream.current.ws.close();\r\n        notificationStream.current = null;\r\n      }\r\n    };\r\n  }, [visible, isLoggedIn]);\r\n\r\n  // Check for updates service\r\n  const lastCheckDate = useRef();\r\n  const checkForUpdates = () => {\r\n    lastCheckDate.current = Date.now();\r\n    console.log('✨ Check app update');\r\n    fetch('./version.json')\r\n      .then((r) => r.json())\r\n      .then((info) => {\r\n        if (info) states.appVersion = info;\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\r\n  usePageVisibility((visible) => {\r\n    if (visible) {\r\n      if (!lastCheckDate.current) {\r\n        checkForUpdates();\r\n      } else {\r\n        const diff = Date.now() - lastCheckDate.current;\r\n        if (diff > 1000 * 60 * 60) {\r\n          // 1 hour\r\n          checkForUpdates();\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  return null;\r\n});\r\n","import { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport openCompose from '../utils/open-compose';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\n\r\nexport default function ComposeButton() {\r\n  function handleButton(e) {\r\n    if (e.shiftKey) {\r\n      const newWin = openCompose();\r\n\r\n      if (!newWin) {\r\n        alert('Looks like your browser is blocking popups.');\r\n        states.showCompose = true;\r\n      }\r\n    } else {\r\n      states.showCompose = true;\r\n    }\r\n  }\r\n\r\n  useHotkeys('c, shift+c', handleButton, {\r\n    ignoreEventWhen: (e) => {\r\n      const hasModal = !!document.querySelector('#modal-container > *');\r\n      return hasModal;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\r\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\r\n    </button>\r\n  );\r\n}\r\n","import './keyboard-shortcuts-help.css';\r\n\r\nimport { memo } from 'preact/compat';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport Modal from './modal';\r\n\r\nexport default memo(function KeyboardShortcutsHelp() {\r\n  const snapStates = useSnapshot(states);\r\n\r\n  function onClose() {\r\n    states.showKeyboardShortcutsHelp = false;\r\n  }\r\n\r\n  useHotkeys(\r\n    '?, shift+?',\r\n    (e) => {\r\n      console.log('help');\r\n      states.showKeyboardShortcutsHelp = true;\r\n    },\r\n    {\r\n      ignoreEventWhen: (e) => {\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return hasModal;\r\n      },\r\n    },\r\n  );\r\n\r\n  const escRef = useHotkeys('esc', onClose, []);\r\n\r\n  return (\r\n    !!snapStates.showKeyboardShortcutsHelp && (\r\n      <Modal\r\n        class=\"light\"\r\n        onClick={(e) => {\r\n          if (e.target === e.currentTarget) {\r\n            onClose();\r\n          }\r\n        }}\r\n      >\r\n        <div\r\n          id=\"keyboard-shortcuts-help-container\"\r\n          class=\"sheet\"\r\n          tabindex=\"-1\"\r\n          ref={escRef}\r\n        >\r\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n          <header>\r\n            <h2>Keyboard shortcuts</h2>\r\n          </header>\r\n          <main>\r\n            <table>\r\n              {[\r\n                {\r\n                  action: 'Keyboard shortcuts help',\r\n                  keys: <kbd>?</kbd>,\r\n                },\r\n                {\r\n                  action: 'Next post',\r\n                  keys: <kbd>j</kbd>,\r\n                },\r\n                {\r\n                  action: 'Previous post',\r\n                  keys: <kbd>k</kbd>,\r\n                },\r\n                {\r\n                  action: 'Skip carousel to next post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Skip carousel to previous post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Open post details',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Toggle expanded/collapsed thread',\r\n                  keys: <kbd>x</kbd>,\r\n                },\r\n                {\r\n                  action: 'Close post or dialogs',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Focus column in multi-column mode',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>1</kbd> to <kbd>9</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Compose new post',\r\n                  keys: <kbd>c</kbd>,\r\n                },\r\n                {\r\n                  action: 'Send post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\r\n                      <kbd>Enter</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Search',\r\n                  keys: <kbd>/</kbd>,\r\n                },\r\n                {\r\n                  action: 'Reply',\r\n                  keys: <kbd>r</kbd>,\r\n                },\r\n                {\r\n                  action: 'Favourite',\r\n                  keys: <kbd>f</kbd>,\r\n                },\r\n                {\r\n                  action: 'Boost',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Bookmark',\r\n                  keys: <kbd>d</kbd>,\r\n                },\r\n              ].map(({ action, keys }) => (\r\n                <tr key={action}>\r\n                  <th>{action}</th>\r\n                  <td>{keys}</td>\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          </main>\r\n        </div>\r\n      </Modal>\r\n    )\r\n  );\r\n});\r\n","import './accounts.css';\r\n\r\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { useReducer, useState } from 'preact/hooks';\r\n\r\nimport Avatar from '../components/avatar';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport NameText from '../components/name-text';\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nfunction Accounts({ onClose }) {\r\n  const { masto } = api();\r\n  // Accounts\r\n  const accounts = store.local.getJSON('accounts');\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const moreThanOneAccount = accounts.length > 1;\r\n  const [currentDefault, setCurrentDefault] = useState(0);\r\n\r\n  const [_, reload] = useReducer((x) => x + 1, 0);\r\n\r\n  return (\r\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header class=\"header-grid\">\r\n        <h2>Accounts</h2>\r\n      </header>\r\n      <main>\r\n        <section>\r\n          <ul class=\"accounts-list\">\r\n            {accounts.map((account, i) => {\r\n              const isCurrent = account.info.id === currentAccount;\r\n              const isDefault = i === (currentDefault || 0);\r\n              return (\r\n                <li key={i + account.id}>\r\n                  <div>\r\n                    {moreThanOneAccount && (\r\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\r\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\r\n                      </span>\r\n                    )}\r\n                    <Avatar\r\n                      url={account.info.avatarStatic}\r\n                      size=\"xxl\"\r\n                      onDblClick={async () => {\r\n                        if (isCurrent) {\r\n                          try {\r\n                            const info = await masto.v1.accounts.fetch(\r\n                              account.info.id,\r\n                            );\r\n                            console.log('fetched account info', info);\r\n                            account.info = info;\r\n                            store.local.setJSON('accounts', accounts);\r\n                            reload();\r\n                          } catch (e) {}\r\n                        }\r\n                      }}\r\n                    />\r\n                    <NameText\r\n                      account={\r\n                        moreThanOneAccount\r\n                          ? {\r\n                              ...account.info,\r\n                              acct: /@/.test(account.info.acct)\r\n                                ? account.info.acct\r\n                                : `${account.info.acct}@${account.instanceURL}`,\r\n                            }\r\n                          : account.info\r\n                      }\r\n                      showAcct\r\n                      onClick={() => {\r\n                        if (isCurrent) {\r\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\r\n                        } else {\r\n                          store.session.set('currentAccount', account.info.id);\r\n                          location.reload();\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div class=\"actions\">\r\n                    {isDefault && moreThanOneAccount && (\r\n                      <>\r\n                        <span class=\"tag\">Default</span>{' '}\r\n                      </>\r\n                    )}\r\n                    <Menu\r\n                      align=\"end\"\r\n                      menuButton={\r\n                        <button\r\n                          type=\"button\"\r\n                          title=\"More\"\r\n                          class=\"plain more-button\"\r\n                        >\r\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n                        </button>\r\n                      }\r\n                    >\r\n                      <MenuItem\r\n                        onClick={() => {\r\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"user\" />\r\n                        <span>View profile…</span>\r\n                      </MenuItem>\r\n                      <MenuDivider />\r\n                      {moreThanOneAccount && (\r\n                        <MenuItem\r\n                          disabled={isDefault}\r\n                          onClick={() => {\r\n                            // Move account to the top of the list\r\n                            accounts.splice(i, 1);\r\n                            accounts.unshift(account);\r\n                            store.local.setJSON('accounts', accounts);\r\n                            setCurrentDefault(i);\r\n                          }}\r\n                        >\r\n                          <Icon icon=\"check-circle\" />\r\n                          <span>Set as default</span>\r\n                        </MenuItem>\r\n                      )}\r\n                      <MenuConfirm\r\n                        subMenu\r\n                        confirmLabel={\r\n                          <>\r\n                            <Icon icon=\"exit\" />\r\n                            <span>Log out @{account.info.acct}?</span>\r\n                          </>\r\n                        }\r\n                        disabled={!isCurrent}\r\n                        menuItemClassName=\"danger\"\r\n                        onClick={() => {\r\n                          // const yes = confirm('Log out?');\r\n                          // if (!yes) return;\r\n                          accounts.splice(i, 1);\r\n                          store.local.setJSON('accounts', accounts);\r\n                          // location.reload();\r\n                          location.href = location.pathname || '/';\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"exit\" />\r\n                        <span>Log out…</span>\r\n                      </MenuConfirm>\r\n                    </Menu>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <p>\r\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\r\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\r\n            </Link>\r\n          </p>\r\n          {moreThanOneAccount && (\r\n            <p>\r\n              <small>\r\n                Note: <i>Default</i> account will always be used for first load.\r\n                Switched accounts will persist during the session.\r\n              </small>\r\n            </p>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accounts;\r\n","export default \"__VITE_ASSET__c2b3a5f0__\"","// Utils for push notifications\r\nimport { api } from './api';\r\nimport { getCurrentAccount } from './store-utils';\r\n\r\n// Subscription is an object with the following structure:\r\n// {\r\n//   data: {\r\n//     alerts: {\r\n//       admin: {\r\n//         report: boolean,\r\n//         signUp: boolean,\r\n//       },\r\n//       favourite: boolean,\r\n//       follow: boolean,\r\n//       mention: boolean,\r\n//       poll: boolean,\r\n//       reblog: boolean,\r\n//       status: boolean,\r\n//       update: boolean,\r\n//     }\r\n//   },\r\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\r\n//   subscription: {\r\n//     endpoint: string,\r\n//     keys: {\r\n//       auth: string,\r\n//       p256dh: string,\r\n//     },\r\n//   },\r\n// }\r\n\r\n// Back-end CRUD\r\n// =============\r\n\r\nfunction createBackendPushSubscription(subscription) {\r\n  const { masto } = api();\r\n  return masto.v1.webPushSubscriptions.create(subscription);\r\n}\r\n\r\nfunction fetchBackendPushSubscription() {\r\n  const { masto } = api();\r\n  return masto.v1.webPushSubscriptions.fetch();\r\n}\r\n\r\nfunction updateBackendPushSubscription(subscription) {\r\n  const { masto } = api();\r\n  return masto.v1.webPushSubscriptions.update(subscription);\r\n}\r\n\r\nfunction removeBackendPushSubscription() {\r\n  const { masto } = api();\r\n  return masto.v1.webPushSubscriptions.remove();\r\n}\r\n\r\n// Front-end\r\n// =========\r\n\r\nexport function isPushSupported() {\r\n  return 'serviceWorker' in navigator && 'PushManager' in window;\r\n}\r\n\r\nexport function getRegistration() {\r\n  // return navigator.serviceWorker.ready;\r\n  return navigator.serviceWorker.getRegistration();\r\n}\r\n\r\nasync function getSubscription() {\r\n  const registration = await getRegistration();\r\n  const subscription = registration\r\n    ? await registration.pushManager.getSubscription()\r\n    : undefined;\r\n  return { registration, subscription };\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = `${base64String}${padding}`\r\n    .replace(/-/g, '+')\r\n    .replace(/_/g, '/');\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n\r\n  return outputArray;\r\n}\r\n\r\n// Front-end <-> back-end\r\n// ======================\r\n\r\nexport async function initSubscription() {\r\n  if (!isPushSupported()) return;\r\n  const { subscription } = await getSubscription();\r\n  let backendSubscription = null;\r\n  try {\r\n    backendSubscription = await fetchBackendPushSubscription();\r\n  } catch (err) {\r\n    if (/(not found|unknown)/i.test(err.message)) {\r\n      // No subscription found\r\n    } else {\r\n      // Other error\r\n      throw err;\r\n    }\r\n  }\r\n  console.log('INIT subscription', {\r\n    subscription,\r\n    backendSubscription,\r\n  });\r\n\r\n  // Check if the subscription changed\r\n  if (backendSubscription && subscription) {\r\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\r\n    const { vapidKey } = getCurrentAccount();\r\n    const sameKey = backendSubscription.serverKey === vapidKey;\r\n    if (!sameEndpoint) {\r\n      throw new Error('Backend subscription endpoint changed');\r\n    }\r\n    if (sameKey) {\r\n      // Subscription didn't change\r\n    } else {\r\n      // Subscription changed\r\n      console.error('🔔 Subscription changed', {\r\n        sameEndpoint,\r\n        serverKey: backendSubscription.serverKey,\r\n        vapIdKey: vapidKey,\r\n        endpoint1: backendSubscription.endpoint,\r\n        endpoint2: subscription.endpoint,\r\n        sameKey,\r\n        key1: backendSubscription.serverKey,\r\n        key2: vapidKey,\r\n      });\r\n      throw new Error('Backend subscription key and vapid key changed');\r\n      // Only unsubscribe from backend, not from browser\r\n      // await removeBackendPushSubscription();\r\n      // // Now let's resubscribe\r\n      // // NOTE: I have no idea if this works\r\n      // return await updateSubscription({\r\n      //   data: backendSubscription.data,\r\n      //   policy: backendSubscription.policy,\r\n      // });\r\n    }\r\n  }\r\n\r\n  if (subscription && !backendSubscription) {\r\n    // check if account's vapidKey is same as subscription's applicationServerKey\r\n    const { vapidKey } = getCurrentAccount();\r\n    const { applicationServerKey } = subscription.options;\r\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\r\n    const applicationServerKeyStr = new Uint8Array(\r\n      applicationServerKey,\r\n    ).toString();\r\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\r\n    if (sameKey) {\r\n      // Subscription didn't change\r\n    } else {\r\n      // Subscription changed\r\n      console.error('🔔 Subscription changed', {\r\n        vapidKeyStr,\r\n        applicationServerKeyStr,\r\n        sameKey,\r\n      });\r\n      // Unsubscribe since backend doesn't have a subscription\r\n      await subscription.unsubscribe();\r\n      throw new Error('Subscription key and vapid key changed');\r\n    }\r\n  }\r\n\r\n  // Check if backend subscription returns 404\r\n  // if (subscription && !backendSubscription) {\r\n  //   // Re-subscribe to backend\r\n  //   backendSubscription = await createBackendPushSubscription({\r\n  //     subscription,\r\n  //     data: {},\r\n  //     policy: 'all',\r\n  //   });\r\n  // }\r\n\r\n  return { subscription, backendSubscription };\r\n}\r\n\r\nexport async function updateSubscription({ data, policy }) {\r\n  console.log('🔔 Updating subscription', { data, policy });\r\n  if (!isPushSupported()) return;\r\n  let { registration, subscription } = await getSubscription();\r\n  let backendSubscription = null;\r\n\r\n  if (subscription) {\r\n    try {\r\n      backendSubscription = await updateBackendPushSubscription({\r\n        data,\r\n        policy,\r\n      });\r\n      // TODO: save subscription in user settings\r\n    } catch (error) {\r\n      // Backend doesn't have a subscription for this user\r\n      // Create a new one\r\n      backendSubscription = await createBackendPushSubscription({\r\n        subscription,\r\n        data,\r\n        policy,\r\n      });\r\n      // TODO: save subscription in user settings\r\n    }\r\n  } else {\r\n    // User is not subscribed\r\n    const { vapidKey } = getCurrentAccount();\r\n    if (!vapidKey) throw new Error('No server key found');\r\n    subscription = await registration.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\r\n    });\r\n    backendSubscription = await createBackendPushSubscription({\r\n      subscription,\r\n      data,\r\n      policy,\r\n    });\r\n    // TODO: save subscription in user settings\r\n  }\r\n\r\n  return { subscription, backendSubscription };\r\n}\r\n\r\nexport async function removeSubscription() {\r\n  if (!isPushSupported()) return;\r\n  const { subscription } = await getSubscription();\r\n  if (subscription) {\r\n    await removeBackendPushSubscription();\r\n    await subscription.unsubscribe();\r\n  }\r\n}\r\n","import './settings.css';\r\n\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport logo from '../assets/logo.svg';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport RelativeTime from '../components/relative-time';\r\nimport targetLanguages from '../data/lingva-target-languages';\r\nimport { api } from '../utils/api';\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport localeCode2Text from '../utils/localeCode2Text';\r\nimport {\r\n  initSubscription,\r\n  isPushSupported,\r\n  removeSubscription,\r\n  updateSubscription,\r\n} from '../utils/push-notifications';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nconst DEFAULT_TEXT_SIZE = 16;\r\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\r\n\r\nfunction Settings({ onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const currentTheme = store.local.get('theme') || 'auto';\r\n  const themeFormRef = useRef();\r\n  const targetLanguage =\r\n    snapStates.settings.contentTranslationTargetLanguage || null;\r\n  const systemTargetLanguage = getTranslateTargetLanguage();\r\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\r\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\r\n\r\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\r\n  const { masto, authenticated, instance } = api();\r\n  // Get preferences every time Settings is opened\r\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\r\n  // useEffect(() => {\r\n  //   const { masto } = api();\r\n  //   (async () => {\r\n  //     try {\r\n  //       const preferences = await masto.v1.preferences.fetch();\r\n  //       setPrefs(preferences);\r\n  //       store.account.set('preferences', preferences);\r\n  //     } catch (e) {\r\n  //       // Silently fail\r\n  //       console.error(e);\r\n  //     }\r\n  //   })();\r\n  // }, []);\r\n\r\n  return (\r\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Settings</h2>\r\n      </header>\r\n      <main>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              <div>\r\n                <label>Appearance</label>\r\n              </div>\r\n              <div>\r\n                <form\r\n                  ref={themeFormRef}\r\n                  onInput={(e) => {\r\n                    console.log(e);\r\n                    e.preventDefault();\r\n                    const formData = new FormData(themeFormRef.current);\r\n                    const theme = formData.get('theme');\r\n                    const html = document.documentElement;\r\n\r\n                    if (theme === 'auto') {\r\n                      html.classList.remove('is-light', 'is-dark');\r\n                    } else {\r\n                      html.classList.toggle('is-light', theme === 'light');\r\n                      html.classList.toggle('is-dark', theme === 'dark');\r\n                    }\r\n                    document\r\n                      .querySelector('meta[name=\"color-scheme\"]')\r\n                      .setAttribute(\r\n                        'content',\r\n                        theme === 'auto' ? 'dark light' : theme,\r\n                      );\r\n\r\n                    if (theme === 'auto') {\r\n                      store.local.del('theme');\r\n                    } else {\r\n                      store.local.set('theme', theme);\r\n                    }\r\n                  }}\r\n                >\r\n                  <div class=\"radio-group\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"light\"\r\n                        defaultChecked={currentTheme === 'light'}\r\n                      />\r\n                      <span>Light</span>\r\n                    </label>\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"dark\"\r\n                        defaultChecked={currentTheme === 'dark'}\r\n                      />\r\n                      <span>Dark</span>\r\n                    </label>\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"auto\"\r\n                        defaultChecked={\r\n                          currentTheme !== 'light' && currentTheme !== 'dark'\r\n                        }\r\n                      />\r\n                      <span>Auto</span>\r\n                    </label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <div>\r\n                <label>Text size</label>\r\n              </div>\r\n              <div class=\"range-group\">\r\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\r\n                <input\r\n                  type=\"range\"\r\n                  min={TEXT_SIZES[0]}\r\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\r\n                  step=\"1\"\r\n                  value={currentTextSize}\r\n                  list=\"sizes\"\r\n                  onChange={(e) => {\r\n                    const value = parseInt(e.target.value, 10);\r\n                    const html = document.documentElement;\r\n                    // set CSS variable\r\n                    html.style.setProperty('--text-size', `${value}px`);\r\n                    // save to local storage\r\n                    if (value === DEFAULT_TEXT_SIZE) {\r\n                      store.local.del('textSize');\r\n                    } else {\r\n                      store.local.set('textSize', e.target.value);\r\n                    }\r\n                  }}\r\n                />{' '}\r\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\r\n                  A\r\n                </span>\r\n                <datalist id=\"sizes\">\r\n                  {TEXT_SIZES.map((size) => (\r\n                    <option value={size} />\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        {authenticated && (\r\n          <>\r\n            <h3>Posting</h3>\r\n            <section>\r\n              <ul>\r\n                <li>\r\n                  <div>\r\n                    <label for=\"posting-privacy-field\">\r\n                      Default visibility{' '}\r\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\r\n                    </label>\r\n                  </div>\r\n                  <div>\r\n                    <select\r\n                      id=\"posting-privacy-field\"\r\n                      value={prefs['posting:default:visibility'] || 'public'}\r\n                      onChange={(e) => {\r\n                        const { value } = e.target;\r\n                        (async () => {\r\n                          try {\r\n                            await masto.v1.accounts.updateCredentials({\r\n                              source: {\r\n                                privacy: value,\r\n                              },\r\n                            });\r\n                            setPrefs({\r\n                              ...prefs,\r\n                              'posting:default:visibility': value,\r\n                            });\r\n                            store.account.set('preferences', {\r\n                              ...prefs,\r\n                              'posting:default:visibility': value,\r\n                            });\r\n                          } catch (e) {\r\n                            alert('Failed to update posting privacy');\r\n                            console.error(e);\r\n                          }\r\n                        })();\r\n                      }}\r\n                    >\r\n                      <option value=\"public\">Public</option>\r\n                      <option value=\"unlisted\">Unlisted</option>\r\n                      <option value=\"private\">Followers only</option>\r\n                    </select>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </section>\r\n            <p class=\"section-postnote\">\r\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\r\n              <small>\r\n                Synced to your instance server's settings.{' '}\r\n                <a\r\n                  href={`https://${instance}/`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Go to your instance ({instance}) for more settings.\r\n                </a>\r\n              </small>\r\n            </p>\r\n          </>\r\n        )}\r\n        <h3>Experiments</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.autoRefresh}\r\n                  onChange={(e) => {\r\n                    states.settings.autoRefresh = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Auto refresh timeline posts\r\n              </label>\r\n            </li>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.boostsCarousel}\r\n                  onChange={(e) => {\r\n                    states.settings.boostsCarousel = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Boosts carousel\r\n              </label>\r\n            </li>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.contentTranslation}\r\n                  onChange={(e) => {\r\n                    const { checked } = e.target;\r\n                    states.settings.contentTranslation = checked;\r\n                    if (!checked) {\r\n                      states.settings.contentTranslationTargetLanguage = null;\r\n                    }\r\n                  }}\r\n                />{' '}\r\n                Post translation\r\n              </label>\r\n              <div\r\n                class={`sub-section ${\r\n                  !snapStates.settings.contentTranslation\r\n                    ? 'more-insignificant'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div>\r\n                  <label>\r\n                    Translate to{' '}\r\n                    <select\r\n                      value={targetLanguage || ''}\r\n                      disabled={!snapStates.settings.contentTranslation}\r\n                      onChange={(e) => {\r\n                        states.settings.contentTranslationTargetLanguage =\r\n                          e.target.value || null;\r\n                      }}\r\n                    >\r\n                      <option value=\"\">\r\n                        System language ({systemTargetLanguageText})\r\n                      </option>\r\n                      <option disabled>──────────</option>\r\n                      {targetLanguages.map((lang) => (\r\n                        <option value={lang.code}>{lang.name}</option>\r\n                      ))}\r\n                    </select>\r\n                  </label>\r\n                </div>\r\n                <hr />\r\n                <p class=\"checkbox-fieldset\">\r\n                  Hide \"Translate\" button for\r\n                  {snapStates.settings.contentTranslationHideLanguages.length >\r\n                    0 && (\r\n                    <>\r\n                      {' '}\r\n                      (\r\n                      {\r\n                        snapStates.settings.contentTranslationHideLanguages\r\n                          .length\r\n                      }\r\n                      )\r\n                    </>\r\n                  )}\r\n                  :\r\n                  <div class=\"checkbox-fields\">\r\n                    {targetLanguages.map((lang) => (\r\n                      <label>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\r\n                            lang.code,\r\n                          )}\r\n                          onChange={(e) => {\r\n                            const { checked } = e.target;\r\n                            if (checked) {\r\n                              states.settings.contentTranslationHideLanguages.push(\r\n                                lang.code,\r\n                              );\r\n                            } else {\r\n                              states.settings.contentTranslationHideLanguages =\r\n                                snapStates.settings.contentTranslationHideLanguages.filter(\r\n                                  (code) => code !== lang.code,\r\n                                );\r\n                            }\r\n                          }}\r\n                        />{' '}\r\n                        {lang.name}\r\n                      </label>\r\n                    ))}\r\n                  </div>\r\n                </p>\r\n                <p class=\"insignificant\">\r\n                  <small>\r\n                    Note: This feature uses an external API to translate,\r\n                    powered by{' '}\r\n                    <a\r\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      Lingva Translate\r\n                    </a>\r\n                    .\r\n                  </small>\r\n                </p>\r\n                <hr />\r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={snapStates.settings.contentTranslationAutoInline}\r\n                      disabled={!snapStates.settings.contentTranslation}\r\n                      onChange={(e) => {\r\n                        states.settings.contentTranslationAutoInline =\r\n                          e.target.checked;\r\n                      }}\r\n                    />{' '}\r\n                    Auto inline translation\r\n                  </label>\r\n                  <p class=\"insignificant\">\r\n                    <small>\r\n                      Automatically show translation for posts in timeline. Only\r\n                      works for <b>short</b> posts without content warning,\r\n                      media and poll.\r\n                    </small>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.cloakMode}\r\n                  onChange={(e) => {\r\n                    states.settings.cloakMode = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Cloak mode{' '}\r\n                <span class=\"insignificant\">\r\n                  (<samp>Text</samp> → <samp>████</samp>)\r\n                </span>\r\n              </label>\r\n              <div class=\"sub-section insignificant\">\r\n                <small>\r\n                  Replace text as blocks, useful when taking screenshots, for\r\n                  privacy reasons.\r\n                </small>\r\n              </div>\r\n            </li>\r\n            {authenticated && (\r\n              <li>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"light\"\r\n                  onClick={() => {\r\n                    states.showDrafts = true;\r\n                    states.showSettings = false;\r\n                  }}\r\n                >\r\n                  Unsent drafts\r\n                </button>\r\n              </li>\r\n            )}\r\n          </ul>\r\n        </section>\r\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\r\n        <h3>About</h3>\r\n        <section>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              gap: 8,\r\n              lineHeight: 1.25,\r\n              alignItems: 'center',\r\n              marginTop: 8,\r\n            }}\r\n          >\r\n            <img\r\n              src={logo}\r\n              alt=\"\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              style={{\r\n                aspectRatio: '1/1',\r\n                verticalAlign: 'middle',\r\n                background: '#b7cdf9',\r\n                borderRadius: 12,\r\n              }}\r\n            />\r\n            <div>\r\n              <b>Phanpy</b>{' '}\r\n              <a\r\n                href=\"https://hachyderm.io/@phanpy\"\r\n                // target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.showAccount = 'phanpy@hachyderm.io';\r\n                }}\r\n              >\r\n                @phanpy\r\n              </a>\r\n              <br />\r\n              <a\r\n                href=\"https://github.com/cheeaun/phanpy\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Built\r\n              </a>{' '}\r\n              by{' '}\r\n              <a\r\n                href=\"https://mastodon.social/@cheeaun\"\r\n                // target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.showAccount = 'cheeaun@mastodon.social';\r\n                }}\r\n              >\r\n                @cheeaun\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <p>\r\n            <a\r\n              href=\"https://github.com/sponsors/cheeaun\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Sponsor\r\n            </a>{' '}\r\n            &middot;{' '}\r\n            <a\r\n              href=\"https://www.buymeacoffee.com/cheeaun\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Donate\r\n            </a>{' '}\r\n            &middot;{' '}\r\n            <a\r\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Privacy Policy\r\n            </a>\r\n          </p>\r\n          {__BUILD_TIME__ && (\r\n            <p>\r\n              <span class=\"insignificant\">Last build:</span>{' '}\r\n              <RelativeTime datetime={new Date(__BUILD_TIME__)} />{' '}\r\n              {__COMMIT_HASH__ && (\r\n                <>\r\n                  (\r\n                  <a\r\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <code>{__COMMIT_HASH__}</code>\r\n                  </a>\r\n                  )\r\n                </>\r\n              )}\r\n            </p>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PushNotificationsSection({ onClose }) {\r\n  if (!isPushSupported()) return null;\r\n\r\n  const { instance } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const pushFormRef = useRef();\r\n  const [allowNofitications, setAllowNotifications] = useState(false);\r\n  const [needRelogin, setNeedRelogin] = useState(false);\r\n  const previousPolicyRef = useRef();\r\n  useEffect(() => {\r\n    (async () => {\r\n      setUIState('loading');\r\n      try {\r\n        const { subscription, backendSubscription } = await initSubscription();\r\n        if (\r\n          backendSubscription?.policy &&\r\n          backendSubscription.policy !== 'none'\r\n        ) {\r\n          setAllowNotifications(true);\r\n          const { alerts, policy } = backendSubscription;\r\n          previousPolicyRef.current = policy;\r\n          const { elements } = pushFormRef.current;\r\n          const policyEl = elements.namedItem(policy);\r\n          if (policyEl) policyEl.value = policy;\r\n          // alerts is {}, iterate it\r\n          Object.keys(alerts).forEach((alert) => {\r\n            const el = elements.namedItem(alert);\r\n            if (el?.type === 'checkbox') {\r\n              el.checked = true;\r\n            }\r\n          });\r\n        }\r\n        setUIState('default');\r\n      } catch (err) {\r\n        console.warn(err);\r\n        if (/outside.*authorized/i.test(err.message)) {\r\n          setNeedRelogin(true);\r\n        } else {\r\n          alert(err?.message || err);\r\n        }\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const isLoading = uiState === 'loading';\r\n\r\n  return (\r\n    <form\r\n      ref={pushFormRef}\r\n      onChange={() => {\r\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\r\n        const allowNofitications = !!values['policy-allow'];\r\n        const params = {\r\n          policy: values.policy,\r\n          data: {\r\n            alerts: {\r\n              mention: !!values.mention,\r\n              favourite: !!values.favourite,\r\n              reblog: !!values.reblog,\r\n              follow: !!values.follow,\r\n              follow_request: !!values.followRequest,\r\n              poll: !!values.poll,\r\n              update: !!values.update,\r\n              status: !!values.status,\r\n            },\r\n          },\r\n        };\r\n\r\n        let alertsCount = 0;\r\n        // Remove false values from data.alerts\r\n        // API defaults to false anyway\r\n        Object.keys(params.data.alerts).forEach((key) => {\r\n          if (!params.data.alerts[key]) {\r\n            delete params.data.alerts[key];\r\n          } else {\r\n            alertsCount++;\r\n          }\r\n        });\r\n        const policyChanged = previousPolicyRef.current !== params.policy;\r\n\r\n        console.log('PN Form', { values, allowNofitications, params });\r\n\r\n        if (allowNofitications && alertsCount > 0) {\r\n          if (policyChanged) {\r\n            console.debug('Policy changed.');\r\n            removeSubscription()\r\n              .then(() => {\r\n                updateSubscription(params);\r\n              })\r\n              .catch((err) => {\r\n                console.warn(err);\r\n                alert('Failed to update subscription. Please try again.');\r\n              });\r\n          } else {\r\n            updateSubscription(params).catch((err) => {\r\n              console.warn(err);\r\n              alert('Failed to update subscription. Please try again.');\r\n            });\r\n          }\r\n        } else {\r\n          removeSubscription().catch((err) => {\r\n            console.warn(err);\r\n            alert('Failed to remove subscription. Please try again.');\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      <h3>Push Notifications (beta)</h3>\r\n      <section>\r\n        <ul>\r\n          <li>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                disabled={isLoading || needRelogin}\r\n                name=\"policy-allow\"\r\n                checked={allowNofitications}\r\n                onChange={async (e) => {\r\n                  const { checked } = e.target;\r\n                  if (checked) {\r\n                    // Request permission\r\n                    const permission = await Notification.requestPermission();\r\n                    if (permission === 'granted') {\r\n                      setAllowNotifications(true);\r\n                    } else {\r\n                      setAllowNotifications(false);\r\n                      if (permission === 'denied') {\r\n                        alert(\r\n                          'Push notifications are blocked. Please enable them in your browser settings.',\r\n                        );\r\n                      }\r\n                    }\r\n                  } else {\r\n                    setAllowNotifications(false);\r\n                  }\r\n                }}\r\n              />{' '}\r\n              Allow from{' '}\r\n              <select\r\n                name=\"policy\"\r\n                disabled={isLoading || needRelogin || !allowNofitications}\r\n              >\r\n                {[\r\n                  {\r\n                    value: 'all',\r\n                    label: 'anyone',\r\n                  },\r\n                  {\r\n                    value: 'followed',\r\n                    label: 'people I follow',\r\n                  },\r\n                  {\r\n                    value: 'follower',\r\n                    label: 'followers',\r\n                  },\r\n                ].map((type) => (\r\n                  <option value={type.value}>{type.label}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n            <div\r\n              class=\"shazam-container no-animation\"\r\n              style={{\r\n                width: '100%',\r\n              }}\r\n              hidden={!allowNofitications}\r\n            >\r\n              <div class=\"shazam-container-inner\">\r\n                <div class=\"sub-section\">\r\n                  <ul>\r\n                    {[\r\n                      {\r\n                        value: 'mention',\r\n                        label: 'Mentions',\r\n                      },\r\n                      {\r\n                        value: 'favourite',\r\n                        label: 'Favourites',\r\n                      },\r\n                      {\r\n                        value: 'reblog',\r\n                        label: 'Boosts',\r\n                      },\r\n                      {\r\n                        value: 'follow',\r\n                        label: 'Follows',\r\n                      },\r\n                      {\r\n                        value: 'followRequest',\r\n                        label: 'Follow requests',\r\n                      },\r\n                      {\r\n                        value: 'poll',\r\n                        label: 'Polls',\r\n                      },\r\n                      {\r\n                        value: 'update',\r\n                        label: 'Post edits',\r\n                      },\r\n                      {\r\n                        value: 'status',\r\n                        label: 'New posts',\r\n                      },\r\n                    ].map((alert) => (\r\n                      <li>\r\n                        <label>\r\n                          <input type=\"checkbox\" name={alert.value} />{' '}\r\n                          {alert.label}\r\n                        </label>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {needRelogin && (\r\n              <div class=\"sub-section\">\r\n                <p>\r\n                  Push permission was not granted since your last login. You'll\r\n                  need to{' '}\r\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\r\n                    <b>log in</b> again to grant push permission\r\n                  </Link>\r\n                  .\r\n                </p>\r\n              </div>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </section>\r\n      <p class=\"section-postnote\">\r\n        <small>\r\n          NOTE: Push notifications only work for <b>one account</b>.\r\n        </small>\r\n      </p>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","const focusDeck = () => {\r\n  let timer = setTimeout(() => {\r\n    const columns = document.getElementById('columns');\r\n    if (columns) {\r\n      // Focus first column\r\n      // columns.querySelector('.deck-container')?.focus?.();\r\n    } else {\r\n      const modals = document.querySelectorAll('#modal-container > *');\r\n      if (modals?.length) {\r\n        // Focus last modal\r\n        const modal = modals[modals.length - 1]; // last one\r\n        const modalFocusElement =\r\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\r\n        if (modalFocusElement) {\r\n          modalFocusElement.focus();\r\n          return;\r\n        }\r\n      }\r\n      const backDrop = document.querySelector('.deck-backdrop');\r\n      if (backDrop) return;\r\n      // Focus last deck\r\n      const pages = document.querySelectorAll('.deck-container');\r\n      const page = pages[pages.length - 1]; // last one\r\n      if (page && page.tabIndex === -1) {\r\n        console.log('FOCUS', page);\r\n        page.focus();\r\n      }\r\n    }\r\n  }, 100);\r\n  return () => clearTimeout(timer);\r\n};\r\n\r\nexport default focusDeck;\r\n","import { useEffect, useRef, useState } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport supports from '../utils/supports';\r\n\r\nimport Icon from './icon';\r\nimport MenuConfirm from './menu-confirm';\r\n\r\nfunction ListAddEdit({ list, onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const editMode = !!list;\r\n  const nameFieldRef = useRef();\r\n  const repliesPolicyFieldRef = useRef();\r\n  const exclusiveFieldRef = useRef();\r\n  useEffect(() => {\r\n    if (editMode) {\r\n      nameFieldRef.current.value = list.title;\r\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\r\n      if (exclusiveFieldRef.current) {\r\n        exclusiveFieldRef.current.checked = list.exclusive;\r\n      }\r\n    }\r\n  }, [editMode]);\r\n  const supportsExclusive = supports('@mastodon/list-exclusive');\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}{' '}\r\n      <header>\r\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\r\n      </header>\r\n      <main>\r\n        <form\r\n          class=\"list-form\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault(); // Get form values\r\n\r\n            const formData = new FormData(e.target);\r\n            const title = formData.get('title');\r\n            const repliesPolicy = formData.get('replies_policy');\r\n            const exclusive = formData.get('exclusive') === 'on';\r\n            console.log({\r\n              title,\r\n              repliesPolicy,\r\n              exclusive,\r\n            });\r\n            setUIState('loading');\r\n\r\n            (async () => {\r\n              try {\r\n                let listResult;\r\n\r\n                if (editMode) {\r\n                  listResult = await masto.v1.lists.update(list.id, {\r\n                    title,\r\n                    replies_policy: repliesPolicy,\r\n                    exclusive,\r\n                  });\r\n                } else {\r\n                  listResult = await masto.v1.lists.create({\r\n                    title,\r\n                    replies_policy: repliesPolicy,\r\n                    exclusive,\r\n                  });\r\n                }\r\n\r\n                console.log(listResult);\r\n                setUIState('default');\r\n                onClose?.({\r\n                  state: 'success',\r\n                  list: listResult,\r\n                });\r\n              } catch (e) {\r\n                console.error(e);\r\n                setUIState('error');\r\n                alert(\r\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\r\n                );\r\n              }\r\n            })();\r\n          }}\r\n        >\r\n          <div class=\"list-form-row\">\r\n            <label for=\"list-title\">\r\n              Name{' '}\r\n              <input\r\n                ref={nameFieldRef}\r\n                type=\"text\"\r\n                id=\"list-title\"\r\n                name=\"title\"\r\n                required\r\n                disabled={uiState === 'loading'}\r\n                dir=\"auto\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <div class=\"list-form-row\">\r\n            <select\r\n              ref={repliesPolicyFieldRef}\r\n              name=\"replies_policy\"\r\n              required\r\n              disabled={uiState === 'loading'}\r\n            >\r\n              <option value=\"list\">Show replies to list members</option>\r\n              <option value=\"followed\">Show replies to people I follow</option>\r\n              <option value=\"none\">Don't show replies</option>\r\n            </select>\r\n          </div>\r\n          {supportsExclusive && (\r\n            <div class=\"list-form-row\">\r\n              <label class=\"label-block\">\r\n                <input\r\n                  ref={exclusiveFieldRef}\r\n                  type=\"checkbox\"\r\n                  name=\"exclusive\"\r\n                  disabled={uiState === 'loading'}\r\n                />{' '}\r\n                Hide posts on this list from Home/Following\r\n              </label>\r\n            </div>\r\n          )}\r\n          <div class=\"list-form-footer\">\r\n            <button type=\"submit\" disabled={uiState === 'loading'}>\r\n              {editMode ? 'Save' : 'Create'}\r\n            </button>\r\n            {editMode && (\r\n              <MenuConfirm\r\n                disabled={uiState === 'loading'}\r\n                align=\"end\"\r\n                menuItemClassName=\"danger\"\r\n                confirmLabel=\"Delete this list?\"\r\n                onClick={() => {\r\n                  // const yes = confirm('Delete this list?');\r\n                  // if (!yes) return;\r\n                  setUIState('loading');\r\n\r\n                  (async () => {\r\n                    try {\r\n                      await masto.v1.lists.remove(list.id);\r\n                      setUIState('default');\r\n                      onClose?.({\r\n                        state: 'deleted',\r\n                      });\r\n                    } catch (e) {\r\n                      console.error(e);\r\n                      setUIState('error');\r\n                      alert('Unable to delete list.');\r\n                    }\r\n                  })();\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"light danger\"\r\n                  disabled={uiState === 'loading'}\r\n                >\r\n                  Delete…\r\n                </button>\r\n              </MenuConfirm>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListAddEdit;\r\n","import './account-info.css';\r\n\r\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\r\nimport { useEffect, useMemo, useReducer, useRef, useState } from 'preact/hooks';\r\nimport { proxy, useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport getHTMLText from '../utils/getHTMLText';\r\nimport handleContentLinks from '../utils/handle-content-links';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport showToast from '../utils/show-toast';\r\nimport states, { hideAllModals } from '../utils/states';\r\nimport store from '../utils/store';\r\nimport { updateAccount } from '../utils/store-utils';\r\n\r\nimport AccountBlock from './account-block';\r\nimport Avatar from './avatar';\r\nimport EmojiText from './emoji-text';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport ListAddEdit from './list-add-edit';\r\nimport Loader from './loader';\r\nimport MenuConfirm from './menu-confirm';\r\nimport Modal from './modal';\r\nimport TranslationBlock from './translation-block';\r\n\r\nconst MUTE_DURATIONS = [\r\n  1000 * 60 * 5, // 5 minutes\r\n  1000 * 60 * 30, // 30 minutes\r\n  1000 * 60 * 60, // 1 hour\r\n  1000 * 60 * 60 * 6, // 6 hours\r\n  1000 * 60 * 60 * 24, // 1 day\r\n  1000 * 60 * 60 * 24 * 3, // 3 days\r\n  1000 * 60 * 60 * 24 * 7, // 1 week\r\n  0, // forever\r\n];\r\nconst MUTE_DURATIONS_LABELS = {\r\n  0: 'Forever',\r\n  300_000: '5 minutes',\r\n  1_800_000: '30 minutes',\r\n  3_600_000: '1 hour',\r\n  21_600_000: '6 hours',\r\n  86_400_000: '1 day',\r\n  259_200_000: '3 days',\r\n  604_800_000: '1 week',\r\n};\r\n\r\nconst LIMIT = 80;\r\n\r\nconst accountInfoStates = proxy({\r\n  familiarFollowers: [],\r\n});\r\n\r\nfunction AccountInfo({\r\n  account,\r\n  fetchAccount = () => {},\r\n  standalone,\r\n  instance,\r\n  authenticated,\r\n}) {\r\n  const { masto } = api({\r\n    instance,\r\n  });\r\n  const [uiState, setUIState] = useState('default');\r\n  const isString = typeof account === 'string';\r\n  const [info, setInfo] = useState(isString ? null : account);\r\n  const snapAccountInfoStates = useSnapshot(accountInfoStates);\r\n\r\n  const isSelf = useMemo(\r\n    () => account.id === store.session.get('currentAccount'),\r\n    [account?.id],\r\n  );\r\n\r\n  const sameCurrentInstance = useMemo(\r\n    () => instance === api().instance,\r\n    [instance],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isString) {\r\n      setInfo(account);\r\n      return;\r\n    }\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const info = await fetchAccount();\r\n        states.accounts[`${info.id}@${instance}`] = info;\r\n        setInfo(info);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setInfo(null);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [isString, account, fetchAccount]);\r\n\r\n  const {\r\n    acct,\r\n    avatar,\r\n    avatarStatic,\r\n    bot,\r\n    createdAt,\r\n    displayName,\r\n    emojis,\r\n    fields,\r\n    followersCount,\r\n    followingCount,\r\n    group,\r\n    // header,\r\n    // headerStatic,\r\n    id,\r\n    lastStatusAt,\r\n    locked,\r\n    note,\r\n    statusesCount,\r\n    url,\r\n    username,\r\n    memorial,\r\n    moved,\r\n    roles,\r\n  } = info || {};\r\n  let headerIsAvatar = false;\r\n  let { header, headerStatic } = info || {};\r\n  if (!header || /missing\\.png$/.test(header)) {\r\n    if (avatar && !/missing\\.png$/.test(avatar)) {\r\n      header = avatar;\r\n      headerIsAvatar = true;\r\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\r\n        headerStatic = avatarStatic;\r\n      }\r\n    }\r\n  }\r\n\r\n  const accountInstance = useMemo(() => {\r\n    if (!url) return null;\r\n    const domain = new URL(url).hostname;\r\n    return domain;\r\n  }, [url]);\r\n\r\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\r\n\r\n  const followersIterator = useRef();\r\n  const familiarFollowersCache = useRef([]);\r\n  async function fetchFollowers(firstLoad) {\r\n    if (firstLoad || !followersIterator.current) {\r\n      followersIterator.current = masto.v1.accounts.listFollowers(id, {\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await followersIterator.current.next();\r\n    if (isSelf) return results;\r\n    if (!sameCurrentInstance) return results;\r\n\r\n    const { value } = results;\r\n    let newValue = [];\r\n    // On first load, fetch familiar followers, merge to top of results' `value`\r\n    // Remove dups on every fetch\r\n    if (firstLoad) {\r\n      const familiarFollowers = await masto.v1.accounts.fetchFamiliarFollowers(\r\n        id,\r\n      );\r\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\r\n      newValue = [\r\n        ...familiarFollowersCache.current,\r\n        ...value.filter(\r\n          (account) =>\r\n            !familiarFollowersCache.current.some(\r\n              (familiar) => familiar.id === account.id,\r\n            ),\r\n        ),\r\n      ];\r\n    } else if (value?.length) {\r\n      newValue = value.filter(\r\n        (account) =>\r\n          !familiarFollowersCache.current.some(\r\n            (familiar) => familiar.id === account.id,\r\n          ),\r\n      );\r\n    }\r\n\r\n    return {\r\n      ...results,\r\n      value: newValue,\r\n    };\r\n  }\r\n\r\n  const followingIterator = useRef();\r\n  async function fetchFollowing(firstLoad) {\r\n    if (firstLoad || !followingIterator.current) {\r\n      followingIterator.current = masto.v1.accounts.listFollowing(id, {\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await followingIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  const LinkOrDiv = standalone ? 'div' : Link;\r\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\r\n\r\n  return (\r\n    <div\r\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\r\n      style={{\r\n        '--header-color-1': headerCornerColors[0],\r\n        '--header-color-2': headerCornerColors[1],\r\n        '--header-color-3': headerCornerColors[2],\r\n        '--header-color-4': headerCornerColors[3],\r\n      }}\r\n    >\r\n      {uiState === 'error' && (\r\n        <div class=\"ui-state\">\r\n          <p>Unable to load account.</p>\r\n          <p>\r\n            <a\r\n              href={isString ? account : url}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Go to account page <Icon icon=\"external\" />\r\n            </a>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {uiState === 'loading' ? (\r\n        <>\r\n          <header>\r\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\r\n          </header>\r\n          <main>\r\n            <div class=\"note\">\r\n              <p>████████ ███████</p>\r\n              <p>███████████████ ███████████████</p>\r\n            </div>\r\n            <p class=\"stats\">\r\n              <div>\r\n                <span>██</span> Followers\r\n              </div>\r\n              <div>\r\n                <span>██</span> Following\r\n              </div>\r\n              <div>\r\n                <span>██</span> Posts\r\n              </div>\r\n              <div>Joined ██</div>\r\n            </p>\r\n          </main>\r\n        </>\r\n      ) : (\r\n        info && (\r\n          <>\r\n            {!!moved && (\r\n              <div class=\"account-moved\">\r\n                <p>\r\n                  <b>{displayName}</b> has indicated that their new account is\r\n                  now:\r\n                </p>\r\n                <AccountBlock\r\n                  account={moved}\r\n                  instance={instance}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    states.showAccount = moved;\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            {header && !/missing\\.png$/.test(header) && (\r\n              <img\r\n                src={header}\r\n                alt=\"\"\r\n                class={`header-banner ${\r\n                  headerIsAvatar ? 'header-is-avatar' : ''\r\n                }`}\r\n                onError={(e) => {\r\n                  if (e.target.crossOrigin) {\r\n                    if (e.target.src !== headerStatic) {\r\n                      e.target.src = headerStatic;\r\n                    } else {\r\n                      e.target.removeAttribute('crossorigin');\r\n                      e.target.src = header;\r\n                    }\r\n                  } else if (e.target.src !== headerStatic) {\r\n                    e.target.src = headerStatic;\r\n                  } else {\r\n                    e.target.remove();\r\n                  }\r\n                }}\r\n                crossOrigin=\"anonymous\"\r\n                onLoad={(e) => {\r\n                  e.target.classList.add('loaded');\r\n                  try {\r\n                    // Get color from four corners of image\r\n                    const canvas = document.createElement('canvas');\r\n                    const ctx = canvas.getContext('2d', {\r\n                      willReadFrequently: true,\r\n                    });\r\n                    canvas.width = e.target.width;\r\n                    canvas.height = e.target.height;\r\n                    ctx.drawImage(e.target, 0, 0);\r\n                    // const colors = [\r\n                    //   ctx.getImageData(0, 0, 1, 1).data,\r\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\r\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\r\n                    //   ctx.getImageData(\r\n                    //     e.target.width - 1,\r\n                    //     e.target.height - 1,\r\n                    //     1,\r\n                    //     1,\r\n                    //   ).data,\r\n                    // ];\r\n                    // Get 10x10 pixels from corners, get average color from each\r\n                    const pixelDimension = 10;\r\n                    const colors = [\r\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\r\n                        .data,\r\n                      ctx.getImageData(\r\n                        e.target.width - pixelDimension,\r\n                        0,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                      ctx.getImageData(\r\n                        0,\r\n                        e.target.height - pixelDimension,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                      ctx.getImageData(\r\n                        e.target.width - pixelDimension,\r\n                        e.target.height - pixelDimension,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                    ].map((data) => {\r\n                      let r = 0;\r\n                      let g = 0;\r\n                      let b = 0;\r\n                      let a = 0;\r\n                      for (let i = 0; i < data.length; i += 4) {\r\n                        r += data[i];\r\n                        g += data[i + 1];\r\n                        b += data[i + 2];\r\n                        a += data[i + 3];\r\n                      }\r\n                      const dataLength = data.length / 4;\r\n                      return [\r\n                        r / dataLength,\r\n                        g / dataLength,\r\n                        b / dataLength,\r\n                        a / dataLength,\r\n                      ];\r\n                    });\r\n                    const rgbColors = colors.map((color) => {\r\n                      const [r, g, b, a] = lightenRGB(color);\r\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\r\n                    });\r\n                    setHeaderCornerColors(rgbColors);\r\n                    console.log({ colors, rgbColors });\r\n                  } catch (e) {\r\n                    // Silently fail\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n            <header>\r\n              <AccountBlock\r\n                account={info}\r\n                instance={instance}\r\n                avatarSize=\"xxxl\"\r\n                external={standalone}\r\n                internal={!standalone}\r\n              />\r\n            </header>\r\n            <main tabIndex=\"-1\">\r\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\r\n              {!!bot && (\r\n                <span class=\"tag\">\r\n                  <Icon icon=\"bot\" /> Automated\r\n                </span>\r\n              )}\r\n              {!!group && (\r\n                <span class=\"tag\">\r\n                  <Icon icon=\"group\" /> Group\r\n                </span>\r\n              )}\r\n              {roles?.map((role) => (\r\n                <span class=\"tag\">\r\n                  {role.name}\r\n                  {!!accountInstance && (\r\n                    <>\r\n                      {' '}\r\n                      <span class=\"more-insignificant\">{accountInstance}</span>\r\n                    </>\r\n                  )}\r\n                </span>\r\n              ))}\r\n              <div\r\n                class=\"note\"\r\n                dir=\"auto\"\r\n                onClick={handleContentLinks({\r\n                  instance,\r\n                })}\r\n                dangerouslySetInnerHTML={{\r\n                  __html: enhanceContent(note, { emojis }),\r\n                }}\r\n              />\r\n              <div class=\"account-metadata-box\">\r\n                {fields?.length > 0 && (\r\n                  <div class=\"profile-metadata\">\r\n                    {fields.map(({ name, value, verifiedAt }, i) => (\r\n                      <div\r\n                        class={`profile-field ${\r\n                          verifiedAt ? 'profile-verified' : ''\r\n                        }`}\r\n                        key={name + i}\r\n                        dir=\"auto\"\r\n                      >\r\n                        <b>\r\n                          <EmojiText text={name} emojis={emojis} />{' '}\r\n                          {!!verifiedAt && (\r\n                            <Icon icon=\"check-circle\" size=\"s\" />\r\n                          )}\r\n                        </b>\r\n                        <p\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: enhanceContent(value, { emojis }),\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                <div class=\"stats\">\r\n                  <LinkOrDiv\r\n                    tabIndex={0}\r\n                    to={accountLink}\r\n                    onClick={() => {\r\n                      states.showAccount = false;\r\n                      states.showGenericAccounts = {\r\n                        heading: 'Followers',\r\n                        fetchAccounts: fetchFollowers,\r\n                      };\r\n                    }}\r\n                  >\r\n                    {!!snapAccountInfoStates.familiarFollowers.length && (\r\n                      <span class=\"shazam-container-horizontal\">\r\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\r\n                          {(snapAccountInfoStates.familiarFollowers || []).map(\r\n                            (follower) => (\r\n                              <Avatar\r\n                                url={follower.avatarStatic}\r\n                                size=\"s\"\r\n                                alt={`${follower.displayName} @${follower.acct}`}\r\n                                squircle={follower?.bot}\r\n                              />\r\n                            ),\r\n                          )}\r\n                        </span>\r\n                      </span>\r\n                    )}\r\n                    <span title={followersCount}>\r\n                      {shortenNumber(followersCount)}\r\n                    </span>{' '}\r\n                    Followers\r\n                  </LinkOrDiv>\r\n                  <LinkOrDiv\r\n                    class=\"insignificant\"\r\n                    tabIndex={0}\r\n                    to={accountLink}\r\n                    onClick={() => {\r\n                      states.showAccount = false;\r\n                      states.showGenericAccounts = {\r\n                        heading: 'Following',\r\n                        fetchAccounts: fetchFollowing,\r\n                      };\r\n                    }}\r\n                  >\r\n                    <span title={followingCount}>\r\n                      {shortenNumber(followingCount)}\r\n                    </span>{' '}\r\n                    Following\r\n                    <br />\r\n                  </LinkOrDiv>\r\n                  <LinkOrDiv\r\n                    class=\"insignificant\"\r\n                    to={accountLink}\r\n                    onClick={\r\n                      standalone\r\n                        ? undefined\r\n                        : () => {\r\n                            hideAllModals();\r\n                          }\r\n                    }\r\n                  >\r\n                    <span title={statusesCount}>\r\n                      {shortenNumber(statusesCount)}\r\n                    </span>{' '}\r\n                    Posts\r\n                  </LinkOrDiv>\r\n                  {!!createdAt && (\r\n                    <div class=\"insignificant\">\r\n                      Joined{' '}\r\n                      <time datetime={createdAt}>\r\n                        {niceDateTime(createdAt, {\r\n                          hideTime: true,\r\n                        })}\r\n                      </time>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <RelatedActions\r\n                info={info}\r\n                instance={instance}\r\n                authenticated={authenticated}\r\n                standalone={standalone}\r\n              />\r\n            </main>\r\n          </>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\r\n\r\nfunction RelatedActions({ info, instance, authenticated, standalone }) {\r\n  if (!info) return null;\r\n  const {\r\n    masto: currentMasto,\r\n    instance: currentInstance,\r\n    authenticated: currentAuthenticated,\r\n  } = api();\r\n  const sameInstance = instance === currentInstance;\r\n\r\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\r\n  const [relationship, setRelationship] = useState(null);\r\n  const [postingStats, setPostingStats] = useState();\r\n\r\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\r\n    info;\r\n  const accountID = useRef(id);\r\n\r\n  const {\r\n    following,\r\n    showingReblogs,\r\n    notifying,\r\n    followedBy,\r\n    blocking,\r\n    blockedBy,\r\n    muting,\r\n    mutingNotifications,\r\n    requested,\r\n    domainBlocking,\r\n    endorsed,\r\n  } = relationship || {};\r\n\r\n  const [currentInfo, setCurrentInfo] = useState(null);\r\n  const [isSelf, setIsSelf] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (info) {\r\n      const currentAccount = store.session.get('currentAccount');\r\n      let currentID;\r\n      (async () => {\r\n        if (sameInstance && authenticated) {\r\n          currentID = id;\r\n        } else if (!sameInstance && currentAuthenticated) {\r\n          // Grab this account from my logged-in instance\r\n          const acctHasInstance = info.acct.includes('@');\r\n          try {\r\n            const results = await currentMasto.v2.search({\r\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\r\n              type: 'accounts',\r\n              limit: 1,\r\n              resolve: true,\r\n            });\r\n            console.log('🥏 Fetched account from logged-in instance', results);\r\n            if (results.accounts.length) {\r\n              currentID = results.accounts[0].id;\r\n              setCurrentInfo(results.accounts[0]);\r\n            }\r\n          } catch (e) {\r\n            console.error(e);\r\n          }\r\n        }\r\n\r\n        if (!currentID) return;\r\n\r\n        if (currentAccount === currentID) {\r\n          // It's myself!\r\n          setIsSelf(true);\r\n          return;\r\n        }\r\n\r\n        accountID.current = currentID;\r\n\r\n        if (moved) return;\r\n\r\n        setRelationshipUIState('loading');\r\n        accountInfoStates.familiarFollowers = [];\r\n        setPostingStats(null);\r\n\r\n        const fetchRelationships = currentMasto.v1.accounts.fetchRelationships([\r\n          currentID,\r\n        ]);\r\n\r\n        try {\r\n          const relationships = await fetchRelationships;\r\n          console.log('fetched relationship', relationships);\r\n          setRelationshipUIState('default');\r\n\r\n          if (relationships.length) {\r\n            const relationship = relationships[0];\r\n            setRelationship(relationship);\r\n\r\n            if (!relationship.following) {\r\n              try {\r\n                const fetchFamiliarFollowers =\r\n                  currentMasto.v1.accounts.fetchFamiliarFollowers(currentID);\r\n                const fetchStatuses = currentMasto.v1.accounts\r\n                  .listStatuses(currentID, {\r\n                    limit: 20,\r\n                  })\r\n                  .next();\r\n\r\n                const followers = await fetchFamiliarFollowers;\r\n                console.log('fetched familiar followers', followers);\r\n                accountInfoStates.familiarFollowers =\r\n                  followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT);\r\n\r\n                if (!standalone) {\r\n                  const { value: statuses } = await fetchStatuses;\r\n                  console.log('fetched statuses', statuses);\r\n                  const stats = {\r\n                    total: statuses.length,\r\n                    originals: 0,\r\n                    replies: 0,\r\n                    boosts: 0,\r\n                  };\r\n                  // Categories statuses by type\r\n                  // - Original posts (not replies to others)\r\n                  // - Threads (self-replies + 1st original post)\r\n                  // - Boosts (reblogs)\r\n                  // - Replies (not-self replies)\r\n                  statuses.forEach((status) => {\r\n                    if (status.reblog) {\r\n                      stats.boosts++;\r\n                    } else if (\r\n                      status.inReplyToAccountId !== currentID &&\r\n                      !!status.inReplyToId\r\n                    ) {\r\n                      stats.replies++;\r\n                    } else {\r\n                      stats.originals++;\r\n                    }\r\n                  });\r\n\r\n                  // Count days since last post\r\n                  stats.daysSinceLastPost = Math.ceil(\r\n                    (Date.now() -\r\n                      new Date(statuses[statuses.length - 1].createdAt)) /\r\n                      86400000,\r\n                  );\r\n\r\n                  console.log('posting stats', stats);\r\n                  setPostingStats(stats);\r\n                }\r\n              } catch (e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n          setRelationshipUIState('error');\r\n        }\r\n      })();\r\n    }\r\n  }, [info, authenticated]);\r\n\r\n  useEffect(() => {\r\n    if (info && isSelf) {\r\n      updateAccount(info);\r\n    }\r\n  }, [info, isSelf]);\r\n\r\n  const loading = relationshipUIState === 'loading';\r\n  const menuInstanceRef = useRef(null);\r\n\r\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\r\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\r\n\r\n  const hasPostingStats = postingStats?.total >= 3;\r\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\r\n\r\n  return (\r\n    <>\r\n      {hasPostingStats && (\r\n        <Link\r\n          to={accountLink}\r\n          class=\"account-metadata-box\"\r\n          onClick={() => {\r\n            states.showAccount = false;\r\n          }}\r\n        >\r\n          <div class=\"shazam-container\">\r\n            <div class=\"shazam-container-inner\">\r\n              <div\r\n                class=\"posting-stats\"\r\n                title={`${Math.round(\r\n                  (postingStats.originals / postingStats.total) * 100,\r\n                )}% original posts, ${Math.round(\r\n                  (postingStats.replies / postingStats.total) * 100,\r\n                )}% replies, ${Math.round(\r\n                  (postingStats.boosts / postingStats.total) * 100,\r\n                )}% boosts`}\r\n              >\r\n                <div>\r\n                  {postingStats.daysSinceLastPost < 365\r\n                    ? `Last ${postingStats.total} posts in the past \r\n                    ${postingStats.daysSinceLastPost} day${\r\n                        postingStats.daysSinceLastPost > 1 ? 's' : ''\r\n                      }`\r\n                    : `\r\n                     Last ${postingStats.total} posts in the past year(s)\r\n                    `}\r\n                </div>\r\n                <div\r\n                  class=\"posting-stats-bar\"\r\n                  style={{\r\n                    // [originals | replies | boosts]\r\n                    '--originals-percentage': `${\r\n                      (postingStats.originals / postingStats.total) * 100\r\n                    }%`,\r\n                    '--replies-percentage': `${\r\n                      ((postingStats.originals + postingStats.replies) /\r\n                        postingStats.total) *\r\n                      100\r\n                    }%`,\r\n                  }}\r\n                />\r\n                <div class=\"posting-stats-legends\">\r\n                  <span class=\"ib\">\r\n                    <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\r\n                    Original\r\n                  </span>{' '}\r\n                  <span class=\"ib\">\r\n                    <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\r\n                    Replies\r\n                  </span>{' '}\r\n                  <span class=\"ib\">\r\n                    <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\r\n                    Boosts\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      )}\r\n      <p class=\"actions\">\r\n        <span>\r\n          {followedBy ? (\r\n            <span class=\"tag\">Following you</span>\r\n          ) : !!lastStatusAt ? (\r\n            <small class=\"insignificant\">\r\n              Last post:{' '}\r\n              {niceDateTime(lastStatusAt, {\r\n                hideTime: true,\r\n              })}\r\n            </small>\r\n          ) : (\r\n            <span />\r\n          )}\r\n          {muting && <span class=\"tag danger\">Muted</span>}\r\n          {blocking && <span class=\"tag danger\">Blocked</span>}\r\n        </span>{' '}\r\n        <span class=\"buttons\">\r\n          <Menu\r\n            instanceRef={menuInstanceRef}\r\n            portal={{\r\n              target: document.body,\r\n            }}\r\n            containerProps={{\r\n              style: {\r\n                // Higher than the backdrop\r\n                zIndex: 1001,\r\n              },\r\n              onClick: (e) => {\r\n                if (e.target === e.currentTarget) {\r\n                  menuInstanceRef.current?.closeMenu?.();\r\n                }\r\n              },\r\n            }}\r\n            align=\"center\"\r\n            position=\"anchor\"\r\n            overflow=\"auto\"\r\n            boundingBoxPadding=\"8 8 8 8\"\r\n            menuButton={\r\n              <button\r\n                type=\"button\"\r\n                title=\"More\"\r\n                class=\"plain\"\r\n                disabled={loading}\r\n              >\r\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n              </button>\r\n            }\r\n          >\r\n            {currentAuthenticated && !isSelf && (\r\n              <>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    states.showCompose = {\r\n                      draftStatus: {\r\n                        status: `@${currentInfo?.acct || acct} `,\r\n                      },\r\n                    };\r\n                  }}\r\n                >\r\n                  <Icon icon=\"at\" />\r\n                  <span>Mention @{username}</span>\r\n                </MenuItem>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    setShowTranslatedBio(true);\r\n                  }}\r\n                >\r\n                  <Icon icon=\"translate\" />\r\n                  <span>Translate bio</span>\r\n                </MenuItem>\r\n                {/* Add/remove from lists is only possible if following the account */}\r\n                {following && (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      setShowAddRemoveLists(true);\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"list\" />\r\n                    <span>Add/remove from Lists</span>\r\n                  </MenuItem>\r\n                )}\r\n                <MenuDivider />\r\n              </>\r\n            )}\r\n            <MenuItem href={url} target=\"_blank\">\r\n              <Icon icon=\"external\" />\r\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\r\n            </MenuItem>\r\n            <div class=\"menu-horizontal\">\r\n              <MenuItem\r\n                onClick={() => {\r\n                  // Copy url to clipboard\r\n                  try {\r\n                    navigator.clipboard.writeText(url);\r\n                    showToast('Link copied');\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                    showToast('Unable to copy link');\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"link\" />\r\n                <span>Copy</span>\r\n              </MenuItem>\r\n              {navigator?.share &&\r\n                navigator?.canShare?.({\r\n                  url,\r\n                }) && (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      try {\r\n                        navigator.share({\r\n                          url,\r\n                        });\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        alert(\"Sharing doesn't seem to work.\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"share\" />\r\n                    <span>Share…</span>\r\n                  </MenuItem>\r\n                )}\r\n            </div>\r\n            {!!relationship && (\r\n              <>\r\n                <MenuDivider />\r\n                {muting ? (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      setRelationshipUIState('loading');\r\n                      (async () => {\r\n                        try {\r\n                          const newRelationship =\r\n                            await currentMasto.v1.accounts.unmute(\r\n                              currentInfo?.id || id,\r\n                            );\r\n                          console.log('unmuting', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Unmuted @${username}`);\r\n                          states.reloadGenericAccounts.id = 'mute';\r\n                          states.reloadGenericAccounts.counter++;\r\n                        } catch (e) {\r\n                          console.error(e);\r\n                          setRelationshipUIState('error');\r\n                        }\r\n                      })();\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"unmute\" />\r\n                    <span>Unmute @{username}</span>\r\n                  </MenuItem>\r\n                ) : (\r\n                  <SubMenu\r\n                    openTrigger=\"clickOnly\"\r\n                    direction=\"bottom\"\r\n                    overflow=\"auto\"\r\n                    shift={16}\r\n                    label={\r\n                      <>\r\n                        <Icon icon=\"mute\" />\r\n                        <span class=\"menu-grow\">Mute @{username}…</span>\r\n                        <span\r\n                          style={{\r\n                            textOverflow: 'clip',\r\n                          }}\r\n                        >\r\n                          <Icon icon=\"time\" />\r\n                          <Icon icon=\"chevron-right\" />\r\n                        </span>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <div class=\"menu-wrap\">\r\n                      {MUTE_DURATIONS.map((duration) => (\r\n                        <MenuItem\r\n                          onClick={() => {\r\n                            setRelationshipUIState('loading');\r\n                            (async () => {\r\n                              try {\r\n                                const newRelationship =\r\n                                  await currentMasto.v1.accounts.mute(\r\n                                    currentInfo?.id || id,\r\n                                    {\r\n                                      duration,\r\n                                    },\r\n                                  );\r\n                                console.log('muting', newRelationship);\r\n                                setRelationship(newRelationship);\r\n                                setRelationshipUIState('default');\r\n                                showToast(\r\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\r\n                                );\r\n                                states.reloadGenericAccounts.id = 'mute';\r\n                                states.reloadGenericAccounts.counter++;\r\n                              } catch (e) {\r\n                                console.error(e);\r\n                                setRelationshipUIState('error');\r\n                                showToast(`Unable to mute @${username}`);\r\n                              }\r\n                            })();\r\n                          }}\r\n                        >\r\n                          {MUTE_DURATIONS_LABELS[duration]}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </div>\r\n                  </SubMenu>\r\n                )}\r\n                <MenuConfirm\r\n                  subMenu\r\n                  confirm={!blocking}\r\n                  confirmLabel={\r\n                    <>\r\n                      <Icon icon=\"block\" />\r\n                      <span>Block @{username}?</span>\r\n                    </>\r\n                  }\r\n                  menuItemClassName=\"danger\"\r\n                  onClick={() => {\r\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\r\n                    //   return;\r\n                    // }\r\n                    setRelationshipUIState('loading');\r\n                    (async () => {\r\n                      try {\r\n                        if (blocking) {\r\n                          const newRelationship =\r\n                            await currentMasto.v1.accounts.unblock(\r\n                              currentInfo?.id || id,\r\n                            );\r\n                          console.log('unblocking', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Unblocked @${username}`);\r\n                        } else {\r\n                          const newRelationship =\r\n                            await currentMasto.v1.accounts.block(\r\n                              currentInfo?.id || id,\r\n                            );\r\n                          console.log('blocking', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Blocked @${username}`);\r\n                        }\r\n                        states.reloadGenericAccounts.id = 'block';\r\n                        states.reloadGenericAccounts.counter++;\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        setRelationshipUIState('error');\r\n                        if (blocking) {\r\n                          showToast(`Unable to unblock @${username}`);\r\n                        } else {\r\n                          showToast(`Unable to block @${username}`);\r\n                        }\r\n                      }\r\n                    })();\r\n                  }}\r\n                >\r\n                  {blocking ? (\r\n                    <>\r\n                      <Icon icon=\"unblock\" />\r\n                      <span>Unblock @{username}</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Icon icon=\"block\" />\r\n                      <span>Block @{username}…</span>\r\n                    </>\r\n                  )}\r\n                </MenuConfirm>\r\n                {/* <MenuItem>\r\n                <Icon icon=\"flag\" />\r\n                <span>Report @{username}…</span>\r\n              </MenuItem> */}\r\n              </>\r\n            )}\r\n          </Menu>\r\n          {!relationship && relationshipUIState === 'loading' && (\r\n            <Loader abrupt />\r\n          )}\r\n          {!!relationship && (\r\n            <MenuConfirm\r\n              confirm={following || requested}\r\n              confirmLabel={\r\n                <span>\r\n                  {requested\r\n                    ? 'Withdraw follow request?'\r\n                    : `Unfollow @${info.acct || info.username}?`}\r\n                </span>\r\n              }\r\n              menuItemClassName=\"danger\"\r\n              align=\"end\"\r\n              disabled={loading}\r\n              onClick={() => {\r\n                setRelationshipUIState('loading');\r\n                (async () => {\r\n                  try {\r\n                    let newRelationship;\r\n\r\n                    if (following || requested) {\r\n                      // const yes = confirm(\r\n                      //   requested\r\n                      //     ? 'Withdraw follow request?'\r\n                      //     : `Unfollow @${info.acct || info.username}?`,\r\n                      // );\r\n\r\n                      // if (yes) {\r\n                      newRelationship = await currentMasto.v1.accounts.unfollow(\r\n                        accountID.current,\r\n                      );\r\n                      // }\r\n                    } else {\r\n                      newRelationship = await currentMasto.v1.accounts.follow(\r\n                        accountID.current,\r\n                      );\r\n                    }\r\n\r\n                    if (newRelationship) setRelationship(newRelationship);\r\n                    setRelationshipUIState('default');\r\n                  } catch (e) {\r\n                    alert(e);\r\n                    setRelationshipUIState('error');\r\n                  }\r\n                })();\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class={`${following || requested ? 'light swap' : ''}`}\r\n                data-swap-state={following || requested ? 'danger' : ''}\r\n                disabled={loading}\r\n              >\r\n                {following ? (\r\n                  <>\r\n                    <span>Following</span>\r\n                    <span>Unfollow…</span>\r\n                  </>\r\n                ) : requested ? (\r\n                  <>\r\n                    <span>Requested</span>\r\n                    <span>Withdraw…</span>\r\n                  </>\r\n                ) : locked ? (\r\n                  <>\r\n                    <Icon icon=\"lock\" /> <span>Follow</span>\r\n                  </>\r\n                ) : (\r\n                  'Follow'\r\n                )}\r\n              </button>\r\n            </MenuConfirm>\r\n          )}\r\n        </span>\r\n      </p>\r\n      {!!showTranslatedBio && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            setShowTranslatedBio(false);\r\n          }}\r\n        >\r\n          <TranslatedBioSheet\r\n            note={note}\r\n            fields={fields}\r\n            onClose={() => setShowTranslatedBio(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!showAddRemoveLists && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            setShowAddRemoveLists(false);\r\n          }}\r\n        >\r\n          <AddRemoveListsSheet\r\n            accountID={accountID.current}\r\n            onClose={() => setShowAddRemoveLists(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// Apply more alpha if high luminence\r\nfunction lightenRGB([r, g, b]) {\r\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n  console.log('luminence', luminence);\r\n  let alpha;\r\n  if (luminence >= 220) {\r\n    alpha = 1;\r\n  } else if (luminence <= 50) {\r\n    alpha = 0.1;\r\n  } else {\r\n    alpha = luminence / 255;\r\n  }\r\n  alpha = Math.min(1, alpha);\r\n  return [r, g, b, alpha];\r\n}\r\n\r\nfunction niceAccountURL(url) {\r\n  if (!url) return;\r\n  const urlObj = new URL(url);\r\n  const { host, pathname } = urlObj;\r\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\r\n  return (\r\n    <>\r\n      <span class=\"more-insignificant\">{host}/</span>\r\n      <wbr />\r\n      <span>{path}</span>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TranslatedBioSheet({ note, fields, onClose }) {\r\n  const fieldsText =\r\n    fields\r\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\r\n      .join('\\n\\n') || '';\r\n\r\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Translated Bio</h2>\r\n      </header>\r\n      <main>\r\n        <p\r\n          style={{\r\n            whiteSpace: 'pre-wrap',\r\n          }}\r\n        >\r\n          {text}\r\n        </p>\r\n        <TranslationBlock forceTranslate text={text} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AddRemoveListsSheet({ accountID, onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [lists, setLists] = useState([]);\r\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const lists = await masto.v1.lists.list();\r\n        const listsContainingAccount = await masto.v1.accounts.listLists(\r\n          accountID,\r\n        );\r\n        console.log({ lists, listsContainingAccount });\r\n        setLists(lists);\r\n        setListsContainingAccount(listsContainingAccount);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n\r\n  return (\r\n    <div class=\"sheet\" id=\"list-add-remove-container\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Add/Remove from Lists</h2>\r\n      </header>\r\n      <main>\r\n        {lists.length > 0 ? (\r\n          <ul class=\"list-add-remove\">\r\n            {lists.map((list) => {\r\n              const inList = listsContainingAccount.some(\r\n                (l) => l.id === list.id,\r\n              );\r\n              return (\r\n                <li>\r\n                  <button\r\n                    type=\"button\"\r\n                    class={`light ${inList ? 'checked' : ''}`}\r\n                    disabled={uiState === 'loading'}\r\n                    onClick={() => {\r\n                      setUIState('loading');\r\n                      (async () => {\r\n                        try {\r\n                          if (inList) {\r\n                            await masto.v1.lists.removeAccount(list.id, {\r\n                              accountIds: [accountID],\r\n                            });\r\n                          } else {\r\n                            await masto.v1.lists.addAccount(list.id, {\r\n                              accountIds: [accountID],\r\n                            });\r\n                          }\r\n                          // setUIState('default');\r\n                          reload();\r\n                        } catch (e) {\r\n                          console.error(e);\r\n                          setUIState('error');\r\n                          alert(\r\n                            inList\r\n                              ? 'Unable to remove from list.'\r\n                              : 'Unable to add to list.',\r\n                          );\r\n                        }\r\n                      })();\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"check-circle\" />\r\n                    <span>{list.title}</span>\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        ) : uiState === 'loading' ? (\r\n          <p class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </p>\r\n        ) : uiState === 'error' ? (\r\n          <p class=\"ui-state\">Unable to load lists.</p>\r\n        ) : (\r\n          <p class=\"ui-state\">No lists.</p>\r\n        )}\r\n        <button\r\n          type=\"button\"\r\n          class=\"plain2\"\r\n          onClick={() => setShowListAddEditModal(true)}\r\n          disabled={uiState !== 'default'}\r\n        >\r\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\r\n        </button>\r\n      </main>\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success') {\r\n                reload();\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountInfo;\r\n","import { useEffect } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\n\r\nimport AccountInfo from './account-info';\r\nimport Icon from './icon';\r\n\r\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\r\n  const { masto, instance, authenticated } = api({ instance: propInstance });\r\n  const isString = typeof account === 'string';\r\n\r\n  useEffect(() => {\r\n    if (!isString) {\r\n      states.accounts[`${account.id}@${instance}`] = account;\r\n    }\r\n  }, [account]);\r\n\r\n  return (\r\n    <div\r\n      class=\"sheet\"\r\n      onClick={(e) => {\r\n        const accountBlock = e.target.closest('.account-block');\r\n        if (accountBlock) {\r\n          onClose({\r\n            destination: 'account-statuses',\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <AccountInfo\r\n        instance={instance}\r\n        authenticated={authenticated}\r\n        account={account}\r\n        fetchAccount={async () => {\r\n          if (isString) {\r\n            try {\r\n              const info = await masto.v1.accounts.lookup({\r\n                acct: account,\r\n                skip_webfinger: false,\r\n              });\r\n              return info;\r\n            } catch (e) {\r\n              const result = await masto.v2.search({\r\n                q: account,\r\n                type: 'accounts',\r\n                limit: 1,\r\n                resolve: authenticated,\r\n              });\r\n              if (result.accounts.length) {\r\n                return result.accounts[0];\r\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\r\n                const accountURL = new URL(account);\r\n                const acct = accountURL.pathname.replace(/^\\//, '');\r\n                const result = await masto.v2.search({\r\n                  q: acct,\r\n                  type: 'accounts',\r\n                  limit: 1,\r\n                  resolve: authenticated,\r\n                });\r\n                if (result.accounts.length) {\r\n                  return result.accounts[0];\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            return account;\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountSheet;\r\n","import './drafts.css';\r\n\r\nimport { useEffect, useMemo, useReducer, useState } from 'react';\r\n\r\nimport { api } from '../utils/api';\r\nimport db from '../utils/db';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport states from '../utils/states';\r\nimport { getCurrentAccountNS } from '../utils/store-utils';\r\n\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\nimport MenuConfirm from './menu-confirm';\r\n\r\nfunction Drafts({ onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [drafts, setDrafts] = useState([]);\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const keys = await db.drafts.keys();\r\n        if (keys.length) {\r\n          const ns = getCurrentAccountNS();\r\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\r\n          if (ownKeys.length) {\r\n            const drafts = await db.drafts.getMany(ownKeys);\r\n            drafts.sort(\r\n              (a, b) =>\r\n                new Date(b.updatedAt).getTime() -\r\n                new Date(a.updatedAt).getTime(),\r\n            );\r\n            setDrafts(drafts);\r\n          } else {\r\n            setDrafts([]);\r\n          }\r\n        } else {\r\n          setDrafts([]);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const hasDrafts = drafts?.length > 0;\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\r\n        </h2>\r\n        {hasDrafts && (\r\n          <div class=\"insignificant\">\r\n            Looks like you have unsent drafts. Let's continue where you left\r\n            off.\r\n          </div>\r\n        )}\r\n      </header>\r\n      <main>\r\n        {hasDrafts ? (\r\n          <>\r\n            <ul class=\"drafts-list\">\r\n              {drafts.map((draft) => {\r\n                const { updatedAt, key, draftStatus, replyTo } = draft;\r\n                const updatedAtDate = new Date(updatedAt);\r\n                return (\r\n                  <li key={updatedAt}>\r\n                    <div class=\"mini-draft-meta\">\r\n                      <b>\r\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\r\n                        <time>\r\n                          {!!replyTo && (\r\n                            <>\r\n                              @{replyTo.account.acct}\r\n                              <br />\r\n                            </>\r\n                          )}\r\n                          {niceDateTime(updatedAtDate)}\r\n                        </time>\r\n                      </b>\r\n                      <MenuConfirm\r\n                        confirmLabel={<span>Delete this draft?</span>}\r\n                        menuItemClassName=\"danger\"\r\n                        align=\"end\"\r\n                        disabled={uiState === 'loading'}\r\n                        onClick={() => {\r\n                          (async () => {\r\n                            try {\r\n                              // const yes = confirm('Delete this draft?');\r\n                              // if (yes) {\r\n                              await db.drafts.del(key);\r\n                              reload();\r\n                              // }\r\n                            } catch (e) {\r\n                              alert('Error deleting draft! Please try again.');\r\n                            }\r\n                          })();\r\n                        }}\r\n                      >\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"small light\"\r\n                          disabled={uiState === 'loading'}\r\n                        >\r\n                          Delete&hellip;\r\n                        </button>\r\n                      </MenuConfirm>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      disabled={uiState === 'loading'}\r\n                      class=\"draft-item\"\r\n                      onClick={async () => {\r\n                        // console.log({ draftStatus });\r\n                        let replyToStatus;\r\n                        if (replyTo) {\r\n                          setUIState('loading');\r\n                          try {\r\n                            replyToStatus = await masto.v1.statuses.fetch(\r\n                              replyTo.id,\r\n                            );\r\n                          } catch (e) {\r\n                            console.error(e);\r\n                            alert('Error fetching reply-to status!');\r\n                            setUIState('default');\r\n                            return;\r\n                          }\r\n                          setUIState('default');\r\n                        }\r\n                        window.__COMPOSE__ = {\r\n                          draftStatus,\r\n                          replyToStatus,\r\n                        };\r\n                        states.showCompose = true;\r\n                        states.showDrafts = false;\r\n                      }}\r\n                    >\r\n                      <MiniDraft draft={draft} />\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            {drafts.length > 1 && (\r\n              <p>\r\n                <MenuConfirm\r\n                  confirmLabel={<span>Delete all drafts?</span>}\r\n                  menuItemClassName=\"danger\"\r\n                  disabled={uiState === 'loading'}\r\n                  onClick={() => {\r\n                    (async () => {\r\n                      // const yes = confirm('Delete all drafts?');\r\n                      // if (yes) {\r\n                      setUIState('loading');\r\n                      try {\r\n                        await db.drafts.delMany(\r\n                          drafts.map((draft) => draft.key),\r\n                        );\r\n                        setUIState('default');\r\n                        reload();\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        alert('Error deleting drafts! Please try again.');\r\n                        setUIState('error');\r\n                      }\r\n                      // }\r\n                    })();\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"light danger\"\r\n                    disabled={uiState === 'loading'}\r\n                  >\r\n                    Delete all&hellip;\r\n                  </button>\r\n                </MenuConfirm>\r\n              </p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <p>No drafts found.</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MiniDraft({ draft }) {\r\n  const { draftStatus, replyTo } = draft;\r\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\r\n  const hasPoll = poll?.options?.length > 0;\r\n  const hasMedia = mediaAttachments?.length > 0;\r\n  const hasPollOrMedia = hasPoll || hasMedia;\r\n  const firstImageMedia = useMemo(() => {\r\n    if (!hasMedia) return;\r\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\r\n    if (!image) return;\r\n    const { file } = image;\r\n    const objectURL = URL.createObjectURL(file);\r\n    return objectURL;\r\n  }, [hasMedia, mediaAttachments]);\r\n  return (\r\n    <>\r\n      <div class=\"mini-draft\">\r\n        {hasPollOrMedia && (\r\n          <div\r\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\r\n            style={\r\n              firstImageMedia\r\n                ? {\r\n                    '--bg-image': `url(${firstImageMedia})`,\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {hasPoll && <Icon icon=\"poll\" />}\r\n            {hasMedia && (\r\n              <span>\r\n                <Icon icon=\"attachment\" />{' '}\r\n                <small>{mediaAttachments?.length}</small>\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div class=\"mini-draft-main\">\r\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\r\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Drafts;\r\n","import './generic-accounts.css';\r\n\r\nimport { useEffect, useState } from 'preact/hooks';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport states from '../utils/states';\r\n\r\nimport AccountBlock from './account-block';\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\n\r\nexport default function GenericAccounts({ onClose = () => {} }) {\r\n  const snapStates = useSnapshot(states);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  if (!snapStates.showGenericAccounts) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    id,\r\n    heading,\r\n    fetchAccounts,\r\n    accounts: staticAccounts,\r\n    showReactions,\r\n  } = snapStates.showGenericAccounts;\r\n\r\n  const loadAccounts = (firstLoad) => {\r\n    if (!fetchAccounts) return;\r\n    if (firstLoad) setAccounts([]);\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const { done, value } = await fetchAccounts(firstLoad);\r\n        if (Array.isArray(value)) {\r\n          if (firstLoad) {\r\n            setAccounts(value);\r\n          } else {\r\n            setAccounts((prev) => [...prev, ...value]);\r\n          }\r\n          setShowMore(!done);\r\n        } else {\r\n          setShowMore(false);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (staticAccounts?.length > 0) {\r\n      setAccounts(staticAccounts);\r\n    } else {\r\n      loadAccounts(true);\r\n    }\r\n  }, [staticAccounts, fetchAccounts]);\r\n\r\n  useEffect(() => {\r\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\r\n    // We only need to reload if the id matches\r\n    if (snapStates.reloadGenericAccounts?.id === id) {\r\n      loadAccounts(true);\r\n    }\r\n  }, [snapStates.reloadGenericAccounts.counter]);\r\n\r\n  return (\r\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\r\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n        <Icon icon=\"x\" />\r\n      </button>\r\n      <header>\r\n        <h2>{heading || 'Accounts'}</h2>\r\n      </header>\r\n      <main>\r\n        {accounts.length > 0 ? (\r\n          <>\r\n            <ul class=\"accounts-list\">\r\n              {accounts.map((account) => (\r\n                <li key={account.id + (account._types || '')}>\r\n                  {showReactions && account._types?.length > 0 && (\r\n                    <div class=\"reactions-block\">\r\n                      {account._types.map((type) => (\r\n                        <Icon\r\n                          icon={\r\n                            {\r\n                              reblog: 'rocket',\r\n                              favourite: 'heart',\r\n                            }[type]\r\n                          }\r\n                          class={`${type}-icon`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  <AccountBlock account={account} />\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            {uiState === 'default' ? (\r\n              showMore ? (\r\n                <InView\r\n                  onChange={(inView) => {\r\n                    if (inView) {\r\n                      loadAccounts();\r\n                    }\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain block\"\r\n                    onClick={() => loadAccounts()}\r\n                  >\r\n                    Show more&hellip;\r\n                  </button>\r\n                </InView>\r\n              ) : (\r\n                <p class=\"ui-state insignificant\">The end.</p>\r\n              )\r\n            ) : (\r\n              uiState === 'loading' && (\r\n                <p class=\"ui-state\">\r\n                  <Loader abrupt />\r\n                </p>\r\n              )\r\n            )}\r\n          </>\r\n        ) : uiState === 'loading' ? (\r\n          <p class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </p>\r\n        ) : uiState === 'error' ? (\r\n          <p class=\"ui-state\">Error loading accounts</p>\r\n        ) : (\r\n          <p class=\"ui-state insignificant\">Nothing to show</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport localeMatch from '../utils/locale-match';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport TranslationBlock from './translation-block';\r\n\r\nexport default function MediaAltModal({ alt, lang, onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const [forceTranslate, setForceTranslate] = useState(false);\r\n  const targetLanguage = getTranslateTargetLanguage(true);\r\n  const contentTranslationHideLanguages =\r\n    snapStates.settings.contentTranslationHideLanguages || [];\r\n  const differentLanguage =\r\n    !!lang &&\r\n    lang !== targetLanguage &&\r\n    !localeMatch([lang], [targetLanguage]) &&\r\n    !contentTranslationHideLanguages.find(\r\n      (l) => lang === l || localeMatch([lang], [l]),\r\n    );\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header class=\"header-grid\">\r\n        <h2>Media description</h2>\r\n        <div class=\"header-side\">\r\n          <Menu\r\n            align=\"end\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"plain4\">\r\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuItem\r\n              disabled={forceTranslate}\r\n              onClick={() => {\r\n                setForceTranslate(true);\r\n              }}\r\n            >\r\n              <Icon icon=\"translate\" />\r\n              <span>Translate</span>\r\n            </MenuItem>\r\n          </Menu>\r\n        </div>\r\n      </header>\r\n      <main lang={lang} dir=\"auto\">\r\n        <p\r\n          style={{\r\n            whiteSpace: 'pre-wrap',\r\n          }}\r\n        >\r\n          {alt}\r\n        </p>\r\n        {(differentLanguage || forceTranslate) && (\r\n          <TranslationBlock\r\n            forceTranslate={forceTranslate}\r\n            sourceLanguage={lang}\r\n            text={alt}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import { Menu } from '@szhsin/react-menu';\r\nimport { getBlurHashAverageColor } from 'fast-blurhash';\r\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Media from './media';\r\nimport MediaAltModal from './media-alt-modal';\r\nimport MenuLink from './menu-link';\r\nimport Modal from './modal';\r\n\r\nfunction MediaModal({\r\n  mediaAttachments,\r\n  statusID,\r\n  instance,\r\n  lang,\r\n  index = 0,\r\n  onClose = () => {},\r\n}) {\r\n  const carouselRef = useRef(null);\r\n\r\n  const [currentIndex, setCurrentIndex] = useState(index);\r\n  const carouselFocusItem = useRef(null);\r\n  useLayoutEffect(() => {\r\n    carouselFocusItem.current?.scrollIntoView();\r\n\r\n    // history.pushState({ mediaModal: true }, '');\r\n    // const handlePopState = (e) => {\r\n    //   if (e.state?.mediaModal) {\r\n    //     onClose();\r\n    //   }\r\n    // };\r\n    // window.addEventListener('popstate', handlePopState);\r\n    // return () => {\r\n    //   window.removeEventListener('popstate', handlePopState);\r\n    // };\r\n  }, []);\r\n  const prevStatusID = useRef(statusID);\r\n  useEffect(() => {\r\n    const scrollLeft = index * carouselRef.current.clientWidth;\r\n    const differentStatusID = prevStatusID.current !== statusID;\r\n    if (differentStatusID) prevStatusID.current = statusID;\r\n    carouselRef.current.scrollTo({\r\n      left: scrollLeft,\r\n      behavior: differentStatusID ? 'auto' : 'smooth',\r\n    });\r\n    carouselRef.current.focus();\r\n  }, [index, statusID]);\r\n\r\n  const [showControls, setShowControls] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let handleSwipe = () => {\r\n      onClose();\r\n    };\r\n    if (carouselRef.current) {\r\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\r\n    }\r\n    return () => {\r\n      if (carouselRef.current) {\r\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useHotkeys('esc', onClose, [onClose]);\r\n\r\n  const [showMediaAlt, setShowMediaAlt] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let handleScroll = () => {\r\n      const { clientWidth, scrollLeft } = carouselRef.current;\r\n      const index = Math.round(scrollLeft / clientWidth);\r\n      setCurrentIndex(index);\r\n    };\r\n    if (carouselRef.current) {\r\n      carouselRef.current.addEventListener('scroll', handleScroll, {\r\n        passive: true,\r\n      });\r\n    }\r\n    return () => {\r\n      if (carouselRef.current) {\r\n        carouselRef.current.removeEventListener('scroll', handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => {\r\n      carouselRef.current?.focus?.();\r\n    }, 100);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div class=\"media-modal-container\">\r\n      <div\r\n        ref={carouselRef}\r\n        tabIndex=\"0\"\r\n        data-swipe-threshold=\"44\"\r\n        class=\"carousel\"\r\n        onClick={(e) => {\r\n          if (\r\n            e.target.classList.contains('carousel-item') ||\r\n            e.target.classList.contains('media') ||\r\n            e.target.classList.contains('media-zoom')\r\n          ) {\r\n            onClose();\r\n          }\r\n        }}\r\n      >\r\n        {mediaAttachments?.map((media, i) => {\r\n          const { blurhash } = media;\r\n          const rgbAverageColor = blurhash\r\n            ? getBlurHashAverageColor(blurhash)\r\n            : null;\r\n          return (\r\n            <div\r\n              class=\"carousel-item\"\r\n              style={{\r\n                '--average-color': `rgb(${rgbAverageColor?.join(',')})`,\r\n                '--average-color-alpha': `rgba(${rgbAverageColor?.join(\r\n                  ',',\r\n                )}, .5)`,\r\n              }}\r\n              tabindex=\"0\"\r\n              key={media.id}\r\n              ref={i === currentIndex ? carouselFocusItem : null}\r\n              onClick={(e) => {\r\n                if (e.target !== e.currentTarget) {\r\n                  setShowControls(!showControls);\r\n                }\r\n              }}\r\n            >\r\n              {!!media.description && (\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"media-alt\"\r\n                  hidden={!showControls}\r\n                  onClick={() => {\r\n                    setShowMediaAlt({\r\n                      alt: media.description,\r\n                      lang,\r\n                    });\r\n                  }}\r\n                >\r\n                  <span class=\"alt-badge\">ALT</span>\r\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\r\n                    {media.description}\r\n                  </span>\r\n                </button>\r\n              )}\r\n              <Media media={media} showOriginal lang={lang} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\r\n        <span>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            onClick={() => onClose()}\r\n          >\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n        </span>\r\n        {mediaAttachments?.length > 1 ? (\r\n          <span class=\"carousel-dots\">\r\n            {mediaAttachments?.map((media, i) => (\r\n              <button\r\n                key={media.id}\r\n                type=\"button\"\r\n                disabled={i === currentIndex}\r\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  carouselRef.current.scrollTo({\r\n                    left: carouselRef.current.clientWidth * i,\r\n                    behavior: 'smooth',\r\n                  });\r\n                  carouselRef.current.focus();\r\n                }}\r\n              >\r\n                <Icon icon=\"round\" size=\"s\" />\r\n              </button>\r\n            ))}\r\n          </span>\r\n        ) : (\r\n          <span />\r\n        )}\r\n        <span>\r\n          <Menu\r\n            overflow=\"auto\"\r\n            align=\"end\"\r\n            position=\"anchor\"\r\n            boundingBoxPadding=\"8 8 8 8\"\r\n            gap={4}\r\n            menuClassName=\"glass-menu\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"carousel-button\">\r\n                <Icon icon=\"more\" alt=\"More\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuLink\r\n              href={\r\n                mediaAttachments[currentIndex]?.remoteUrl ||\r\n                mediaAttachments[currentIndex]?.url\r\n              }\r\n              class=\"carousel-button\"\r\n              target=\"_blank\"\r\n              title=\"Open original media in new window\"\r\n            >\r\n              <Icon icon=\"popout\" />\r\n              <span>Open original media</span>\r\n            </MenuLink>\r\n          </Menu>{' '}\r\n          <Link\r\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\r\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\r\n                ? `?media=${currentIndex + 1}`\r\n                : ''\r\n            }`}\r\n            class=\"button carousel-button media-post-link\"\r\n            // onClick={() => {\r\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\r\n            //   if (\r\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\r\n            //   ) {\r\n            //     onClose();\r\n            //   }\r\n            // }}\r\n          >\r\n            <span class=\"button-label\">See post </span>&raquo;\r\n          </Link>\r\n        </span>\r\n      </div>\r\n      {mediaAttachments?.length > 1 && (\r\n        <div class=\"carousel-controls\" hidden={!showControls}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            hidden={currentIndex === 0}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              carouselRef.current.focus();\r\n              carouselRef.current.scrollTo({\r\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"arrow-left\" />\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            hidden={currentIndex === mediaAttachments.length - 1}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              carouselRef.current.focus();\r\n              carouselRef.current.scrollTo({\r\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"arrow-right\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n      {!!showMediaAlt && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowMediaAlt(false);\r\n              carouselRef.current.focus();\r\n            }\r\n          }}\r\n        >\r\n          <MediaAltModal\r\n            alt={showMediaAlt.alt || showMediaAlt}\r\n            lang={showMediaAlt?.lang}\r\n            onClose={() => setShowMediaAlt(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MediaModal;\r\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\r\n\r\nfunction AsyncText({ children }) {\r\n  if (typeof children === 'string') return children;\r\n  const [text, setText] = useState('');\r\n  useEffect(() => {\r\n    Promise.resolve(children).then(setText);\r\n  }, [children]);\r\n  return text;\r\n}\r\n\r\nexport default AsyncText;\r\n","import './shortcuts-settings.css';\r\n\r\nimport {\r\n  compressToEncodedURIComponent,\r\n  decompressFromEncodedURIComponent,\r\n} from 'lz-string';\r\nimport mem from 'mem';\r\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport floatingButtonUrl from '../assets/floating-button.svg';\r\nimport multiColumnUrl from '../assets/multi-column.svg';\r\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\r\n\r\nimport { api } from '../utils/api';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\n\r\nimport AsyncText from './AsyncText';\r\nimport Icon from './icon';\r\nimport MenuConfirm from './menu-confirm';\r\nimport Modal from './modal';\r\n\r\nconst SHORTCUTS_LIMIT = 9;\r\n\r\nconst TYPES = [\r\n  'following',\r\n  'mentions',\r\n  'notifications',\r\n  'list',\r\n  'public',\r\n  'trending',\r\n  // NOTE: Hide for now\r\n  // 'search', // Search on Mastodon ain't great\r\n  // 'account-statuses', // Need @acct search first\r\n  'hashtag',\r\n  'bookmarks',\r\n  'favourites',\r\n];\r\nconst TYPE_TEXT = {\r\n  following: 'Home / Following',\r\n  notifications: 'Notifications',\r\n  list: 'List',\r\n  public: 'Public (Local / Federated)',\r\n  search: 'Search',\r\n  'account-statuses': 'Account',\r\n  bookmarks: 'Bookmarks',\r\n  favourites: 'Favourites',\r\n  hashtag: 'Hashtag',\r\n  trending: 'Trending',\r\n  mentions: 'Mentions',\r\n};\r\nconst TYPE_PARAMS = {\r\n  list: [\r\n    {\r\n      text: 'List ID',\r\n      name: 'id',\r\n    },\r\n  ],\r\n  public: [\r\n    {\r\n      text: 'Local only',\r\n      name: 'local',\r\n      type: 'checkbox',\r\n    },\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n  trending: [\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n  search: [\r\n    {\r\n      text: 'Search term',\r\n      name: 'query',\r\n      type: 'text',\r\n    },\r\n  ],\r\n  'account-statuses': [\r\n    {\r\n      text: '@',\r\n      name: 'id',\r\n      type: 'text',\r\n      placeholder: 'cheeaun@mastodon.social',\r\n    },\r\n  ],\r\n  hashtag: [\r\n    {\r\n      text: '#',\r\n      name: 'hashtag',\r\n      type: 'text',\r\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\r\n      pattern: '[^#]+',\r\n    },\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n};\r\nexport const SHORTCUTS_META = {\r\n  following: {\r\n    id: 'home',\r\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\r\n    path: '/',\r\n    icon: 'home',\r\n  },\r\n  mentions: {\r\n    id: 'mentions',\r\n    title: 'Mentions',\r\n    path: '/mentions',\r\n    icon: 'at',\r\n  },\r\n  notifications: {\r\n    id: 'notifications',\r\n    title: 'Notifications',\r\n    path: '/notifications',\r\n    icon: 'notification',\r\n  },\r\n  list: {\r\n    id: 'list',\r\n    title: mem(\r\n      async ({ id }) => {\r\n        const list = await api().masto.v1.lists.fetch(id);\r\n        return list.title;\r\n      },\r\n      {\r\n        cacheKey: ([{ id }]) => id,\r\n      },\r\n    ),\r\n    path: ({ id }) => `/l/${id}`,\r\n    icon: 'list',\r\n  },\r\n  public: {\r\n    id: 'public',\r\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\r\n    icon: ({ local }) => (local ? 'group' : 'earth'),\r\n  },\r\n  trending: {\r\n    id: 'trending',\r\n    title: 'Trending',\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ instance }) => `/${instance}/trending`,\r\n    icon: 'chart',\r\n  },\r\n  search: {\r\n    id: 'search',\r\n    title: ({ query }) => query,\r\n    path: ({ query }) => `/search?q=${query}`,\r\n    icon: 'search',\r\n  },\r\n  'account-statuses': {\r\n    id: 'account-statuses',\r\n    title: mem(\r\n      async ({ id }) => {\r\n        const account = await api().masto.v1.accounts.fetch(id);\r\n        return account.username || account.acct || account.displayName;\r\n      },\r\n      {\r\n        cacheKey: ([{ id }]) => id,\r\n      },\r\n    ),\r\n    path: ({ id }) => `/a/${id}`,\r\n    icon: 'user',\r\n  },\r\n  bookmarks: {\r\n    id: 'bookmarks',\r\n    title: 'Bookmarks',\r\n    path: '/b',\r\n    icon: 'bookmark',\r\n  },\r\n  favourites: {\r\n    id: 'favourites',\r\n    title: 'Favourites',\r\n    path: '/f',\r\n    icon: 'heart',\r\n  },\r\n  hashtag: {\r\n    id: 'hashtag',\r\n    title: ({ hashtag }) => hashtag,\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ hashtag, instance }) =>\r\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}`,\r\n    icon: 'hashtag',\r\n  },\r\n};\r\n\r\nfunction ShortcutsSettings({ onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const { masto } = api();\r\n  const { shortcuts } = snapStates;\r\n\r\n  const [lists, setLists] = useState([]);\r\n  const [followedHashtags, setFollowedHashtags] = useState([]);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showImportExport, setShowImportExport] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const lists = await masto.v1.lists.list();\r\n        setLists(lists);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n\r\n    (async () => {\r\n      try {\r\n        const iterator = masto.v1.followedTags.list();\r\n        const tags = [];\r\n        do {\r\n          const { value, done } = await iterator.next();\r\n          if (done || value?.length === 0) break;\r\n          tags.push(...value);\r\n        } while (true);\r\n        setFollowedHashtags(tags);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\r\n          <sup\r\n            style={{\r\n              fontSize: 12,\r\n              opacity: 0.5,\r\n              textTransform: 'uppercase',\r\n            }}\r\n          >\r\n            beta\r\n          </sup>\r\n        </h2>\r\n      </header>\r\n      <main>\r\n        <p>\r\n          Specify a list of shortcuts that'll appear&nbsp;as:\r\n          <div class=\"shortcuts-view-mode\">\r\n            {[\r\n              {\r\n                value: 'float-button',\r\n                label: 'Floating button',\r\n                imgURL: floatingButtonUrl,\r\n              },\r\n              {\r\n                value: 'tab-menu-bar',\r\n                label: 'Tab/Menu bar',\r\n                imgURL: tabMenuBarUrl,\r\n              },\r\n              {\r\n                value: 'multi-column',\r\n                label: 'Multi-column',\r\n                imgURL: multiColumnUrl,\r\n              },\r\n            ].map(({ value, label, imgURL }) => (\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"shortcuts-view-mode\"\r\n                  value={value}\r\n                  checked={\r\n                    snapStates.settings.shortcutsViewMode === value ||\r\n                    (value === 'float-button' &&\r\n                      !snapStates.settings.shortcutsViewMode)\r\n                  }\r\n                  onChange={(e) => {\r\n                    states.settings.shortcutsViewMode = e.target.value;\r\n                  }}\r\n                />{' '}\r\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\r\n                <span>{label}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n          {/* <select\r\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\r\n              onChange={(e) => {\r\n                states.settings.shortcutsViewMode = e.target.value;\r\n              }}\r\n            >\r\n              <option value=\"float-button\">Floating button</option>\r\n              <option value=\"multi-column\">Multi-column</option>\r\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\r\n            </select> */}\r\n        </p>\r\n        {/* <p>\r\n          <details>\r\n            <summary class=\"insignificant\">\r\n              Experimental Multi-column mode\r\n            </summary>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={snapStates.settings.shortcutsColumnsMode}\r\n                onChange={(e) => {\r\n                  states.settings.shortcutsColumnsMode = e.target.checked;\r\n                }}\r\n              />{' '}\r\n              Show shortcuts in multiple columns instead of the floating button.\r\n            </label>\r\n          </details>\r\n        </p> */}\r\n        {shortcuts.length > 0 ? (\r\n          <ol class=\"shortcuts-list\">\r\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\r\n              const key = i + Object.values(shortcut);\r\n              const { type } = shortcut;\r\n              if (!SHORTCUTS_META[type]) return null;\r\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\r\n              if (typeof title === 'function') {\r\n                title = title(shortcut, i);\r\n              }\r\n              if (typeof subtitle === 'function') {\r\n                subtitle = subtitle(shortcut, i);\r\n              }\r\n              if (typeof icon === 'function') {\r\n                icon = icon(shortcut, i);\r\n              }\r\n              return (\r\n                <li key={key}>\r\n                  <Icon icon={icon} />\r\n                  <span class=\"shortcut-text\">\r\n                    <AsyncText>{title}</AsyncText>\r\n                    {subtitle && (\r\n                      <>\r\n                        {' '}\r\n                        <small class=\"ib insignificant\">{subtitle}</small>\r\n                      </>\r\n                    )}\r\n                  </span>\r\n                  <span class=\"shortcut-actions\">\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      disabled={i === 0}\r\n                      onClick={() => {\r\n                        const shortcutsArr = Array.from(states.shortcuts);\r\n                        if (i > 0) {\r\n                          const temp = states.shortcuts[i - 1];\r\n                          shortcutsArr[i - 1] = shortcut;\r\n                          shortcutsArr[i] = temp;\r\n                          states.shortcuts = shortcutsArr;\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      disabled={i === shortcuts.length - 1}\r\n                      onClick={() => {\r\n                        const shortcutsArr = Array.from(states.shortcuts);\r\n                        if (i < states.shortcuts.length - 1) {\r\n                          const temp = states.shortcuts[i + 1];\r\n                          shortcutsArr[i + 1] = shortcut;\r\n                          shortcutsArr[i] = temp;\r\n                          states.shortcuts = shortcutsArr;\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      onClick={() => {\r\n                        setShowForm({\r\n                          shortcut,\r\n                          shortcutIndex: i,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\r\n                    </button>\r\n                    {/* <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      onClick={() => {\r\n                        states.shortcuts.splice(i, 1);\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"x\" alt=\"Remove\" />\r\n                    </button> */}\r\n                  </span>\r\n                </li>\r\n              );\r\n            })}\r\n          </ol>\r\n        ) : (\r\n          <div class=\"ui-state insignificant\">\r\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\r\n            <p>\r\n              Not sure what to add?\r\n              <br />\r\n              Try adding{' '}\r\n              <a\r\n                href=\"#\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.shortcuts = [\r\n                    {\r\n                      type: 'following',\r\n                    },\r\n                    {\r\n                      type: 'notifications',\r\n                    },\r\n                  ];\r\n                }}\r\n              >\r\n                Home / Following and Notifications\r\n              </a>{' '}\r\n              first.\r\n            </p>\r\n          </div>\r\n        )}\r\n        <p class=\"insignificant\">\r\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\r\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\r\n        </p>\r\n        <p\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"light\"\r\n            onClick={() => setShowImportExport(true)}\r\n          >\r\n            Import/export\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\r\n            onClick={() => setShowForm(true)}\r\n          >\r\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\r\n          </button>\r\n        </p>\r\n      </main>\r\n      {showForm && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowForm(false);\r\n            }\r\n          }}\r\n        >\r\n          <ShortcutForm\r\n            shortcut={showForm.shortcut}\r\n            shortcutIndex={showForm.shortcutIndex}\r\n            lists={lists}\r\n            followedHashtags={followedHashtags}\r\n            onSubmit={({ result, mode }) => {\r\n              console.log('onSubmit', result);\r\n              if (mode === 'edit') {\r\n                states.shortcuts[showForm.shortcutIndex] = result;\r\n              } else {\r\n                states.shortcuts.push(result);\r\n              }\r\n            }}\r\n            onClose={() => setShowForm(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {showImportExport && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowImportExport(false);\r\n            }\r\n          }}\r\n        >\r\n          <ImportExport\r\n            shortcuts={shortcuts}\r\n            onClose={() => setShowImportExport(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShortcutForm({\r\n  lists,\r\n  followedHashtags,\r\n  onSubmit,\r\n  disabled,\r\n  shortcut,\r\n  shortcutIndex,\r\n  onClose,\r\n}) {\r\n  console.log('shortcut', shortcut);\r\n  const editMode = !!shortcut;\r\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\r\n\r\n  const formRef = useRef();\r\n  useEffect(() => {\r\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\r\n      // Populate form\r\n      const form = formRef.current;\r\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\r\n        const input = form.querySelector(`[name=\"${name}\"]`);\r\n        if (input && shortcut[name]) {\r\n          if (type === 'checkbox') {\r\n            input.checked = shortcut[name] === 'on' ? true : false;\r\n          } else {\r\n            input.value = shortcut[name];\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [editMode, currentType]);\r\n\r\n  return (\r\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\r\n      </header>\r\n      <main tabindex=\"-1\">\r\n        <form\r\n          ref={formRef}\r\n          onSubmit={(e) => {\r\n            // Construct a nice object from form\r\n            e.preventDefault();\r\n            const data = new FormData(e.target);\r\n            const result = {};\r\n            data.forEach((value, key) => {\r\n              result[key] = value?.trim();\r\n              if (key === 'instance') {\r\n                // Remove protocol and trailing slash\r\n                result[key] = result[key]\r\n                  .replace(/^https?:\\/\\//, '')\r\n                  .replace(/\\/+$/, '');\r\n                // Remove @acct@ or acct@ from instance URL\r\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\r\n              }\r\n            });\r\n            console.log('result', result);\r\n            if (!result.type) return;\r\n            onSubmit({\r\n              result,\r\n              mode: editMode ? 'edit' : 'add',\r\n            });\r\n            // Reset\r\n            e.target.reset();\r\n            setCurrentType(null);\r\n            onClose?.();\r\n          }}\r\n        >\r\n          <p>\r\n            <label>\r\n              <span>Timeline</span>\r\n              <select\r\n                required\r\n                disabled={disabled}\r\n                onChange={(e) => {\r\n                  setCurrentType(e.target.value);\r\n                }}\r\n                defaultValue={editMode ? shortcut.type : undefined}\r\n                name=\"type\"\r\n              >\r\n                <option></option>\r\n                {TYPES.map((type) => (\r\n                  <option value={type}>{TYPE_TEXT[type]}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n          </p>\r\n          {TYPE_PARAMS[currentType]?.map?.(\r\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\r\n              if (currentType === 'list') {\r\n                return (\r\n                  <p>\r\n                    <label>\r\n                      <span>List</span>\r\n                      <select\r\n                        name=\"id\"\r\n                        required={!notRequired}\r\n                        disabled={disabled}\r\n                      >\r\n                        {lists.map((list) => (\r\n                          <option value={list.id}>{list.title}</option>\r\n                        ))}\r\n                      </select>\r\n                    </label>\r\n                  </p>\r\n                );\r\n              }\r\n\r\n              return (\r\n                <p>\r\n                  <label>\r\n                    <span>{text}</span>{' '}\r\n                    <input\r\n                      type={type}\r\n                      name={name}\r\n                      placeholder={placeholder}\r\n                      required={type === 'text' && !notRequired}\r\n                      disabled={disabled}\r\n                      list={\r\n                        currentType === 'hashtag'\r\n                          ? 'followed-hashtags-datalist'\r\n                          : null\r\n                      }\r\n                      autocorrect=\"off\"\r\n                      autocapitalize=\"off\"\r\n                      spellcheck={false}\r\n                      pattern={pattern}\r\n                    />\r\n                    {currentType === 'hashtag' &&\r\n                      followedHashtags.length > 0 && (\r\n                        <datalist id=\"followed-hashtags-datalist\">\r\n                          {followedHashtags.map((tag) => (\r\n                            <option value={tag.name} />\r\n                          ))}\r\n                        </datalist>\r\n                      )}\r\n                  </label>\r\n                </p>\r\n              );\r\n            },\r\n          )}\r\n          <footer>\r\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\r\n              {editMode ? 'Save' : 'Add'}\r\n            </button>\r\n            {editMode && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"light danger\"\r\n                onClick={() => {\r\n                  states.shortcuts.splice(shortcutIndex, 1);\r\n                  onClose?.();\r\n                }}\r\n              >\r\n                Remove\r\n              </button>\r\n            )}\r\n          </footer>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ImportExport({ shortcuts, onClose }) {\r\n  const shortcutsStr = useMemo(() => {\r\n    if (!shortcuts) return '';\r\n    if (!shortcuts.filter(Boolean).length) return '';\r\n    return compressToEncodedURIComponent(\r\n      JSON.stringify(shortcuts.filter(Boolean)),\r\n    );\r\n  }, [shortcuts]);\r\n  const [importShortcutStr, setImportShortcutStr] = useState('');\r\n  const [importUIState, setImportUIState] = useState('default');\r\n  const parsedImportShortcutStr = useMemo(() => {\r\n    if (!importShortcutStr) {\r\n      setImportUIState('default');\r\n      return null;\r\n    }\r\n    try {\r\n      const parsed = JSON.parse(\r\n        decompressFromEncodedURIComponent(importShortcutStr),\r\n      );\r\n      // Very basic validation, I know\r\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\r\n      setImportUIState('default');\r\n      return parsed;\r\n    } catch (err) {\r\n      // Fallback to JSON string parsing\r\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\r\n      try {\r\n        const parsed = JSON.parse(importShortcutStr);\r\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\r\n        setImportUIState('default');\r\n        return parsed;\r\n      } catch (err) {\r\n        setImportUIState('error');\r\n        return null;\r\n      }\r\n    }\r\n  }, [importShortcutStr]);\r\n  const hasCurrentSettings = states.shortcuts.length > 0;\r\n\r\n  return (\r\n    <div id=\"import-export-container\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\r\n        </h2>\r\n      </header>\r\n      <main tabindex=\"-1\">\r\n        <section>\r\n          <h3>\r\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\r\n            <span>Import</span>\r\n          </h3>\r\n          <p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"import\"\r\n              placeholder=\"Paste shortcuts here\"\r\n              class=\"block\"\r\n              onInput={(e) => {\r\n                setImportShortcutStr(e.target.value);\r\n              }}\r\n            />\r\n          </p>\r\n          {!!parsedImportShortcutStr &&\r\n            Array.isArray(parsedImportShortcutStr) && (\r\n              <>\r\n                <p>\r\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\r\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\r\n                  <small class=\"insignificant\">\r\n                    ({importShortcutStr.length} characters)\r\n                  </small>\r\n                </p>\r\n                <ol class=\"import-settings-list\">\r\n                  {parsedImportShortcutStr.map((shortcut) => (\r\n                    <li>\r\n                      <span\r\n                        style={{\r\n                          opacity: shortcuts.some((s) =>\r\n                            // Compare all properties\r\n                            Object.keys(s).every(\r\n                              (key) => s[key] === shortcut[key],\r\n                            ),\r\n                          )\r\n                            ? 1\r\n                            : 0,\r\n                        }}\r\n                      >\r\n                        *\r\n                      </span>\r\n                      <span>\r\n                        {TYPE_TEXT[shortcut.type]}\r\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\r\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\r\n                          ({ text, name, type }) =>\r\n                            shortcut[name] ? (\r\n                              <>\r\n                                <span class=\"tag collapsed insignificant\">\r\n                                  {text}:{' '}\r\n                                  {type === 'checkbox'\r\n                                    ? shortcut[name] === 'on'\r\n                                      ? '✅'\r\n                                      : '❌'\r\n                                    : shortcut[name]}\r\n                                </span>{' '}\r\n                              </>\r\n                            ) : null,\r\n                        )}\r\n                      </span>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n                <p>\r\n                  <small>* Exists in current shortcuts</small>\r\n                  <br />\r\n                  <small>\r\n                    ⚠️ List may not work if it's from a different account.\r\n                  </small>\r\n                </p>\r\n              </>\r\n            )}\r\n          {importUIState === 'error' && (\r\n            <p class=\"error\">\r\n              <small>⚠️ Invalid settings format</small>\r\n            </p>\r\n          )}\r\n          <p>\r\n            {hasCurrentSettings && (\r\n              <>\r\n                <MenuConfirm\r\n                  confirmLabel=\"Append to current shortcuts?\"\r\n                  menuFooter={\r\n                    <div class=\"footer\">\r\n                      Only shortcuts that don’t exist in current shortcuts will\r\n                      be appended.\r\n                    </div>\r\n                  }\r\n                  onClick={() => {\r\n                    // states.shortcuts = [\r\n                    //   ...states.shortcuts,\r\n                    //   ...parsedImportShortcutStr,\r\n                    // ];\r\n                    // Append non-unique shortcuts only\r\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\r\n                      (shortcut) =>\r\n                        !states.shortcuts.some((s) =>\r\n                          // Compare all properties\r\n                          Object.keys(s).every(\r\n                            (key) => s[key] === shortcut[key],\r\n                          ),\r\n                        ),\r\n                    );\r\n                    if (!nonUniqueShortcuts.length) {\r\n                      showToast('No new shortcuts to import');\r\n                      return;\r\n                    }\r\n                    let newShortcuts = [\r\n                      ...states.shortcuts,\r\n                      ...nonUniqueShortcuts,\r\n                    ];\r\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\r\n                    if (exceededLimit) {\r\n                      // If exceeded, trim it\r\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\r\n                    }\r\n                    states.shortcuts = newShortcuts;\r\n                    showToast(\r\n                      exceededLimit\r\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\r\n                        : 'Shortcuts imported',\r\n                    );\r\n                    onClose?.();\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain2\"\r\n                    disabled={!parsedImportShortcutStr}\r\n                  >\r\n                    Import & append…\r\n                  </button>\r\n                </MenuConfirm>{' '}\r\n              </>\r\n            )}\r\n            <MenuConfirm\r\n              confirmLabel={\r\n                hasCurrentSettings\r\n                  ? 'Override current shortcuts?'\r\n                  : 'Import shortcuts?'\r\n              }\r\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\r\n              onClick={() => {\r\n                states.shortcuts = parsedImportShortcutStr;\r\n                showToast('Shortcuts imported');\r\n                onClose?.();\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain2\"\r\n                disabled={!parsedImportShortcutStr}\r\n              >\r\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\r\n              </button>\r\n            </MenuConfirm>\r\n          </p>\r\n        </section>\r\n        <section>\r\n          <h3>\r\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\r\n            <span>Export</span>\r\n          </h3>\r\n          <p>\r\n            <input\r\n              style={{ width: '100%' }}\r\n              type=\"text\"\r\n              value={shortcutsStr}\r\n              readOnly\r\n              onClick={(e) => {\r\n                if (!e.target.value) return;\r\n                e.target.select();\r\n                // Copy url to clipboard\r\n                try {\r\n                  navigator.clipboard.writeText(e.target.value);\r\n                  showToast('Shortcuts copied');\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  showToast('Unable to copy shortcuts');\r\n                }\r\n              }}\r\n            />\r\n          </p>\r\n          <p>\r\n            <button\r\n              type=\"button\"\r\n              class=\"plain2\"\r\n              disabled={!shortcutsStr}\r\n              onClick={() => {\r\n                try {\r\n                  navigator.clipboard.writeText(shortcutsStr);\r\n                  showToast('Shortcut settings copied');\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  showToast('Unable to copy shortcut settings');\r\n                }\r\n              }}\r\n            >\r\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\r\n            </button>{' '}\r\n            {navigator?.share &&\r\n              navigator?.canShare?.({\r\n                text: shortcutsStr,\r\n              }) && (\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"plain2\"\r\n                  disabled={!shortcutsStr}\r\n                  onClick={() => {\r\n                    try {\r\n                      navigator.share({\r\n                        text: shortcutsStr,\r\n                      });\r\n                    } catch (e) {\r\n                      console.error(e);\r\n                      alert(\"Sharing doesn't seem to work.\");\r\n                    }\r\n                  }}\r\n                >\r\n                  <Icon icon=\"share\" /> <span>Share</span>\r\n                </button>\r\n              )}{' '}\r\n            {shortcutsStr.length > 0 && (\r\n              <small class=\"insignificant\">\r\n                {shortcutsStr.length} characters\r\n              </small>\r\n            )}\r\n          </p>\r\n          {!!shortcutsStr && (\r\n            <details>\r\n              <summary class=\"insignificant\">\r\n                <small>Raw Shortcuts JSON</small>\r\n              </summary>\r\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\r\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\r\n              </textarea>\r\n            </details>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShortcutsSettings;\r\n","import { useLocation, useNavigate } from 'react-router-dom';\r\nimport { subscribe, useSnapshot } from 'valtio';\r\n\r\nimport Accounts from '../pages/accounts';\r\nimport Settings from '../pages/settings';\r\nimport focusDeck from '../utils/focus-deck';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\n\r\nimport AccountSheet from './account-sheet';\r\nimport Compose from './compose';\r\nimport Drafts from './drafts';\r\nimport GenericAccounts from './generic-accounts';\r\nimport MediaAltModal from './media-alt-modal';\r\nimport MediaModal from './media-modal';\r\nimport Modal from './modal';\r\nimport ShortcutsSettings from './shortcuts-settings';\r\n\r\nsubscribe(states, (changes) => {\r\n  for (const [action, path, value, prevValue] of changes) {\r\n    // When closing modal, focus on deck\r\n    if (/^show/i.test(path) && !value) {\r\n      focusDeck();\r\n    }\r\n  }\r\n});\r\n\r\nexport default function Modals() {\r\n  const snapStates = useSnapshot(states);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      {!!snapStates.showCompose && (\r\n        <Modal>\r\n          <Compose\r\n            replyToStatus={\r\n              typeof snapStates.showCompose !== 'boolean'\r\n                ? snapStates.showCompose.replyToStatus\r\n                : window.__COMPOSE__?.replyToStatus || null\r\n            }\r\n            editStatus={\r\n              states.showCompose?.editStatus ||\r\n              window.__COMPOSE__?.editStatus ||\r\n              null\r\n            }\r\n            draftStatus={\r\n              states.showCompose?.draftStatus ||\r\n              window.__COMPOSE__?.draftStatus ||\r\n              null\r\n            }\r\n            onClose={(results) => {\r\n              const { newStatus, instance, type } = results || {};\r\n              states.showCompose = false;\r\n              window.__COMPOSE__ = null;\r\n              if (newStatus) {\r\n                states.reloadStatusPage++;\r\n                showToast({\r\n                  text: {\r\n                    post: 'Post published. Check it out.',\r\n                    reply: 'Reply posted. Check it out.',\r\n                    edit: 'Post updated. Check it out.',\r\n                  }[type || 'post'],\r\n                  delay: 1000,\r\n                  duration: 10_000, // 10 seconds\r\n                  onClick: (toast) => {\r\n                    toast.hideToast();\r\n                    states.prevLocation = location;\r\n                    navigate(\r\n                      instance\r\n                        ? `/${instance}/s/${newStatus.id}`\r\n                        : `/s/${newStatus.id}`,\r\n                    );\r\n                  },\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showSettings && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showSettings = false;\r\n          }}\r\n        >\r\n          <Settings\r\n            onClose={() => {\r\n              states.showSettings = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showAccounts && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showAccounts = false;\r\n          }}\r\n        >\r\n          <Accounts\r\n            onClose={() => {\r\n              states.showAccounts = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showAccount && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showAccount = false;\r\n          }}\r\n        >\r\n          <AccountSheet\r\n            account={snapStates.showAccount?.account || snapStates.showAccount}\r\n            instance={snapStates.showAccount?.instance}\r\n            onClose={({ destination } = {}) => {\r\n              states.showAccount = false;\r\n              if (destination) {\r\n                states.showAccounts = false;\r\n              }\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showDrafts && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showDrafts = false;\r\n          }}\r\n        >\r\n          <Drafts onClose={() => (states.showDrafts = false)} />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showMediaModal && (\r\n        <Modal\r\n          onClick={(e) => {\r\n            if (\r\n              e.target === e.currentTarget ||\r\n              e.target.classList.contains('media')\r\n            ) {\r\n              states.showMediaModal = false;\r\n            }\r\n          }}\r\n        >\r\n          <MediaModal\r\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\r\n            instance={snapStates.showMediaModal.instance}\r\n            index={snapStates.showMediaModal.index}\r\n            statusID={snapStates.showMediaModal.statusID}\r\n            onClose={() => {\r\n              states.showMediaModal = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showShortcutsSettings && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showShortcutsSettings = false;\r\n          }}\r\n        >\r\n          <ShortcutsSettings\r\n            onClose={() => (states.showShortcutsSettings = false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showGenericAccounts && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showGenericAccounts = false;\r\n          }}\r\n        >\r\n          <GenericAccounts\r\n            onClose={() => (states.showGenericAccounts = false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showMediaAlt && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              states.showMediaAlt = false;\r\n            }\r\n          }}\r\n        >\r\n          <MediaAltModal\r\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\r\n            lang={snapStates.showMediaAlt?.lang}\r\n            onClose={() => {\r\n              states.showMediaAlt = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\n\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\n\r\nfunction FollowRequestButtons({ accountID, onChange }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [requestState, setRequestState] = useState(null); // accept, reject\r\n  const [relationship, setRelationship] = useState(null);\r\n\r\n  const hasRelationship = relationship !== null;\r\n\r\n  return (\r\n    <p class=\"follow-request-buttons\">\r\n      <button\r\n        type=\"button\"\r\n        disabled={uiState === 'loading'}\r\n        onClick={() => {\r\n          setUIState('loading');\r\n          setRequestState('accept');\r\n          (async () => {\r\n            try {\r\n              const rel = await masto.v1.followRequests.authorize(accountID);\r\n              if (!rel?.followedBy) {\r\n                throw new Error('Follow request not accepted');\r\n              }\r\n              setRelationship(rel);\r\n              onChange();\r\n            } catch (e) {\r\n              console.error(e);\r\n            }\r\n            setUIState('default');\r\n          })();\r\n        }}\r\n      >\r\n        Accept\r\n      </button>{' '}\r\n      <button\r\n        type=\"button\"\r\n        disabled={uiState === 'loading'}\r\n        class=\"light danger\"\r\n        onClick={() => {\r\n          setUIState('loading');\r\n          setRequestState('reject');\r\n          (async () => {\r\n            try {\r\n              const rel = await masto.v1.followRequests.reject(accountID);\r\n              if (rel?.followedBy) {\r\n                throw new Error('Follow request not rejected');\r\n              }\r\n              setRelationship(rel);\r\n              onChange();\r\n            } catch (e) {\r\n              console.error(e);\r\n              setUIState('default');\r\n            }\r\n          })();\r\n        }}\r\n      >\r\n        Reject\r\n      </button>\r\n      <span class=\"follow-request-states\">\r\n        {hasRelationship && requestState ? (\r\n          requestState === 'accept' ? (\r\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\r\n          ) : (\r\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\r\n          )\r\n        ) : (\r\n          <Loader hidden={uiState !== 'loading'} />\r\n        )}\r\n      </span>\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default FollowRequestButtons;\r\n","import shortenNumber from '../utils/shorten-number';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\nimport useTruncated from '../utils/useTruncated';\r\n\r\nimport Avatar from './avatar';\r\nimport FollowRequestButtons from './follow-request-buttons';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport NameText from './name-text';\r\nimport RelativeTime from './relative-time';\r\nimport Status from './status';\r\n\r\nconst NOTIFICATION_ICONS = {\r\n  mention: 'comment',\r\n  status: 'notification',\r\n  reblog: 'rocket',\r\n  follow: 'follow',\r\n  follow_request: 'follow-add',\r\n  favourite: 'heart',\r\n  poll: 'poll',\r\n  update: 'pencil',\r\n  'admin.signup': 'account-edit',\r\n  'admin.report': 'account-warning',\r\n};\r\n\r\n/*\r\nNotification types\r\n==================\r\nmention = Someone mentioned you in their status\r\nstatus = Someone you enabled notifications for has posted a status\r\nreblog = Someone boosted one of your statuses\r\nfollow = Someone followed you\r\nfollow_request = Someone requested to follow you\r\nfavourite = Someone favourited one of your statuses\r\npoll = A poll you have voted in or created has ended\r\nupdate = A status you interacted with has been edited\r\nadmin.sign_up = Someone signed up (optionally sent to admins)\r\nadmin.report = A new report has been filed\r\n*/\r\n\r\nconst contentText = {\r\n  mention: 'mentioned you in their post.',\r\n  status: 'published a post.',\r\n  reblog: 'boosted your post.',\r\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\r\n  reblog_reply: 'boosted your reply.',\r\n  follow: 'followed you.',\r\n  follow_request: 'requested to follow you.',\r\n  favourite: 'favourited your post.',\r\n  'favourite+account': (count) => `favourited ${count} of your posts.`,\r\n  favourite_reply: 'favourited your reply.',\r\n  poll: 'A poll you have voted in or created has ended.',\r\n  'poll-self': 'A poll you have created has ended.',\r\n  'poll-voted': 'A poll you have voted in has ended.',\r\n  update: 'A post you interacted with has been edited.',\r\n  'favourite+reblog': 'boosted & favourited your post.',\r\n  'favourite+reblog+account': (count) =>\r\n    `boosted & favourited ${count} of your posts.`,\r\n  'favourite+reblog_reply': 'boosted & favourited your reply.',\r\n  'admin.signup': 'signed up.',\r\n  'admin.report': 'reported a post.',\r\n};\r\n\r\nconst AVATARS_LIMIT = 50;\r\n\r\nfunction Notification({ notification, instance, reload, isStatic }) {\r\n  const { id, status, account, _accounts, _statuses } = notification;\r\n  let { type } = notification;\r\n\r\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\r\n  const actualStatus = status?.reblog || status;\r\n  const actualStatusID = actualStatus?.id;\r\n\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const isSelf = currentAccount === account?.id;\r\n  const isVoted = status?.poll?.voted;\r\n  const isReplyToOthers =\r\n    !!status?.inReplyToAccountId &&\r\n    status?.inReplyToAccountId !== currentAccount &&\r\n    status?.account?.id === currentAccount;\r\n\r\n  let favsCount = 0;\r\n  let reblogsCount = 0;\r\n  if (type === 'favourite+reblog') {\r\n    for (const account of _accounts) {\r\n      if (account._types?.includes('favourite')) {\r\n        favsCount++;\r\n      }\r\n      if (account._types?.includes('reblog')) {\r\n        reblogsCount++;\r\n      }\r\n    }\r\n    if (!reblogsCount && favsCount) type = 'favourite';\r\n    if (!favsCount && reblogsCount) type = 'reblog';\r\n  }\r\n\r\n  let text;\r\n  if (type === 'poll') {\r\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\r\n  } else if (\r\n    type === 'reblog' ||\r\n    type === 'favourite' ||\r\n    type === 'favourite+reblog'\r\n  ) {\r\n    if (_statuses?.length > 1) {\r\n      text = contentText[`${type}+account`];\r\n    } else if (isReplyToOthers) {\r\n      text = contentText[`${type}_reply`];\r\n    } else {\r\n      text = contentText[type];\r\n    }\r\n  } else if (contentText[type]) {\r\n    text = contentText[type];\r\n  } else {\r\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\r\n    // This surfaces the error to the user, hoping that users will report it\r\n    text = `[Unknown notification type: ${type}]`;\r\n  }\r\n\r\n  if (typeof text === 'function') {\r\n    text = text(_statuses?.length || _accounts?.length);\r\n  }\r\n\r\n  if (type === 'mention' && !status) {\r\n    // Could be deleted\r\n    return null;\r\n  }\r\n\r\n  const formattedCreatedAt =\r\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\r\n\r\n  const genericAccountsHeading =\r\n    {\r\n      'favourite+reblog': 'Boosted/Favourited by…',\r\n      favourite: 'Favourited by…',\r\n      reblog: 'Boosted by…',\r\n      follow: 'Followed by…',\r\n    }[type] || 'Accounts';\r\n  const handleOpenGenericAccounts = () => {\r\n    states.showGenericAccounts = {\r\n      heading: genericAccountsHeading,\r\n      accounts: _accounts,\r\n      showReactions: type === 'favourite+reblog',\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div class={`notification notification-${type}`} tabIndex=\"0\">\r\n      <div\r\n        class={`notification-type notification-${type}`}\r\n        title={formattedCreatedAt}\r\n      >\r\n        {type === 'favourite+reblog' ? (\r\n          <>\r\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\r\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\r\n          </>\r\n        ) : (\r\n          <Icon\r\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\r\n            size=\"xl\"\r\n            alt={type}\r\n          />\r\n        )}\r\n      </div>\r\n      <div class=\"notification-content\">\r\n        {type !== 'mention' && (\r\n          <>\r\n            <p>\r\n              {!/poll|update/i.test(type) && (\r\n                <>\r\n                  {_accounts?.length > 1 ? (\r\n                    <>\r\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\r\n                        <span title={_accounts.length}>\r\n                          {shortenNumber(_accounts.length)}\r\n                        </span>{' '}\r\n                        people\r\n                      </b>{' '}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <NameText account={account} showAvatar />{' '}\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n              {text}\r\n              {type === 'mention' && (\r\n                <span class=\"insignificant\">\r\n                  {' '}\r\n                  •{' '}\r\n                  <RelativeTime\r\n                    datetime={notification.createdAt}\r\n                    format=\"micro\"\r\n                  />\r\n                </span>\r\n              )}\r\n            </p>\r\n            {type === 'follow_request' && (\r\n              <FollowRequestButtons\r\n                accountID={account.id}\r\n                onChange={() => {\r\n                  // reload();\r\n                }}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n        {_accounts?.length > 1 && (\r\n          <p class=\"avatars-stack\">\r\n            {_accounts.slice(0, AVATARS_LIMIT).map((account, i) => (\r\n              <>\r\n                <a\r\n                  href={account.url}\r\n                  rel=\"noopener noreferrer\"\r\n                  class=\"account-avatar-stack\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    states.showAccount = account;\r\n                  }}\r\n                >\r\n                  <Avatar\r\n                    url={account.avatarStatic}\r\n                    size={\r\n                      _accounts.length <= 10\r\n                        ? 'xxl'\r\n                        : _accounts.length < 20\r\n                        ? 'xl'\r\n                        : _accounts.length < 30\r\n                        ? 'l'\r\n                        : _accounts.length < 40\r\n                        ? 'm'\r\n                        : 's' // My god, this person is popular!\r\n                    }\r\n                    key={account.id}\r\n                    alt={`${account.displayName} @${account.acct}`}\r\n                    squircle={account?.bot}\r\n                  />\r\n                  {type === 'favourite+reblog' && (\r\n                    <div class=\"account-sub-icons\">\r\n                      {account._types.map((type) => (\r\n                        <Icon\r\n                          icon={NOTIFICATION_ICONS[type]}\r\n                          size=\"s\"\r\n                          class={`${type}-icon`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </a>{' '}\r\n              </>\r\n            ))}\r\n            <button\r\n              type=\"button\"\r\n              class=\"small plain\"\r\n              onClick={handleOpenGenericAccounts}\r\n            >\r\n              {_accounts.length > AVATARS_LIMIT &&\r\n                `+${_accounts.length - AVATARS_LIMIT}`}\r\n              <Icon icon=\"chevron-down\" />\r\n            </button>\r\n          </p>\r\n        )}\r\n        {_statuses?.length > 1 && (\r\n          <ul class=\"notification-group-statuses\">\r\n            {_statuses.map((status) => (\r\n              <li key={status.id}>\r\n                <TruncatedLink\r\n                  class={`status-link status-type-${type}`}\r\n                  to={\r\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\r\n                  }\r\n                >\r\n                  <Status status={status} size=\"s\" />\r\n                </TruncatedLink>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\r\n          <TruncatedLink\r\n            class={`status-link status-type-${type}`}\r\n            to={\r\n              instance\r\n                ? `/${instance}/s/${actualStatusID}`\r\n                : `/s/${actualStatusID}`\r\n            }\r\n            onContextMenu={(e) => {\r\n              const post = e.target.querySelector('.status');\r\n              if (post) {\r\n                // Fire a custom event to open the context menu\r\n                if (e.metaKey) return;\r\n                e.preventDefault();\r\n                post.dispatchEvent(\r\n                  new MouseEvent('contextmenu', {\r\n                    clientX: e.clientX,\r\n                    clientY: e.clientY,\r\n                  }),\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            {isStatic ? (\r\n              <Status status={actualStatus} size=\"s\" />\r\n            ) : (\r\n              <Status statusID={actualStatusID} size=\"s\" />\r\n            )}\r\n          </TruncatedLink>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TruncatedLink(props) {\r\n  const ref = useTruncated();\r\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\r\n}\r\n\r\nexport default Notification;\r\n","import { memo } from 'preact/compat';\r\nimport { useLayoutEffect, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\nimport {\r\n  getAccountByAccessToken,\r\n  getCurrentAccount,\r\n} from '../utils/store-utils';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Modal from './modal';\r\nimport Notification from './notification';\r\n\r\nexport default memo(function NotificationService() {\r\n  if (!('serviceWorker' in navigator)) return null;\r\n\r\n  const snapStates = useSnapshot(states);\r\n  const { routeNotification } = snapStates;\r\n\r\n  console.log('🛎️ Notification service', routeNotification);\r\n\r\n  const { id, accessToken } = routeNotification || {};\r\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!id || !accessToken) return;\r\n    const { instance: currentInstance } = api();\r\n    const { masto, instance } = api({\r\n      accessToken,\r\n    });\r\n    console.log('API', { accessToken, currentInstance, instance });\r\n    const sameInstance = currentInstance === instance;\r\n    const account = accessToken\r\n      ? getAccountByAccessToken(accessToken)\r\n      : getCurrentAccount();\r\n    (async () => {\r\n      const notification = await masto.v1.notifications.fetch(id);\r\n      if (notification && account) {\r\n        console.log('🛎️ Notification', { id, notification, account });\r\n        const accountInstance = account.instanceURL;\r\n        const { type, status, account: notificationAccount } = notification;\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\r\n        const hasAccount = !!notificationAccount?.id;\r\n        const hasStatus = !!status?.id;\r\n        if (isFollow && sameInstance) {\r\n          // Show account sheet, can handle different instances\r\n          states.showAccount = {\r\n            account: notificationAccount,\r\n            instance: accountInstance,\r\n          };\r\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\r\n          // Show sheet of notification, if\r\n          // - there is a modal open\r\n          // - the notification is from another instance\r\n          // - the notification has both account and status, gives choice for users to go to account or status\r\n          setShowNotificationSheet({\r\n            id,\r\n            account,\r\n            notification,\r\n            sameInstance,\r\n          });\r\n        } else {\r\n          if (hasStatus) {\r\n            // Go to status page\r\n            location.hash = `/${currentInstance}/s/${status.id}`;\r\n          } else if (isFollow) {\r\n            // Go to profile page\r\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\r\n          } else {\r\n            // Go to notifications page\r\n            location.hash = '/notifications';\r\n          }\r\n        }\r\n      } else {\r\n        console.warn(\r\n          '🛎️ Notification not found',\r\n          notificationID,\r\n          notificationAccessToken,\r\n        );\r\n      }\r\n    })();\r\n  }, [id, accessToken]);\r\n\r\n  useLayoutEffect(() => {\r\n    // Listen to message from service worker\r\n    const handleMessage = (event) => {\r\n      console.log('💥💥💥 Message event', event);\r\n      const { type, id, accessToken } = event?.data || {};\r\n      if (type === 'notification') {\r\n        states.routeNotification = {\r\n          id,\r\n          accessToken,\r\n        };\r\n      }\r\n    };\r\n    console.log('👂👂👂 Listen to message');\r\n    navigator.serviceWorker.addEventListener('message', handleMessage);\r\n    return () => {\r\n      console.log('👂👂👂 Remove listen to message');\r\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\r\n    };\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    if (navigator?.clearAppBadge) {\r\n      navigator.clearAppBadge();\r\n    }\r\n  }, []);\r\n  usePageVisibility((visible) => {\r\n    if (visible && navigator?.clearAppBadge) {\r\n      console.log('🔰 Clear app badge');\r\n      navigator.clearAppBadge();\r\n    }\r\n  });\r\n\r\n  const onClose = () => {\r\n    setShowNotificationSheet(false);\r\n    states.routeNotification = null;\r\n\r\n    // If url is #/notifications?id=123, go to #/notifications\r\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\r\n      location.hash = '/notifications';\r\n    }\r\n  };\r\n\r\n  if (showNotificationSheet) {\r\n    const { id, account, notification, sameInstance } = showNotificationSheet;\r\n    return (\r\n      <Modal\r\n        class=\"light\"\r\n        onClick={(e) => {\r\n          if (e.target === e.currentTarget) {\r\n            onClose();\r\n          }\r\n        }}\r\n      >\r\n        <div class=\"sheet\" tabIndex=\"-1\">\r\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n          <header>\r\n            <b>Notification</b>\r\n          </header>\r\n          <main>\r\n            {!sameInstance && (\r\n              <p>This notification is from your other account.</p>\r\n            )}\r\n            <div\r\n              class=\"notification-peek\"\r\n              // style={{\r\n              //   pointerEvents: sameInstance ? '' : 'none',\r\n              // }}\r\n              onClick={(e) => {\r\n                const { target } = e;\r\n                // If button or links\r\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\r\n                  onClose();\r\n                }\r\n              }}\r\n            >\r\n              <Notification\r\n                instance={account.instanceURL}\r\n                notification={notification}\r\n                isStatic\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                textAlign: 'end',\r\n              }}\r\n            >\r\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\r\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\r\n              </Link>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n","import { forwardRef } from 'preact/compat';\r\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport { api } from '../utils/api';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\n\r\nconst SearchForm = forwardRef((props, ref) => {\r\n  const { instance } = api();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\r\n  const [query, setQuery] = useState(searchParams.get('q') || '');\r\n  const type = searchParams.get('type');\r\n  const formRef = useRef(null);\r\n\r\n  const searchFieldRef = useRef(null);\r\n  useImperativeHandle(ref, () => ({\r\n    setValue: (value) => {\r\n      setQuery(value);\r\n    },\r\n    focus: () => {\r\n      searchFieldRef.current.focus();\r\n    },\r\n    select: () => {\r\n      searchFieldRef.current.select();\r\n    },\r\n    blur: () => {\r\n      searchFieldRef.current.blur();\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <form\r\n      ref={formRef}\r\n      class=\"search-popover-container\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n\r\n        const isSearchPage = /\\/search/.test(location.hash);\r\n        if (isSearchPage) {\r\n          if (query) {\r\n            const params = {\r\n              q: query,\r\n            };\r\n            if (type) params.type = type; // Preserve type\r\n            setSearchParams(params);\r\n          } else {\r\n            setSearchParams({});\r\n          }\r\n        } else {\r\n          if (query) {\r\n            location.hash = `/search?q=${encodeURIComponent(query)}${\r\n              type ? `&type=${type}` : ''\r\n            }`;\r\n          } else {\r\n            location.hash = `/search`;\r\n          }\r\n        }\r\n\r\n        props?.onSubmit?.(e);\r\n      }}\r\n    >\r\n      <input\r\n        ref={searchFieldRef}\r\n        value={query}\r\n        name=\"q\"\r\n        type=\"search\"\r\n        // autofocus\r\n        placeholder=\"Search\"\r\n        dir=\"auto\"\r\n        autocomplete=\"off\"\r\n        autocorrect=\"off\"\r\n        autocapitalize=\"off\"\r\n        onSearch={(e) => {\r\n          if (!e.target.value) {\r\n            setSearchParams({});\r\n          }\r\n        }}\r\n        onInput={(e) => {\r\n          setQuery(e.target.value);\r\n          setSearchMenuOpen(true);\r\n        }}\r\n        onFocus={() => {\r\n          setSearchMenuOpen(true);\r\n        }}\r\n        onBlur={() => {\r\n          setTimeout(() => {\r\n            setSearchMenuOpen(false);\r\n          }, 100);\r\n          formRef.current\r\n            ?.querySelector('.search-popover-item.focus')\r\n            ?.classList.remove('focus');\r\n        }}\r\n        onKeyDown={(e) => {\r\n          const { key } = e;\r\n          switch (key) {\r\n            case 'Escape':\r\n              setSearchMenuOpen(false);\r\n              break;\r\n            case 'Down':\r\n            case 'ArrowDown':\r\n              e.preventDefault();\r\n              if (searchMenuOpen) {\r\n                const focusItem = formRef.current.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  let nextItem = focusItem.nextElementSibling;\r\n                  while (nextItem && nextItem.hidden) {\r\n                    nextItem = nextItem.nextElementSibling;\r\n                  }\r\n                  if (nextItem) {\r\n                    nextItem.classList.add('focus');\r\n                    const siblings = Array.from(\r\n                      nextItem.parentElement.children,\r\n                    ).filter((el) => el !== nextItem);\r\n                    siblings.forEach((el) => {\r\n                      el.classList.remove('focus');\r\n                    });\r\n                  }\r\n                } else {\r\n                  const firstItem = formRef.current.querySelector(\r\n                    '.search-popover-item',\r\n                  );\r\n                  if (firstItem) {\r\n                    firstItem.classList.add('focus');\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'Up':\r\n            case 'ArrowUp':\r\n              e.preventDefault();\r\n              if (searchMenuOpen) {\r\n                const focusItem = document.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  let prevItem = focusItem.previousElementSibling;\r\n                  while (prevItem && prevItem.hidden) {\r\n                    prevItem = prevItem.previousElementSibling;\r\n                  }\r\n                  if (prevItem) {\r\n                    prevItem.classList.add('focus');\r\n                    const siblings = Array.from(\r\n                      prevItem.parentElement.children,\r\n                    ).filter((el) => el !== prevItem);\r\n                    siblings.forEach((el) => {\r\n                      el.classList.remove('focus');\r\n                    });\r\n                  }\r\n                } else {\r\n                  const lastItem = document.querySelector(\r\n                    '.search-popover-item:last-child',\r\n                  );\r\n                  if (lastItem) {\r\n                    lastItem.classList.add('focus');\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'Enter':\r\n              if (searchMenuOpen) {\r\n                const focusItem = document.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  e.preventDefault();\r\n                  focusItem.click();\r\n                }\r\n                setSearchMenuOpen(false);\r\n                props?.onSubmit?.(e);\r\n              }\r\n              break;\r\n          }\r\n        }}\r\n      />\r\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\r\n        {!!query &&\r\n          [\r\n            {\r\n              label: (\r\n                <>\r\n                  Posts with <q>{query}</q>\r\n                </>\r\n              ),\r\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\r\n              hidden: /^https?:/.test(query),\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\r\n                </>\r\n              ),\r\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\r\n              hidden:\r\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\r\n              top: /^#/.test(query),\r\n              type: 'link',\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Look up <mark>{query}</mark>\r\n                </>\r\n              ),\r\n              to: `/${query}`,\r\n              hidden: !/^https?:/.test(query),\r\n              top: /^https?:/.test(query),\r\n              type: 'link',\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Accounts with <q>{query}</q>\r\n                </>\r\n              ),\r\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\r\n            },\r\n          ]\r\n            .sort((a, b) => {\r\n              if (a.top && !b.top) return -1;\r\n              if (!a.top && b.top) return 1;\r\n              return 0;\r\n            })\r\n            .map(({ label, to, hidden, type }) => (\r\n              <Link\r\n                to={to}\r\n                class=\"search-popover-item\"\r\n                hidden={hidden}\r\n                onClick={(e) => {\r\n                  props?.onSubmit?.(e);\r\n                }}\r\n              >\r\n                <Icon\r\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\r\n                  class=\"more-insignificant\"\r\n                />\r\n                <span>{label}</span>{' '}\r\n              </Link>\r\n            ))}\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default SearchForm;\r\n","import './search-command.css';\r\n\r\nimport { memo } from 'preact/compat';\r\nimport { useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport SearchForm from './search-form';\r\n\r\nexport default memo(function SearchCommand({ onClose = () => {} }) {\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const searchFormRef = useRef(null);\r\n\r\n  useHotkeys(\r\n    '/',\r\n    (e) => {\r\n      setShowSearch(true);\r\n      setTimeout(() => {\r\n        searchFormRef.current?.focus?.();\r\n        searchFormRef.current?.select?.();\r\n      }, 0);\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreEventWhen: (e) => {\r\n        const isSearchPage = /\\/search/.test(location.hash);\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return isSearchPage || hasModal;\r\n      },\r\n    },\r\n  );\r\n\r\n  const closeSearch = () => {\r\n    setShowSearch(false);\r\n    onClose();\r\n  };\r\n\r\n  useHotkeys(\r\n    'esc',\r\n    (e) => {\r\n      searchFormRef.current?.blur?.();\r\n      closeSearch();\r\n    },\r\n    {\r\n      enabled: showSearch,\r\n      enableOnFormTags: true,\r\n      preventDefault: true,\r\n    },\r\n  );\r\n\r\n  return (\r\n    <div\r\n      id=\"search-command-container\"\r\n      hidden={!showSearch}\r\n      onClick={(e) => {\r\n        console.log(e);\r\n        if (e.target === e.currentTarget) {\r\n          closeSearch();\r\n        }\r\n      }}\r\n    >\r\n      <SearchForm\r\n        ref={searchFormRef}\r\n        onSubmit={() => {\r\n          closeSearch();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import './shortcuts.css';\r\n\r\nimport { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { useMemo, useRef } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\n\r\nimport AsyncText from './AsyncText';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport MenuLink from './menu-link';\r\n\r\nfunction Shortcuts() {\r\n  const { instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const { shortcuts } = snapStates;\r\n\r\n  if (!shortcuts.length) {\r\n    return null;\r\n  }\r\n\r\n  const menuRef = useRef();\r\n\r\n  const formattedShortcuts = useMemo(\r\n    () =>\r\n      shortcuts\r\n        .map((pin, i) => {\r\n          const { type, ...data } = pin;\r\n          if (!SHORTCUTS_META[type]) return null;\r\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\r\n\r\n          if (typeof id === 'function') {\r\n            id = id(data, i);\r\n          }\r\n          if (typeof path === 'function') {\r\n            path = path(\r\n              {\r\n                ...data,\r\n                instance: data.instance || instance,\r\n              },\r\n              i,\r\n            );\r\n          }\r\n          if (typeof title === 'function') {\r\n            title = title(data, i);\r\n          }\r\n          if (typeof subtitle === 'function') {\r\n            subtitle = subtitle(data, i);\r\n          }\r\n          if (typeof icon === 'function') {\r\n            icon = icon(data, i);\r\n          }\r\n\r\n          return {\r\n            id,\r\n            path,\r\n            title,\r\n            subtitle,\r\n            icon,\r\n          };\r\n        })\r\n        .filter(Boolean),\r\n    [shortcuts],\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\r\n    const index = parseInt(handler.keys[0], 10) - 1;\r\n    if (index < formattedShortcuts.length) {\r\n      const { path } = formattedShortcuts[index];\r\n      if (path) {\r\n        navigate(path);\r\n        menuRef.current?.closeMenu?.();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"shortcuts\">\r\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\r\n        <nav class=\"tab-bar\">\r\n          <ul>\r\n            {formattedShortcuts.map(\r\n              ({ id, path, title, subtitle, icon }, i) => {\r\n                return (\r\n                  <li key={i + title}>\r\n                    <Link\r\n                      class={subtitle ? 'has-subtitle' : ''}\r\n                      to={path}\r\n                      onClick={(e) => {\r\n                        if (e.target.classList.contains('is-active')) {\r\n                          e.preventDefault();\r\n                          const page = document.getElementById(`${id}-page`);\r\n                          console.log(id, page);\r\n                          if (page) {\r\n                            page.scrollTop = 0;\r\n                            const updatesButton =\r\n                              page.querySelector('.updates-button');\r\n                            if (updatesButton) {\r\n                              updatesButton.click();\r\n                            }\r\n                          }\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Icon icon={icon} size=\"xl\" alt={title} />\r\n                      <span>\r\n                        <AsyncText>{title}</AsyncText>\r\n                        {subtitle && (\r\n                          <>\r\n                            <br />\r\n                            <small>{subtitle}</small>\r\n                          </>\r\n                        )}\r\n                      </span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              },\r\n            )}\r\n          </ul>\r\n        </nav>\r\n      ) : (\r\n        <Menu\r\n          instanceRef={menuRef}\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          boundingBoxPadding=\"8 8 8 8\"\r\n          menuClassName=\"glass-menu shortcuts-menu\"\r\n          gap={8}\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button\r\n              type=\"button\"\r\n              id=\"shortcuts-button\"\r\n              class=\"plain\"\r\n              onTransitionStart={(e) => {\r\n                // Close menu if the button disappears\r\n                try {\r\n                  const { target } = e;\r\n                  if (getComputedStyle(target).pointerEvents === 'none') {\r\n                    menuRef.current?.closeMenu?.();\r\n                  }\r\n                } catch (e) {}\r\n              }}\r\n            >\r\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\r\n            </button>\r\n          }\r\n        >\r\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\r\n            return (\r\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\r\n                <Icon icon={icon} size=\"l\" />{' '}\r\n                <span class=\"menu-grow\">\r\n                  <span>\r\n                    <AsyncText>{title}</AsyncText>\r\n                  </span>\r\n                  {subtitle && (\r\n                    <>\r\n                      {' '}\r\n                      <small class=\"more-insignificant\">{subtitle}</small>\r\n                    </>\r\n                  )}\r\n                </span>\r\n                <span class=\"menu-shortcut hide-until-focus-visible\">\r\n                  {i + 1}\r\n                </span>\r\n              </MenuLink>\r\n            );\r\n          })}\r\n        </Menu>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shortcuts;\r\n","import { Menu } from '@szhsin/react-menu';\r\nimport { useWindowSize } from '@uidotdev/usehooks';\r\nimport { useRef } from 'preact/hooks';\r\n\r\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\r\n\r\n// It's like Menu but with sensible defaults, bug fixes and improvements.\r\nfunction Menu2(props) {\r\n  const { containerProps } = props;\r\n  const size = useWindowSize();\r\n  const instanceRef = useRef();\r\n  return (\r\n    <Menu\r\n      boundingBoxPadding={safeBoundingBoxPadding()}\r\n      repositionFlag={`${size.width}x${size.height}`}\r\n      {...props}\r\n      instanceRef={instanceRef}\r\n      containerProps={{\r\n        onClick: (e) => {\r\n          if (e.target === e.currentTarget) {\r\n            instanceRef.current?.closeMenu?.();\r\n          }\r\n          containerProps?.onClick?.(e);\r\n        },\r\n        ...containerProps,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Menu2;\r\n","import store from './store';\r\n\r\nexport function groupBoosts(values) {\r\n  let newValues = [];\r\n  let boostStash = [];\r\n  let serialBoosts = 0;\r\n  for (let i = 0; i < values.length; i++) {\r\n    const item = values[i];\r\n    if (item.reblog && !item.account?.group) {\r\n      boostStash.push(item);\r\n      serialBoosts++;\r\n    } else {\r\n      newValues.push(item);\r\n      if (serialBoosts < 3) {\r\n        serialBoosts = 0;\r\n      }\r\n    }\r\n  }\r\n  // if boostStash is more than quarter of values\r\n  // or if there are 3 or more boosts in a row\r\n  if (\r\n    values.length > 10 &&\r\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\r\n  ) {\r\n    // if boostStash is more than 3 quarter of values\r\n    const boostStashID = boostStash.map((status) => status.id);\r\n    if (boostStash.length > (values.length * 3) / 4) {\r\n      // insert boost array at the end of specialHome list\r\n      newValues = [\r\n        ...newValues,\r\n        { id: boostStashID, items: boostStash, type: 'boosts' },\r\n      ];\r\n    } else {\r\n      // insert boosts array in the middle of specialHome list\r\n      const half = Math.floor(newValues.length / 2);\r\n      newValues = [\r\n        ...newValues.slice(0, half),\r\n        {\r\n          id: boostStashID,\r\n          items: boostStash,\r\n          type: 'boosts',\r\n        },\r\n        ...newValues.slice(half),\r\n      ];\r\n    }\r\n    return newValues;\r\n  } else {\r\n    return values;\r\n  }\r\n}\r\n\r\nexport function dedupeBoosts(items, instance) {\r\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\r\n  const filteredItems = items.filter((item) => {\r\n    if (!item.reblog) return true;\r\n    const statusKey = `${instance}-${item.reblog.id}`;\r\n    const boosterID = boostedStatusIDs[statusKey];\r\n    if (boosterID && boosterID !== item.id) {\r\n      console.warn(\r\n        `🚫 Duplicate boost by ${item.account.displayName}`,\r\n        item,\r\n        item.reblog,\r\n      );\r\n      return false;\r\n    } else {\r\n      boostedStatusIDs[statusKey] = item.id;\r\n    }\r\n    return true;\r\n  });\r\n  // Limit to 50\r\n  const keys = Object.keys(boostedStatusIDs);\r\n  if (keys.length > 50) {\r\n    keys.slice(0, keys.length - 50).forEach((key) => {\r\n      delete boostedStatusIDs[key];\r\n    });\r\n  }\r\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\r\n  return filteredItems;\r\n}\r\n\r\nexport function groupContext(items) {\r\n  const contexts = [];\r\n  let contextIndex = 0;\r\n  items.forEach((item) => {\r\n    for (let i = 0; i < contexts.length; i++) {\r\n      if (contexts[i].find((t) => t.id === item.id)) return;\r\n      if (\r\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\r\n        contexts[i].find((t) => t.inReplyToId === item.id)\r\n      ) {\r\n        contexts[i].push(item);\r\n        return;\r\n      }\r\n    }\r\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\r\n    if (repliedItem) {\r\n      contexts[contextIndex++] = [item, repliedItem];\r\n    }\r\n  });\r\n\r\n  // Check for cross-item contexts\r\n  // Merge contexts into one if they have a common item (same id)\r\n  for (let i = 0; i < contexts.length; i++) {\r\n    for (let j = i + 1; j < contexts.length; j++) {\r\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\r\n      if (commonItem) {\r\n        contexts[i] = [...contexts[i], ...contexts[j]];\r\n        // Remove duplicate items\r\n        contexts[i] = contexts[i].filter(\r\n          (item, index, self) =>\r\n            self.findIndex((t) => t.id === item.id) === index,\r\n        );\r\n        contexts.splice(j, 1);\r\n        j--;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sort items by checking inReplyToId\r\n  contexts.forEach((context) => {\r\n    context.sort((a, b) => {\r\n      if (!a.inReplyToId && !b.inReplyToId) {\r\n        return new Date(a.createdAt) - new Date(b.createdAt);\r\n      }\r\n      if (a.inReplyToId === b.id) return 1;\r\n      if (b.inReplyToId === a.id) return -1;\r\n      if (!a.inReplyToId) return -1;\r\n      if (!b.inReplyToId) return 1;\r\n      return new Date(a.createdAt) - new Date(b.createdAt);\r\n    });\r\n  });\r\n\r\n  // Tag items that has different author than first post's author\r\n  contexts.forEach((context) => {\r\n    const firstItemAccountID = context[0].account.id;\r\n    context.forEach((item) => {\r\n      if (item.account.id !== firstItemAccountID) {\r\n        item._differentAuthor = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  if (contexts.length) console.log('🧵 Contexts', contexts);\r\n\r\n  const newItems = [];\r\n  const appliedContextIndices = [];\r\n  items.forEach((item) => {\r\n    if (item.reblog) {\r\n      newItems.push(item);\r\n      return;\r\n    }\r\n    for (let i = 0; i < contexts.length; i++) {\r\n      if (contexts[i].find((t) => t.id === item.id)) {\r\n        if (appliedContextIndices.includes(i)) return;\r\n        const contextItems = contexts[i];\r\n        contextItems.sort((a, b) => {\r\n          const aDate = new Date(a.createdAt);\r\n          const bDate = new Date(b.createdAt);\r\n          return aDate - bDate;\r\n        });\r\n        const firstItemAccountID = contextItems[0].account.id;\r\n        newItems.push({\r\n          id: contextItems.map((i) => i.id),\r\n          items: contextItems,\r\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\r\n            ? 'thread'\r\n            : 'conversation',\r\n        });\r\n        appliedContextIndices.push(i);\r\n        return;\r\n      }\r\n    }\r\n    newItems.push(item);\r\n  });\r\n\r\n  return newItems;\r\n}\r\n","import { useLayoutEffect, useState } from 'preact/hooks';\r\n\r\nexport default function useScroll({\r\n  scrollableRef,\r\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\r\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\r\n  scrollThresholdStart = 10,\r\n  scrollThresholdEnd = 10,\r\n  direction = 'vertical',\r\n  distanceFromStartPx: _distanceFromStartPx,\r\n  distanceFromEndPx: _distanceFromEndPx,\r\n} = {}) {\r\n  const [scrollDirection, setScrollDirection] = useState(null);\r\n  const [reachStart, setReachStart] = useState(false);\r\n  const [reachEnd, setReachEnd] = useState(false);\r\n  const [nearReachStart, setNearReachStart] = useState(false);\r\n  const [nearReachEnd, setNearReachEnd] = useState(false);\r\n  const isVertical = direction === 'vertical';\r\n\r\n  useLayoutEffect(() => {\r\n    const scrollableElement = scrollableRef.current;\r\n    if (!scrollableElement) return {};\r\n    let previousScrollStart = isVertical\r\n      ? scrollableElement.scrollTop\r\n      : scrollableElement.scrollLeft;\r\n\r\n    function onScroll() {\r\n      const {\r\n        scrollTop,\r\n        scrollLeft,\r\n        scrollHeight,\r\n        scrollWidth,\r\n        clientHeight,\r\n        clientWidth,\r\n      } = scrollableElement;\r\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\r\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\r\n      const clientDimension = isVertical ? clientHeight : clientWidth;\r\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\r\n      const distanceFromStartPx =\r\n        _distanceFromStartPx ||\r\n        Math.min(\r\n          clientDimension * distanceFromStart,\r\n          scrollDimension,\r\n          scrollStart,\r\n        );\r\n      const distanceFromEndPx =\r\n        _distanceFromEndPx ||\r\n        Math.min(\r\n          clientDimension * distanceFromEnd,\r\n          scrollDimension,\r\n          scrollDimension - scrollStart - clientDimension,\r\n        );\r\n\r\n      if (\r\n        scrollDistance >=\r\n        (previousScrollStart < scrollStart\r\n          ? scrollThresholdEnd\r\n          : scrollThresholdStart)\r\n      ) {\r\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\r\n        previousScrollStart = scrollStart;\r\n      }\r\n\r\n      setReachStart(scrollStart <= 0);\r\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\r\n      setNearReachStart(scrollStart <= distanceFromStartPx);\r\n      setNearReachEnd(\r\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\r\n      );\r\n    }\r\n\r\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\r\n\r\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\r\n  }, [\r\n    distanceFromStart,\r\n    distanceFromEnd,\r\n    scrollThresholdStart,\r\n    scrollThresholdEnd,\r\n  ]);\r\n\r\n  return {\r\n    scrollDirection,\r\n    reachStart,\r\n    reachEnd,\r\n    nearReachStart,\r\n    nearReachEnd,\r\n    init: () => {\r\n      if (scrollableRef.current) {\r\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\r\n      }\r\n    },\r\n  };\r\n}\r\n","import './nav-menu.css';\r\n\r\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useLongPress } from 'use-long-press';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nimport Avatar from './avatar';\r\nimport Icon from './icon';\r\nimport MenuLink from './menu-link';\r\n\r\nfunction NavMenu(props) {\r\n  const snapStates = useSnapshot(states);\r\n  const { masto, instance, authenticated } = api();\r\n\r\n  const [currentAccount, setCurrentAccount] = useState();\r\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const accounts = store.local.getJSON('accounts') || [];\r\n    const acc = accounts.find(\r\n      (account) => account.info.id === store.session.get('currentAccount'),\r\n    );\r\n    if (acc) setCurrentAccount(acc);\r\n    setMoreThanOneAccount(accounts.length > 1);\r\n  }, []);\r\n\r\n  // Home = Following\r\n  // But when in multi-column mode, Home becomes columns of anything\r\n  // User may choose pin or not to pin Following\r\n  // If user doesn't pin Following, we show it in the menu\r\n  const showFollowing =\r\n    (snapStates.settings.shortcutsColumnsMode ||\r\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\r\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\r\n\r\n  const bindLongPress = useLongPress(\r\n    () => {\r\n      states.showAccounts = true;\r\n    },\r\n    {\r\n      threshold: 600,\r\n      detect: 'touch',\r\n      cancelOnMovement: true,\r\n    },\r\n  );\r\n\r\n  const buttonRef = useRef();\r\n  const [menuState, setMenuState] = useState(undefined);\r\n\r\n  const boundingBoxPadding = safeBoundingBoxPadding([\r\n    0,\r\n    0,\r\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\r\n    0,\r\n  ]);\r\n\r\n  const mutesIterator = useRef();\r\n  async function fetchMutes(firstLoad) {\r\n    if (firstLoad || !mutesIterator.current) {\r\n      mutesIterator.current = masto.v1.mutes.list({\r\n        limit: 80,\r\n      });\r\n    }\r\n    const results = await mutesIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  const blocksIterator = useRef();\r\n  async function fetchBlocks(firstLoad) {\r\n    if (firstLoad || !blocksIterator.current) {\r\n      blocksIterator.current = masto.v1.blocks.list({\r\n        limit: 80,\r\n      });\r\n    }\r\n    const results = await blocksIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        ref={buttonRef}\r\n        type=\"button\"\r\n        class={`button plain nav-menu-button ${\r\n          moreThanOneAccount ? 'with-avatar' : ''\r\n        } ${open ? 'active' : ''}`}\r\n        style={{ position: 'relative' }}\r\n        onClick={() => {\r\n          setMenuState((state) => (!state ? 'open' : undefined));\r\n        }}\r\n        onContextMenu={(e) => {\r\n          e.preventDefault();\r\n          states.showAccounts = true;\r\n        }}\r\n        {...bindLongPress()}\r\n      >\r\n        {moreThanOneAccount && (\r\n          <Avatar\r\n            url={\r\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\r\n            }\r\n            size=\"l\"\r\n            squircle={currentAccount?.info?.bot}\r\n          />\r\n        )}\r\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\r\n      </button>\r\n      <ControlledMenu\r\n        menuClassName=\"nav-menu\"\r\n        state={menuState}\r\n        anchorRef={buttonRef}\r\n        onClose={() => {\r\n          setMenuState(undefined);\r\n        }}\r\n        containerProps={{\r\n          style: {\r\n            zIndex: 10,\r\n          },\r\n          onClick: () => {\r\n            setMenuState(undefined);\r\n          },\r\n        }}\r\n        portal={{\r\n          target: document.body,\r\n        }}\r\n        {...props}\r\n        overflow=\"auto\"\r\n        viewScroll=\"close\"\r\n        position=\"anchor\"\r\n        align=\"center\"\r\n        boundingBoxPadding={boundingBoxPadding}\r\n        unmountOnClose\r\n      >\r\n        {!!snapStates.appVersion?.commitHash &&\r\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\r\n            <div class=\"top-menu\">\r\n              <MenuItem\r\n                onClick={() => {\r\n                  const yes = confirm('Reload page now to update?');\r\n                  if (yes) {\r\n                    (async () => {\r\n                      try {\r\n                        location.reload();\r\n                      } catch (e) {}\r\n                    })();\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\r\n                <span>New update available…</span>\r\n              </MenuItem>\r\n              <MenuDivider />\r\n            </div>\r\n          )}\r\n        <section>\r\n          <MenuLink to=\"/\">\r\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\r\n          </MenuLink>\r\n          {authenticated && (\r\n            <>\r\n              {showFollowing && (\r\n                <MenuLink to=\"/following\">\r\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\r\n                </MenuLink>\r\n              )}\r\n              <MenuLink to=\"/mentions\">\r\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/notifications\">\r\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\r\n                {snapStates.notificationsShowNew && (\r\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\r\n                    {' '}\r\n                    &bull;\r\n                  </sup>\r\n                )}\r\n              </MenuLink>\r\n              <MenuDivider />\r\n              <MenuLink to=\"/l\">\r\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/ft\">\r\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/b\">\r\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/f\">\r\n                <Icon icon=\"heart\" size=\"l\" /> <span>Favourites</span>\r\n              </MenuLink>\r\n            </>\r\n          )}\r\n          <MenuDivider />\r\n          <MenuLink to={`/search`}>\r\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/p/l`}>\r\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/p`}>\r\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/trending`}>\r\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\r\n          </MenuLink>\r\n        </section>\r\n        <section>\r\n          {authenticated ? (\r\n            <>\r\n              <MenuDivider />\r\n              {currentAccount?.info?.id && (\r\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\r\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\r\n                </MenuLink>\r\n              )}\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showAccounts = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showGenericAccounts = {\r\n                    id: 'mute',\r\n                    heading: 'Muted users',\r\n                    fetchAccounts: fetchMutes,\r\n                  };\r\n                }}\r\n              >\r\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showGenericAccounts = {\r\n                    id: 'block',\r\n                    heading: 'Blocked users',\r\n                    fetchAccounts: fetchBlocks,\r\n                  };\r\n                }}\r\n              >\r\n                <Icon icon=\"block\" size=\"l\" />\r\n                Blocked users&hellip;\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showKeyboardShortcutsHelp = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\r\n                <span>Keyboard shortcuts</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showShortcutsSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\r\n                <span>Shortcuts Settings&hellip;</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\r\n              </MenuItem>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <MenuDivider />\r\n              <MenuLink to=\"/login\">\r\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\r\n              </MenuLink>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\r\n              </MenuItem>\r\n            </>\r\n          )}\r\n        </section>\r\n      </ControlledMenu>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavMenu;\r\n","import { useIdle } from '@uidotdev/usehooks';\r\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport states, { statusKey } from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\r\nimport useInterval from '../utils/useInterval';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\nimport useScroll from '../utils/useScroll';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport NavMenu from './nav-menu';\r\nimport Status from './status';\r\n\r\nconst scrollIntoViewOptions = {\r\n  block: 'nearest',\r\n  inline: 'center',\r\n  behavior: 'smooth',\r\n};\r\n\r\nfunction Timeline({\r\n  title,\r\n  titleComponent,\r\n  id,\r\n  instance,\r\n  emptyText,\r\n  errorText,\r\n  useItemID, // use statusID instead of status object, assuming it's already in states\r\n  boostsCarousel,\r\n  fetchItems = () => {},\r\n  checkForUpdates = () => {},\r\n  checkForUpdatesInterval = 60_000, // 1 minute\r\n  headerStart,\r\n  headerEnd,\r\n  timelineStart,\r\n  allowFilters,\r\n  refresh,\r\n}) {\r\n  const snapStates = useSnapshot(states);\r\n  const [items, setItems] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [showMore, setShowMore] = useState(false);\r\n  const [showNew, setShowNew] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const scrollableRef = useRef();\r\n\r\n  console.debug('RENDER Timeline', id, refresh);\r\n\r\n  const loadItems = useDebouncedCallback(\r\n    (firstLoad) => {\r\n      setShowNew(false);\r\n      if (uiState === 'loading') return;\r\n      setUIState('loading');\r\n      (async () => {\r\n        try {\r\n          let { done, value } = await fetchItems(firstLoad);\r\n          if (Array.isArray(value)) {\r\n            if (boostsCarousel) {\r\n              value = groupBoosts(value);\r\n            }\r\n            value = groupContext(value);\r\n            console.log(value);\r\n            if (firstLoad) {\r\n              setItems(value);\r\n            } else {\r\n              setItems((items) => [...items, ...value]);\r\n            }\r\n            if (!value.length) done = true;\r\n            setShowMore(!done);\r\n          } else {\r\n            setShowMore(false);\r\n          }\r\n          setUIState('default');\r\n        } catch (e) {\r\n          console.error(e);\r\n          setUIState('error');\r\n        } finally {\r\n          loadItems.cancel();\r\n        }\r\n      })();\r\n    },\r\n    1500,\r\n    {\r\n      leading: true,\r\n      trailing: false,\r\n    },\r\n  );\r\n\r\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\r\n\r\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\r\n    // focus on next status after active item\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    const activeItemRect = activeItem?.getBoundingClientRect();\r\n    const allItems = Array.from(\r\n      scrollableRef.current.querySelectorAll(itemsSelector),\r\n    );\r\n    if (\r\n      activeItem &&\r\n      activeItemRect.top < scrollableRef.current.clientHeight &&\r\n      activeItemRect.bottom > 0\r\n    ) {\r\n      const activeItemIndex = allItems.indexOf(activeItem);\r\n      let nextItem = allItems[activeItemIndex + 1];\r\n      if (handler.shift) {\r\n        // get next status that's not .timeline-item-alt\r\n        nextItem = allItems.find(\r\n          (item, index) =>\r\n            index > activeItemIndex &&\r\n            !item.classList.contains('timeline-item-alt'),\r\n        );\r\n      }\r\n      if (nextItem) {\r\n        nextItem.focus();\r\n        nextItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostItem = allItems.find((item) => {\r\n        const itemRect = item.getBoundingClientRect();\r\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostItem) {\r\n        topmostItem.focus();\r\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\r\n    // focus on previous status after active item\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    const activeItemRect = activeItem?.getBoundingClientRect();\r\n    const allItems = Array.from(\r\n      scrollableRef.current.querySelectorAll(itemsSelector),\r\n    );\r\n    if (\r\n      activeItem &&\r\n      activeItemRect.top < scrollableRef.current.clientHeight &&\r\n      activeItemRect.bottom > 0\r\n    ) {\r\n      const activeItemIndex = allItems.indexOf(activeItem);\r\n      let prevItem = allItems[activeItemIndex - 1];\r\n      if (handler.shift) {\r\n        // get prev status that's not .timeline-item-alt\r\n        prevItem = allItems.findLast(\r\n          (item, index) =>\r\n            index < activeItemIndex &&\r\n            !item.classList.contains('timeline-item-alt'),\r\n        );\r\n      }\r\n      if (prevItem) {\r\n        prevItem.focus();\r\n        prevItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostItem = allItems.find((item) => {\r\n        const itemRect = item.getBoundingClientRect();\r\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostItem) {\r\n        topmostItem.focus();\r\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  const oRef = useHotkeys(['enter', 'o'], () => {\r\n    // open active status\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    if (activeItem) {\r\n      activeItem.click();\r\n    }\r\n  });\r\n\r\n  const {\r\n    scrollDirection,\r\n    nearReachStart,\r\n    nearReachEnd,\r\n    reachStart,\r\n    reachEnd,\r\n  } = useScroll({\r\n    scrollableRef,\r\n    distanceFromEnd: 2,\r\n    scrollThresholdStart: 44,\r\n  });\r\n\r\n  useEffect(() => {\r\n    scrollableRef.current?.scrollTo({ top: 0 });\r\n    loadItems(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    loadItems(true);\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    if (reachStart) {\r\n      loadItems(true);\r\n    }\r\n  }, [reachStart]);\r\n\r\n  useEffect(() => {\r\n    if (nearReachEnd || (reachEnd && showMore)) {\r\n      loadItems();\r\n    }\r\n  }, [nearReachEnd, showMore]);\r\n\r\n  const idle = useIdle(5000);\r\n  console.debug('🧘‍♀️ IDLE', idle);\r\n  const loadOrCheckUpdates = useCallback(\r\n    async ({ disableHoverCheck = false } = {}) => {\r\n      console.log('✨ Load or check updates', {\r\n        autoRefresh: snapStates.settings.autoRefresh,\r\n        scrollTop: scrollableRef.current.scrollTop,\r\n        disableHoverCheck,\r\n        idle,\r\n        inBackground: inBackground(),\r\n      });\r\n      if (\r\n        snapStates.settings.autoRefresh &&\r\n        scrollableRef.current.scrollTop === 0 &&\r\n        (disableHoverCheck || idle) &&\r\n        !inBackground()\r\n      ) {\r\n        console.log('✨ Load updates', snapStates.settings.autoRefresh);\r\n        loadItems(true);\r\n      } else {\r\n        console.log('✨ Check updates', snapStates.settings.autoRefresh);\r\n        const hasUpdate = await checkForUpdates();\r\n        if (hasUpdate) {\r\n          console.log('✨ Has new updates', id);\r\n          setShowNew(true);\r\n        }\r\n      }\r\n    },\r\n    [id, idle, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\r\n  );\r\n\r\n  const lastHiddenTime = useRef();\r\n  usePageVisibility(\r\n    (visible) => {\r\n      if (visible) {\r\n        const timeDiff = Date.now() - lastHiddenTime.current;\r\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\r\n          loadOrCheckUpdates({\r\n            disableHoverCheck: true,\r\n          });\r\n        }\r\n      } else {\r\n        lastHiddenTime.current = Date.now();\r\n      }\r\n      setVisible(visible);\r\n    },\r\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\r\n  );\r\n\r\n  // checkForUpdates interval\r\n  useInterval(\r\n    loadOrCheckUpdates,\r\n    visible && !showNew ? checkForUpdatesInterval : null,\r\n  );\r\n\r\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\r\n\r\n  return (\r\n    <div\r\n      id={`${id}-page`}\r\n      class=\"deck-container\"\r\n      ref={(node) => {\r\n        scrollableRef.current = node;\r\n        jRef.current = node;\r\n        kRef.current = node;\r\n        oRef.current = node;\r\n      }}\r\n      tabIndex=\"-1\"\r\n    >\r\n      <div class=\"timeline-deck deck\">\r\n        <header\r\n          hidden={hiddenUI}\r\n          onClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              scrollableRef.current?.scrollTo({\r\n                top: 0,\r\n                behavior: 'smooth',\r\n              });\r\n            }\r\n          }}\r\n          onDblClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              loadItems(true);\r\n            }\r\n          }}\r\n          class={uiState === 'loading' ? 'loading' : ''}\r\n        >\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              {headerStart !== null && headerStart !== undefined ? (\r\n                headerStart\r\n              ) : (\r\n                <Link to=\"/\" class=\"button plain home-button\">\r\n                  <Icon icon=\"home\" size=\"l\" />\r\n                </Link>\r\n              )}\r\n            </div>\r\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\r\n            <div class=\"header-side\">\r\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\r\n              {!!headerEnd && headerEnd}\r\n            </div>\r\n          </div>\r\n          {items.length > 0 &&\r\n            uiState !== 'loading' &&\r\n            !hiddenUI &&\r\n            showNew && (\r\n              <button\r\n                class=\"updates-button shiny-pill\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  loadItems(true);\r\n                  scrollableRef.current?.scrollTo({\r\n                    top: 0,\r\n                    behavior: 'smooth',\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon=\"arrow-up\" /> New posts\r\n              </button>\r\n            )}\r\n        </header>\r\n        {!!timelineStart && <div class=\"timeline-start\">{timelineStart}</div>}\r\n        {!!items.length ? (\r\n          <>\r\n            <ul class=\"timeline\">\r\n              {items.map((status) => {\r\n                const { id: statusID, reblog, items, type, _pinned } = status;\r\n                const actualStatusID = reblog?.id || statusID;\r\n                const url = instance\r\n                  ? `/${instance}/s/${actualStatusID}`\r\n                  : `/s/${actualStatusID}`;\r\n                let title = '';\r\n                if (type === 'boosts') {\r\n                  title = `${items.length} Boosts`;\r\n                } else if (type === 'pinned') {\r\n                  title = 'Pinned posts';\r\n                }\r\n                const isCarousel = type === 'boosts' || type === 'pinned';\r\n                if (items) {\r\n                  if (isCarousel) {\r\n                    // Here, we don't hide filtered posts, but we sort them last\r\n                    items.sort((a, b) => {\r\n                      if (a._filtered && !b._filtered) {\r\n                        return 1;\r\n                      }\r\n                      if (!a._filtered && b._filtered) {\r\n                        return -1;\r\n                      }\r\n                      return 0;\r\n                    });\r\n                    return (\r\n                      <li\r\n                        key={`timeline-${statusID}`}\r\n                        class=\"timeline-item-carousel\"\r\n                      >\r\n                        <StatusCarousel\r\n                          title={title}\r\n                          class={`${type}-carousel`}\r\n                        >\r\n                          {items.map((item) => {\r\n                            const { id: statusID, reblog } = item;\r\n                            const actualStatusID = reblog?.id || statusID;\r\n                            const url = instance\r\n                              ? `/${instance}/s/${actualStatusID}`\r\n                              : `/s/${actualStatusID}`;\r\n                            return (\r\n                              <li key={statusID}>\r\n                                <Link\r\n                                  class=\"status-carousel-link timeline-item-alt\"\r\n                                  to={url}\r\n                                >\r\n                                  {useItemID ? (\r\n                                    <Status\r\n                                      statusID={statusID}\r\n                                      instance={instance}\r\n                                      size=\"s\"\r\n                                      contentTextWeight\r\n                                      allowFilters={allowFilters}\r\n                                    />\r\n                                  ) : (\r\n                                    <Status\r\n                                      status={item}\r\n                                      instance={instance}\r\n                                      size=\"s\"\r\n                                      contentTextWeight\r\n                                      allowFilters={allowFilters}\r\n                                    />\r\n                                  )}\r\n                                </Link>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                        </StatusCarousel>\r\n                      </li>\r\n                    );\r\n                  }\r\n                  const manyItems = items.length > 3;\r\n                  return items.map((item, i) => {\r\n                    const { id: statusID, _differentAuthor } = item;\r\n                    const url = instance\r\n                      ? `/${instance}/s/${statusID}`\r\n                      : `/s/${statusID}`;\r\n                    const isMiddle = i > 0 && i < items.length - 1;\r\n                    const isSpoiler = item.sensitive && !!item.spoilerText;\r\n                    const showCompact =\r\n                      (!_differentAuthor && isSpoiler && i > 0) ||\r\n                      (manyItems &&\r\n                        isMiddle &&\r\n                        (type === 'thread' ||\r\n                          (type === 'conversation' &&\r\n                            !_differentAuthor &&\r\n                            !items[i - 1]._differentAuthor &&\r\n                            !items[i + 1]._differentAuthor)));\r\n                    return (\r\n                      <li\r\n                        key={`timeline-${statusID}`}\r\n                        class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\r\n                          i === 0\r\n                            ? 'start'\r\n                            : i === items.length - 1\r\n                            ? 'end'\r\n                            : 'middle'\r\n                        } ${\r\n                          _differentAuthor ? 'timeline-item-diff-author' : ''\r\n                        }`}\r\n                      >\r\n                        <Link class=\"status-link timeline-item\" to={url}>\r\n                          {showCompact ? (\r\n                            <TimelineStatusCompact\r\n                              status={item}\r\n                              instance={instance}\r\n                            />\r\n                          ) : useItemID ? (\r\n                            <Status\r\n                              statusID={statusID}\r\n                              instance={instance}\r\n                              allowFilters={allowFilters}\r\n                            />\r\n                          ) : (\r\n                            <Status\r\n                              status={item}\r\n                              instance={instance}\r\n                              allowFilters={allowFilters}\r\n                            />\r\n                          )}\r\n                        </Link>\r\n                      </li>\r\n                    );\r\n                  });\r\n                }\r\n                return (\r\n                  <li key={`timeline-${statusID + _pinned}`}>\r\n                    <Link class=\"status-link timeline-item\" to={url}>\r\n                      {useItemID ? (\r\n                        <Status\r\n                          statusID={statusID}\r\n                          instance={instance}\r\n                          allowFilters={allowFilters}\r\n                        />\r\n                      ) : (\r\n                        <Status\r\n                          status={status}\r\n                          instance={instance}\r\n                          allowFilters={allowFilters}\r\n                        />\r\n                      )}\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              })}\r\n              {showMore && uiState === 'loading' && (\r\n                <>\r\n                  <li\r\n                    style={{\r\n                      height: '20vh',\r\n                    }}\r\n                  >\r\n                    <Status skeleton />\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      height: '25vh',\r\n                    }}\r\n                  >\r\n                    <Status skeleton />\r\n                  </li>\r\n                </>\r\n              )}\r\n            </ul>\r\n            {uiState === 'default' &&\r\n              (showMore ? (\r\n                <InView\r\n                  onChange={(inView) => {\r\n                    if (inView) {\r\n                      loadItems();\r\n                    }\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain block\"\r\n                    onClick={() => loadItems()}\r\n                    style={{ marginBlockEnd: '6em' }}\r\n                  >\r\n                    Show more&hellip;\r\n                  </button>\r\n                </InView>\r\n              ) : (\r\n                <p class=\"ui-state insignificant\">The end.</p>\r\n              ))}\r\n          </>\r\n        ) : uiState === 'loading' ? (\r\n          <ul class=\"timeline\">\r\n            {Array.from({ length: 5 }).map((_, i) => (\r\n              <li key={i}>\r\n                <Status skeleton />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\r\n        )}\r\n        {uiState === 'error' && (\r\n          <p class=\"ui-state\">\r\n            {errorText}\r\n            <br />\r\n            <br />\r\n            <button\r\n              class=\"button plain\"\r\n              onClick={() => loadItems(!items.length)}\r\n            >\r\n              Try again\r\n            </button>\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StatusCarousel({ title, class: className, children }) {\r\n  const carouselRef = useRef();\r\n  const { reachStart, reachEnd, init } = useScroll({\r\n    scrollableRef: carouselRef,\r\n    direction: 'horizontal',\r\n  });\r\n  useEffect(() => {\r\n    init?.();\r\n  }, []);\r\n\r\n  return (\r\n    <div class={`status-carousel ${className}`}>\r\n      <header>\r\n        <h3>{title}</h3>\r\n        <span>\r\n          <button\r\n            type=\"button\"\r\n            class=\"small plain2\"\r\n            disabled={reachStart}\r\n            onClick={() => {\r\n              carouselRef.current?.scrollBy({\r\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"chevron-left\" />\r\n          </button>{' '}\r\n          <button\r\n            type=\"button\"\r\n            class=\"small plain2\"\r\n            disabled={reachEnd}\r\n            onClick={() => {\r\n              carouselRef.current?.scrollBy({\r\n                left: Math.min(320, carouselRef.current?.offsetWidth),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"chevron-right\" />\r\n          </button>\r\n        </span>\r\n      </header>\r\n      <ul ref={carouselRef}>{children}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TimelineStatusCompact({ status, instance }) {\r\n  const snapStates = useSnapshot(states);\r\n  const { id } = status;\r\n  const statusPeekText = statusPeek(status);\r\n  const sKey = statusKey(id, instance);\r\n  return (\r\n    <article class=\"status compact-thread\" tabindex=\"-1\">\r\n      {!!snapStates.statusThreadNumber[sKey] ? (\r\n        <div class=\"status-thread-badge\">\r\n          <Icon icon=\"thread\" size=\"s\" />\r\n          {snapStates.statusThreadNumber[sKey]\r\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\r\n            : ''}\r\n        </div>\r\n      ) : (\r\n        <div class=\"status-thread-badge\">\r\n          <Icon icon=\"thread\" size=\"s\" />\r\n        </div>\r\n      )}\r\n      <div class=\"content-compact\" title={statusPeekText}>\r\n        {statusPeekText}\r\n        {status.sensitive && status.spoilerText && (\r\n          <>\r\n            {' '}\r\n            <span class=\"spoiler-badge\">\r\n              <Icon icon=\"eye-close\" size=\"s\" />\r\n            </span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nfunction inBackground() {\r\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\r\n}\r\n\r\nexport default Timeline;\r\n","import { MenuItem } from '@szhsin/react-menu';\r\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useParams, useSearchParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountInfo from '../components/account-info';\r\nimport EmojiText from '../components/emoji-text';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Menu2 from '../components/menu2';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction AccountStatuses() {\r\n  const snapStates = useSnapshot(states);\r\n  const { id, ...params } = useParams();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const excludeReplies = !searchParams.get('replies');\r\n  const excludeBoosts = !!searchParams.get('boosts');\r\n  const tagged = searchParams.get('tagged');\r\n  const media = !!searchParams.get('media');\r\n  const { masto, instance, authenticated } = api({ instance: params.instance });\r\n  const accountStatusesIterator = useRef();\r\n  async function fetchAccountStatuses(firstLoad) {\r\n    const results = [];\r\n    if (firstLoad) {\r\n      const { value: pinnedStatuses } = await masto.v1.accounts\r\n        .listStatuses(id, {\r\n          pinned: true,\r\n        })\r\n        .next();\r\n      if (pinnedStatuses?.length && !tagged && !media) {\r\n        pinnedStatuses.forEach((status) => {\r\n          status._pinned = true;\r\n          saveStatus(status, instance);\r\n        });\r\n        if (pinnedStatuses.length >= 3) {\r\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\r\n          results.push({\r\n            id: pinnedStatusesIds,\r\n            items: pinnedStatuses,\r\n            type: 'pinned',\r\n          });\r\n        } else {\r\n          results.push(...pinnedStatuses);\r\n        }\r\n      }\r\n    }\r\n    if (firstLoad || !accountStatusesIterator.current) {\r\n      accountStatusesIterator.current = masto.v1.accounts.listStatuses(id, {\r\n        limit: LIMIT,\r\n        exclude_replies: excludeReplies,\r\n        exclude_reblogs: excludeBoosts,\r\n        only_media: media,\r\n        tagged,\r\n      });\r\n    }\r\n    const { value, done } = await accountStatusesIterator.current.next();\r\n    if (value?.length) {\r\n      results.push(...value);\r\n\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      value: results,\r\n      done,\r\n    };\r\n  }\r\n\r\n  const [account, setAccount] = useState();\r\n  const [featuredTags, setFeaturedTags] = useState([]);\r\n  useTitle(\r\n    `${account?.displayName ? account.displayName + ' ' : ''}@${\r\n      account?.acct ? account.acct : 'Account posts'\r\n    }`,\r\n    '/:instance?/a/:id',\r\n  );\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const acc = await masto.v1.accounts.fetch(id);\r\n        console.log(acc);\r\n        setAccount(acc);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        const featuredTags = await masto.v1.accounts.listFeaturedTags(id);\r\n        console.log({ featuredTags });\r\n        setFeaturedTags(featuredTags);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [id]);\r\n\r\n  const { displayName, acct, emojis } = account || {};\r\n\r\n  const filterBarRef = useRef();\r\n  const TimelineStart = useMemo(() => {\r\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\r\n    const filtered = !excludeReplies || excludeBoosts || tagged || media;\r\n    return (\r\n      <>\r\n        <AccountInfo\r\n          instance={instance}\r\n          account={cachedAccount || id}\r\n          fetchAccount={() => masto.v1.accounts.fetch(id)}\r\n          authenticated={authenticated}\r\n          standalone\r\n        />\r\n        <div class=\"filter-bar\" ref={filterBarRef}>\r\n          {filtered ? (\r\n            <Link\r\n              to={`/${instance}/a/${id}`}\r\n              class=\"insignificant filter-clear\"\r\n              title=\"Clear filters\"\r\n            >\r\n              <Icon icon=\"x\" size=\"l\" />\r\n            </Link>\r\n          ) : (\r\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\r\n          )}\r\n          <Link\r\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\r\n            onClick={() => {\r\n              if (excludeReplies) {\r\n                showToast('Showing post with replies');\r\n              }\r\n            }}\r\n            class={excludeReplies ? '' : 'is-active'}\r\n          >\r\n            + Replies\r\n          </Link>\r\n          <Link\r\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\r\n            onClick={() => {\r\n              if (!excludeBoosts) {\r\n                showToast('Showing posts without boosts');\r\n              }\r\n            }}\r\n            class={!excludeBoosts ? '' : 'is-active'}\r\n          >\r\n            - Boosts\r\n          </Link>\r\n          <Link\r\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\r\n            onClick={() => {\r\n              if (!media) {\r\n                showToast('Showing posts with media');\r\n              }\r\n            }}\r\n            class={media ? 'is-active' : ''}\r\n          >\r\n            Media\r\n          </Link>\r\n          {featuredTags.map((tag) => (\r\n            <Link\r\n              to={`/${instance}/a/${id}${\r\n                tagged === tag.name\r\n                  ? ''\r\n                  : `?tagged=${encodeURIComponent(tag.name)}`\r\n              }`}\r\n              onClick={() => {\r\n                if (tagged !== tag.name) {\r\n                  showToast(`Showing posts tagged with #${tag.name}`);\r\n                }\r\n              }}\r\n              class={tagged === tag.name ? 'is-active' : ''}\r\n            >\r\n              <span>\r\n                <span class=\"more-insignificant\">#</span>\r\n                {tag.name}\r\n              </span>\r\n              {\r\n                // The count differs based on instance 😅\r\n              }\r\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }, [\r\n    id,\r\n    instance,\r\n    authenticated,\r\n    excludeReplies,\r\n    excludeBoosts,\r\n    featuredTags,\r\n    tagged,\r\n    media,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // Focus on .is-active\r\n    const active = filterBarRef.current?.querySelector('.is-active');\r\n    if (active) {\r\n      console.log('active', active, active.offsetLeft);\r\n      filterBarRef.current.scrollTo({\r\n        behavior: 'smooth',\r\n        left:\r\n          active.offsetLeft -\r\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\r\n      });\r\n    }\r\n  }, [featuredTags, tagged, media, excludeReplies, excludeBoosts]);\r\n\r\n  const accountInstance = useMemo(() => {\r\n    if (!account?.url) return null;\r\n    const domain = new URL(account.url).hostname;\r\n    return domain;\r\n  }, [account]);\r\n  const sameInstance = instance === accountInstance;\r\n  const allowSwitch = !!account && !sameInstance;\r\n\r\n  return (\r\n    <Timeline\r\n      key={id}\r\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\r\n      titleComponent={\r\n        <h1\r\n          class=\"header-account\"\r\n          // onClick={() => {\r\n          //   states.showAccount = {\r\n          //     account,\r\n          //     instance,\r\n          //   };\r\n          // }}\r\n        >\r\n          <b>\r\n            <EmojiText text={displayName} emojis={emojis} />\r\n          </b>\r\n          <div>\r\n            <span>@{acct}</span>\r\n          </div>\r\n        </h1>\r\n      }\r\n      id=\"account-statuses\"\r\n      instance={instance}\r\n      emptyText=\"Nothing to see here yet.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchAccountStatuses}\r\n      useItemID\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      timelineStart={TimelineStart}\r\n      refresh={excludeReplies + excludeBoosts + tagged + media}\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem\r\n            disabled={!allowSwitch}\r\n            onClick={() => {\r\n              (async () => {\r\n                try {\r\n                  const { masto } = api({\r\n                    instance: accountInstance,\r\n                  });\r\n                  const acc = await masto.v1.accounts.lookup({\r\n                    acct: account.acct,\r\n                  });\r\n                  const { id } = acc;\r\n                  location.hash = `/${accountInstance}/a/${id}`;\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  alert('Unable to fetch account info');\r\n                }\r\n              })();\r\n            }}\r\n          >\r\n            <Icon icon=\"transfer\" />{' '}\r\n            <small class=\"menu-double-lines\">\r\n              Switch to account's instance (<b>{accountInstance}</b>)\r\n            </small>\r\n          </MenuItem>\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default AccountStatuses;\r\n","import { useRef } from 'preact/hooks';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Bookmarks() {\r\n  useTitle('Bookmarks', '/b');\r\n  const { masto, instance } = api();\r\n  const bookmarksIterator = useRef();\r\n  async function fetchBookmarks(firstLoad) {\r\n    if (firstLoad || !bookmarksIterator.current) {\r\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\r\n    }\r\n    return await bookmarksIterator.current.next();\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Bookmarks\"\r\n      id=\"bookmarks\"\r\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\r\n      errorText=\"Unable to load bookmarks\"\r\n      instance={instance}\r\n      fetchItems={fetchBookmarks}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Bookmarks;\r\n","import { useRef } from 'preact/hooks';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Favourites() {\r\n  useTitle('Favourites', '/f');\r\n  const { masto, instance } = api();\r\n  const favouritesIterator = useRef();\r\n  async function fetchFavourites(firstLoad) {\r\n    if (firstLoad || !favouritesIterator.current) {\r\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\r\n    }\r\n    return await favouritesIterator.current.next();\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Favourites\"\r\n      id=\"favourites\"\r\n      emptyText=\"No favourites yet. Go favourite something!\"\r\n      errorText=\"Unable to load favourites\"\r\n      instance={instance}\r\n      fetchItems={fetchFavourites}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Favourites;\r\n","import { useEffect, useState } from 'preact/hooks';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 200;\r\n\r\nfunction FollowedHashtags() {\r\n  const { masto, instance } = api();\r\n  useTitle(`Followed Hashtags`, `/ft`);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const [followedHashtags, setFollowedHashtags] = useState([]);\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const iterator = masto.v1.followedTags.list({\r\n          limit: LIMIT,\r\n        });\r\n        const tags = [];\r\n        do {\r\n          const { value, done } = await iterator.next();\r\n          if (done || value?.length === 0) break;\r\n          tags.push(...value);\r\n        } while (true);\r\n        tags.sort((a, b) => a.name.localeCompare(b.name));\r\n        console.log(tags);\r\n        setFollowedHashtags(tags);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\r\n      <div class=\"timeline-deck deck\">\r\n        <header>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Followed Hashtags</h1>\r\n            <div class=\"header-side\" />\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {followedHashtags.length > 0 ? (\r\n            <ul class=\"link-list\">\r\n              {followedHashtags.map((tag) => (\r\n                <li>\r\n                  <Link\r\n                    to={\r\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\r\n                    }\r\n                  >\r\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader abrupt />\r\n            </p>\r\n          ) : uiState === 'error' ? (\r\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\r\n          ) : (\r\n            <p class=\"ui-state\">No hashtags followed yet.</p>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FollowedHashtags;\r\n","import store from './store';\r\n\r\nexport function filteredItem(item, filterContext, currentAccountID) {\r\n  const { filtered } = item;\r\n  if (!filtered?.length) return true;\r\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\r\n  if (isSelf) return true;\r\n  const appliedFilters = filtered.filter((f) => {\r\n    const { filter } = f;\r\n    const hasContext = filter.context.includes(filterContext);\r\n    if (!hasContext) return false;\r\n    if (!filter.expiresAt) return hasContext;\r\n    return new Date(filter.expiresAt) > new Date();\r\n  });\r\n  if (!appliedFilters.length) return true;\r\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\r\n  console.log({ isHidden, filtered, appliedFilters, item });\r\n  if (isHidden) return false;\r\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\r\n  if (isWarn) {\r\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\r\n    item._filtered = {\r\n      titles: filterTitles,\r\n      titlesStr: filterTitles.join(' • '),\r\n    };\r\n  }\r\n  return isWarn;\r\n}\r\nexport function filteredItems(items, filterContext) {\r\n  if (!items?.length) return [];\r\n  if (!filterContext) return items;\r\n  const currentAccountID = store.session.get('currentAccount');\r\n  return items.filter((item) =>\r\n    filteredItem(item, filterContext, currentAccountID),\r\n  );\r\n}\r\n","import { useEffect, useRef } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states from '../utils/states';\r\nimport { getStatus, saveStatus } from '../utils/states';\r\nimport { dedupeBoosts } from '../utils/timeline-utils';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Following({ title, path, id, ...props }) {\r\n  useTitle(title || 'Following', path || '/following');\r\n  const { masto, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const homeIterator = useRef();\r\n  const latestItem = useRef();\r\n\r\n  console.debug('RENDER Following', title, id);\r\n\r\n  async function fetchHome(firstLoad) {\r\n    if (firstLoad || !homeIterator.current) {\r\n      homeIterator.current = masto.v1.timelines.listHome({ limit: LIMIT });\r\n    }\r\n    const results = await homeIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n        console.log('First load', latestItem.current);\r\n      }\r\n\r\n      value = filteredItems(value, 'home');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n      value = dedupeBoosts(value, instance);\r\n\r\n      // ENFORCE sort by datetime (Latest first)\r\n      value.sort((a, b) => {\r\n        const aDate = new Date(a.createdAt);\r\n        const bDate = new Date(b.createdAt);\r\n        return bDate - aDate;\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines\r\n        .listHome({\r\n          limit: 5,\r\n          since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      console.log('checkForUpdates', latestItem.current, value);\r\n      if (value?.length) {\r\n        latestItem.current = value[0].id;\r\n        value = dedupeBoosts(value, instance);\r\n        value = filteredItems(value, 'home');\r\n        if (value.some((item) => !item.reblog)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const ws = useRef();\r\n  const streamUser = async () => {\r\n    console.log('🎏 Start streaming user', ws.current);\r\n    if (\r\n      ws.current &&\r\n      (ws.current.readyState === WebSocket.CONNECTING ||\r\n        ws.current.readyState === WebSocket.OPEN)\r\n    ) {\r\n      console.log('🎏 Streaming user already open');\r\n      return;\r\n    }\r\n    const stream = await masto.v1.stream.streamUser();\r\n    ws.current = stream.ws;\r\n    ws.current.__id = Math.random();\r\n    console.log('🎏 Streaming user', ws.current);\r\n\r\n    stream.on('status.update', (status) => {\r\n      console.log(`🔄 Status ${status.id} updated`);\r\n      saveStatus(status, instance);\r\n    });\r\n\r\n    stream.on('delete', (statusID) => {\r\n      console.log(`❌ Status ${statusID} deleted`);\r\n      // delete states.statuses[statusID];\r\n      const s = getStatus(statusID, instance);\r\n      if (s) s._deleted = true;\r\n    });\r\n\r\n    stream.ws.onclose = () => {\r\n      console.log('🎏 Streaming user closed');\r\n    };\r\n\r\n    return stream;\r\n  };\r\n  useEffect(() => {\r\n    let stream;\r\n    (async () => {\r\n      stream = await streamUser();\r\n    })();\r\n    return () => {\r\n      if (stream) {\r\n        stream.ws.close();\r\n        ws.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Timeline\r\n      title={title || 'Following'}\r\n      id={id || 'following'}\r\n      emptyText=\"Nothing to see here.\"\r\n      errorText=\"Unable to load posts.\"\r\n      instance={instance}\r\n      fetchItems={fetchHome}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      {...props}\r\n      allowFilters\r\n    />\r\n  );\r\n}\r\n\r\nexport default Following;\r\n","import {\r\n  FocusableItem,\r\n  MenuDivider,\r\n  MenuGroup,\r\n  MenuItem,\r\n} from '@szhsin/react-menu';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nimport Icon from '../components/icon';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\n// Limit is 4 per \"mode\"\r\n// https://github.com/mastodon/mastodon/issues/15194\r\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\r\nconst TAGS_LIMIT_PER_MODE = 4;\r\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\r\n\r\nfunction Hashtags({ columnMode, ...props }) {\r\n  // const navigate = useNavigate();\r\n  let { hashtag, ...params } = columnMode ? {} : useParams();\r\n  if (props.hashtag) hashtag = props.hashtag;\r\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\r\n  hashtags.sort();\r\n  hashtag = hashtags[0];\r\n\r\n  const { masto, instance, authenticated } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const { authenticated: currentAuthenticated } = api();\r\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\r\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\r\n  useTitle(title, `/:instance?/t/:hashtag`);\r\n  const latestItem = useRef();\r\n\r\n  // const hashtagsIterator = useRef();\r\n  const maxID = useRef(undefined);\r\n  async function fetchHashtags(firstLoad) {\r\n    // if (firstLoad || !hashtagsIterator.current) {\r\n    //   hashtagsIterator.current = masto.v1.timelines.listHashtag(hashtag, {\r\n    //     limit: LIMIT,\r\n    //     any: hashtags.slice(1),\r\n    //   });\r\n    // }\r\n    // const results = await hashtagsIterator.current.next();\r\n\r\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\r\n    const results = await masto.v1.timelines\r\n      .listHashtag(hashtag, {\r\n        limit: LIMIT,\r\n        any: hashtags.slice(1),\r\n        maxId: firstLoad ? undefined : maxID.current,\r\n      })\r\n      .next();\r\n    const { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n\r\n      maxID.current = value[value.length - 1].id;\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines\r\n        .listHashtag(hashtag, {\r\n          limit: 1,\r\n          any: hashtags.slice(1),\r\n          since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      const { value } = results;\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const [followUIState, setFollowUIState] = useState('default');\r\n  const [info, setInfo] = useState();\r\n  // Get hashtag info\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const info = await masto.v1.tags.fetch(hashtag);\r\n        console.log(info);\r\n        setInfo(info);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [hashtag]);\r\n\r\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance + hashtagTitle}\r\n      title={title}\r\n      titleComponent={\r\n        !!instance && (\r\n          <h1 class=\"header-account\">\r\n            <b>{hashtagTitle}</b>\r\n            <div>{instance}</div>\r\n          </h1>\r\n        )\r\n      }\r\n      id=\"hashtag\"\r\n      instance={instance}\r\n      emptyText=\"No one has posted anything with this tag yet.\"\r\n      errorText=\"Unable to load posts with this tag\"\r\n      fetchItems={fetchHashtags}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          {!!info && hashtags.length === 1 && (\r\n            <>\r\n              <MenuConfirm\r\n                subMenu\r\n                confirm={info.following}\r\n                confirmLabel={`Unfollow #${hashtag}?`}\r\n                disabled={followUIState === 'loading' || !authenticated}\r\n                onClick={() => {\r\n                  setFollowUIState('loading');\r\n                  if (info.following) {\r\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\r\n                    // if (!yes) {\r\n                    //   setFollowUIState('default');\r\n                    //   return;\r\n                    // }\r\n                    masto.v1.tags\r\n                      .unfollow(hashtag)\r\n                      .then(() => {\r\n                        setInfo({ ...info, following: false });\r\n                        showToast(`Unfollowed #${hashtag}`);\r\n                      })\r\n                      .catch((e) => {\r\n                        alert(e);\r\n                        console.error(e);\r\n                      })\r\n                      .finally(() => {\r\n                        setFollowUIState('default');\r\n                      });\r\n                  } else {\r\n                    masto.v1.tags\r\n                      .follow(hashtag)\r\n                      .then(() => {\r\n                        setInfo({ ...info, following: true });\r\n                        showToast(`Followed #${hashtag}`);\r\n                      })\r\n                      .catch((e) => {\r\n                        alert(e);\r\n                        console.error(e);\r\n                      })\r\n                      .finally(() => {\r\n                        setFollowUIState('default');\r\n                      });\r\n                  }\r\n                }}\r\n              >\r\n                {info.following ? (\r\n                  <>\r\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Icon icon=\"plus\" /> <span>Follow</span>\r\n                  </>\r\n                )}\r\n              </MenuConfirm>\r\n              <MenuDivider />\r\n            </>\r\n          )}\r\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\r\n            {({ ref }) => (\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  const newHashtag = e.target[0].value?.trim?.();\r\n                  // Use includes but need to be case insensitive\r\n                  if (\r\n                    newHashtag &&\r\n                    !hashtags.some(\r\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\r\n                    )\r\n                  ) {\r\n                    hashtags.push(newHashtag);\r\n                    hashtags.sort();\r\n                    // navigate(\r\n                    //   instance\r\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\r\n                    //     : `/t/${hashtags.join('+')}`,\r\n                    // );\r\n                    location.hash = instance\r\n                      ? `/${instance}/t/${hashtags.join('+')}`\r\n                      : `/t/${hashtags.join('+')}`;\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"hashtag\" />\r\n                <input\r\n                  ref={ref}\r\n                  type=\"text\"\r\n                  placeholder={\r\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\r\n                  }\r\n                  required\r\n                  autocorrect=\"off\"\r\n                  autocapitalize=\"off\"\r\n                  spellcheck={false}\r\n                  // no spaces, no hashtags\r\n                  pattern=\"[^#][^\\s#]+[^#]\"\r\n                  disabled={reachLimit}\r\n                />\r\n              </form>\r\n            )}\r\n          </FocusableItem>\r\n          <MenuGroup takeOverflow>\r\n            {hashtags.map((t, i) => (\r\n              <MenuItem\r\n                key={t}\r\n                disabled={hashtags.length === 1}\r\n                onClick={(e) => {\r\n                  hashtags.splice(i, 1);\r\n                  hashtags.sort();\r\n                  // navigate(\r\n                  //   instance\r\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\r\n                  //     : `/t/${hashtags.join('+')}`,\r\n                  // );\r\n                  location.hash = instance\r\n                    ? `/${instance}/t/${hashtags.join('+')}`\r\n                    : `/t/${hashtags.join('+')}`;\r\n                }}\r\n              >\r\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\r\n                <span>\r\n                  <span class=\"more-insignificant\">#</span>\r\n                  {t}\r\n                </span>\r\n              </MenuItem>\r\n            ))}\r\n          </MenuGroup>\r\n          <MenuDivider />\r\n          <MenuItem\r\n            disabled={!currentAuthenticated}\r\n            onClick={() => {\r\n              const shortcut = {\r\n                type: 'hashtag',\r\n                hashtag: hashtags.join(' '),\r\n                instance,\r\n              };\r\n              // Check if already exists\r\n              const exists = states.shortcuts.some(\r\n                (s) =>\r\n                  s.type === shortcut.type &&\r\n                  s.hashtag\r\n                    .split(/[\\s+]+/)\r\n                    .sort()\r\n                    .join(' ') ===\r\n                    shortcut.hashtag\r\n                      .split(/[\\s+]+/)\r\n                      .sort()\r\n                      .join(' ') &&\r\n                  (s.instance ? s.instance === shortcut.instance : true),\r\n              );\r\n              if (exists) {\r\n                alert('This shortcut already exists');\r\n              } else {\r\n                states.shortcuts.push(shortcut);\r\n                showToast(`Hashtag shortcut added`);\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\r\n          </MenuItem>\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\r\n                location.hash = `/${newInstance}/t/${hashtags.join('+')}`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Hashtags;\r\n","import './lists.css';\r\n\r\nimport { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport ListAddEdit from '../components/list-add-edit';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport Modal from '../components/modal';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction List(props) {\r\n  const snapStates = useSnapshot(states);\r\n  const { masto, instance } = api();\r\n  const id = props?.id || useParams()?.id;\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  const listIterator = useRef();\r\n  async function fetchList(firstLoad) {\r\n    if (firstLoad || !listIterator.current) {\r\n      listIterator.current = masto.v1.timelines.listList(id, {\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await listIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      value = filteredItems(value, 'home');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines.listList(id, {\r\n        limit: 1,\r\n        since_id: latestItem.current,\r\n      });\r\n      let { value } = results;\r\n      value = filteredItems(value, 'home');\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const [list, setList] = useState({ title: 'List' });\r\n  // const [title, setTitle] = useState(`List`);\r\n  useTitle(list.title, `/l/:id`);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const list = await masto.v1.lists.fetch(id);\r\n        setList(list);\r\n        // setTitle(list.title);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [id]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Timeline\r\n        key={id}\r\n        title={list.title}\r\n        id=\"list\"\r\n        emptyText=\"Nothing yet.\"\r\n        errorText=\"Unable to load posts.\"\r\n        instance={instance}\r\n        fetchItems={fetchList}\r\n        checkForUpdates={checkForUpdates}\r\n        useItemID\r\n        boostsCarousel={snapStates.settings.boostsCarousel}\r\n        allowFilters\r\n        // refresh={reloadCount}\r\n        headerStart={\r\n          <Link to=\"/l\" class=\"button plain\">\r\n            <Icon icon=\"list\" size=\"l\" />\r\n          </Link>\r\n        }\r\n        headerEnd={\r\n          <Menu2\r\n            portal\r\n            setDownOverflow\r\n            overflow=\"auto\"\r\n            viewScroll=\"close\"\r\n            position=\"anchor\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"plain\">\r\n                <Icon icon=\"more\" size=\"l\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuItem\r\n              onClick={() =>\r\n                setShowListAddEditModal({\r\n                  list,\r\n                })\r\n              }\r\n            >\r\n              <Icon icon=\"pencil\" size=\"l\" />\r\n              <span>Edit</span>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\r\n              <Icon icon=\"group\" size=\"l\" />\r\n              <span>Manage members</span>\r\n            </MenuItem>\r\n          </Menu2>\r\n        }\r\n      />\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success' && result.list) {\r\n                setList(result.list);\r\n                // reload();\r\n              } else if (result.state === 'deleted') {\r\n                // navigate('/l');\r\n                location.hash = '/l';\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {showManageMembersModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowManageMembersModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListManageMembers\r\n            listID={id}\r\n            onClose={() => setShowManageMembersModal(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst MEMBERS_LIMIT = 40;\r\nfunction ListManageMembers({ listID, onClose }) {\r\n  // Show list of members with [Remove] button\r\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\r\n  // Show [Add] button after removing a member\r\n  const { masto, instance } = api();\r\n  const [members, setMembers] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  const membersIterator = useRef();\r\n\r\n  async function fetchMembers(firstLoad) {\r\n    setShowMore(false);\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        if (firstLoad || !membersIterator.current) {\r\n          membersIterator.current = masto.v1.lists.listAccounts(listID, {\r\n            limit: MEMBERS_LIMIT,\r\n          });\r\n        }\r\n        const results = await membersIterator.current.next();\r\n        let { done, value } = results;\r\n        if (value?.length) {\r\n          if (firstLoad) {\r\n            setMembers(value);\r\n          } else {\r\n            setMembers(members.concat(value));\r\n          }\r\n          setShowMore(!done);\r\n        } else {\r\n          setShowMore(false);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMembers(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div class=\"sheet\" id=\"list-manage-members-container\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Manage members</h2>\r\n      </header>\r\n      <main>\r\n        <ul>\r\n          {members.map((member) => (\r\n            <li key={member.id}>\r\n              <AccountBlock account={member} instance={instance} />\r\n              <RemoveAddButton account={member} listID={listID} />\r\n            </li>\r\n          ))}\r\n          {showMore && uiState === 'default' && (\r\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\r\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\r\n                Show more&hellip;\r\n              </button>\r\n            </InView>\r\n          )}\r\n        </ul>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RemoveAddButton({ account, listID }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [removed, setRemoved] = useState(false);\r\n\r\n  return (\r\n    <MenuConfirm\r\n      confirm={!removed}\r\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\r\n      align=\"end\"\r\n      menuItemClassName=\"danger\"\r\n      onClick={() => {\r\n        if (removed) {\r\n          setUIState('loading');\r\n          (async () => {\r\n            try {\r\n              await masto.v1.lists.addAccount(listID, {\r\n                accountIds: [account.id],\r\n              });\r\n              setUIState('default');\r\n              setRemoved(false);\r\n            } catch (e) {\r\n              setUIState('error');\r\n            }\r\n          })();\r\n        } else {\r\n          // const yes = confirm(`Remove ${account.username} from this list?`);\r\n          // if (!yes) return;\r\n          setUIState('loading');\r\n\r\n          (async () => {\r\n            try {\r\n              await masto.v1.lists.removeAccount(listID, {\r\n                accountIds: [account.id],\r\n              });\r\n              setUIState('default');\r\n              setRemoved(true);\r\n            } catch (e) {\r\n              setUIState('error');\r\n            }\r\n          })();\r\n        }\r\n      }}\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        class={`light ${removed ? '' : 'danger'}`}\r\n        disabled={uiState === 'loading'}\r\n      >\r\n        {removed ? 'Add' : 'Remove…'}\r\n      </button>\r\n    </MenuConfirm>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import { useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport Link from '../components/link';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\nconst emptySearchParams = new URLSearchParams();\r\n\r\nfunction Mentions({ columnMode, ...props }) {\r\n  useTitle('Mentions', '/mentions');\r\n  const { masto, instance } = api();\r\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\r\n  const [stateType, setStateType] = useState(null);\r\n  const type = props?.type || searchParams.get('type') || stateType;\r\n\r\n  const mentionsIterator = useRef();\r\n  const latestItem = useRef();\r\n\r\n  async function fetchMentions(firstLoad) {\r\n    if (firstLoad || !mentionsIterator.current) {\r\n      mentionsIterator.current = masto.v1.notifications.list({\r\n        limit: LIMIT,\r\n        types: ['mention'],\r\n      });\r\n    }\r\n    const results = await mentionsIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n        console.log('First load', latestItem.current);\r\n      }\r\n\r\n      value.forEach(({ status: item }) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value: value?.map((item) => item.status),\r\n    };\r\n  }\r\n\r\n  const conversationsIterator = useRef();\r\n  const latestConversationItem = useRef();\r\n  async function fetchConversations(firstLoad) {\r\n    if (firstLoad || !conversationsIterator.current) {\r\n      conversationsIterator.current = masto.v1.conversations.list({\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await conversationsIterator.current.next();\r\n    let { value } = results;\r\n    value = value?.filter((item) => item.lastStatus);\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestConversationItem.current = value[0].lastStatus.id;\r\n        console.log('First load', latestConversationItem.current);\r\n      }\r\n\r\n      value.forEach(({ lastStatus: item }) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    console.log('results', results);\r\n    return {\r\n      ...results,\r\n      value: value?.map((item) => item.lastStatus),\r\n    };\r\n  }\r\n\r\n  function fetchItems(...args) {\r\n    if (type === 'private') {\r\n      return fetchConversations(...args);\r\n    }\r\n    return fetchMentions(...args);\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    if (type === 'private') {\r\n      try {\r\n        const results = await masto.v1.conversations\r\n          .list({\r\n            limit: 1,\r\n            since_id: latestConversationItem.current,\r\n          })\r\n          .next();\r\n        let { value } = results;\r\n        console.log(\r\n          'checkForUpdates PRIVATE',\r\n          latestConversationItem.current,\r\n          value,\r\n        );\r\n        if (value?.length) {\r\n          latestConversationItem.current = value[0].lastStatus.id;\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    } else {\r\n      try {\r\n        const results = await masto.v1.notifications\r\n          .list({\r\n            limit: 1,\r\n            types: ['mention'],\r\n            since_id: latestItem.current,\r\n          })\r\n          .next();\r\n        let { value } = results;\r\n        console.log('checkForUpdates ALL', latestItem.current, value);\r\n        if (value?.length) {\r\n          latestItem.current = value[0].id;\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const TimelineStart = useMemo(() => {\r\n    return (\r\n      <div class=\"filter-bar centered\">\r\n        <Link\r\n          to=\"/mentions\"\r\n          class={!type ? 'is-active' : ''}\r\n          onClick={(e) => {\r\n            if (columnMode) {\r\n              e.preventDefault();\r\n              setStateType(null);\r\n            }\r\n          }}\r\n        >\r\n          All\r\n        </Link>\r\n        <Link\r\n          to=\"/mentions?type=private\"\r\n          class={type === 'private' ? 'is-active' : ''}\r\n          onClick={(e) => {\r\n            if (columnMode) {\r\n              e.preventDefault();\r\n              setStateType('private');\r\n            }\r\n          }}\r\n        >\r\n          Private\r\n        </Link>\r\n      </div>\r\n    );\r\n  }, [type]);\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Mentions\"\r\n      id=\"mentions\"\r\n      emptyText=\"No one mentioned you :(\"\r\n      errorText=\"Unable to load mentions.\"\r\n      instance={instance}\r\n      fetchItems={fetchItems}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      timelineStart={TimelineStart}\r\n      refresh={type}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Mentions;\r\n","function groupNotifications(notifications) {\r\n  // Create new flat list of notifications\r\n  // Combine sibling notifications based on type and status id\r\n  // Concat all notification.account into an array of _accounts\r\n  const notificationsMap = {};\r\n  const cleanNotifications = [];\r\n  for (let i = 0, j = 0; i < notifications.length; i++) {\r\n    const notification = notifications[i];\r\n    const { status, account, type, createdAt } = notification;\r\n    const date = new Date(createdAt).toLocaleDateString();\r\n    let virtualType = type;\r\n    if (type === 'favourite' || type === 'reblog') {\r\n      virtualType = 'favourite+reblog';\r\n    }\r\n    const key = `${status?.id}-${virtualType}-${date}`;\r\n    const mappedNotification = notificationsMap[key];\r\n    if (virtualType === 'follow_request') {\r\n      cleanNotifications[j++] = notification;\r\n    } else if (mappedNotification?.account) {\r\n      const mappedAccount = mappedNotification._accounts.find(\r\n        (a) => a.id === account.id,\r\n      );\r\n      if (mappedAccount) {\r\n        mappedAccount._types.push(type);\r\n        mappedAccount._types.sort().reverse();\r\n      } else {\r\n        account._types = [type];\r\n        mappedNotification._accounts.push(account);\r\n      }\r\n    } else {\r\n      account._types = [type];\r\n      let n = (notificationsMap[key] = {\r\n        ...notification,\r\n        type: virtualType,\r\n        _accounts: [account],\r\n      });\r\n      cleanNotifications[j++] = n;\r\n    }\r\n  }\r\n\r\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\r\n  // This means one acount has favourited and reblogged the multiple statuses\r\n  // The grouped notification\r\n  // - type: \"favourite+reblog+account\"\r\n  // - _statuses: [status, status, ...]\r\n  const notificationsMap2 = {};\r\n  const cleanNotifications2 = [];\r\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\r\n    const notification = cleanNotifications[i];\r\n    const { account, _accounts, type, createdAt } = notification;\r\n    const date = new Date(createdAt).toLocaleDateString();\r\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\r\n      const key = `${account?.id}-${type}-${date}`;\r\n      const mappedNotification = notificationsMap2[key];\r\n      if (mappedNotification) {\r\n        mappedNotification._statuses.push(notification.status);\r\n      } else {\r\n        let n = (notificationsMap2[key] = {\r\n          ...notification,\r\n          type,\r\n          _statuses: [notification.status],\r\n        });\r\n        cleanNotifications2[j++] = n;\r\n      }\r\n    } else {\r\n      cleanNotifications2[j++] = notification;\r\n    }\r\n  }\r\n\r\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\r\n\r\n  // return cleanNotifications;\r\n  return cleanNotifications2;\r\n}\r\n\r\nexport default groupNotifications;\r\n","import './notifications.css';\r\n\r\nimport { useIdle } from '@uidotdev/usehooks';\r\nimport { memo } from 'preact/compat';\r\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport FollowRequestButtons from '../components/follow-request-buttons';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport Notification from '../components/notification';\r\nimport { api } from '../utils/api';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport groupNotifications from '../utils/group-notifications';\r\nimport handleContentLinks from '../utils/handle-content-links';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport { getRegistration } from '../utils/push-notifications';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport { getCurrentInstance } from '../utils/store-utils';\r\nimport useScroll from '../utils/useScroll';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 30; // 30 is the maximum limit :(\r\nconst emptySearchParams = new URLSearchParams();\r\n\r\nfunction Notifications({ columnMode }) {\r\n  useTitle('Notifications', '/notifications');\r\n  const { masto, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\r\n  const notificationID = searchParams.get('id');\r\n  const notificationAccessToken = searchParams.get('access_token');\r\n  const [showMore, setShowMore] = useState(false);\r\n  const [onlyMentions, setOnlyMentions] = useState(false);\r\n  const scrollableRef = useRef();\r\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\r\n    useScroll({\r\n      scrollableRef,\r\n    });\r\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\r\n  const [followRequests, setFollowRequests] = useState([]);\r\n  const [announcements, setAnnouncements] = useState([]);\r\n\r\n  console.debug('RENDER Notifications');\r\n\r\n  const notificationsIterator = useRef();\r\n  async function fetchNotifications(firstLoad) {\r\n    if (firstLoad || !notificationsIterator.current) {\r\n      // Reset iterator\r\n      notificationsIterator.current = masto.v1.notifications.list({\r\n        limit: LIMIT,\r\n        excludeTypes: ['follow_request'],\r\n      });\r\n    }\r\n    const allNotifications = await notificationsIterator.current.next();\r\n    const notifications = allNotifications.value;\r\n\r\n    if (notifications?.length) {\r\n      notifications.forEach((notification) => {\r\n        saveStatus(notification.status, instance, {\r\n          skipThreading: true,\r\n        });\r\n      });\r\n\r\n      const groupedNotifications = groupNotifications(notifications);\r\n\r\n      if (firstLoad) {\r\n        states.notificationsLast = notifications[0];\r\n        states.notifications = groupedNotifications;\r\n\r\n        // Update last read marker\r\n        masto.v1.markers\r\n          .create({\r\n            notifications: {\r\n              lastReadId: notifications[0].id,\r\n            },\r\n          })\r\n          .catch(() => {});\r\n      } else {\r\n        states.notifications.push(...groupedNotifications);\r\n      }\r\n    }\r\n\r\n    states.notificationsShowNew = false;\r\n    states.notificationsLastFetchTime = Date.now();\r\n    return allNotifications;\r\n  }\r\n\r\n  function fetchFollowRequests() {\r\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\r\n    return masto.v1.followRequests.list({\r\n      limit: 80,\r\n    });\r\n  }\r\n\r\n  const loadFollowRequests = () => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const requests = await fetchFollowRequests();\r\n        setFollowRequests(requests);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  function fetchAnnouncements() {\r\n    return masto.v1.announcements.list();\r\n  }\r\n\r\n  const loadNotifications = (firstLoad) => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\r\n        const fetchFollowRequestsPromise = fetchFollowRequests();\r\n        const fetchAnnouncementsPromise = fetchAnnouncements();\r\n\r\n        if (firstLoad) {\r\n          const announcements = await fetchAnnouncementsPromise;\r\n          announcements.sort((a, b) => {\r\n            // Sort by updatedAt first, then createdAt\r\n            const aDate = new Date(a.updatedAt || a.createdAt);\r\n            const bDate = new Date(b.updatedAt || b.createdAt);\r\n            return bDate - aDate;\r\n          });\r\n          setAnnouncements(announcements);\r\n          const requests = await fetchFollowRequestsPromise;\r\n          setFollowRequests(requests);\r\n        }\r\n\r\n        const { done } = await fetchNotificationsPromise;\r\n        setShowMore(!done);\r\n\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadNotifications(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (reachStart) {\r\n      loadNotifications(true);\r\n    }\r\n  }, [reachStart]);\r\n\r\n  useEffect(() => {\r\n    if (nearReachEnd && showMore) {\r\n      loadNotifications();\r\n    }\r\n  }, [nearReachEnd, showMore]);\r\n\r\n  const idle = useIdle(5000);\r\n  console.debug('🧘‍♀️ IDLE', idle);\r\n  const loadUpdates = useCallback(() => {\r\n    console.log('✨ Load updates', {\r\n      autoRefresh: snapStates.settings.autoRefresh,\r\n      scrollTop: scrollableRef.current?.scrollTop === 0,\r\n      inBackground: inBackground(),\r\n      notificationsShowNew: snapStates.notificationsShowNew,\r\n      uiState,\r\n    });\r\n    if (\r\n      snapStates.settings.autoRefresh &&\r\n      scrollableRef.current?.scrollTop === 0 &&\r\n      idle &&\r\n      !inBackground() &&\r\n      snapStates.notificationsShowNew &&\r\n      uiState !== 'loading'\r\n    ) {\r\n      loadNotifications(true);\r\n    }\r\n  }, [\r\n    idle,\r\n    snapStates.notificationsShowNew,\r\n    snapStates.settings.autoRefresh,\r\n    uiState,\r\n  ]);\r\n  useEffect(loadUpdates, [snapStates.notificationsShowNew]);\r\n\r\n  const todayDate = new Date();\r\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\r\n  let currentDay = new Date();\r\n  const showTodayEmpty = !snapStates.notifications.some(\r\n    (notification) =>\r\n      new Date(notification.createdAt).toDateString() ===\r\n      todayDate.toDateString(),\r\n  );\r\n\r\n  const announcementsListRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (notificationID) {\r\n      states.routeNotification = {\r\n        id: notificationID,\r\n        accessToken: atob(notificationAccessToken),\r\n      };\r\n    }\r\n  }, [notificationID, notificationAccessToken]);\r\n\r\n  useEffect(() => {\r\n    if (uiState === 'default') {\r\n      (async () => {\r\n        try {\r\n          const registration = await getRegistration();\r\n          if (registration?.getNotifications) {\r\n            const notifications = await registration.getNotifications();\r\n            console.log('🔔 Push notifications', notifications);\r\n            // Close all notifications?\r\n            // notifications.forEach((notification) => {\r\n            //   notification.close();\r\n            // });\r\n          }\r\n        } catch (e) {}\r\n      })();\r\n    }\r\n  }, [uiState]);\r\n\r\n  return (\r\n    <div\r\n      id=\"notifications-page\"\r\n      class=\"deck-container\"\r\n      ref={scrollableRef}\r\n      tabIndex=\"-1\"\r\n    >\r\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\r\n        <header\r\n          hidden={hiddenUI}\r\n          onClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\r\n            }\r\n          }}\r\n          class={uiState === 'loading' ? 'loading' : ''}\r\n        >\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Notifications</h1>\r\n            <div class=\"header-side\">\r\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\r\n            </div>\r\n          </div>\r\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\r\n            <button\r\n              class=\"updates-button shiny-pill\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                loadNotifications(true);\r\n                scrollableRef.current?.scrollTo({\r\n                  top: 0,\r\n                  behavior: 'smooth',\r\n                });\r\n              }}\r\n            >\r\n              <Icon icon=\"arrow-up\" /> New notifications\r\n            </button>\r\n          )}\r\n        </header>\r\n        {announcements.length > 0 && (\r\n          <div class=\"shazam-container\">\r\n            <div class=\"shazam-container-inner\">\r\n              <details class=\"announcements\">\r\n                <summary>\r\n                  <span>\r\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\r\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\r\n                    <small class=\"insignificant\">{instance}</small>\r\n                  </span>\r\n                  {announcements.length > 1 && (\r\n                    <span class=\"announcements-nav-buttons\">\r\n                      {announcements.map((announcement, index) => (\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"plain2 small\"\r\n                          onClick={() => {\r\n                            announcementsListRef.current?.children[\r\n                              index\r\n                            ].scrollIntoView({\r\n                              behavior: 'smooth',\r\n                              block: 'nearest',\r\n                            });\r\n                          }}\r\n                        >\r\n                          {index + 1}\r\n                        </button>\r\n                      ))}\r\n                    </span>\r\n                  )}\r\n                </summary>\r\n                <ul\r\n                  class={`announcements-list-${\r\n                    announcements.length > 1 ? 'multiple' : 'single'\r\n                  }`}\r\n                  ref={announcementsListRef}\r\n                >\r\n                  {announcements.map((announcement) => (\r\n                    <li>\r\n                      <AnnouncementBlock announcement={announcement} />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {followRequests.length > 0 && (\r\n          <div class=\"follow-requests\">\r\n            <h2 class=\"timeline-header\">Follow requests</h2>\r\n            {followRequests.length > 5 ? (\r\n              <details>\r\n                <summary>{followRequests.length} follow requests</summary>\r\n                <ul>\r\n                  {followRequests.map((account) => (\r\n                    <li key={account.id}>\r\n                      <AccountBlock account={account} />\r\n                      <FollowRequestButtons\r\n                        accountID={account.id}\r\n                        onChange={() => {\r\n                          // loadFollowRequests();\r\n                          // loadNotifications(true);\r\n                        }}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </details>\r\n            ) : (\r\n              <ul>\r\n                {followRequests.map((account) => (\r\n                  <li key={account.id}>\r\n                    <AccountBlock account={account} />\r\n                    <FollowRequestButtons\r\n                      accountID={account.id}\r\n                      onChange={() => {\r\n                        // loadFollowRequests();\r\n                        // loadNotifications(true);\r\n                      }}\r\n                    />\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div id=\"mentions-option\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={onlyMentions}\r\n              onChange={(e) => {\r\n                setOnlyMentions(e.target.checked);\r\n              }}\r\n            />{' '}\r\n            Only mentions\r\n          </label>\r\n        </div>\r\n        <h2 class=\"timeline-header\">Today</h2>\r\n        {showTodayEmpty && !!snapStates.notifications.length && (\r\n          <p class=\"ui-state insignificant\">\r\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\r\n          </p>\r\n        )}\r\n        {snapStates.notifications.length ? (\r\n          <>\r\n            {snapStates.notifications.map((notification) => {\r\n              if (onlyMentions && notification.type !== 'mention') {\r\n                return null;\r\n              }\r\n              const notificationDay = new Date(notification.createdAt);\r\n              const differentDay =\r\n                notificationDay.toDateString() !== currentDay.toDateString();\r\n              if (differentDay) {\r\n                currentDay = notificationDay;\r\n              }\r\n              // if notificationDay is yesterday, show \"Yesterday\"\r\n              // if notificationDay is before yesterday, show date\r\n              const heading =\r\n                notificationDay.toDateString() === yesterdayDate.toDateString()\r\n                  ? 'Yesterday'\r\n                  : niceDateTime(currentDay, {\r\n                      hideTime: true,\r\n                    });\r\n              return (\r\n                <>\r\n                  {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\r\n                  <Notification\r\n                    instance={instance}\r\n                    notification={notification}\r\n                    key={notification.id}\r\n                    reload={() => {\r\n                      loadNotifications(true);\r\n                      loadFollowRequests();\r\n                    }}\r\n                  />\r\n                </>\r\n              );\r\n            })}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {uiState === 'loading' && (\r\n              <>\r\n                <ul class=\"timeline flat\">\r\n                  {Array.from({ length: 5 }).map((_, i) => (\r\n                    <li class=\"notification skeleton\">\r\n                      <div class=\"notification-type\">\r\n                        <Icon icon=\"notification\" size=\"xl\" />\r\n                      </div>\r\n                      <div class=\"notification-content\">\r\n                        <p>███████████ ████</p>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </>\r\n            )}\r\n            {uiState === 'error' && (\r\n              <p class=\"ui-state\">\r\n                Unable to load notifications\r\n                <br />\r\n                <br />\r\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\r\n                  Try again\r\n                </button>\r\n              </p>\r\n            )}\r\n          </>\r\n        )}\r\n        {showMore && (\r\n          <button\r\n            type=\"button\"\r\n            class=\"plain block\"\r\n            disabled={uiState === 'loading'}\r\n            onClick={() => loadNotifications()}\r\n            style={{ marginBlockEnd: '6em' }}\r\n          >\r\n            {uiState === 'loading' ? <Loader abrupt /> : <>Show more&hellip;</>}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction inBackground() {\r\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\r\n}\r\n\r\nfunction AnnouncementBlock({ announcement }) {\r\n  const { instance } = api();\r\n  const { contact } = getCurrentInstance();\r\n  const contactAccount = contact?.account;\r\n  const {\r\n    id,\r\n    content,\r\n    startsAt,\r\n    endsAt,\r\n    published,\r\n    allDay,\r\n    publishedAt,\r\n    updatedAt,\r\n    read,\r\n    mentions,\r\n    statuses,\r\n    tags,\r\n    emojis,\r\n    reactions,\r\n  } = announcement;\r\n\r\n  const publishedAtDate = new Date(publishedAt);\r\n  const publishedDateText = niceDateTime(publishedAtDate);\r\n  const updatedAtDate = new Date(updatedAt);\r\n  const updatedAtText = niceDateTime(updatedAtDate);\r\n\r\n  return (\r\n    <div class=\"announcement-block\">\r\n      <AccountBlock account={contactAccount} />\r\n      <div\r\n        class=\"announcement-content\"\r\n        onClick={handleContentLinks({ mentions, instance })}\r\n        dangerouslySetInnerHTML={{\r\n          __html: enhanceContent(content, {\r\n            emojis,\r\n          }),\r\n        }}\r\n      />\r\n      <p class=\"insignificant\">\r\n        <time datetime={publishedAtDate.toISOString()}>\r\n          {niceDateTime(publishedAtDate)}\r\n        </time>\r\n        {updatedAt && updatedAtText !== publishedDateText && (\r\n          <>\r\n            {' '}\r\n            &bull;{' '}\r\n            <span class=\"ib\">\r\n              Updated{' '}\r\n              <time datetime={updatedAtDate.toISOString()}>\r\n                {niceDateTime(updatedAtDate)}\r\n              </time>\r\n            </span>\r\n          </>\r\n        )}\r\n      </p>\r\n      <div class=\"announcement-reactions\" hidden>\r\n        {reactions.map((reaction) => {\r\n          const { name, count, me, staticUrl, url } = reaction;\r\n          return (\r\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\r\n              {url || staticUrl ? (\r\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\r\n              ) : (\r\n                <span>{name}</span>\r\n              )}{' '}\r\n              <span class=\"count\">{shortenNumber(count)}</span>\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Notifications);\r\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { useRef } from 'preact/hooks';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Icon from '../components/icon';\r\nimport Menu2 from '../components/menu2';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Public({ local, columnMode, ...props }) {\r\n  const snapStates = useSnapshot(states);\r\n  const isLocal = !!local;\r\n  const params = columnMode ? {} : useParams();\r\n  const { masto, instance } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\r\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n\r\n  const publicIterator = useRef();\r\n  async function fetchPublic(firstLoad) {\r\n    if (firstLoad || !publicIterator.current) {\r\n      publicIterator.current = masto.v1.timelines.listPublic({\r\n        limit: LIMIT,\r\n        local: isLocal,\r\n      });\r\n    }\r\n    const results = await publicIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      value = filteredItems(value, 'public');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines\r\n        .listPublic({\r\n          limit: 1,\r\n          local: isLocal,\r\n          since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      value = filteredItems(value, 'public');\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance + isLocal}\r\n      title={title}\r\n      titleComponent={\r\n        <h1 class=\"header-account\">\r\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\r\n          <div>{instance}</div>\r\n        </h1>\r\n      }\r\n      id=\"public\"\r\n      instance={instance}\r\n      emptyText=\"No one has posted anything yet.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchPublic}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      headerStart={<></>}\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      allowFilters\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\r\n            {isLocal ? (\r\n              <>\r\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\r\n              </>\r\n            )}\r\n          </MenuItem>\r\n          <MenuDivider />\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\r\n                location.hash = isLocal\r\n                  ? `/${newInstance}/p/l`\r\n                  : `/${newInstance}/p`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Public;\r\n","import { MenuItem } from '@szhsin/react-menu';\r\nimport { useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Menu2 from '../components/menu2';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Trending({ columnMode, ...props }) {\r\n  const snapStates = useSnapshot(states);\r\n  const params = columnMode ? {} : useParams();\r\n  const { masto, instance } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const title = `Trending (${instance})`;\r\n  useTitle(title, `/:instance?/trending`);\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n\r\n  const [hashtags, setHashtags] = useState([]);\r\n  const trendIterator = useRef();\r\n  async function fetchTrend(firstLoad) {\r\n    if (firstLoad || !trendIterator.current) {\r\n      trendIterator.current = masto.v1.trends.listStatuses({\r\n        limit: LIMIT,\r\n      });\r\n\r\n      // Get hashtags\r\n      try {\r\n        const iterator = masto.v1.trends.listTags();\r\n        const { value: tags } = await iterator.next();\r\n        console.log(tags);\r\n        setHashtags(tags);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    const results = await trendIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      value = filteredItems(value, 'public'); // Might not work here\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.trends\r\n        .listStatuses({\r\n          limit: 1,\r\n          // NOT SUPPORTED\r\n          // since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      value = filteredItems(value, 'public');\r\n      if (value?.length && value[0].id !== latestItem.current) {\r\n        latestItem.current = value[0].id;\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const TimelineStart = useMemo(() => {\r\n    if (!hashtags.length) return null;\r\n    return (\r\n      <div class=\"filter-bar\">\r\n        <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\r\n        {hashtags.map((tag, i) => {\r\n          const { name, history } = tag;\r\n          const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\r\n          return (\r\n            <Link to={`/${instance}/t/${name}`}>\r\n              <span>\r\n                <span class=\"more-insignificant\">#</span>\r\n                {name}\r\n              </span>\r\n              <span class=\"filter-count\">{total.toLocaleString()}</span>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }, [hashtags]);\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance}\r\n      title={title}\r\n      titleComponent={\r\n        <h1 class=\"header-account\">\r\n          <b>Trending</b>\r\n          <div>{instance}</div>\r\n        </h1>\r\n      }\r\n      id=\"trending\"\r\n      instance={instance}\r\n      emptyText=\"No trending posts.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchTrend}\r\n      checkForUpdates={checkForUpdates}\r\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\r\n      useItemID\r\n      headerStart={<></>}\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      allowFilters\r\n      timelineStart={TimelineStart}\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(`/${newInstance}/trending`);\r\n                location.hash = `/${newInstance}/trending`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Trending;\r\n","import { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Bookmarks from '../pages/bookmarks';\r\nimport Favourites from '../pages/favourites';\r\nimport Following from '../pages/following';\r\nimport Hashtag from '../pages/hashtag';\r\nimport List from '../pages/list';\r\nimport Mentions from '../pages/mentions';\r\nimport Notifications from '../pages/notifications';\r\nimport Public from '../pages/public';\r\nimport Trending from '../pages/trending';\r\nimport states from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Columns() {\r\n  useTitle('Home', '/');\r\n  const snapStates = useSnapshot(states);\r\n  const { shortcuts } = snapStates;\r\n\r\n  console.debug('RENDER Columns', shortcuts);\r\n\r\n  const components = shortcuts.map((shortcut) => {\r\n    if (!shortcut) return null;\r\n    const { type, ...params } = shortcut;\r\n    const Component = {\r\n      following: Following,\r\n      notifications: Notifications,\r\n      list: List,\r\n      public: Public,\r\n      bookmarks: Bookmarks,\r\n      favourites: Favourites,\r\n      hashtag: Hashtag,\r\n      mentions: Mentions,\r\n      trending: Trending,\r\n    }[type];\r\n    if (!Component) return null;\r\n    return (\r\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\r\n    );\r\n  });\r\n\r\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\r\n    try {\r\n      const index = parseInt(handler.keys[0], 10) - 1;\r\n      document.querySelectorAll('#columns > *')[index].focus();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  });\r\n\r\n  return <div id=\"columns\">{components}</div>;\r\n}\r\n\r\nexport default Columns;\r\n","import './notifications-menu.css';\r\n\r\nimport { ControlledMenu } from '@szhsin/react-menu';\r\nimport { memo } from 'preact/compat';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Columns from '../components/columns';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport Notification from '../components/notification';\r\nimport { api } from '../utils/api';\r\nimport db from '../utils/db';\r\nimport groupNotifications from '../utils/group-notifications';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport { getCurrentAccountNS } from '../utils/store-utils';\r\n\r\nimport Following from './following';\r\n\r\nfunction Home() {\r\n  const snapStates = useSnapshot(states);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const keys = await db.drafts.keys();\r\n      if (keys.length) {\r\n        const ns = getCurrentAccountNS();\r\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\r\n        if (ownKeys.length) {\r\n          states.showDrafts = true;\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {(snapStates.settings.shortcutsColumnsMode ||\r\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\r\n      !!snapStates.shortcuts?.length ? (\r\n        <Columns />\r\n      ) : (\r\n        <Following\r\n          title=\"Home\"\r\n          path=\"/\"\r\n          id=\"home\"\r\n          headerStart={false}\r\n          headerEnd={<NotificationsLink />}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction NotificationsLink() {\r\n  const snapStates = useSnapshot(states);\r\n  const notificationLinkRef = useRef();\r\n  const [menuState, setMenuState] = useState(undefined);\r\n  return (\r\n    <>\r\n      <Link\r\n        ref={notificationLinkRef}\r\n        to=\"/notifications\"\r\n        class={`button plain notifications-button ${\r\n          snapStates.notificationsShowNew ? 'has-badge' : ''\r\n        } ${menuState}`}\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\r\n            e.preventDefault();\r\n            setMenuState((state) => (!state ? 'open' : undefined));\r\n          }\r\n        }}\r\n      >\r\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\r\n      </Link>\r\n      <NotificationsMenu\r\n        state={menuState}\r\n        anchorRef={notificationLinkRef}\r\n        onClose={() => setMenuState(undefined)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst NOTIFICATIONS_LIMIT = 30;\r\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\r\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\r\n  const { masto, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const notificationsIterator = masto.v1.notifications.list({\r\n    limit: NOTIFICATIONS_LIMIT,\r\n  });\r\n\r\n  async function fetchNotifications() {\r\n    const allNotifications = await notificationsIterator.next();\r\n    const notifications = allNotifications.value;\r\n\r\n    if (notifications?.length) {\r\n      notifications.forEach((notification) => {\r\n        saveStatus(notification.status, instance, {\r\n          skipThreading: true,\r\n        });\r\n      });\r\n\r\n      const groupedNotifications = groupNotifications(notifications);\r\n\r\n      states.notificationsLast = notifications[0];\r\n      states.notifications = groupedNotifications;\r\n\r\n      // Update last read marker\r\n      masto.v1.markers\r\n        .create({\r\n          notifications: {\r\n            lastReadId: notifications[0].id,\r\n          },\r\n        })\r\n        .catch(() => {});\r\n    }\r\n\r\n    states.notificationsShowNew = false;\r\n    states.notificationsLastFetchTime = Date.now();\r\n    return allNotifications;\r\n  }\r\n\r\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\r\n  function fetchFollowRequests() {\r\n    return masto.v1.followRequests.list({\r\n      limit: 1,\r\n    });\r\n  }\r\n\r\n  function loadNotifications() {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        await fetchNotifications();\r\n        const followRequests = await fetchFollowRequests();\r\n        setHasFollowRequests(!!followRequests?.length);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (state === 'open') loadNotifications();\r\n  }, [state]);\r\n\r\n  return (\r\n    <ControlledMenu\r\n      menuClassName=\"notifications-menu\"\r\n      state={state}\r\n      anchorRef={anchorRef}\r\n      onClose={onClose}\r\n      portal={{\r\n        target: document.body,\r\n      }}\r\n      overflow=\"auto\"\r\n      viewScroll=\"close\"\r\n      position=\"anchor\"\r\n      align=\"center\"\r\n      boundingBoxPadding=\"8 8 8 8\"\r\n    >\r\n      <header>\r\n        <h2>Notifications</h2>\r\n      </header>\r\n      <main>\r\n        {snapStates.notifications.length ? (\r\n          <>\r\n            {snapStates.notifications\r\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\r\n              .map((notification) => (\r\n                <Notification\r\n                  key={notification.id}\r\n                  instance={instance}\r\n                  notification={notification}\r\n                />\r\n              ))}\r\n          </>\r\n        ) : uiState === 'loading' ? (\r\n          <div class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </div>\r\n        ) : (\r\n          uiState === 'error' && (\r\n            <div class=\"ui-state\">\r\n              <p>Unable to fetch notifications.</p>\r\n              <p>\r\n                <button type=\"button\" onClick={loadNotifications}>\r\n                  Try again\r\n                </button>\r\n              </p>\r\n            </div>\r\n          )\r\n        )}\r\n      </main>\r\n      <footer>\r\n        <Link to=\"/mentions\" class=\"button plain\">\r\n          <Icon icon=\"at\" /> <span>Mentions</span>\r\n        </Link>\r\n        <Link to=\"/notifications\" class=\"button plain2\">\r\n          {hasFollowRequests ? (\r\n            <>\r\n              <span class=\"tag collapsed\">New</span>{' '}\r\n              <span>Follow Requests</span>\r\n            </>\r\n          ) : (\r\n            <b>See all</b>\r\n          )}{' '}\r\n          <Icon icon=\"arrow-right\" />\r\n        </Link>\r\n      </footer>\r\n    </ControlledMenu>\r\n  );\r\n}\r\n\r\nexport default memo(Home);\r\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\r\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\r\nfunction getInstanceStatusURL(url) {\r\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\r\n  const { hostname, pathname } = new URL(url);\r\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\r\n\r\n  if (id) {\r\n    return `/${hostname}/s/${id}`;\r\n  }\r\n\r\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\r\n\r\n  if (noteId) {\r\n    return `/${hostname}/s/${noteId}`;\r\n  }\r\n}\r\n\r\nexport default getInstanceStatusURL;\r\n","import { useLayoutEffect } from 'preact/hooks';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport Link from '../components/link';\r\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\r\n\r\nexport default function HttpRoute() {\r\n  const location = useLocation();\r\n  const url = location.pathname.replace(/^\\//, '');\r\n  const statusURL = getInstanceStatusURL(url);\r\n\r\n  useLayoutEffect(() => {\r\n    if (statusURL) {\r\n      setTimeout(() => {\r\n        window.location.hash = statusURL + '?view=full';\r\n      }, 300);\r\n    }\r\n  }, [statusURL]);\r\n\r\n  return (\r\n    <div class=\"ui-state\" tabIndex=\"-1\">\r\n      {statusURL ? (\r\n        <>\r\n          <h2>Redirecting…</h2>\r\n          <p>\r\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2>Unable to process URL</h2>\r\n          <p>\r\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {url}\r\n            </a>\r\n          </p>\r\n        </>\r\n      )}\r\n      <hr />\r\n      <p>\r\n        <Link to=\"/\">Go home</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import './lists.css';\r\n\r\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport ListAddEdit from '../components/list-add-edit';\r\nimport Loader from '../components/loader';\r\nimport Modal from '../components/modal';\r\nimport NavMenu from '../components/nav-menu';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Lists() {\r\n  const { masto } = api();\r\n  useTitle(`Lists`, `/l`);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n  const [lists, setLists] = useState([]);\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const lists = await masto.v1.lists.list();\r\n        console.log(lists);\r\n        setLists(lists);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n\r\n  return (\r\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\r\n      <div class=\"timeline-deck deck\">\r\n        <header>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Lists</h1>\r\n            <div class=\"header-side\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain\"\r\n                onClick={() => setShowListAddEditModal(true)}\r\n              >\r\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {lists.length > 0 ? (\r\n            <ul class=\"link-list\">\r\n              {lists.map((list) => (\r\n                <li>\r\n                  <Link to={`/l/${list.id}`}>\r\n                    <span>\r\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\r\n                    </span>\r\n                    {/* <button\r\n                      type=\"button\"\r\n                      class=\"plain\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        setShowListAddEditModal({\r\n                          list,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"pencil\" />\r\n                    </button> */}\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader />\r\n            </p>\r\n          ) : uiState === 'error' ? (\r\n            <p class=\"ui-state\">Unable to load lists.</p>\r\n          ) : (\r\n            <p class=\"ui-state\">No lists yet.</p>\r\n          )}\r\n        </main>\r\n      </div>\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success') {\r\n                reload();\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lists;\r\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\r\n  .env;\r\n\r\nconst SCOPES = 'read write follow push';\r\n\r\nexport async function registerApplication({ instanceURL }) {\r\n  const registrationParams = new URLSearchParams({\r\n    client_name: CLIENT_NAME,\r\n    redirect_uris: location.origin + location.pathname,\r\n    scopes: SCOPES,\r\n    website: WEBSITE,\r\n  });\r\n  const registrationResponse = await fetch(\r\n    `https://${instanceURL}/api/v1/apps`,\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: registrationParams.toString(),\r\n    },\r\n  );\r\n  const registrationJSON = await registrationResponse.json();\r\n  console.log({ registrationJSON });\r\n  return registrationJSON;\r\n}\r\n\r\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\r\n  const authorizationParams = new URLSearchParams({\r\n    client_id,\r\n    scope: SCOPES,\r\n    redirect_uri: location.origin + location.pathname,\r\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\r\n    response_type: 'code',\r\n  });\r\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\r\n  return authorizationURL;\r\n}\r\n\r\nexport async function getAccessToken({\r\n  instanceURL,\r\n  client_id,\r\n  client_secret,\r\n  code,\r\n}) {\r\n  const params = new URLSearchParams({\r\n    client_id,\r\n    client_secret,\r\n    redirect_uri: location.origin + location.pathname,\r\n    grant_type: 'authorization_code',\r\n    code,\r\n    scope: SCOPES,\r\n  });\r\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: params.toString(),\r\n  });\r\n  const tokenJSON = await tokenResponse.json();\r\n  console.log({ tokenJSON });\r\n  return tokenJSON;\r\n}\r\n","import './login.css';\r\n\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport instancesListURL from '../data/instances.json?url';\r\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\r\nimport store from '../utils/store';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Login() {\r\n  useTitle('Log in');\r\n  const instanceURLRef = useRef();\r\n  const cachedInstanceURL = store.local.get('instanceURL');\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = useSearchParams();\r\n  const instance = searchParams.get('instance');\r\n  const [instanceText, setInstanceText] = useState(\r\n    instance || cachedInstanceURL?.toLowerCase() || '',\r\n  );\r\n\r\n  const [instancesList, setInstancesList] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await fetch(instancesListURL);\r\n        const data = await res.json();\r\n        setInstancesList(data);\r\n      } catch (e) {\r\n        // Silently fail\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (cachedInstanceURL) {\r\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\r\n  //   }\r\n  // }, []);\r\n\r\n  const submitInstance = (instanceURL) => {\r\n    store.local.set('instanceURL', instanceURL);\r\n\r\n    (async () => {\r\n      setUIState('loading');\r\n      try {\r\n        const { client_id, client_secret, vapid_key } =\r\n          await registerApplication({\r\n            instanceURL,\r\n          });\r\n\r\n        if (client_id && client_secret) {\r\n          store.session.set('clientID', client_id);\r\n          store.session.set('clientSecret', client_secret);\r\n          store.session.set('vapidKey', vapid_key);\r\n\r\n          location.href = await getAuthorizationURL({\r\n            instanceURL,\r\n            client_id,\r\n          });\r\n        } else {\r\n          alert('Failed to register application');\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { elements } = e.target;\r\n    let instanceURL = elements.instanceURL.value.toLowerCase();\r\n    // Remove protocol from instance URL\r\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\r\n    // Remove @acct@ or acct@ from instance URL\r\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\r\n    if (!/\\./.test(instanceURL)) {\r\n      instanceURL = instancesList.find((instance) =>\r\n        instance.includes(instanceURL),\r\n      );\r\n    }\r\n    submitInstance(instanceURL);\r\n  };\r\n\r\n  const instancesSuggestions = instanceText\r\n    ? instancesList\r\n        .filter((instance) => instance.includes(instanceText))\r\n        .sort((a, b) => {\r\n          // Move text that starts with instanceText to the start\r\n          const aStartsWith = a\r\n            .toLowerCase()\r\n            .startsWith(instanceText.toLowerCase());\r\n          const bStartsWith = b\r\n            .toLowerCase()\r\n            .startsWith(instanceText.toLowerCase());\r\n          if (aStartsWith && !bStartsWith) return -1;\r\n          if (!aStartsWith && bStartsWith) return 1;\r\n          return 0;\r\n        })\r\n        .slice(0, 10)\r\n    : [];\r\n\r\n  return (\r\n    <main id=\"login\" style={{ textAlign: 'center' }}>\r\n      <form onSubmit={onSubmit}>\r\n        <h1>Log in</h1>\r\n        <label>\r\n          <p>Instance</p>\r\n          <input\r\n            value={instanceText}\r\n            required\r\n            type=\"text\"\r\n            class=\"large\"\r\n            id=\"instanceURL\"\r\n            ref={instanceURLRef}\r\n            disabled={uiState === 'loading'}\r\n            // list=\"instances-list\"\r\n            autocorrect=\"off\"\r\n            autocapitalize=\"off\"\r\n            autocomplete=\"off\"\r\n            spellcheck={false}\r\n            placeholder=\"instance domain\"\r\n            onInput={(e) => {\r\n              setInstanceText(e.target.value);\r\n            }}\r\n          />\r\n          {instancesSuggestions?.length > 0 ? (\r\n            <ul id=\"instances-suggestions\">\r\n              {instancesSuggestions.map((instance) => (\r\n                <li>\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain4\"\r\n                    onClick={() => {\r\n                      submitInstance(instance);\r\n                    }}\r\n                  >\r\n                    {instance}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\r\n          )}\r\n          {/* <datalist id=\"instances-list\">\r\n            {instancesList.map((instance) => (\r\n              <option value={instance} />\r\n            ))}\r\n          </datalist> */}\r\n        </label>\r\n        {uiState === 'error' && (\r\n          <p class=\"error\">\r\n            Failed to log in. Please try again or another instance.\r\n          </p>\r\n        )}\r\n        <div>\r\n          <button class=\"large\" disabled={uiState === 'loading'}>\r\n            Log in\r\n          </button>{' '}\r\n        </div>\r\n        <Loader hidden={uiState !== 'loading'} />\r\n        <hr />\r\n        <p>\r\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\r\n            Don't have an account? Create one!\r\n          </a>\r\n        </p>\r\n        <p>\r\n          <Link to=\"/\">Go home</Link>\r\n        </p>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import './search.css';\r\n\r\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useParams, useSearchParams } from 'react-router-dom';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport SearchForm from '../components/search-form';\r\nimport Status from '../components/status';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst SHORT_LIMIT = 5;\r\nconst LIMIT = 40;\r\n\r\nfunction Search(props) {\r\n  const params = useParams();\r\n  const { masto, instance, authenticated } = api({\r\n    instance: params.instance,\r\n  });\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = useSearchParams();\r\n  const searchFormRef = useRef();\r\n  const q = props?.query || searchParams.get('q');\r\n  const type = props?.type || searchParams.get('type');\r\n  useTitle(\r\n    q\r\n      ? `Search: ${q}${\r\n          type\r\n            ? ` (${\r\n                {\r\n                  statuses: 'Posts',\r\n                  accounts: 'Accounts',\r\n                  hashtags: 'Hashtags',\r\n                }[type]\r\n              })`\r\n            : ''\r\n        }`\r\n      : 'Search',\r\n    `/search`,\r\n  );\r\n\r\n  const [showMore, setShowMore] = useState(false);\r\n  const offsetRef = useRef(0);\r\n  useEffect(() => {\r\n    offsetRef.current = 0;\r\n  }, [q, type]);\r\n\r\n  const scrollableRef = useRef();\r\n  useLayoutEffect(() => {\r\n    scrollableRef.current?.scrollTo?.(0, 0);\r\n  }, [q, type]);\r\n\r\n  const [statusResults, setStatusResults] = useState([]);\r\n  const [accountResults, setAccountResults] = useState([]);\r\n  const [hashtagResults, setHashtagResults] = useState([]);\r\n  useEffect(() => {\r\n    setStatusResults([]);\r\n    setAccountResults([]);\r\n    setHashtagResults([]);\r\n  }, [q]);\r\n  const setTypeResultsFunc = {\r\n    statuses: setStatusResults,\r\n    accounts: setAccountResults,\r\n    hashtags: setHashtagResults,\r\n  };\r\n\r\n  function loadResults(firstLoad) {\r\n    setUIState('loading');\r\n    if (firstLoad && !type) {\r\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\r\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\r\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\r\n    }\r\n\r\n    (async () => {\r\n      const params = {\r\n        q,\r\n        resolve: authenticated,\r\n        limit: SHORT_LIMIT,\r\n      };\r\n      if (type) {\r\n        params.limit = LIMIT;\r\n        params.type = type;\r\n        if (authenticated) params.offset = offsetRef.current;\r\n      }\r\n      try {\r\n        const results = await masto.v2.search(params);\r\n        console.log(results);\r\n        if (type) {\r\n          if (firstLoad) {\r\n            setTypeResultsFunc[type](results[type]);\r\n            const length = results[type]?.length;\r\n            offsetRef.current = LIMIT;\r\n            setShowMore(!!length);\r\n          } else {\r\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\r\n            const length = results[type]?.length;\r\n            offsetRef.current = offsetRef.current + LIMIT;\r\n            setShowMore(!!length);\r\n          }\r\n        } else {\r\n          setStatusResults(results.statuses);\r\n          setAccountResults(results.accounts);\r\n          setHashtagResults(results.hashtags);\r\n          offsetRef.current = 0;\r\n          setShowMore(false);\r\n        }\r\n        setUIState('default');\r\n      } catch (err) {\r\n        console.error(err);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (q) {\r\n      searchFormRef.current?.setValue?.(q);\r\n      loadResults(true);\r\n    } else {\r\n      searchFormRef.current?.focus?.();\r\n    }\r\n  }, [q, type, instance]);\r\n\r\n  useHotkeys(\r\n    '/',\r\n    (e) => {\r\n      searchFormRef.current?.focus?.();\r\n    },\r\n    {\r\n      preventDefault: true,\r\n    },\r\n  );\r\n\r\n  return (\r\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\r\n      <div class=\"timeline-deck deck\">\r\n        <header>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n            </div>\r\n            <SearchForm ref={searchFormRef} />\r\n            <div class=\"header-side\">&nbsp;</div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {!!q && (\r\n            <div class=\"filter-bar\">\r\n              {!!type && (\r\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\r\n                  ‹ All\r\n                </Link>\r\n              )}\r\n              {[\r\n                {\r\n                  label: 'Accounts',\r\n                  type: 'accounts',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\r\n                },\r\n                {\r\n                  label: 'Hashtags',\r\n                  type: 'hashtags',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\r\n                },\r\n                {\r\n                  label: 'Posts',\r\n                  type: 'statuses',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\r\n                },\r\n              ]\r\n                .sort((a, b) => {\r\n                  if (a.type === type) return -1;\r\n                  if (b.type === type) return 1;\r\n                  return 0;\r\n                })\r\n                .map((link) => (\r\n                  <Link to={link.to}>{link.label}</Link>\r\n                ))}\r\n            </div>\r\n          )}\r\n          {!!q ? (\r\n            <>\r\n              {(!type || type === 'accounts') && (\r\n                <>\r\n                  {type !== 'accounts' && (\r\n                    <h2 class=\"timeline-header\">Accounts</h2>\r\n                  )}\r\n                  {accountResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"timeline flat accounts-list\">\r\n                        {accountResults.map((account) => (\r\n                          <li key={account.id}>\r\n                            <AccountBlock\r\n                              account={account}\r\n                              instance={instance}\r\n                              showStats\r\n                            />\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                      {type !== 'accounts' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${q}&type=accounts`}\r\n                          >\r\n                            See more accounts <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No accounts found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {(!type || type === 'hashtags') && (\r\n                <>\r\n                  {type !== 'hashtags' && (\r\n                    <h2 class=\"timeline-header\">Hashtags</h2>\r\n                  )}\r\n                  {hashtagResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"link-list hashtag-list\">\r\n                        {hashtagResults.map((hashtag) => (\r\n                          <li key={hashtag.name}>\r\n                            <Link\r\n                              to={\r\n                                instance\r\n                                  ? `/${instance}/t/${hashtag.name}`\r\n                                  : `/t/${hashtag.name}`\r\n                              }\r\n                            >\r\n                              <Icon icon=\"hashtag\" />\r\n                              <span>{hashtag.name}</span>\r\n                            </Link>\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                      {type !== 'hashtags' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${q}&type=hashtags`}\r\n                          >\r\n                            See more hashtags <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No hashtags found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {(!type || type === 'statuses') && (\r\n                <>\r\n                  {type !== 'statuses' && (\r\n                    <h2 class=\"timeline-header\">Posts</h2>\r\n                  )}\r\n                  {statusResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"timeline\">\r\n                        {statusResults.map((status) => (\r\n                          <li key={status.id}>\r\n                            <Link\r\n                              class=\"status-link\"\r\n                              to={\r\n                                instance\r\n                                  ? `/${instance}/s/${status.id}`\r\n                                  : `/s/${status.id}`\r\n                              }\r\n                            >\r\n                              <Status status={status} />\r\n                            </Link>\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                      {type !== 'statuses' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${q}&type=statuses`}\r\n                          >\r\n                            See more posts <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No posts found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {!!type &&\r\n                (uiState === 'default' ? (\r\n                  showMore ? (\r\n                    <InView\r\n                      onChange={(inView) => {\r\n                        if (inView) {\r\n                          loadResults();\r\n                        }\r\n                      }}\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain block\"\r\n                        onClick={() => loadResults()}\r\n                        style={{ marginBlockEnd: '6em' }}\r\n                      >\r\n                        Show more&hellip;\r\n                      </button>\r\n                    </InView>\r\n                  ) : (\r\n                    <p class=\"ui-state insignificant\">The end.</p>\r\n                  )\r\n                ) : (\r\n                  uiState === 'loading' && (\r\n                    <p class=\"ui-state\">\r\n                      <Loader abrupt />\r\n                    </p>\r\n                  )\r\n                ))}\r\n            </>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader abrupt />\r\n            </p>\r\n          ) : (\r\n            <p class=\"ui-state\">\r\n              Enter your search term or paste a URL above to get started.\r\n            </p>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import './status.css';\r\n\r\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\r\nimport debounce from 'just-debounce-it';\r\nimport pRetry from 'p-retry';\r\nimport { memo } from 'preact/compat';\r\nimport {\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { matchPath, useSearchParams } from 'react-router-dom';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Avatar from '../components/avatar';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport MediaModal from '../components/media-modal';\r\nimport NameText from '../components/name-text';\r\nimport RelativeTime from '../components/relative-time';\r\nimport Status from '../components/status';\r\nimport { api } from '../utils/api';\r\nimport htmlContentLength from '../utils/html-content-length';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states, {\r\n  getStatus,\r\n  saveStatus,\r\n  statusKey,\r\n  threadifyStatus,\r\n} from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport { getCurrentAccount } from '../utils/store-utils';\r\nimport useScroll from '../utils/useScroll';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\r\n\r\nconst LIMIT = 40;\r\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\r\nconst MAX_WEIGHT = 5;\r\n\r\nlet cachedRepliesToggle = {};\r\nlet cachedStatusesMap = {};\r\nlet scrollPositions = {};\r\nfunction resetScrollPosition(id) {\r\n  delete cachedStatusesMap[id];\r\n  delete scrollPositions[id];\r\n}\r\n\r\nconst scrollIntoViewOptions = {\r\n  block: 'nearest',\r\n  inline: 'center',\r\n  behavior: 'smooth',\r\n};\r\n\r\nfunction StatusPage(params) {\r\n  const { id } = params;\r\n  const { masto, instance } = api({ instance: params.instance });\r\n  const snapStates = useSnapshot(states);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const mediaParam = searchParams.get('media');\r\n  const mediaOnlyParam = searchParams.get('media-only');\r\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\r\n  let showMedia = mediaIndex > 0;\r\n  const mediaStatusID = searchParams.get('mediaStatusID');\r\n  const mediaStatus = getStatus(mediaStatusID, instance);\r\n  if (mediaStatusID && !mediaStatus) {\r\n    showMedia = false;\r\n  }\r\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\r\n\r\n  const sKey = statusKey(id, instance);\r\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\r\n  useEffect(() => {\r\n    if (states.statuses[sKey]) {\r\n      setHeroStatus(states.statuses[sKey]);\r\n    }\r\n  }, [sKey]);\r\n\r\n  const closeLink = useMemo(() => {\r\n    const { prevLocation } = states;\r\n    const pathname =\r\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\r\n    const matchStatusPath =\r\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\r\n    if (!pathname || matchStatusPath) {\r\n      return '/';\r\n    }\r\n    return pathname;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!heroStatus && showMedia) {\r\n      (async () => {\r\n        try {\r\n          const status = await masto.v1.statuses.fetch(id);\r\n          saveStatus(status, instance);\r\n          setHeroStatus(status);\r\n        } catch (err) {\r\n          console.error(err);\r\n          alert('Unable to load post.');\r\n          location.hash = closeLink;\r\n        }\r\n      })();\r\n    }\r\n  }, [showMedia]);\r\n\r\n  const mediaAttachments = mediaStatusID\r\n    ? mediaStatus?.mediaAttachments\r\n    : heroStatus?.mediaAttachments;\r\n\r\n  const handleMediaClose = useCallback(() => {\r\n    if (\r\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\r\n      snapStates.prevLocation\r\n    ) {\r\n      history.back();\r\n    } else {\r\n      if (showMediaOnly) {\r\n        location.hash = closeLink;\r\n      } else {\r\n        searchParams.delete('media');\r\n        searchParams.delete('mediaStatusID');\r\n        setSearchParams(searchParams);\r\n      }\r\n    }\r\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\r\n\r\n  return (\r\n    <div class=\"deck-backdrop\">\r\n      {showMedia ? (\r\n        mediaAttachments?.length ? (\r\n          <MediaModal\r\n            mediaAttachments={mediaAttachments}\r\n            statusID={mediaStatusID || id}\r\n            instance={instance}\r\n            lang={heroStatus?.language}\r\n            index={mediaIndex - 1}\r\n            onClose={handleMediaClose}\r\n          />\r\n        ) : (\r\n          <div class=\"media-modal-container loading\">\r\n            <Loader abrupt />\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Link to={closeLink} />\r\n      )}\r\n      {!showMediaOnly && (\r\n        <StatusThread\r\n          id={id}\r\n          instance={params.instance}\r\n          closeLink={closeLink}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const mediaParam = searchParams.get('media');\r\n  const showMedia = parseInt(mediaParam, 10) > 0;\r\n  const [viewMode, setViewMode] = useState(searchParams.get('view'));\r\n  const translate = !!parseInt(searchParams.get('translate'));\r\n  const { masto, instance } = api({ instance: propInstance });\r\n  const {\r\n    masto: currentMasto,\r\n    instance: currentInstance,\r\n    authenticated,\r\n  } = api();\r\n  const sameInstance = instance === currentInstance;\r\n  const snapStates = useSnapshot(states);\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const heroStatusRef = useRef();\r\n  const sKey = statusKey(id, instance);\r\n  const totalDescendants = useRef(0);\r\n\r\n  const scrollableRef = useRef();\r\n  useEffect(() => {\r\n    scrollableRef.current?.focus();\r\n  }, []);\r\n  useEffect(() => {\r\n    const onScroll = debounce(() => {\r\n      // console.log('onScroll');\r\n      if (!scrollableRef.current) return;\r\n      const { scrollTop } = scrollableRef.current;\r\n      if (uiState !== 'loading') {\r\n        scrollPositions[id] = scrollTop;\r\n      }\r\n    }, 50);\r\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\r\n      passive: true,\r\n    });\r\n    onScroll();\r\n    return () => {\r\n      onScroll.cancel();\r\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [id, uiState !== 'loading']);\r\n\r\n  const scrollOffsets = useRef();\r\n  const initContext = ({ reloadHero } = {}) => {\r\n    console.debug('initContext', id);\r\n    setUIState('loading');\r\n    let heroTimer;\r\n\r\n    const cachedStatuses = cachedStatusesMap[id];\r\n    if (cachedStatuses) {\r\n      // Case 1: It's cached, let's restore them to make it snappy\r\n      const reallyCachedStatuses = cachedStatuses.filter(\r\n        (s) => states.statuses[sKey],\r\n        // Some are not cached in the global state, so we need to filter them out\r\n      );\r\n      setStatuses(reallyCachedStatuses);\r\n    } else {\r\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\r\n      // if (heroIndex !== -1) {\r\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\r\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\r\n      //   setStatuses(slicedStatuses);\r\n      // } else {\r\n      // Case 3: Not cached and not in statuses, let's start from scratch\r\n      setStatuses([{ id }]);\r\n      // }\r\n    }\r\n\r\n    (async () => {\r\n      const heroFetch = () =>\r\n        pRetry(() => masto.v1.statuses.fetch(id), {\r\n          retries: 4,\r\n        });\r\n      const contextFetch = pRetry(() => masto.v1.statuses.fetchContext(id), {\r\n        retries: 8,\r\n      });\r\n\r\n      const hasStatus = !!snapStates.statuses[sKey];\r\n      let heroStatus = snapStates.statuses[sKey];\r\n      if (hasStatus && !reloadHero) {\r\n        console.debug('Hero status is cached');\r\n      } else {\r\n        try {\r\n          heroStatus = await heroFetch();\r\n          saveStatus(heroStatus, instance);\r\n          // Give time for context to appear\r\n          await new Promise((resolve) => {\r\n            setTimeout(resolve, 100);\r\n          });\r\n        } catch (e) {\r\n          console.error(e);\r\n          setUIState('error');\r\n          return;\r\n        }\r\n      }\r\n\r\n      try {\r\n        const context = await contextFetch;\r\n        const { ancestors, descendants } = context;\r\n\r\n        totalDescendants.current = descendants?.length || 0;\r\n\r\n        const missingStatuses = new Set();\r\n        ancestors.forEach((status) => {\r\n          saveStatus(status, instance, {\r\n            skipThreading: true,\r\n          });\r\n          if (\r\n            status.inReplyToId &&\r\n            !ancestors.find((s) => s.id === status.inReplyToId)\r\n          ) {\r\n            missingStatuses.add(status.inReplyToId);\r\n          }\r\n        });\r\n        const ancestorsIsThread = ancestors.every(\r\n          (s) => s.account.id === heroStatus.account.id,\r\n        );\r\n        const nestedDescendants = [];\r\n        descendants.forEach((status) => {\r\n          saveStatus(status, instance, {\r\n            skipThreading: true,\r\n          });\r\n\r\n          if (\r\n            status.inReplyToId &&\r\n            !descendants.find((s) => s.id === status.inReplyToId) &&\r\n            status.inReplyToId !== heroStatus.id\r\n          ) {\r\n            missingStatuses.add(status.inReplyToId);\r\n          }\r\n\r\n          if (status.inReplyToAccountId === status.account.id) {\r\n            // If replying to self, it's part of the thread, level 1\r\n            nestedDescendants.push(status);\r\n          } else if (status.inReplyToId === heroStatus.id) {\r\n            // If replying to the hero status, it's a reply, level 1\r\n            nestedDescendants.push(status);\r\n          } else if (\r\n            !status.inReplyToAccountId &&\r\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\r\n            status.account.id === heroStatus.account.id\r\n          ) {\r\n            // If replying to hero's own statuses, it's part of the thread, level 1\r\n            nestedDescendants.push(status);\r\n          } else {\r\n            // If replying to someone else, it's a reply to a reply, level 2\r\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\r\n            if (parent) {\r\n              if (!parent.__replies) {\r\n                parent.__replies = [];\r\n              }\r\n              parent.__replies.push(status);\r\n            } else {\r\n              // If no parent, something is wrong\r\n              console.warn('No parent found for', status);\r\n            }\r\n          }\r\n        });\r\n\r\n        console.log({ ancestors, descendants, nestedDescendants });\r\n        if (missingStatuses.size) {\r\n          console.error('Missing statuses', [...missingStatuses]);\r\n        }\r\n\r\n        function expandReplies(_replies) {\r\n          return _replies?.map((_r) => ({\r\n            id: _r.id,\r\n            account: _r.account,\r\n            repliesCount: _r.repliesCount,\r\n            content: _r.content,\r\n            weight: calcStatusWeight(_r),\r\n            replies: expandReplies(_r.__replies),\r\n          }));\r\n        }\r\n\r\n        const allStatuses = [\r\n          ...ancestors.map((s) => ({\r\n            id: s.id,\r\n            ancestor: true,\r\n            isThread: ancestorsIsThread,\r\n            accountID: s.account.id,\r\n            account: s.account,\r\n            repliesCount: s.repliesCount,\r\n            weight: calcStatusWeight(s),\r\n          })),\r\n          {\r\n            id,\r\n            accountID: heroStatus.account.id,\r\n            weight: calcStatusWeight(heroStatus),\r\n          },\r\n          ...nestedDescendants.map((s) => ({\r\n            id: s.id,\r\n            account: s.account,\r\n            accountID: s.account.id,\r\n            descendant: true,\r\n            thread: s.account.id === heroStatus.account.id,\r\n            weight: calcStatusWeight(s),\r\n            replies: expandReplies(s.__replies),\r\n          })),\r\n        ];\r\n\r\n        setUIState('default');\r\n        scrollOffsets.current = {\r\n          offsetTop: heroStatusRef.current?.offsetTop,\r\n          scrollTop: scrollableRef.current?.scrollTop,\r\n        };\r\n\r\n        // Set limit to hero's index\r\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\r\n        if (heroLimit >= limit) {\r\n          setLimit(heroLimit + 1);\r\n        }\r\n\r\n        console.log({ allStatuses });\r\n        setStatuses(allStatuses);\r\n        cachedStatusesMap[id] = allStatuses;\r\n\r\n        // Let's threadify this one\r\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\r\n        // By right, at this point, all descendant statuses should be cached\r\n        threadifyStatus(heroStatus, instance);\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      clearTimeout(heroTimer);\r\n    };\r\n  };\r\n\r\n  useEffect(initContext, [id, masto]);\r\n  useEffect(() => {\r\n    if (!statuses.length) return;\r\n    console.debug('STATUSES', statuses);\r\n    const scrollPosition = scrollPositions[id];\r\n    console.debug('scrollPosition', scrollPosition);\r\n    if (!!scrollPosition) {\r\n      console.debug('Case 1', {\r\n        id,\r\n        scrollPosition,\r\n      });\r\n      scrollableRef.current.scrollTop = scrollPosition;\r\n    } else if (scrollOffsets.current) {\r\n      const newScrollOffsets = {\r\n        offsetTop: heroStatusRef.current?.offsetTop,\r\n        scrollTop: scrollableRef.current?.scrollTop,\r\n      };\r\n      const newScrollTop =\r\n        newScrollOffsets.offsetTop -\r\n        scrollOffsets.current.offsetTop +\r\n        newScrollOffsets.scrollTop;\r\n      console.debug('Case 2', {\r\n        scrollOffsets: scrollOffsets.current,\r\n        newScrollOffsets,\r\n        newScrollTop,\r\n        statuses: [...statuses],\r\n      });\r\n      scrollableRef.current.scrollTop = newScrollTop;\r\n    } else if (statuses.length === 1) {\r\n      console.debug('Case 3', {\r\n        id,\r\n      });\r\n      scrollableRef.current.scrollTop = 0;\r\n    }\r\n\r\n    // RESET\r\n    scrollOffsets.current = null;\r\n  }, [statuses]);\r\n\r\n  useEffect(() => {\r\n    if (snapStates.reloadStatusPage <= 0) return;\r\n    // Delete the cache for the context\r\n    (async () => {\r\n      try {\r\n        const { instanceURL } = getCurrentAccount();\r\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\r\n        console.log('Clear cache', contextURL);\r\n        const apiCache = await caches.open('api');\r\n        await apiCache.delete(contextURL, { ignoreVary: true });\r\n\r\n        return initContext({\r\n          reloadHero: true,\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [snapStates.reloadStatusPage]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // RESET\r\n      scrollPositions = {};\r\n      states.reloadStatusPage = 0;\r\n      cachedStatusesMap = {};\r\n      cachedRepliesToggle = {};\r\n      statusWeightCache.clear();\r\n    };\r\n  }, []);\r\n\r\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\r\n  const heroDisplayName = useMemo(() => {\r\n    // Remove shortcodes from display name\r\n    if (!heroStatus) return '';\r\n    const { account } = heroStatus;\r\n    const div = document.createElement('div');\r\n    div.innerHTML = account.displayName;\r\n    return div.innerText.trim();\r\n  }, [heroStatus]);\r\n  const heroContentText = useMemo(() => {\r\n    if (!heroStatus) return '';\r\n    let text = statusPeek(heroStatus);\r\n    if (text.length > 64) {\r\n      // \"The title should ideally be less than 64 characters in length\"\r\n      // https://www.w3.org/Provider/Style/TITLE.html\r\n      text = text.slice(0, 64) + '…';\r\n    }\r\n    return text;\r\n  }, [heroStatus]);\r\n  useTitle(\r\n    heroDisplayName && heroContentText\r\n      ? `${heroDisplayName}: \"${heroContentText}\"`\r\n      : 'Status',\r\n    '/:instance?/s/:id',\r\n  );\r\n\r\n  const postInstance = useMemo(() => {\r\n    if (!heroStatus) return;\r\n    const { url } = heroStatus;\r\n    if (!url) return;\r\n    return new URL(url).hostname;\r\n  }, [heroStatus]);\r\n  const postSameInstance = useMemo(() => {\r\n    if (!postInstance) return;\r\n    return postInstance === instance;\r\n  }, [postInstance, instance]);\r\n\r\n  const [limit, setLimit] = useState(LIMIT);\r\n  const showMore = useMemo(() => {\r\n    // return number of statuses to show\r\n    return statuses.length - limit;\r\n  }, [statuses.length, limit]);\r\n\r\n  const hasDescendants = statuses.some((s) => s.descendant);\r\n  const ancestors = statuses.filter((s) => s.ancestor);\r\n\r\n  const [heroInView, setHeroInView] = useState(true);\r\n  const onView = useDebouncedCallback(setHeroInView, 100);\r\n  const heroPointer = useMemo(() => {\r\n    // get top offset of heroStatus\r\n    if (!heroStatusRef.current || heroInView) return null;\r\n    const { top } = heroStatusRef.current.getBoundingClientRect();\r\n    return top > 0 ? 'down' : 'up';\r\n  }, [heroInView]);\r\n\r\n  useHotkeys(\r\n    'esc',\r\n    () => {\r\n      location.hash = closeLink;\r\n    },\r\n    {\r\n      // If media is open, esc to close media first\r\n      // Else close the status page\r\n      enabled: !showMedia,\r\n    },\r\n  );\r\n  // For backspace, will always close both media and status page\r\n  useHotkeys('backspace', () => {\r\n    location.hash = closeLink;\r\n  });\r\n\r\n  useHotkeys('j', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\r\n    const allStatusLinks = Array.from(\r\n      // Select all statuses except those inside collapsed details/summary\r\n      // Hat-tip to @AmeliaBR@front-end.social\r\n      // https://front-end.social/@AmeliaBR/109784776146144471\r\n      scrollableRef.current.querySelectorAll(\r\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\r\n      ),\r\n    );\r\n    console.log({ allStatusLinks });\r\n    if (\r\n      activeStatus &&\r\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\r\n      activeStatusRect.bottom > 0\r\n    ) {\r\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\r\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\r\n      if (nextStatus) {\r\n        nextStatus.focus();\r\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\r\n        const statusLinkRect = statusLink.getBoundingClientRect();\r\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostStatusLink) {\r\n        topmostStatusLink.focus();\r\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  useHotkeys('k', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\r\n    const allStatusLinks = Array.from(\r\n      scrollableRef.current.querySelectorAll(\r\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\r\n      ),\r\n    );\r\n    if (\r\n      activeStatus &&\r\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\r\n      activeStatusRect.bottom > 0\r\n    ) {\r\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\r\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\r\n      if (prevStatus) {\r\n        prevStatus.focus();\r\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\r\n        const statusLinkRect = statusLink.getBoundingClientRect();\r\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostStatusLink) {\r\n        topmostStatusLink.focus();\r\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\r\n  // IDEA: x is for expand\r\n  useHotkeys('x', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    if (activeStatus) {\r\n      const details = activeStatus.nextElementSibling;\r\n      if (details && details.tagName.toLowerCase() === 'details') {\r\n        details.open = !details.open;\r\n      }\r\n    }\r\n  });\r\n\r\n  const { nearReachStart } = useScroll({\r\n    scrollableRef,\r\n    distanceFromStartPx: 16,\r\n  });\r\n\r\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\r\n\r\n  const handleMediaClick = useCallback(\r\n    (e, i, media, status) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setSearchParams({\r\n        media: i + 1,\r\n        mediaStatusID: status.id,\r\n      });\r\n    },\r\n    [id],\r\n  );\r\n\r\n  const handleStatusLinkClick = useCallback((e, status) => {\r\n    resetScrollPosition(status.id);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      tabIndex=\"-1\"\r\n      ref={scrollableRef}\r\n      class={`status-deck deck contained ${\r\n        statuses.length > 1 ? 'padded-bottom' : ''\r\n      } ${initialPageState.current === 'status' ? 'slide-in' : ''} ${\r\n        viewMode ? `deck-view-${viewMode}` : ''\r\n      }`}\r\n      onAnimationEnd={(e) => {\r\n        // Fix the bounce effect when switching viewMode\r\n        // `slide-in` animation kicks in when switching viewMode\r\n        if (initialPageState.current === 'status') {\r\n          // e.target.classList.remove('slide-in');\r\n          initialPageState.current = null;\r\n        }\r\n      }}\r\n    >\r\n      <header\r\n        class={`${heroInView ? 'inview' : ''} ${\r\n          uiState === 'loading' ? 'loading' : ''\r\n        }`}\r\n        onDblClick={(e) => {\r\n          // reload statuses\r\n          states.reloadStatusPage++;\r\n        }}\r\n      >\r\n        {/* <div>\r\n            <Link class=\"button plain deck-close\" href={closeLink}>\r\n              <Icon icon=\"chevron-left\" size=\"xl\" />\r\n            </Link>\r\n          </div> */}\r\n        <div class=\"header-grid header-grid-2\">\r\n          <h1>\r\n            {!!/\\/s\\//i.test(snapStates.prevLocation?.pathname) && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain deck-back\"\r\n                onClick={() => {\r\n                  history.back();\r\n                }}\r\n              >\r\n                <Icon icon=\"chevron-left\" size=\"xl\" />\r\n              </button>\r\n            )}\r\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\r\n              <>\r\n                <span class=\"hero-heading\">\r\n                  <NameText\r\n                    account={heroStatus.account}\r\n                    instance={instance}\r\n                    showAvatar\r\n                    short\r\n                  />{' '}\r\n                  <span class=\"insignificant\">\r\n                    &bull;{' '}\r\n                    <RelativeTime\r\n                      datetime={heroStatus.createdAt}\r\n                      format=\"micro\"\r\n                    />\r\n                  </span>\r\n                </span>{' '}\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"ancestors-indicator light small\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    heroStatusRef.current.scrollIntoView({\r\n                      behavior: 'smooth',\r\n                      block: 'start',\r\n                    });\r\n                  }}\r\n                  title=\"Go to main post\"\r\n                >\r\n                  <Icon\r\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\r\n                  />\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                Post{' '}\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"ancestors-indicator light small\"\r\n                  onClick={(e) => {\r\n                    // Scroll to top\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    scrollableRef.current.scrollTo({\r\n                      top: 0,\r\n                      behavior: 'smooth',\r\n                    });\r\n                  }}\r\n                  hidden={!ancestors.length || nearReachStart}\r\n                  title={`${ancestors.length} posts above ‒ Go to top`}\r\n                >\r\n                  <Icon icon=\"arrow-up\" />\r\n                  {ancestors\r\n                    .filter(\r\n                      (a, i, arr) =>\r\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\r\n                    )\r\n                    .slice(0, 3)\r\n                    .map((ancestor) => (\r\n                      <Avatar\r\n                        key={ancestor.account.id}\r\n                        url={ancestor.account.avatar}\r\n                        alt={ancestor.account.displayName}\r\n                      />\r\n                    ))}\r\n                  {/* <Icon icon=\"comment\" />{' '} */}\r\n                  {ancestors.length > 3 && (\r\n                    <>\r\n                      {' '}\r\n                      <span class=\"insignificant\">\r\n                        {shortenNumber(ancestors.length)}\r\n                      </span>\r\n                    </>\r\n                  )}\r\n                </button>\r\n              </>\r\n            )}\r\n          </h1>\r\n          <div class=\"header-side\">\r\n            <Menu\r\n              align=\"end\"\r\n              portal={{\r\n                // Need this, else the menu click will cause scroll jump\r\n                target: scrollableRef.current,\r\n              }}\r\n              menuButton={\r\n                <button type=\"button\" class=\"button plain4\">\r\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\r\n                </button>\r\n              }\r\n            >\r\n              <MenuItem\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  states.reloadStatusPage++;\r\n                }}\r\n              >\r\n                <Icon icon=\"refresh\" />\r\n                <span>Refresh</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                className=\"menu-switch-view\"\r\n                onClick={() => {\r\n                  setViewMode(viewMode === 'full' ? null : 'full');\r\n                  searchParams.delete('media');\r\n                  searchParams.delete('media-only');\r\n                  if (viewMode === 'full') {\r\n                    searchParams.delete('view');\r\n                  } else {\r\n                    searchParams.set('view', 'full');\r\n                  }\r\n                  setSearchParams(searchParams);\r\n                }}\r\n              >\r\n                <Icon\r\n                  icon={\r\n                    {\r\n                      '': 'layout5',\r\n                      full: 'layout4',\r\n                    }[viewMode || '']\r\n                  }\r\n                />\r\n                <span>\r\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\r\n                </span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  // Click all buttons with class .spoiler but not .spoiling\r\n                  const buttons = Array.from(\r\n                    scrollableRef.current.querySelectorAll(\r\n                      'button.spoiler:not(.spoiling)',\r\n                    ),\r\n                  );\r\n                  buttons.forEach((button) => {\r\n                    button.click();\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\r\n              </MenuItem>\r\n              <MenuDivider />\r\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\r\n              <MenuItem\r\n                disabled={postSameInstance}\r\n                onClick={() => {\r\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\r\n                  if (statusURL) {\r\n                    location.hash = statusURL;\r\n                  } else {\r\n                    alert('Unable to switch');\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"transfer\" />\r\n                <small class=\"menu-double-lines\">\r\n                  Switch to post's instance (<b>{postInstance}</b>)\r\n                </small>\r\n              </MenuItem>\r\n            </Menu>\r\n            <Link class=\"button plain deck-close\" to={closeLink}>\r\n              <Icon icon=\"x\" size=\"xl\" />\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      {!!statuses.length && heroStatus ? (\r\n        <ul\r\n          class={`timeline flat contextual grow ${\r\n            uiState === 'loading' ? 'loading' : ''\r\n          }`}\r\n        >\r\n          {statuses.slice(0, limit).map((status) => {\r\n            const {\r\n              id: statusID,\r\n              ancestor,\r\n              isThread,\r\n              descendant,\r\n              thread,\r\n              replies,\r\n              repliesCount,\r\n              weight,\r\n            } = status;\r\n            const isHero = statusID === id;\r\n            // const StatusParent = useCallback(\r\n            //   (props) =>\r\n            //     isThread || thread || ancestor ? (\r\n            //       <Link\r\n            //         class=\"status-link\"\r\n            //         to={\r\n            //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\r\n            //         }\r\n            //         onClick={() => {\r\n            //           resetScrollPosition(statusID);\r\n            //         }}\r\n            //         {...props}\r\n            //       />\r\n            //     ) : (\r\n            //       <div class=\"status-focus\" tabIndex={0} {...props} />\r\n            //     ),\r\n            //   [isThread, thread],\r\n            // );\r\n            return (\r\n              <li\r\n                key={statusID}\r\n                ref={isHero ? heroStatusRef : null}\r\n                class={`${ancestor ? 'ancestor' : ''} ${\r\n                  descendant ? 'descendant' : ''\r\n                } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\r\n              >\r\n                {isHero ? (\r\n                  <>\r\n                    <InView\r\n                      threshold={0.1}\r\n                      onChange={onView}\r\n                      class=\"status-focus\"\r\n                      tabIndex={0}\r\n                    >\r\n                      <Status\r\n                        statusID={statusID}\r\n                        instance={instance}\r\n                        withinContext\r\n                        size=\"l\"\r\n                        enableTranslate\r\n                        forceTranslate={translate}\r\n                      />\r\n                    </InView>\r\n                    {uiState !== 'loading' && !authenticated ? (\r\n                      <div class=\"post-status-banner\">\r\n                        <p>\r\n                          You're not logged in. Interactions (reply, boost, etc)\r\n                          are not possible.\r\n                        </p>\r\n                        <Link to=\"/login\" class=\"button\">\r\n                          Log in\r\n                        </Link>\r\n                      </div>\r\n                    ) : (\r\n                      !sameInstance && (\r\n                        <div class=\"post-status-banner\">\r\n                          <p>\r\n                            This post is from another instance (\r\n                            <b>{instance}</b>). Interactions (reply, boost, etc)\r\n                            are not possible.\r\n                          </p>\r\n                          <button\r\n                            type=\"button\"\r\n                            disabled={uiState === 'loading'}\r\n                            onClick={() => {\r\n                              setUIState('loading');\r\n                              (async () => {\r\n                                try {\r\n                                  const results = await currentMasto.v2.search({\r\n                                    q: heroStatus.url,\r\n                                    type: 'statuses',\r\n                                    resolve: true,\r\n                                    limit: 1,\r\n                                  });\r\n                                  if (results.statuses.length) {\r\n                                    const status = results.statuses[0];\r\n                                    location.hash = currentInstance\r\n                                      ? `/${currentInstance}/s/${status.id}`\r\n                                      : `/s/${status.id}`;\r\n                                  } else {\r\n                                    throw new Error('No results');\r\n                                  }\r\n                                } catch (e) {\r\n                                  setUIState('default');\r\n                                  alert('Error: ' + e);\r\n                                  console.error(e);\r\n                                }\r\n                              })();\r\n                            }}\r\n                          >\r\n                            <Icon icon=\"transfer\" /> Switch to my instance to\r\n                            enable interactions\r\n                          </button>\r\n                        </div>\r\n                      )\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  // <StatusParent>\r\n                  <Link\r\n                    class=\"status-link\"\r\n                    to={\r\n                      instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\r\n                    }\r\n                    onClick={() => {\r\n                      resetScrollPosition(statusID);\r\n                    }}\r\n                  >\r\n                    <Status\r\n                      statusID={statusID}\r\n                      instance={instance}\r\n                      withinContext\r\n                      size={thread || ancestor ? 'm' : 's'}\r\n                      enableTranslate\r\n                      onMediaClick={handleMediaClick}\r\n                      onStatusLinkClick={handleStatusLinkClick}\r\n                    />\r\n                    {ancestor && isThread && repliesCount > 1 && (\r\n                      <div class=\"replies-link\">\r\n                        <Icon icon=\"comment\" />{' '}\r\n                        <span title={repliesCount}>\r\n                          {shortenNumber(repliesCount)}\r\n                        </span>\r\n                      </div>\r\n                    )}{' '}\r\n                    {/* {replies?.length > LIMIT && (\r\n                        <div class=\"replies-link\">\r\n                          <Icon icon=\"comment\" />{' '}\r\n                          <span title={replies.length}>\r\n                            {shortenNumber(replies.length)}\r\n                          </span>\r\n                        </div>\r\n                      )} */}\r\n                    {/* </StatusParent> */}\r\n                  </Link>\r\n                )}\r\n                {descendant && replies?.length > 0 && (\r\n                  <SubComments\r\n                    instance={instance}\r\n                    replies={replies}\r\n                    hasParentThread={thread}\r\n                    level={1}\r\n                    accWeight={weight}\r\n                    openAll={\r\n                      totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT\r\n                    }\r\n                  />\r\n                )}\r\n                {uiState === 'loading' &&\r\n                  isHero &&\r\n                  !!heroStatus?.repliesCount &&\r\n                  !hasDescendants && (\r\n                    <div class=\"status-loading\">\r\n                      <Loader />\r\n                    </div>\r\n                  )}\r\n                {uiState === 'error' &&\r\n                  isHero &&\r\n                  !!heroStatus?.repliesCount &&\r\n                  !hasDescendants && (\r\n                    <div class=\"status-error\">\r\n                      Unable to load replies.\r\n                      <br />\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain\"\r\n                        onClick={() => {\r\n                          states.reloadStatusPage++;\r\n                        }}\r\n                      >\r\n                        Try again\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n              </li>\r\n            );\r\n          })}\r\n          {showMore > 0 && (\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain block show-more\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => setLimit((l) => l + LIMIT)}\r\n                style={{ marginBlockEnd: '6em' }}\r\n              >\r\n                <div class=\"ib\">\r\n                  {/* show avatars for first 5 statuses */}\r\n                  {statuses.slice(limit, limit + 5).map((status) => (\r\n                    <Avatar\r\n                      key={status.id}\r\n                      url={status.account.avatarStatic}\r\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\r\n                    />\r\n                  ))}\r\n                </div>{' '}\r\n                <div class=\"ib\">\r\n                  Show more&hellip;{' '}\r\n                  <span class=\"tag\">\r\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\r\n                  </span>\r\n                </div>\r\n              </button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      ) : (\r\n        <>\r\n          {uiState === 'loading' && (\r\n            <ul class=\"timeline flat contextual grow loading\">\r\n              <li>\r\n                <Status skeleton size=\"l\" />\r\n              </li>\r\n            </ul>\r\n          )}\r\n          {uiState === 'error' && (\r\n            <p class=\"ui-state\">\r\n              Unable to load post\r\n              <br />\r\n              <br />\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  states.reloadStatusPage++;\r\n                }}\r\n              >\r\n                Try again\r\n              </button>\r\n            </p>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SubComments({\r\n  replies,\r\n  instance,\r\n  hasParentThread,\r\n  level,\r\n  accWeight,\r\n  openAll,\r\n}) {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  // Total comments count, including sub-replies\r\n  const diveDeep = (replies) => {\r\n    return replies.reduce((acc, reply) => {\r\n      const { repliesCount, replies } = reply;\r\n      const count = replies?.length || repliesCount;\r\n      return acc + count + diveDeep(replies || []);\r\n    }, 0);\r\n  };\r\n  const totalComments = replies.length + diveDeep(replies);\r\n  const sameCount = replies.length === totalComments;\r\n\r\n  // Get the first 3 accounts, unique by id\r\n  const accounts = replies\r\n    .map((r) => r.account)\r\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\r\n    .slice(0, 3);\r\n\r\n  const totalWeight = useMemo(() => {\r\n    return replies?.reduce((acc, reply) => {\r\n      return acc + reply?.weight;\r\n    }, accWeight);\r\n  }, [accWeight, replies?.length]);\r\n\r\n  let open = false;\r\n  if (openAll) {\r\n    open = true;\r\n  } else if (totalWeight <= MAX_WEIGHT) {\r\n    open = true;\r\n  } else if (!hasParentThread && totalComments === 1) {\r\n    const shortReply = calcStatusWeight(replies[0]) < 2;\r\n    if (shortReply) open = true;\r\n  }\r\n  const openBefore = cachedRepliesToggle[replies[0].id];\r\n\r\n  const handleMediaClick = useCallback((e, i, media, status) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setSearchParams({\r\n      media: i + 1,\r\n      mediaStatusID: status.id,\r\n    });\r\n  }, []);\r\n\r\n  const detailsRef = useRef();\r\n  useLayoutEffect(() => {\r\n    function handleScroll(e) {\r\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\r\n    }\r\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\r\n      passive: true,\r\n    });\r\n    return () => {\r\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <details\r\n      ref={detailsRef}\r\n      class=\"replies\"\r\n      open={openBefore || open}\r\n      onToggle={(e) => {\r\n        const { open } = e.target;\r\n        // use first reply as ID\r\n        cachedRepliesToggle[replies[0].id] = open;\r\n      }}\r\n      style={{\r\n        '--comments-level': level,\r\n      }}\r\n      data-comments-level={level}\r\n      data-comments-level-overflow={level > 4}\r\n    >\r\n      <summary class=\"replies-summary\" hidden={open}>\r\n        <span class=\"avatars\">\r\n          {accounts.map((a) => (\r\n            <Avatar\r\n              key={a.id}\r\n              url={a.avatarStatic}\r\n              title={`${a.displayName} @${a.username}`}\r\n              squircle={a?.bot}\r\n            />\r\n          ))}\r\n        </span>\r\n        <span>\r\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\r\n          repl\r\n          {replies.length === 1 ? 'y' : 'ies'}\r\n        </span>\r\n        {!sameCount && totalComments > 1 && (\r\n          <>\r\n            {' '}\r\n            &middot;{' '}\r\n            <span>\r\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\r\n              comment\r\n              {totalComments === 1 ? '' : 's'}\r\n            </span>\r\n          </>\r\n        )}\r\n      </summary>\r\n      <ul>\r\n        {replies.map((r) => (\r\n          <li key={r.id}>\r\n            <Link\r\n              class=\"status-link\"\r\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\r\n              onClick={() => {\r\n                resetScrollPosition(r.id);\r\n              }}\r\n            >\r\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\r\n              <Status\r\n                statusID={r.id}\r\n                instance={instance}\r\n                withinContext\r\n                size=\"s\"\r\n                enableTranslate\r\n                onMediaClick={handleMediaClick}\r\n              />\r\n              {!r.replies?.length && r.repliesCount > 0 && (\r\n                <div class=\"replies-link\">\r\n                  <Icon icon=\"comment\" />{' '}\r\n                  <span title={r.repliesCount}>\r\n                    {shortenNumber(r.repliesCount)}\r\n                  </span>\r\n                </div>\r\n              )}\r\n              {/* </div> */}\r\n            </Link>\r\n            {r.replies?.length && (\r\n              <SubComments\r\n                instance={instance}\r\n                replies={r.replies}\r\n                level={level + 1}\r\n                accWeight={!open ? r.weight : totalWeight}\r\n                openAll={openAll}\r\n              />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </details>\r\n  );\r\n}\r\n\r\nconst MEDIA_VIRTUAL_LENGTH = 140;\r\nconst POLL_VIRTUAL_LENGTH = 35;\r\nconst CARD_VIRTUAL_LENGTH = 70;\r\nconst WEIGHT_SEGMENT = 140;\r\nconst statusWeightCache = new Map();\r\nfunction calcStatusWeight(status) {\r\n  const cachedWeight = statusWeightCache.get(status.id);\r\n  if (cachedWeight) return cachedWeight;\r\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\r\n  const length = htmlContentLength(spoilerText + content);\r\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\r\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\r\n  const cardLength =\r\n    card && (mediaAttachments?.length || poll?.options?.length)\r\n      ? 0\r\n      : CARD_VIRTUAL_LENGTH;\r\n  const totalLength = length + mediaLength + pollLength + cardLength;\r\n  const weight = totalLength / WEIGHT_SEGMENT;\r\n  statusWeightCache.set(status.id, weight);\r\n  return weight;\r\n}\r\n\r\nexport default memo(StatusPage);\r\n","import { useParams } from 'react-router-dom';\r\n\r\nimport Status from './status';\r\n\r\nexport default function StatusRoute() {\r\n  const params = useParams();\r\n  const { id, instance } = params;\r\n  return <Status id={id} instance={instance} />;\r\n}\r\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\r\n\r\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\r\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\r\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\r\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\r\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\r\nimport logoText from '../assets/logo-text.svg';\r\nimport logo from '../assets/logo.svg';\r\n\r\nimport Link from '../components/link';\r\nimport states from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Welcome() {\r\n  useTitle(null, ['/', '/welcome']);\r\n  return (\r\n    <main id=\"welcome\">\r\n      <div class=\"hero-container\">\r\n        <h1>\r\n          <img\r\n            src={logo}\r\n            alt=\"\"\r\n            width=\"200\"\r\n            height=\"200\"\r\n            style={{\r\n              aspectRatio: '1/1',\r\n              marginBlockEnd: -16,\r\n            }}\r\n          />\r\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\r\n        </h1>\r\n        <p>\r\n          <big>\r\n            <b>\r\n              <Link to=\"/login\" class=\"button\">\r\n                Log in\r\n              </Link>\r\n            </b>\r\n          </big>\r\n        </p>\r\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\r\n      </div>\r\n      <div id=\"why-container\">\r\n        <div class=\"sections\">\r\n          <section>\r\n            <img\r\n              src={boostsCarouselUrl}\r\n              alt=\"Screenshot of Boosts Carousel\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Boosts Carousel</h4>\r\n            <p>\r\n              Visually separate original posts and re-shared posts (boosted\r\n              posts).\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={nestedCommentsThreadUrl}\r\n              alt=\"Screenshot of nested comments thread\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Nested comments thread</h4>\r\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={groupedNotificationsUrl}\r\n              alt=\"Screenshot of grouped notifications\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Grouped notifications</h4>\r\n            <p>\r\n              Similar notifications are grouped and collapsed to reduce clutter.\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={multiColumnUrl}\r\n              alt=\"Screenshot of multi-column UI\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Single or multi-column</h4>\r\n            <p>\r\n              By default, single column for zen-mode seekers. Configurable\r\n              multi-column for power users.\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={multiHashtagTimelineUrl}\r\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Multi-hashtag timeline</h4>\r\n            <p>Up to 5 hashtags combined into a single timeline.</p>\r\n          </section>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <p>\r\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\r\n          Built\r\n        </a>{' '}\r\n        by{' '}\r\n        <a\r\n          href=\"https://mastodon.social/@cheeaun\"\r\n          target=\"_blank\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            states.showAccount = 'cheeaun@mastodon.social';\r\n          }}\r\n        >\r\n          @cheeaun\r\n        </a>\r\n        .{' '}\r\n        <a\r\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\r\n          target=\"_blank\"\r\n        >\r\n          Privacy Policy\r\n        </a>\r\n        .\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n","// Replace alert() with toastify-js\r\nimport Toastify from 'toastify-js';\r\n\r\nconst nativeAlert = window.alert;\r\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\r\n\r\nwindow.alert = function (message) {\r\n  console.debug(\r\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\r\n  );\r\n  // If Error object, show the message\r\n  if (message instanceof Error && message?.message) {\r\n    message = message.message;\r\n  }\r\n  // If not string, stringify it\r\n  if (typeof message !== 'string') {\r\n    message = JSON.stringify(message);\r\n  }\r\n\r\n  const toast = Toastify({\r\n    text: message,\r\n    className: 'alert',\r\n    gravity: 'top',\r\n    position: 'center',\r\n    duration: 10_000,\r\n    offset: {\r\n      y: 48,\r\n    },\r\n    onClick: () => {\r\n      toast.hideToast();\r\n    },\r\n  });\r\n  toast.showToast();\r\n};\r\n","import './app.css';\r\n\r\nimport {\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\r\nimport 'swiped-events';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport BackgroundService from './components/background-service';\r\nimport ComposeButton from './components/compose-button';\r\nimport { ICONS } from './components/icon';\r\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\r\nimport Loader from './components/loader';\r\nimport Modals from './components/modals';\r\nimport NotificationService from './components/notification-service';\r\nimport SearchCommand from './components/search-command';\r\nimport Shortcuts from './components/shortcuts';\r\nimport NotFound from './pages/404';\r\nimport AccountStatuses from './pages/account-statuses';\r\nimport Bookmarks from './pages/bookmarks';\r\nimport Favourites from './pages/favourites';\r\nimport FollowedHashtags from './pages/followed-hashtags';\r\nimport Following from './pages/following';\r\nimport Hashtag from './pages/hashtag';\r\nimport Home from './pages/home';\r\nimport HttpRoute from './pages/http-route';\r\nimport List from './pages/list';\r\nimport Lists from './pages/lists';\r\nimport Login from './pages/login';\r\nimport Mentions from './pages/mentions';\r\nimport Notifications from './pages/notifications';\r\nimport Public from './pages/public';\r\nimport Search from './pages/search';\r\nimport StatusRoute from './pages/status-route';\r\nimport Trending from './pages/trending';\r\nimport Welcome from './pages/welcome';\r\nimport {\r\n  api,\r\n  initAccount,\r\n  initClient,\r\n  initInstance,\r\n  initPreferences,\r\n} from './utils/api';\r\nimport { getAccessToken } from './utils/auth';\r\nimport focusDeck from './utils/focus-deck';\r\nimport states, { initStates } from './utils/states';\r\nimport store from './utils/store';\r\nimport { getCurrentAccount } from './utils/store-utils';\r\nimport './utils/toast-alert';\r\n\r\nwindow.__STATES__ = states;\r\n\r\n// Preload icons\r\n// There's probably a better way to do this\r\n// Related: https://github.com/vitejs/vite/issues/10600\r\nsetTimeout(() => {\r\n  for (const icon in ICONS) {\r\n    if (Array.isArray(ICONS[icon])) {\r\n      ICONS[icon][0]?.();\r\n    } else {\r\n      ICONS[icon]?.();\r\n    }\r\n  }\r\n}, 5000);\r\n\r\nfunction App() {\r\n  const snapStates = useSnapshot(states);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [uiState, setUIState] = useState('loading');\r\n\r\n  useLayoutEffect(() => {\r\n    const theme = store.local.get('theme');\r\n    if (theme) {\r\n      document.documentElement.classList.add(`is-${theme}`);\r\n      document\r\n        .querySelector('meta[name=\"color-scheme\"]')\r\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\r\n    }\r\n    const textSize = store.local.get('textSize');\r\n    if (textSize) {\r\n      document.documentElement.style.setProperty(\r\n        '--text-size',\r\n        `${textSize}px`,\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const instanceURL = store.local.get('instanceURL');\r\n    const code = decodeURIComponent(\r\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\r\n    );\r\n\r\n    if (code) {\r\n      console.log({ code });\r\n      // Clear the code from the URL\r\n      window.history.replaceState({}, document.title, location.pathname || '/');\r\n\r\n      const clientID = store.session.get('clientID');\r\n      const clientSecret = store.session.get('clientSecret');\r\n      const vapidKey = store.session.get('vapidKey');\r\n\r\n      (async () => {\r\n        setUIState('loading');\r\n        const { access_token: accessToken } = await getAccessToken({\r\n          instanceURL,\r\n          client_id: clientID,\r\n          client_secret: clientSecret,\r\n          code,\r\n        });\r\n\r\n        const masto = initClient({ instance: instanceURL, accessToken });\r\n        await Promise.allSettled([\r\n          initInstance(masto, instanceURL),\r\n          initAccount(masto, instanceURL, accessToken, vapidKey),\r\n        ]);\r\n        initStates();\r\n        initPreferences(masto);\r\n\r\n        setIsLoggedIn(true);\r\n        setUIState('default');\r\n      })();\r\n    } else {\r\n      const account = getCurrentAccount();\r\n      if (account) {\r\n        store.session.set('currentAccount', account.info.id);\r\n        const { masto, instance } = api({ account });\r\n        console.log('masto', masto);\r\n        initPreferences(masto);\r\n        setUIState('loading');\r\n        (async () => {\r\n          try {\r\n            await initInstance(masto, instance);\r\n          } catch (e) {\r\n          } finally {\r\n            setIsLoggedIn(true);\r\n            setUIState('default');\r\n          }\r\n        })();\r\n      } else {\r\n        setUIState('default');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  let location = useLocation();\r\n  states.currentLocation = location.pathname;\r\n\r\n  useEffect(focusDeck, [location, isLoggedIn]);\r\n\r\n  const prevLocation = snapStates.prevLocation;\r\n  const backgroundLocation = useRef(prevLocation || null);\r\n  const isModalPage = useMemo(() => {\r\n    return (\r\n      matchPath('/:instance/s/:id', location.pathname) ||\r\n      matchPath('/s/:id', location.pathname)\r\n    );\r\n  }, [location.pathname, matchPath]);\r\n  if (isModalPage) {\r\n    if (!backgroundLocation.current) backgroundLocation.current = prevLocation;\r\n  } else {\r\n    backgroundLocation.current = null;\r\n  }\r\n  console.debug({\r\n    backgroundLocation: backgroundLocation.current,\r\n    location,\r\n  });\r\n\r\n  if (/\\/https?:/.test(location.pathname)) {\r\n    return <HttpRoute />;\r\n  }\r\n\r\n  const nonRootLocation = useMemo(() => {\r\n    const { pathname } = location;\r\n    return !/^\\/(login|welcome)/.test(pathname);\r\n  }, [location]);\r\n\r\n  // Change #app dataset based on snapStates.settings.shortcutsViewMode\r\n  useEffect(() => {\r\n    const $app = document.getElementById('app');\r\n    if ($app) {\r\n      $app.dataset.shortcutsViewMode = snapStates.shortcuts?.length\r\n        ? snapStates.settings.shortcutsViewMode\r\n        : '';\r\n    }\r\n  }, [snapStates.shortcuts, snapStates.settings.shortcutsViewMode]);\r\n\r\n  // Add/Remove cloak class to body\r\n  useEffect(() => {\r\n    const $body = document.body;\r\n    $body.classList.toggle('cloak', snapStates.settings.cloakMode);\r\n  }, [snapStates.settings.cloakMode]);\r\n\r\n  return (\r\n    <>\r\n      <Routes location={nonRootLocation || location}>\r\n        <Route\r\n          path=\"/\"\r\n          element={\r\n            isLoggedIn ? (\r\n              <Home />\r\n            ) : uiState === 'loading' ? (\r\n              <Loader id=\"loader-root\" />\r\n            ) : (\r\n              <Welcome />\r\n            )\r\n          }\r\n        />\r\n        <Route path=\"/login\" element={<Login />} />\r\n        <Route path=\"/welcome\" element={<Welcome />} />\r\n      </Routes>\r\n      <Routes location={backgroundLocation.current || location}>\r\n        {isLoggedIn && (\r\n          <Route path=\"/notifications\" element={<Notifications />} />\r\n        )}\r\n        {isLoggedIn && <Route path=\"/mentions\" element={<Mentions />} />}\r\n        {isLoggedIn && <Route path=\"/following\" element={<Following />} />}\r\n        {isLoggedIn && <Route path=\"/b\" element={<Bookmarks />} />}\r\n        {isLoggedIn && <Route path=\"/f\" element={<Favourites />} />}\r\n        {isLoggedIn && (\r\n          <Route path=\"/l\">\r\n            <Route index element={<Lists />} />\r\n            <Route path=\":id\" element={<List />} />\r\n          </Route>\r\n        )}\r\n        {isLoggedIn && <Route path=\"/ft\" element={<FollowedHashtags />} />}\r\n        <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\r\n        <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\r\n        <Route path=\"/:instance?/p\">\r\n          <Route index element={<Public />} />\r\n          <Route path=\"l\" element={<Public local />} />\r\n        </Route>\r\n        <Route path=\"/:instance?/trending\" element={<Trending />} />\r\n        <Route path=\"/:instance?/search\" element={<Search />} />\r\n        {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\r\n      </Routes>\r\n      {uiState === 'default' && (\r\n        <Routes>\r\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\r\n        </Routes>\r\n      )}\r\n      {isLoggedIn && <ComposeButton />}\r\n      {isLoggedIn &&\r\n        !snapStates.settings.shortcutsColumnsMode &&\r\n        snapStates.settings.shortcutsViewMode !== 'multi-column' && (\r\n          <Shortcuts />\r\n        )}\r\n      <Modals />\r\n      <NotificationService />\r\n      <BackgroundService isLoggedIn={isLoggedIn} />\r\n      <SearchCommand onClose={focusDeck} />\r\n      <KeyboardShortcutsHelp />\r\n    </>\r\n  );\r\n}\r\n\r\nexport { App };\r\n","import './index.css';\r\n\r\nimport './cloak-mode.css';\r\n\r\nimport { render } from 'preact';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './app';\r\n\r\nif (import.meta.env.DEV) {\r\n  import('preact/debug');\r\n}\r\n\r\nrender(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('app'),\r\n);\r\n\r\n// Storage cleanup\r\nsetTimeout(() => {\r\n  try {\r\n    // Clean up iconify localStorage\r\n    Object.keys(localStorage).forEach((key) => {\r\n      if (key.startsWith('iconify')) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    });\r\n    Object.keys(sessionStorage).forEach((key) => {\r\n      if (key.startsWith('iconify')) {\r\n        sessionStorage.removeItem(key);\r\n      }\r\n    });\r\n\r\n    // Clean up old settings key\r\n    localStorage.removeItem('settings:boostsCarousel');\r\n  } catch (e) {}\r\n}, 5000);\r\n\r\nwindow.__CLOAK__ = () => {\r\n  document.body.classList.toggle('cloak');\r\n};\r\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","notificationStream","masto","instance","api","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","since_id","id","value","next","length","lastReadId","markers","fetch","timeline","notificationsShowNew","ws","stream","log","notification","saveStatus","checkForUpdates","lastCheckDate","r","info","useInterval","json","then","catch","diff","ComposeButton","handleButton","e","shiftKey","openCompose","alert","showCompose","useHotkeys","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","currentDefault","setCurrentDefault","_","reload","useReducer","x","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","NameText","test","showAcct","set","Menu","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","webPushSubscriptions","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","FormData","theme","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","parseInt","documentElement","setProperty","for","target","source","rel","checked","autoRefresh","boostsCarousel","contentTranslation","onChange","targetLanguages","lang","code","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","style","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","showAccount","__BUILD_TIME__","RelativeTime","datetime","Date","__COMMIT_HASH__","pushFormRef","uiState","setAllowNotifications","previousPolicyRef","allowNofitications","needRelogin","setUIState","alerts","elements","policyEl","Object","forEach","el","isLoading","values","mention","favourite","reblog","follow","follow_request","poll","alertsCount","params","key","allowNofitications2","policyChanged","warn","permission","label","alert2","focusDeck","timer","setTimeout","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","accountInfoStates","proxy","familiarFollowers","AccountInfo","fetchAccount","standalone","isString","setInfo","snapAccountInfoStates","isSelf","useMemo","sameCurrentInstance","error","acct","avatar","bot","createdAt","displayName","emojis","fields","followersCount","followingCount","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","headerIsAvatar","header","headerStatic","accountInstance","domain","headerCornerColors","setHeaderCornerColors","followersIterator","familiarFollowersCache","firstLoad","results","newValue","account2","familiar","followingIterator","LinkOrDiv","accountLink","AccountBlock","avatarSize","removeAttribute","crossOrigin","canvas","createElement","ctx","getContext","height","rgbColors","pixelDimension","colors","g","b","dataLength","a","color","lightenRGB","internal","role","handleContentLinks","enhanceContent","__html","verifiedAt","text","dangerouslySetInnerHTML","fetchFollowers","follower","fetchFollowing","hideAllModals","shortenNumber","niceDateTime","RelatedActions","currentInstance","sameInstance","currentMasto","currentAuthenticated","accountID","blocking","following","showingReblogs","notifying","followedBy","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","relationship","currentInfo","currentID","q","setIsSelf","setRelationshipUIState","fetchRelationships","relationships","setPostingStats","fetchFamiliarFollowers","setRelationship","followers","FAMILIAR_FOLLOWERS_LIMIT","statuses","status","fetchStatuses","stats","boosts","replies","originals","Math","updateAccount","loading","relationshipUIState","menuInstanceRef","showTranslatedBio","setShowTranslatedBio","setShowAddRemoveLists","postingStats","hasPostingStats","showAddRemoveLists","daysSinceLastPost","_b","_a","instanceRef","portal","containerProps","showToast","clipboard","newRelationship","SubMenu","reloadGenericAccounts","counter","overflow","duration","Loader","luminence","alpha","niceAccountURL","urlObj","host","path","pathname","TranslatedBioSheet","fieldsText","getHTMLText","AddRemoveListsSheet","setLists","setListsContainingAccount","reloadCount","c","lists2","listsContainingAccount2","forceTranslate","setShowListAddEditModal","lists","listsContainingAccount","inList","showListAddEditModal","accountIds","result","AccountSheet","propInstance","closest","destination","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","sort","updatedAt","getTime","hasDrafts","abrupt","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","showGenericAccounts","heading","fetchAccounts","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","_types","InView","MediaAltModal","setForceTranslate","differentLanguage","localeMatch","find","l","dir","whiteSpace","TranslationBlock","sourceLanguage","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","showMediaAlt","setShowMediaAlt","handleScroll","round","passive","clearTimeout","contains","blurhash","rgbAverageColor","getBlurHashAverageColor","join","currentTarget","description","Media","showOriginal","stopPropagation","position","boundingBoxPadding","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","mem","cacheKey","subtitle","query","split","ShortcutsSettings","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","iterator","tags","push","imgURL","multiColumnUrl","shortcut","shortcutsArr","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","setCurrentType","mode","required","defaultValue","tag","spellcheck","shortcutsStr","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","hasCurrentSettings","setImportShortcutStr","s","opacity","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","share","subscribe","changes","prevValue","Modals","navigate","useNavigate","location","useLocation","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","AVATARS_LIMIT","Notification","isStatic","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","showAvatar","format","slice","squircle","TruncatedLink","Status","onContextMenu","metaKey","dispatchEvent","MouseEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocorrect","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","add","from","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","menuRef","formattedShortcuts","pin","Boolean","handler","closeMenu","shortcutsViewMode","updatesButton","viewScroll","Menu2","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","shortcutsColumnsMode","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","ControlledMenu","anchorRef","zIndex","body","unmountOnClose","appVersion","commitHash","confirm","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","allowFilters","refresh","setItems","showNew","setShowNew","debug","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","idle","useIdle","loadOrCheckUpdates","useCallback","disableHoverCheck","inBackground","visible2","timeDiff","hasUpdate","lastHiddenTime","node","hiddenUI","_pinned","isCarousel","StatusCarousel","title2","_filtered","statusID2","reblog2","actualStatusID2","url2","isSpoiler","showCompact","_differentAuthor","manyItems","isMiddle","TimelineStatusCompact","inView","className","statusPeek","sKey","statusPeekText","statusThreadNumber","AccountStatuses","useParams","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","fetchAccountStatuses","pinnedStatuses","listStatuses","pinned","pinnedStatusesIds","exclude_replies","exclude_reblogs","only_media","setAccount","featuredTags","setFeaturedTags","useTitle","featuredTags2","filterBarRef","TimelineStart","cachedAccount","filtered","active","allowSwitch","masto2","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","streamUser","on","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","columnMode","hashtags","trim","hashtagTitle","maxID","fetchHashtags","timelines","listHashtag","any","maxId","followUIState","setFollowUIState","reachLimit","setDownOverflow","unfollow","finally","FocusableItem","newHashtag","MenuGroup","newInstance","List","listIterator","fetchList","listList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","groupNotifications","notificationsMap","cleanNotifications","date","toLocaleDateString","virtualType","mappedNotification","mappedAccount","reverse","n","notificationsMap2","cleanNotifications2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","showTodayEmpty","todayDate","announcement","announcementsListRef","AnnouncementBlock","notificationDay","differentDay","currentDay","yesterdayDate","contact","getCurrentInstance","contactAccount","content","startsAt","allDay","read","endsAt","published","publishedAt","reactions","publishedAtDate","publishedDateText","updatedAtText","reaction","me","staticUrl","Public","isLocal","publicIterator","fetchPublic","listPublic","prompt","toLowerCase","Trending","setHashtags","trendIterator","fetchTrend","trends","listTags","history","total","reduce","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","skipThreading","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","hostname","match","noteId","HttpRoute","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","offset","link","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","language","StatusThread","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","repliesCount","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","parent","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","activeStatusRect","activeStatus","allStatusLinks","activeStatusIndex","nextStatus","onView","setHeroInView","statusLink","heroPointer","topmostStatusLink","prevStatus","details","statusLinkRect","initialPageState","handleMediaClick","handleStatusLinkClick","viewMode","short","arr","button","MenuHeader","postSameInstance","buttons","descendant","thread","isHero","status2","SubComments","hasParentThread","openAll","level","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","card","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","ICONS","App","setIsLoggedIn","setAttribute","textSize","decodeURIComponent","clientSecret","access_token","initPreferences","allSettled","initInstance","backgroundLocation","isModalPage","nonRootLocation","$app","Route","element","Routes","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"m0BAEe,SAASA,GAAkBC,EAAKA,IAAM,GAAIC,EAAO,CAAA,EAAI,CAClE,MAAMC,EAAgBC,EAAOH,CAAE,EAC/BI,EAAU,IAAM,CACdF,EAAcG,QAAUL,CAC1B,EAAG,CAACC,CAAI,CAAC,EAETG,EAAU,IAAM,CACd,MAAME,EAAyBA,IAAM,CACnC,MAAMC,EAASC,SAASD,QAAUC,SAASC,kBAAoB,SAC/DC,EAAwC,QAAA,CAAAH,CAAA,CACxCL,EACF,gBAAC,iBAAA,mBAAAI,CAAA,EAEDE,IAAyB,SAAA,oBAAmB,oBAAyB,GAC9D,CAAA,CAAA,ECRX,MAAAG,GAAeC,GAAK,SAA2B,CAAEC,WAAAA,CAAW,EAAG,CAG7D,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAS,EAAI,EAC3CjB,GAAkBgB,CAAU,EAC5B,MAAME,EAAqBd,IAC3BC,EAAU,IAAM,CACd,GAAIS,GAAcC,EAAS,CACnB,KAAA,CAAEI,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,GAC/B,SAAY,OAEX,GAAIC,EAAOC,kBAAmB,CAC5B,MAAMC,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAO,EACPC,SAAUP,EAAOC,kBAAkBO,EAAAA,CACpC,EACK,CAAEC,MAAOL,CAAAA,EAAkB,MAAMF,EAAsBQ,OAC7D,GAAIN,GAAAA,MAAAA,EAAeO,OAAQ,CACrBC,IAAAA,EACA,GAAA,CACF,MAAMC,EAAU,MAAMhB,EAAMM,GAAGU,QAAQC,MAAM,CAC3CC,SAAU,eAAA,CACX,EACDH,GAAaC,EAAAA,GAAAA,YAAAA,EAAST,gBAATS,YAAAA,EAAwBD,gBAC3B,CAAC,CACTA,EACER,EAAc,CAAC,EAAEI,KAAOI,IAC1BZ,EAAOgB,qBAAuB,IAGhChB,EAAOgB,qBAAuB,EAElC,CACF,CAGApB,EAAmBZ,QAAU,MAAMa,EAAMoB,GAAGC,OAC1C,oBACA,CACEA,OAAQ,mBAAA,CAEZ,EACQC,EAAiCvB,QAAAA,GAAAA,eAAAA,GAA0B,CAEhDZ,EAAAA,QACTmC,YAAqCrB,EAAA,CACzCsB,cAAqB,EACvBC,CAAWD,EACMpB,EAChB,qBAAA,EAAA,CACH,EACAA,EAA8B,QAAA,GAAA,QAAA,IAAA,CAAA,CAAA,IAGbhB,CACjBK,MAAAA,IAAAA,CACFO,EAAA,UACCA,EAAA,QAAA,GAAA,QACLA,EAAA,QAAA,KAEE,CACEA,EAAmBZ,CAAAA,EAAAA,CAAAA,CAAAA,EACnBY,MAAAA,EAAAA,IACF0B,EAAA,IAAA,CACFC,EAAA,QAAA,KAAA,MACC,MAAU/B,gBAAW,EAAA,KAAAgC,GAAAA,EAAA,MAAA,EAAA,KAAAC,GAAA,KAIlBH,aAAwBG,EACdzC,CAAAA,EAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CACdK,EACM,OAAAqC,GAAAJ,EACGE,GAAQG,IAAM,GACpBC,EAAMH,EACDA,GAAAA,GAAAA,CAAMzB,IAEX6B,EAAa,QAGlB,KAAA,IAAA,EAAAN,EAAA,QAC6B9B,IAAAA,GAAAA,IAC7Bf,IAJMW,IAOgB,CAAA,EAEhB,IACA,CAAIyC,ECzFZ,SAAwBC,IAAgB,CACtC,SAASC,EAAaC,EAAG,CACnBA,EAAEC,SACWC,OAGbC,MAAM,6CAA6C,EACnDpC,EAAOqC,YAAc,IAGvBrC,EAAOqC,YAAc,EAEzB,CAEAC,OAAAA,GAAW,aAAcN,EAAc,CACrCO,gBAAwBN,GACL,CAAC,CAAC9C,SAASqD,cAAc,sBAAsB,CAElE,CACD,EAGCC,EAAA,SAAA,CAAQC,KAAK,SAASlC,GAAG,iBAAiBmC,QAASX,EAAaY,SAC9DH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKC,IAAI,SAAA,CAAW,CAAA,CACtC,CAEZ,CCtBA,MAAAC,GAAe1D,GAAK,UAAiC,CAC7C2D,MAAAA,EAAaC,GAAYnD,CAAM,EAErC,SAASoD,GAAU,CACjBpD,EAAOqD,0BAA4B,EACrC,CAEAf,GACE,aACOL,GAAA,CACL5C,EAAAA,0BAAkB,EAClBW,EAAAA,CAEF,gBAAAiC,GAC0B,CAAA,CAAA,SAAA,cAAA,sBAAA,CAEfqB,CACT,EACF,MACFC,EAAAjB,GAAA,MAAAc,EAAA,CAAA,CAAA,EAEA,MAAed,CAAAA,CAAAA,EAAAA,2BAA6BG,EAAAe,GAAA,CAE5C,MACIN,QAEEO,QAAMxB,GAAA,YACUA,EAAA,eACVA,GAEJ,EACF,SAAAyB,EAAA,MAAA,CAAEd,GAAAA,oCAGApC,MAAG,QACHiD,SAAM,KACNE,IAASJ,EACTK,SAAKL,CAAAA,EAAAA,SAAAA,CAAOX,KAAAA,SAEJF,MAAK,cAASe,QAAML,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,6BACE,CAAA,CAAI,CAAA,EAAsBH,EAAA,OAAA,CAE5BA,SAAAA,EAAA,QAAA,CAAAG,kBAEK,0BAEGiB,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,YACED,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,gBACED,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,6BACED,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,iCACEiB,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,oBACEiB,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAChC,CAGN,OAAA,mCACEiB,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,wBACED,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,KAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAQ,SAAKA,WAAA,CAAA,CAAAG,CAAK,CAAA,CAAe,EACtC,CAGN,OAAA,oCACEiB,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,GAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAM,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC5B,CAGN,OAAA,mBACEiB,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,YACED,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,MAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAS,SAAIA,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,EAAK,KAAA,IAAAA,EAAA,MAAA,CAAM,SAAI,OACrD,CAAA,CAAAG,CAAK,CAAA,CAAW,EAChB,CAGN,OAAA,SACEiB,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,QACED,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,YACED,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,QACED,KAAQH,EAAAK,EAAA,CACRD,SACEC,CAAAtB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,WACEiB,KAAQpB,EAAA,MAAA,CACRqB,SAAM,GAAA,CAAA,CAAK,CAAA,EAAM,IAAA,CAAA,CAEnBE,OAAAA,EAAOH,KAAAA,CAAAA,IAAQC,EAAAA,KAAAA,CAAK,SACpB,CAAArB,EAAA,KAAA,CAAAG,SACEH,CAAA,CAAA,EAAKoB,EAAAA,KAAAA,CACLpB,SAAAqB,CAAA,CAAA,CAAAlB,CAAKkB,EAASD,CAAC,CAAA,CAAA,CAAA,CAElB,CAAA,CAAC,CACG,CAAA,CACF,CAAA,CACJ,CAAA,EClJb,SAASI,GAAS,CAAEb,QAAAA,CAAQ,EAAG,CACvB,KAAA,CAAEvD,MAAAA,GAAUE,EAAI,EAEhBmE,EAAWC,EAAMC,MAAMC,QAAQ,UAAU,EACzCC,EAAiBH,EAAMI,QAAQC,IAAI,gBAAgB,EACnDC,EAAqBP,EAASvD,OAAS,EACvC,CAAC+D,EAAgBC,CAAiB,EAAIhF,EAAS,CAAC,EAEhD,CAACiF,EAAGC,CAAM,EAAIC,GAAkBC,GAAAA,EAAI,EAAG,CAAC,EAE9C,OACErB,EAAA,MAAA,CAAKlD,GAAG,qBAAqBiD,MAAM,QAAQuB,SAAS,KAAIpC,SACrD,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,cAAcd,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAQgB,MAAM,cAAab,SACzBH,EAAA,KAAA,CAAAG,SAAI,UAAA,CAAY,CAAA,CACV,EACRH,EAAA,OAAA,CAAAG,SACEc,EAAA,UAAA,CAAAd,UACEH,EAAA,KAAA,CAAIgB,MAAM,gBAAeb,SACtBsB,EAASF,IAAI,CAACiB,EAASC,IAAM,CACtBC,MAAAA,EAAYF,EAAQxD,KAAKjB,KAAO8D,EAChCc,EAAYF,KAAOR,GAAkB,GAC3C,OACEhB,EAAA,KAAA,CAAAd,UACEc,EAAA,MAAA,CAAAd,SAAA,CACG6B,GACChC,EAAA,OAAA,CAAMgB,MAAQ,WAAU0B,EAAY,aAAe,EAAG,GAAEvC,SACtDH,EAACI,EAAI,CAACC,KAAK,eAAeE,IAAI,SAAA,CAAW,CAAA,CACrC,EAERP,EAAC4C,GAAM,CACLC,IAAKL,EAAQxD,KAAK8D,aAClBxC,KAAK,MACLyC,WAAY,SAAY,CACtB,GAAIL,EACE,GAAA,CACI1D,MAAAA,EAAO,MAAM5B,EAAMM,GAAG+D,SAASpD,MACnCmE,EAAQxD,KAAKjB,EACf,EACQW,EAAAA,OACR8D,EAAAA,MAAexD,QAAAA,WAAAA,CAAAA,EACT2C,GACC,MAAA,EAEX,CAAA,CACF,EAAA3B,EAAAgD,GAAA,CAEFhD,QAASgC,EAAA,MAGD,KACE,KAAWhD,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,WAAAA,EAAAA,IACDiE,KAGZ,SACQjE,GAEdkE,QAAQ,IAAA,GAEN3F,EAAe,YAAA,GAAAiF,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,IAERd,EAAA,QAAA,IAAA,iBAAAc,EAAA,KAAA,EAAA,EACLd,SAAcyB,OAAAA,EAEhB,CAAA,CACF,CAAA,CAAA,CAAA,EACAlC,EAAA,MAAA,CAEJA,MAAAA,UAAKD,SAAM,CAAA2B,GAAAX,GAAAf,EAAAK,EAAA,UACKU,CAAAA,EAAAA,OAAAA,CACZ7B,MAAAA,MACQa,SAAM,SAAA,CAAA,EAAM,GAAA,CAAA,CAAO,IAAWoC,GAAA,CAGxCnC,MAAAA,MACEoC,WAAMrD,EAAA,SAAA,CACNsD,KAAAA,SAEIrD,MAAK,OACLsD,MAAM,oBACNvC,SAAMhB,EAAAI,EAAA,CAAmBD,KAAAA,OAEnBE,KAAK,IAAOC,IAAK,MAAA,CAAA,CAAQ,CAAA,EAAS,SAClC,CAAAW,EAAAuC,EAAA,CACTrD,QAEDc,IAACuC,GACUtD,YAAM,GAAAsC,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,EACbjF,EACF,SAAA,CAAAyC,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,eAAA,CAAA,CAAAG,CAAM,CAAA,EAAoBH,EAAAyD,GAAA,CAAA,CAAA,EAAAzB,GAAAf,EAAAuC,EAAA,UAE3BC,EAGGC,QAAUf,IAAAA,GACK,OAAAF,EAAA,CAAA,EAEJkB,EAAAA,SAAW,EACpBlC,EAAAA,cAAwB,WAAAA,CAAA,EAClBE,EAAcc,CAAA,CACpBP,EACF,SAAA,CAAAlC,EAAAI,EAAA,CAAED,KAAAA,cAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,gBAAA,CAAA,CAAAG,CAAM,CAAA,EAAqBc,EAAA2C,GAAA,CAG/B3C,QAAY,GACV4C,aAAO5C,EAAAK,EAAA,CACPwC,SAAAA,CAAAA,IACE,CAAA3D,KAAAA,MACO,CAAA,EAAMc,EAAA,OAAA,CACXA,SAAA,CAAA,YAAAuB,EAAA,KAAA,KAAA,GAAA,CAAA,CAAA,CAAArC,CAAmC,CAAA,EAAO,SAC1C,CAAAuC,EAEJgB,kBAAWhB,SACXqB,QAAkB,IAAA,GACH,OAAAtB,EAAA,CAAA,EAGJkB,EAAAA,MAAAA,QAAW,WAAAlC,CAAA,EACdE,SAAAA,KAAc,SAAA,UAAoB,GAE/BqC,EACX,SAAA,CAAAhE,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,UAAA,CAAA,CAAAG,CAAM,CAAA,CAAQ,CAAO,CAAA,CAAA,CACT,CAAA,CAAA,CACT,EACJsC,EAACD,EAAA,EAAA,CAAA,CAAA,CACJ,CAAA,EAEPxC,EAAA,IAAA,CAEHA,SAAAiB,EAAAgD,EAAA,CAAA9D,GAAAA,SACQ+D,MAAG,gBAASlD,QAAML,EAAgBT,SAASS,CAAAA,EAAAA,EAAAA,CAAQR,KAAAA,MAClD,CAAA,EAAM,IAAAH,EAAA,OAAA,CAAQ,SAAEA,yBAAA,CAAA,CAAAG,CAAM,CAAA,CAA8B,CAAA,EACrD6B,GAAAhC,EAAA,IAAA,CACL,SAEDA,EAAAA,QAAAA,CAAAG,mBACEH,EAAA,IAAA,CAAA,SACQA,SAAA,CAAA,EAAG,iGAAA,CAAA,CAAO,CAElB,CAAA,CAAA,CAAO,CAAA,CAEV,CAAA,CAAA,CACM,CAAA,CACJ,CC3Kb,MAAemE,GAAA,GAAA,IAAA,IAAA,oBAAA,YAAA,GAAA,EAAA,KCkCf,SAASC,GAA8BC,EAAc,CACnD,KAAM,CAAEjH,MAAAA,CAAO,EAAGE,EAAG,EACrB,OAAOF,EAAMM,GAAG4G,qBAAqBC,OAAOF,CAAY,CAC1D,CAEA,SAASG,IAA+B,CACtC,KAAM,CAAEpH,MAAAA,CAAO,EAAGE,EAAG,EACrB,OAAOF,EAAMM,GAAG4G,qBAAqBjG,MAAK,CAC5C,CAEA,SAASoG,GAA8BJ,EAAc,CACnD,KAAM,CAAEjH,MAAAA,CAAO,EAAGE,EAAG,EACrB,OAAOF,EAAMM,GAAG4G,qBAAqBI,OAAOL,CAAY,CAC1D,CAEA,SAASM,IAAgC,CACvC,KAAM,CAAEvH,MAAAA,CAAO,EAAGE,EAAG,EACrB,OAAOF,EAAMM,GAAG4G,qBAAqBM,OAAM,CAC7C,CAKO,SAASC,IAAkB,CAChC,MAAO,kBAAmBC,WAAa,gBAAiBC,MAC1D,CAEO,SAASC,IAAkB,CAEhC,OAAOF,UAAUG,cAAcD,iBACjC,CAEA,eAAeE,IAAkB,CAC/B,MAAMC,EAAe,MAAMH,KACrBX,EAAec,EACjB,MAAMA,EAAaC,YAAYF,gBAAiB,EAChDG,OACJ,MAAO,CAAEF,aAAAA,EAAcd,aAAAA,EACzB,CAEA,SAASiB,GAAsBC,EAAc,CAC3C,MAAMC,EAAU,IAAIC,QAAQ,EAAKF,EAAarH,OAAS,GAAM,CAAC,EACxDwH,EAAU,GAAEH,CAAa,GAAEC,CAAQ,GACtCG,QAAQ,KAAM,GAAG,EACjBA,QAAQ,KAAM,GAAG,EAEdC,EAAUb,OAAOc,KAAKH,CAAM,EAC5BI,EAAc,IAAIC,WAAWH,EAAQ1H,MAAM,EAEjD,QAASuE,EAAI,EAAGA,EAAImD,EAAQ1H,OAAQ,EAAEuE,EACpCqD,EAAYrD,CAAC,EAAImD,EAAQI,WAAWvD,CAAC,EAGvC,OAAOqD,CACT,CAKO,eAAeG,IAAmB,CACvC,GAAI,CAACpB,GAAe,EAAI,OACxB,KAAM,CAAER,aAAAA,CAAa,EAAI,MAAMa,GAAe,EAC9C,IAAIgB,EAAsB,KAC1B,GAAI,CACFA,EAAsB,MAAM1B,IAC7B,OAAQ2B,EAAK,CACZ,GAAI,wBAAuBlD,KAAKkD,EAAIC,OAAO,EAIzC,MAAMD,CAEV,CAGED,GAAAA,GAAAA,EAAAA,CACA,MAAAG,EAAAH,EAAA,WAAA7B,EAAA,UAEF,SAAAiC,CACIJ,EAAAA,GAAmB,EACfG,EAAAA,EAAkC,YAAchC,EACtD,GAAM,CAAAgC,EAAEC,MAAAA,IAAAA,MAAAA,uCAAAA,EACR,GAAA,CAAAC,EAGA,MAAA,IAAA,MAAA,gDAAA,QAY6B,CAAAL,EAAU,CAErC,KAAE,CACF,SAAAI,CACA,EAAAE,GAAA,EACA,CACA,qBAAAC,CACA,EAAApC,EAAA,QACAqC,EAAApB,GAAAgB,CAAA,EAAA,SAAA,EACAK,EAAA,IAAA,WAAAF,CAAA,EAAA,SAAA,EAEA,GAAA,EADAC,IAAAC,GAKAtC,YAAYA,EAAK6B,cACnB,IAAA,MAAA,wCAAA,CACQI,CAWN1J,MAAAA,qCAGE2J,CACF,CACA,eAAAK,GAAA,CACA,KAAAC,EACA,OAAAC,CACF,EAAA,CACF,GAAA,CAAAjC,GAAA,EAAA,WAEA,aAAAM,EACA,aAAAd,CACA,EAAA,MAAAa,GAAA,EACAgB,EAAA,KACA,GAAA7B,EACA,GAAA,CACA6B,EAAA,MAAAzB,GAAA,CACA,KAAAoC,EACA,OAAAC,GAEqB,MAAA,CACvBZ,EAAA,MAAA9B,GAAA,CAEO,aAAAC,EAAwC,KAAAwC,EAAEC,OAAAA,CAAO,CAAG,CACX,KAAEA,CAChD,KAAKjC,CACD,SAAAyB,CAAc,EAAAE,GAAA,EAAEnC,GAAAA,CAAAA,EAAAA,MAAAA,IAAAA,MAAAA,qBAAAA,EAAiBA,EAAqB,MAAAc,EAAE,YAAA,UAAA,CACxDe,gBAAAA,GAEA7B,qBAAciB,GAAAgB,CAAA,EACZ,IACiB,MAAS7B,GAAAA,gBAE1BqC,KAAAA,EACF,OAAAA,CACA,CAAA,CAEA,OAEmB,qCAGjBA,CACF,CACA,eAAAC,IAAA,CACF,GAAA,CAAAlC,GAAA,EAAA,OACF,KAAO,CACL,aAAAR,GACM,MAAAa,GAAA,EAAEoB,IAAS,MAAqB3B,GAAE,EACxC,QAAe,cAEbqC,CC5LN,MAAMC,GAAoB,GACpBC,GAAa,CAAC,GAAI,GAAI,GAAI,GAAI,EAAE,EAEtC,SAASC,GAAS,CAAExG,QAAAA,CAAQ,EAAG,CACvBF,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B6J,EAAe1F,EAAMC,MAAMI,IAAI,OAAO,GAAK,OAC3CsF,EAAehL,IACfiL,EACJ7G,EAAW8G,SAASC,kCAAoC,KACpDC,EAAuBC,KACvBC,EAA2BC,GAAgBH,CAAoB,EAC/DI,EAAkBnG,EAAMC,MAAMI,IAAI,UAAU,GAAKkF,GAEjD,CAACa,EAAOC,CAAQ,EAAI7K,EAASwE,EAAMc,QAAQT,IAAI,aAAa,GAAK,CAAA,CAAE,EACnE,CAAE3E,MAAAA,EAAO4K,cAAAA,EAAe3K,SAAAA,GAAaC,EAAI,EAiB/C,OACE2D,EAAA,MAAA,CAAKlD,GAAG,qBAAqBiD,MAAM,QAAQuB,SAAS,KAAIpC,SACrD,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,cAAcd,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAI,UAAA,CAAY,CAAA,CACV,EACRc,EAAA,OAAA,CAAAd,UACEH,EAAA,UAAA,CAAAG,SACEc,EAAA,KAAA,CAAAd,UACEc,EAAA,KAAA,CAAAd,UACEH,EAAA,MAAA,CAAAG,SACEH,EAAA,QAAA,CAAAG,SAAO,YAAA,CAAiB,CAAA,CACrB,EACLH,EAAA,MAAA,CAAAG,SACEH,EAAA,OAAA,CACEmB,IAAKkG,EACLY,QAAgBzI,GAAA,CACd5C,EAAAA,eAAa,EAEb,MAAMsL,EADW,IAAA,SAAAb,EAAA,OAAA,EACIc,IAAAA,OAASd,EACxBe,EAAAA,SAAiBrG,gBACvBqG,IAAa1L,OAEb2L,EAAID,UAAkB,OAAA,WAAA,SAAA,GAEfC,EAAA,UAAA,OAAA,WAAAD,IAAA,OAAA,EACLC,EAAKC,UAAUC,OAAO,UAAYH,IAAAA,MAAiB,GAErD,SAAA,cAAA,2BAAA,EAAA,aAAA,UAAAA,IAAA,OAAA,aAAAA,CAAA,EAEGrI,IAAAA,OAMH2B,EAAI0G,MAAU,IAAQ,OAAA,EAEf1G,EAAA,MAAA,IAAA,QAAA0G,CAAA,CAEP,EACF,SAAAnH,EAAA,MAAA,CAAEd,MAAAA,cAEGa,SAAM,CAAAC,EAAA,QAAA,CAAad,SACtBc,CAAAA,EAAA,QAAA,CAAAd,KAAAA,QAEIF,KAAK,QACLuI,MAAK,QACLxK,eAAMoJ,IAAA,OAAA,CAAA,EACNqB,EAAAA,QAEFzI,SAAA,OAAA,CAAA,CAAAG,CAAM,CAAA,EAAYc,EAAA,QAAA,CAEpBA,SAAA,CAAAjB,EAAA,QAAA,CAAAG,KAAAA,QAEIF,KAAK,QACLuI,MAAK,OACLxK,eAAMoJ,IAAA,MAAA,CAAA,EACNqB,EAAAA,QAEFzI,SAAA,MAAA,CAAA,CAAAG,CAAM,CAAA,EAAWc,EAAA,QAAA,CAEnBA,SAAA,CAAAjB,EAAA,QAAA,CAAAG,KAAAA,QAEIF,KAAK,QACLuI,MAAK,OACLxK,eAAMoJ,IAAA,SAAAA,IAAA,MAAA,CACNqB,EAAAA,EAAAA,OAAAA,CAIFzI,SAAA,MAAA,CAAA,CAAAG,CAAM,CAAA,CAAI,CAAO,CAAA,CACX,CAAA,CACL,CAAA,CAAC,CACF,CAAA,EACFc,EAAA,KAAA,CAERA,UAAAjB,EAAA,MAAA,UACEA,EAAA,QAAA,CAAAG,oBACE,CAAA,CAAO,CAAA,EAAgBc,EAAA,MAAA,CAEzBA,MAAAA,cAAKD,SAAM,CAAAhB,EAAA,OAAA,CAAaG,MAAAA,CACT,SAAA+G,GAAA,CAAA,CAAEwB,EAAwB,SAAA,GAAA,CAAA,EAAEvI,IAAAA,EAAC,QAAA,CAAO,KACjDH,QACEC,IAAKiH,GAAA,CAAA,EACLyB,IAAKzB,GAAWA,GAAC,OAAA,CAAA,EACjB0B,KAAK1B,IACL2B,MAAKhB,EACL7J,KAAO6J,QACPjK,SAAK4B,GAAA,SACY,SAAAA,EAAA,OAAA,MAAA,EAAA,EACDsJ,SAAAA,gBACd,kBAAsBC,cAAAA,GAAAA,CAAAA,IAAAA,EAEtBV,IAAWW,GAEXtH,QAAcuF,IAAmB,UAAA,EAE1BvF,EAAA,MAAA,IAAA,WAAAlC,EAAA,OAAA,KAAA,CAEP,CAAA,CACF,EAAA,IAAAQ,EAAA,OAAA,CACD,MACDA,CAAa,SAAAkH,GAAAA,GAAA,OAAA,CAAA,CAAA,EAA8C,SAAA,GAAA,CAAA,EAAE/G,EAAAA,WAAC,CAG9DH,GAAAA,QAAUjC,SAAGmJ,GAAA,IAAA5G,GAAAN,EAAA,SAAA,OACVkH,CACC,CAAA,CAAQlJ,CAAOsC,CAAAA,CAAK,CACrB,CAAA,CAAC,CACO,CAAA,CAAA,CACP,CAAA,CACH,CAAA,EACH0H,GAAA/G,EAAAK,EAAA,CACG,YAEPL,KAAAA,CAAAd,kBACE,CAAA,EAAIH,EAAA,UAAA,CACJA,WAAA,KAAA,YACE,KAAA,CAAAG,YACE,MAAA,CAAAA,SACEH,EAAA,QAAA,CAAAG,IAAAA,wBACS8I,SAAI,CAAA,qBAAA,IAAAjJ,EAAAI,EAAA,cAEHC,IAAK,SAAQE,MAAI,aAAA,CAAA,CAASS,CAAM,CAAA,CAAgB,CAAA,EACjDhB,EAAA,MAAA,CAETA,SAAAiB,EAAA,SAAA,CAAAd,GAAAA,wBAEIpC,MAAG+J,EAAA,4BAAA,GAAA,SACH9J,YAAa,OAEL,MAAAA,CAAA,EAAEA,EAAAA,iBAAYkL,CACP,GAAA,CACP,MAAA9L,EAAA,GAAA,SAAA,kBAAA,CACIA,OAAAA,CACJ+L,QAAQnL,CAAA,CACGA,CACX,EACF+J,EAAC,CACQ,GAAAD,EACP,6BAAGA,CAAAA,CAAAA,EAELpG,EAAC,QAAA,IAAA,cAAA,IACKc,EACJ,6BAAGsF,CAAAA,CAAAA,CAC2B9J,MAC/B,yCACS,CACV2B,CACA/C,IACF,EAAA,SACC,CAAAoD,EAAA,SAAA,CACL,MAAA,SAAEG,SAEFH,QAAA,CAAA,EAAcA,EAAA,SAAA,CAAQG,iBACtBH,SAAA,UAAA,CAAA,EAAcA,EAAA,SAAA,CAAUG,gBACxBH,SAAA,gBAAA,CAAA,CAAQhC,CAAM,CAAA,CAAU,CAAA,CAAA,CAAuB,CAAA,CACzC,CAAA,CACJ,CAAA,EAAAiD,EACJ,IAAA,CAAC,MACH,mBAENA,SAAA,CAAAjB,EAAAI,EAAA,CAAGY,KAAM,QAAkBb,IAAAA,SACnBE,MAAK,aAAA,CAAA,EAAY,IAAAY,EAAA,QAAA,CAASD,SAAM,CAAA,6CAAA,IAAAC,EAAA,IAAA,CAAiB,KACvDA,WAAA5D,CAAA,IAAO,OAAA,SAGH2G,IAAAA,sBACAkF,SAAO,CAAA,wBAAA7L,EAAA,sBAAA,CAAA,CAAA,CACP+L,CAAI,CAAA,CAAA,CAGN,CAAA,CAAA,CAAI,CAAA,EAAApJ,EACE,KAAA,CAAA,SACN,aAAA,CACJ,EAEJA,EAAA,UAAA,CAAAG,SAAIc,EAAA,KAAA,CACJjB,SAAA,CAAAA,EAAA,KAAA,CAAAG,WACE,QAAA,CAAAA,UACEH,EAAA,QAAA,CAAAG,KACEc,WAAAd,QACEH,EAAA,SAAA,YACEC,SAAKT,GAAA,CACL6J,EAAS5I,qBAAoB6I,EAAAA,OAAAA,QAE3B/L,CAAOgK,EAAAA,IAAAA,6BAAgC8B,CAAAA,CACzC,CAAA,CAAE,EAAArJ,EACD,KAEL,CAAA,SAAOiB,EAAA,QAAA,CAETjB,SAAA,CAAAA,EAAA,QAAA,CAAAG,KACEc,WAAAd,QACEH,EAAA,SAAA,eACEC,SAAKT,GAAA,CACL6J,EAAS5I,wBAAoB8I,EAAAA,OAAAA,QAE3BhM,CAAOgK,EAAAA,IAAAA,iBAA0B/H,CAAS6J,CAC5C,CAAA,CAAE,EAAApI,EACD,KAEL,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETA,SAAA,CAAAjB,EAAA,QAAA,iBACEG,QACEH,EAAA,SAAA,mBACEC,SAAKT,GAAA,CACL6J,KAAAA,UAEE,EAAM7J,EAAA,OAAE6J,EAAAA,SAAAA,mBAAAA,EAAcH,IACtB3L,EAAOgK,SAASiC,iCAAqBH,KAEnC9L,CAAmD,CACrD,EAAA,IAAA,kBAAA,CAAA,CACF,EAAA0D,EAAA,MAAA,CAAE,MACD,eAELR,EAAA,SAAA,mBAAA,GAAA,oBAAA,GACAQ,SAAA,CAAAjB,EAAA,MAAA,UAEIiB,UAACR,CAGAN,SAEHH,CAAAA,eAAA,IAAAiB,EAAA,SAAA,CAAAd,MACEc,GAAA,YACe,GAAA,4BAEXjD,SAAyBwB,GAAA,CACzBkE,EAAAA,SAAWjD,iCAAoB+I,EAAAA,OAAAA,OAAAA,IAC/BC,EACElM,SAAOgK,CAAAA,EAASC,SAAAA,CAElB,MAAA,GAAErH,SAEFc,CAAAA,oBAAA0G,EAAA,GAAA,CAAA,CAAA,EAAQ3J,EAAM,SAAA,CAAEmC,SAAC,GAGjBH,SAAA,YAAA,CAAA,EAAgB0J,GAAA,IAAAC,GAAA3J,EAAA,SAAA,CAAAG,MAAAA,EAAC,KAChBuJ,SAAAA,EAAAA,IACC,CAAA,CAAQ1L,EAAY4L,CAAAA,CAAAA,CAAYpB,CAAI,CACpC,CAAA,EAAAxI,EACK,KAAA,CAAA,CAAA,EAAAiB,EAAA,IAAA,CAAA,MACJ,6BAEJ,CAAA,8BACLR,EAAA,SAAA,gCAAA,OAAA,GAAAQ,EAAAK,EAAA,CAAGN,SAAM,CAAA,IAAA,IAAAP,EAAA,SAAA,gCAAA,OAAA,GAAA,CAAA,CAAmBN,EAAAA,IAAAA,EAEzBM,MAAAA,CAECN,MAAAA,kBAQE,SAGJH,GAAA,IAAA2J,GAAA1I,EAAA,QAAA,CAAW,SAAA,CAAAjB,EAAA,QAAA,CACR0J,KAAAA,WACCvJ,QACEH,EAAA,SAAA,gCAAA,SAAA2J,EAAA,IAAA,EACE1J,SAAKT,GAAA,gBAKH,EAAMA,EAAA,OAAE6J,aAAcH,gCAAAA,KAAAA,EAAAA,IAAAA,EAEpB3L,EAAOgK,SAASsC,gCACdF,EAAKC,SACP,gCAAA,OAAAA,GAAAA,IAAAD,EAAA,IAAA,CAEOpC,CAGL,CACJ,EAAA,IAAAoC,EAAA,IAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAEQ,CAAA,EAAA3J,EAEb,IAAA,CAAC,MACE,gBAERA,SAAAiB,EAAA,QAAA,CAAGD,SAAM,CAAA,mEAAA,IAAAhB,EAAA,IAAA,CAAeG,KACtBc,oDAAAd,OAAO,SAIH6D,IAAK,sBACLkF,SAAO,kBAAA,CAAA,EACH,GAAA,CAAA,CAAA,CACL,CAED,EAAAlJ,EAEF,KAAA,CAAA,CAAA,EAAAiB,EAAA,MAAA,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETjB,SAAK,CAAAA,EACLiB,QAAA,CAAAd,gBACEA,QACEH,EAAA,SAAA,6BACEC,SAAK,CAAAQ,EAAA,SAAA,mBACL4I,SAAS5I,GAAAA,CACTiD,EAAAA,SAAWjD,6BAAoB+I,EAAAA,OAAAA,OAC/BC,CACElM,CAAOgK,EAAAA,IAAAA,yBAASuC,CACLT,CACb,EAAArJ,EAAA,IAAA,CAAE,MACD,gBAGLA,SAAAiB,EAAA,QAAA,CAAGD,SAAM,CAAA,wEAAAhB,EAAA,IAAA,CAAeG,SACtBc,OAAA,CAAA,EAAA,iDAEYjB,CAAA,CAAA,CAAG,CAAK,CAAA,CAEpB,CAAA,CAAA,CAAO,CAAA,CAAA,CACL,CAAA,EAAAiB,EACA,KAAA,CAAA,SACF,CAAAA,EAAA,QAAA,CAERA,SAAA,CAAAjB,EAAA,QAAA,iBACEG,QACEH,EAAA,SAAA,UACEC,SAAKT,GAAA,CACL6J,EAAS5I,mBAAoBsJ,EAAAA,OAAAA,QAEpBxC,CAAAA,EAAAA,IAAAA,aAAqB/H,IAAAA,EAAE0J,QAChC,MAAA,gBACC,SACQ,CAAA,MAAA,QACLlI,SAAM,MAAA,CAAe,EAAA,MAAChB,EACzBA,OAAA,CAAAG,SAAM,MAAU,CAAA,EAAI,GAAAH,CAAA,CAAA,CAAA,CAAM,CAAI,EAAAA,EACjC,MAAA,CAAA,MAAO,4BAETA,SAAAA,EAAA,QAAA,CAAKgB,SAAM,8EAAA,CAA2Bb,CACpC,CAAA,CAAA,CAAO,CAAA,EAGP6H,GAAOhI,EAAA,KAAA,CAAC,SACJA,EAAA,SAAA,CAEPgI,KACChI,SAAAG,MAAAA,QAEIF,QAAK,IAAA,CACC1C,EAAA,WAAA,GACN2C,EAASA,aAAM,EACb3C,EACAA,wBAAsB,CACxB,CAAA,CAAA,CAAA,CACD,CAAA,CAEO,CAAA,EAACyK,GAEZhI,EAAAgK,GAAA,CAAA,QAAArJ,CACC,CACG,EACRqH,QAA2CrH,SAAAA,OAAAA,CAAmB,EAC/DX,EAAA,UAAA,CAAAG,SAAI,CAAAc,EAAA,MAAA,CACJA,MAAA,CAAAd,eAEI8J,IAAO,EACLC,WAAS,KACTC,WAAK,SACLC,UAAY,CAAA,EACA,SACD,CAAApK,EAAA,MAAA,CACb,IAAAmE,GAAEhE,IAAAA,GAGAkK,WACA9J,OAAI,KACJ+J,MAAM,CACC,YAAA,MACA,cAAA,SACLC,WAAa,UACbC,aAAe,EAAA,CACH,CAAA,EACZC,EAAc,MAAA,CAChB,SAAA,CAAAzK,EAAA,IAAA,CAEFiB,SAAA,QAAA,OAAAd,EACEH,IAAA,CAAAG,KAAAA,+BAAY,IACZH,sBACEgE,QAAKxE,GAAA,GAED,eAAA,EACJU,EAAUV,YAAM,qBACdA,EACAjC,SAAOmN,SAAc,CACvB,EAAA1K,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,IAAA,CAAEG,KACH,2CAGI,SAEH6D,IAAK,sBACLkF,SAAO,OAAA,CAAA,MACH,KAAA,IAAAlJ,EAAA,IAAA,CAAqBG,KAAAA,mCAGtB,IAAA,sBAGH6D,QAAKxE,GAAA,GAED,eAAA,EACJU,EAAUV,YAAM,yBACdA,EACAjC,SAAOmN,UAAc,CACvB,CAAA,CAAA,CAAA,CAAA,CACD,CAAA,EAEDzJ,EAAI,IAAA,CAAA,SACA,CAAAjB,EAAA,IAAA,CAERiB,KAAA,sCAAAd,gBAEI6D,IAAK,sBACLkF,SAAO,SAAA,CAAA,EACPE,YAAIpJ,EAAA,IAAA,CAAqBG,KAC1B,uCAEI,OACI,SAEP6D,IAAK,sBACLkF,SAAO,QAAA,CAAA,EACPE,YAAIpJ,EAAA,IAAA,CAAqBG,KAC1B,yDAEI,OACI,SAEP6D,IAAK,sBACLkF,SAAO,gBAAA,CAAA,CACPE,CAAI,CAAA,EACLnI,EAAA,IAAA,CAED,SAAI,CAAAjB,EAAA,OAAA,CAEL2K,sBACCxK,sBACE,CAAA,EAAY,IAAAH,EAAA4K,GAAA,CAAezK,SAAC,SAAA,0BAAA,CAAiB,CAAA,EAAE,IAC9CyK,EAAYtJ,EAAA,CAACuJ,SAAU,CAAA,IAAIC,OAAyB,KACpDC,mDACC,OAAA,SAGI/G,IAAAA,sBACAkF,SAAOlJ,EAAA,OAAA,UACH,SAAA,CAAqBG,CAEzB,CAAA,EAAAA,GAAO4K,CAAAA,CAAAA,CAAAA,CAAsB,CAAC,CAAA,CAGlC,CAAA,CAAA,CACD,CAAA,CAAA,CAEJ,CAAA,CACO,CACL,SACJf,GAAA,CAET,QAAArJ,CAEA,EAAA,CAAoCA,GAAAA,CAAAA,GAAAA,EAAW,OAAA,KAC7C,KAAqB,CAAU,SAAAtD,CAEzB,EAAAC,EAAA,EAAED,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAiB2N,EAAA3O,IACnB,CAAC4O,EAAmBC,CAAsB,EAAAhO,EAAA,EAAA,EAC1C8N,GAAc3O,CAAO,EAAAa,EAAA,EAAA,EACrBiO,EAACC,IACP9O,EAAO+O,IAAAA,EACP,YACgB,SAAA,EACD,GAAA,CACXC,KAAAA,CACI,aAAAjH,EACI,oBAAA6B,CAAA,EAAE7B,MAAAA,GAAAA,EAAc6B,GAAAA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,OAAAA,CAAoBgF,EAA2B,EAAA,EACrE,KACuBpE,CAGrBoE,OAAAA,EACM,OAAApE,CAAEyE,EAAAA,EAAQzE,EAAAA,QAAAA,EAAO,MACvBqE,SAAAA,CACA,EAAMH,EAAA,QAAEQ,EAAAA,EAAAA,UAAAA,CAAAA,EAAaR,IACfS,EAAAA,MAAWD,GACbC,YAAAA,CAAAA,EAAAA,QAAAA,GAAAA,CAAUA,QAASzN,YAAQ8I,CAAAA,GAE/B4E,GAAAA,YAAAA,EAAOrK,QAAasK,eACZC,QAAKJ,GAETI,CAAAA,CACF,CAAAN,EACD,SAAA,CACH,OAAAnF,EAAA,CACAmF,uBAAoB,KAAAnF,EAAA,OAAA,IACR,EAAA,EAEZ,OAA2BlD,GAAAA,YAAAA,EAAAA,UAAAA,CAAAA,EAE3BqI,EAAO,OAAA,CACCnF,CAAmB,IAE3BmF,EAAAA,CAAAA,CAAAA,EACF,MAAAO,EAAAZ,IAAA,UAAA,OACChK,EAAA,OAAA,CACL,IAAK+J,EAEL,aAAkBC,CAElB,QACE,OAAA,YAAA,IAAA,SAAAD,EAAA,OAAA,CAAA,IACOA,CAAAA,CAAAA,EAAAA,cAAAA,IACW,QACRc,EAASJ,OACf,MACA,OAAe,CACb5E,QAAeA,CAAAA,CAAAA,EAAAA,QACT,UAAA,CAAA,CAAAgF,EAAA,UACJP,OAAQ,CAAA,CAAAO,EAAA,OACNC,OAAAA,CAAS,CAACD,EAAQC,OAClBC,eAAoBA,CAAAA,CAAAA,gBACpBC,KAAAA,CAAAA,CAAQH,EAASG,KACjBC,OAAQ,CAAC,CAACJ,EAAOI,OACjBC,OAAAA,CAAAA,CAAAA,EAAiB,MACjBC,CACA1H,CAAiBA,EAEnB,IAAA2H,EAAA,EACF,OAAA,KAAAC,EAAA,KAAA,MAAA,EAAA,QAAAC,GAAA,CACFD,EAAA,KAAA,OAAAC,CAAA,EAMEF,IAJEA,OAAAA,EAAc,KAAA,OAAAE,CAAA,CAKe,CAAA,EAE7BF,MAAAA,EAAAA,EAAAA,UAAAA,EAAAA,OACFG,GAAAH,EAAA,EACDI,EACKA,GAAgBtB,eAECmB,CAAA,CAAA,SAAER,GAAAA,CAAQV,MAAAA,kDAAAA,CAAAA,CAAoBkB,EAEjDlB,GAAAA,YAAuC,CACrCqB,MAAe,kDAAA,CACjB7P,CAAAA,EAIEmK,GACgB,EAAA,MAAAZ,GAAA,CACdvJ,MAAAA,kDAAgB,CAChB+C,CAAAA,CACD,EAEgB2M,SAAAA,CAAAA,EAAAA,KAAAA,CACjB1P,SAAAA,2BACA+C,CAAAA,EAAAA,EAAAA,UAAwD,CAAA,SACzDK,EAAA,KAAA,CACH,SAAAiB,EAAA,KAAA,CACK,SAAA,CAAAA,EAAA,QAAA,aACc,QAAiB,MAC1ByL,WACR/M,SAAwDkM,GAAAR,EACzD,KAAA,eACH,QAAAD,EACF,SAAA,MAAA5L,GAAA,CAEAQ,KAAA,CAAI,QAAAqJ,CAAA,EACJ7J,EAAA,OACEQ,KAAA,CACEiB,MAAA0L,EAAA,MAAA,aAAA,wBACE,UAAAxM,EACE,EAAA,GAEEuD,EAAuB2H,EAAAA,EAClBsB,IAAA,UACIvB,oFAAAA,EAED,QAAgBlC,EAAAA,CAGdyD,CACN,CAAA,EAAA,IAAA,iBAA8B3M,EAAA,SAAA,CAC5BkL,KAAAA,SAA0B,SACrBW,GAAAR,GAAA,CAAAD,EACLF,SAAAA,CAAAA,CACA,MAAA,MACEvL,MAAAA,QAEA,EACF,CACF,MAAA,WACF,MAAO,iBACLuL,EAAAA,CACF,MAAA,WACF,MAAA,WACC,CAAA,EAAA,IACQjL,GAAAD,EAAA,SACX,CACO,MAAAC,EAAA,MACLyD,SAAuB2H,EAAAA,KAAgBD,GAGrC,CAAA,CAAA,CACS,CAAA,EAAApL,EACP4M,OAAO,MAET,gCAAA,MACE5O,CAAO,MACA,MAAA,EAET,OACEA,CAAOoN,EAAA,SACApL,QAAA,CACT,MACKC,yBACL,SAAeA,EAAKjC,MAAAA,CAAMmC,MAAAA,cAC3B,SAAAH,EAAA,KAAA,CACM,SAAA,CAAA,CAEX,MAAA,UACQ,MAAA,UAAA,EACC,CACE,MAAA,YACT,MAAA,YAAA,EACSoL,CAAmBjL,MAE5B,SAAW,MAAA,QAAA,EAAwBA,CAC5Ba,MAAM,SAAab,MACtBH,SAAA,GAGMhC,MAAO,gBACP4O,MAAO,iBAAA,EAET,CACE5O,MAAO,OACP4O,MAAO,OAAA,EAET,CACE5O,MAAO,SACP4O,MAAO,YAAA,EAET,CACE5O,MAAO,SACP4O,MAAO,WAET,CAAA,EAAA,IAAAC,GAAA7M,EAAA,KAAA,CACEhC,SAAOiD,EAAA,QAAA,CACP2L,SAAO,CAAA5M,EAAA,QAAA,CAET,KAAA,WACS,KAAA6M,EAAA,KAAA,GACA,IAAAA,EAAA,KAAA,CAAA,CAET,CAAA,CAAA,CACE7O,CAAO,CAAA,CACA,CAAA,CAET,CAAA,CACS,CAAA,EAAAqN,GACArL,EAAA,MAAA,CAAA,MACR,cAEDG,SAAAA,EAAAA,KACEA,SAAAA,CAAAA,wEACE,IAAAc,EAAAgD,EAAA,CAAA,GAAA,mBAAY5G,CAAA,GAAA,QAAWmL,EAAYxK,SAAU,CAC5C2B,EAAAA,IAAAA,CAAW,SACP,QAAA,CAAA,EAEV,iCAAA,CAAA,CAAA,EACC,GAAA,CAAA,CAAA,CACD,CAAA,CAAC,CACH,CAAA,CAGL,CAAA,CAAW,CAAaQ,EAAAA,EAAAA,IAAAA,CACtB,MAAA,mBAGQ+D,SAAAA,WAAgC,oDAAYvD,EAAAA,IAAAA,CAAQR,SAAAA,aACxD,CAAA,EAAA,GAAA,CAAG,CAAM,CACX,CAAA,CAAA,CAEF,CAAA,CAAG,CCtvBnB,MAAM2M,GAAYA,IAAM,CAClBC,IAAAA,EAAQC,WAAW,IAAM,CAE3B,GAAIC,CADYvQ,SAASwQ,eAAe,SAAS,EAI1C,CACCC,MAAAA,EAASzQ,SAAS0Q,iBAAiB,sBAAsB,EAC/D,GAAID,GAAAA,MAAAA,EAAQjP,OAAQ,CAElB,MAAMmP,EAAQF,EAAOA,EAAOjP,OAAS,CAAC,EAChCoP,EACJD,EAAMtN,cAAc,iBAAiB,GAAKsN,EAC5C,GAAIC,EAAmB,CACrBA,EAAkBC,MAAM,EACxB,MACF,CACF,CAEIC,GADa9Q,SAASqD,cAAc,gBAAgB,EAC1C,OAER0N,MAAAA,EAAQ/Q,SAAS0Q,iBAAiB,iBAAiB,EACnDM,EAAOD,EAAMA,EAAMvP,OAAS,CAAC,EAC/BwP,GAAQA,EAAKnL,WAAa,IACpB7D,EAAAA,MAAAA,CAEV,CACF,EAAA,GAAA,EACF,MAAM,IAAA,aAAAqO,CAAA,CACN,ECrBF,SAASY,GAAY,CAAE/P,KAAAA,EAAM+C,QAAAA,CAAQ,EAAG,CAChC,KAAA,CAAEvD,MAAAA,GAAUE,EAAI,EAChB,CAAC2N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C0Q,EAAW,CAAC,CAAChQ,EACbiQ,EAAexR,IACfyR,EAAwBzR,IACxB0R,EAAoB1R,IAC1BC,EAAU,IAAM,CACVsR,IACWrR,EAAAA,QAAQyB,MAAQJ,EAAK2F,MACZhH,EAAAA,QAAQyB,MAAQJ,EAAKoQ,cACvCD,EAAkBxR,UACFA,EAAAA,QAAQ8M,QAAUzL,EAAKqQ,WAE7C,EACC,CAACL,CAAQ,CAAC,EACPM,MAAAA,EAAoBC,GAAS,0BAA0B,EAE7D,OACElN,EAAA,MAAA,CAAKD,MAAM,QAAOb,SACf,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,cAAcd,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EACP,IACHL,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAKyN,EAAW,YAAc,UAAA,CAAe,CAAA,CACvC,EACR5N,EAAA,OAAA,CAAAG,SACEc,EAAA,OAAA,CACED,MAAM,YACNoN,SAAiB5O,GAAA,CACfA,EAAE6O,eAAe,EAEjB,MAAMnG,EAAW,IAAIC,SAAS3I,EAAE0J,MAAM,EAChC3F,EAAQ2E,EAASnG,IAAI,OAAO,EAC5BiM,EAAgB9F,EAASnG,IAAI,gBAAgB,EAC7CkM,EAAY/F,EAASnG,IAAI,WAAW,IAAM,KAChDnF,EAAY,SAAA,GACV2G,SAAAA,CACAyK,GAAAA,CACAC,IAAAA,EACDL,EACDtC,EAAoB,MAAAlO,EAAA,GAAA,MAAA,OAAAQ,EAAA,GAAA,CAEP,MAAA2F,EACP,eAAAyK,EACEM,UAAAA,CAEJ,CAAA,EAEI/K,EAAAA,MAAAA,EAAAA,GAAAA,MAAAA,OAAAA,CACAgL,MAAAA,EACAN,eAAAA,EACD,UAAAA,CAAA,CACI,EAEH1K,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EACgByK,CAChBC,MAAAA,UACF,KAACK,CAAA,EAGH1R,OACA0O,EAAW,OAAS,EACV,MAAAsC,EAAA,uBAAA,wBAAA,CAAA,CACD,IACDU,EACP,YACS,MAAA,CACV1R,MAAAA,gBACA0O,SAAAA,EAAkB,QAAA,CAEhBsC,IAAAA,aAEJ,SAAA,CAAA,OAAA,IAAA5N,EAAA,QAAA,CACC,IAAA6N,EACL,KAAA,OAAE1N,gBAES,KAAA,QAAeA,YACb,SAAA8K,IAAA,UAAa,IAAA,MAEtB,CAAA,CACE9J,CAAK0M,CAAAA,CACA,CAAA,EAAA7N,EACF,MAAA,CAAA,MACE,gBAAA,SACGiB,EAAA,SAAA,CAAA,MACc,KAClB,iBAAM,SACV,GACG,SAAAgK,IAAA,UAETjL,SAAA,CAAAA,EAAA,SAAA,CAAW,MAAA,OAAeG,uCACxB,CACO2N,EAAAA,EAAAA,SAAAA,CACA,MAAA,WACG,SAAA,iCAAA,cACc,CAAU3N,MAAAA,OAExBnC,SAAM,oBAAA,CAAA,CAAMmC,CAAC,CAA4B,CACjD,CAAA,EAAA+N,GAAclO,EAAA,MAAA,CAAA,MAAW,gBAA+B,SACxDA,EAAA,QAAA,CAAA,MAAc,cAAA,SAAO,CAAAA,EAAA,QAAA,CAA2B,IAAA+N,EAC1C,KAAA,WAGR/N,KAAAA,YAAW,SAAAiL,IAAA,SAAA,CAAe9K,EAAAA,iDACxB,CAAA,CAAA,CAAa,CAAaA,EAAAA,EAAAA,MACxBH,CAAA,MACO+N,mBAAAA,SACA,CAAA/N,EAAA,SAAA,CAAA,KACA,SAAA,aACiB,UAAU,SAGpC4N,EAAA,OAAA,QAAA,CAAO,EAAAA,GAAA5N,EAAA4D,GAAA,CAGX3C,SAAAgK,IAAA,UAAW,MAAA,MAAkB9K,kBAC3B,SAAQF,aAAK,oBAASyD,YAAsB,CAAUvD,WAC/B,GAGrBH,SAAAA,KAEQ,MAAA5C,EAAA,GAAA,MAAA,OAAAQ,EAAA,EAAA,EACY0N,EAAA,SAAA,EACL3K,GAAA,MAAAA,EAAA,OACE,SAGb2K,EAEa,MAAA,CACPA,EAAA,OAAA,EACF,MAAMlO,yBACNkO,CACA3K,IAAU,EACD,SACRX,EAAA,SAAA,CAAA,cAEDpD,MAAAA,eACA0O,SAAAA,IAAkB,UAClB3L,SAAM,SAAwB,CAChC,CAAA,CAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAEQ,CAEF,CAAA,CAAA,CACO,CAAA,CACC,CClIxB,MAAMqO,GAAiB,CACrB,IAAO,GAAK,EACZ,IAAO,GAAK,GACZ,IAAO,GAAK,GACZ,IAAO,GAAK,GAAK,EACjB,IAAO,GAAK,GAAK,GACjB,IAAO,GAAK,GAAK,GAAK,EACtB,IAAO,GAAK,GAAK,GAAK,EACtB,CAAG,EAECC,GAAwB,CAC5B,EAAG,UACH,IAAS,YACT,KAAW,aACX,KAAW,SACX,MAAY,UACZ,MAAY,QACZ,OAAa,SACb,OAAa,QACf,EAEMC,GAAQ,GAERC,GAAoBC,GAAM,CAC9BC,kBAAmB,CAAA,CACrB,CAAC,EAED,SAASC,GAAY,CACnBtM,QAAAA,EACAuM,aAAAA,EAAeA,IAAM,CAAC,EACtBC,WAAAA,EACA3R,SAAAA,EACA2K,cAAAA,CACF,EAAG,CACK,KAAA,CAAE5K,MAAAA,GAAUE,EAAI,CACpBD,SAAAA,CAAAA,CACD,EACK,CAAC4N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C+R,EAAW,OAAOzM,GAAY,SAC9B,CAACxD,EAAMkQ,CAAO,EAAIhS,EAAS+R,EAAW,KAAOzM,CAAO,EACpD2M,EAAwBzO,GAAYiO,EAAiB,EAErDS,EAASC,GACb,IAAM7M,EAAQzE,KAAO2D,EAAMI,QAAQC,IAAI,gBAAgB,EACvD,CAACS,GAAAA,YAAAA,EAASzE,EAAE,CACd,EAEMuR,EAAsBD,GAC1B,IAAMhS,IAAaC,IAAMD,SACzB,CAACA,CAAQ,CACX,EAEAf,EAAU,IAAM,CACd,GAAI,CAAC2S,EAAU,CACbC,EAAQ1M,CAAO,EACf,MACF,CACA8I,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACItM,MAAAA,EAAO,MAAM+P,IACnBxR,EAAOkE,SAAU,GAAEzC,EAAKjB,EAAG,IAAGV,CAAS,EAAC,EAAI2B,EAC5CkQ,EAAQlQ,CAAI,EACZsM,EAAW,SAAS,OACV,CACV1O,EAAQ2S,MACRL,EAAY,OAAA,CACZ5D,CAAkB,IACpB,EACC,CAAA2D,EAAAzM,EAAAuM,CAAA,CAAA,EACL,KAAcvM,CAER,KAAAgN,EACJA,OAAAA,EACAC,aAAAA,EACA3M,IAAAA,EACA4M,UAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,MAAAA,EACAC,GAAAA,EAGAlS,aAAAA,EACAmS,OAAAA,EACAC,KAAAA,EACAC,cAAAA,GACAC,IAAAA,EACAxN,SAAAA,GACAyN,SAAAA,GACAC,MAAAA,GACAC,MAAAA,EAAAA,EACAC,GAAAA,CAAAA,EACF,IAAIzR,GAAS,GACT0R,CACA,OAAAC,EAAEA,aAAAA,CAAAA,EAAQC,GAAAA,CAAAA,GAAiB5R,IAAS,gBAAA,KAAA2R,CAAA,IACnCA,GAA0B1N,CAAAA,gBAAAA,MAAc,IAC3C0N,EAAclB,EACHA,GAAAA,GACQ3M,GAAA,CAAA,gBAAA,KAAAA,CAAA,IACjB8N,EAAoB9N,IAIxB,MAAA+N,GAAAxB,GAAA,IAEMwB,EACa,IAAA,IAAAhO,CAAA,EAAA,SAAZA,KAEEiO,CAAAA,CAAAA,CAAAA,EACLjO,CAAGkO,GAACC,EAAA,EAAA9T,EAAA,CAAA,CAAA,EAEF+T,GAAqBD,IAErBC,EAA2B5U,EAAA,CAAA,CAAA,EAC3B6U,eAAAA,GAAAA,EAAkC,EACxCC,OAAyC,WACnCA,GAAcF,QAAAA,EAAkB1U,GAAS,SAAA,cAAAwB,EAAA,CAC3CkT,MAAAA,EAAgE,CAAA,GAGlE,MAAAG,EAAA,MAAAH,GAAA,QAAA,KAAA,EAEmBG,GADnBhC,GACmBgC,CAAAA,EACnB,OAAK9B,EAA4B8B,KAAAA,CAE3B,MAAApT,CAAEA,EAAAA,EAAM,IAAIoT,EAAAA,CAAAA,EAClB,GAAIC,EAAW,CAGf,MAAexC,EAAA,MAAAzR,EAAA,GAAA,SAAA,uBAAAW,CAAA,EACbmT,UAAgC9T,cAGTb,EAAAA,CAAAA,GAAAA,EAA4B,QAAA,GAAAyB,EAAGyD,OAAAA,IAAAA,CAAAA,EAAAA,QAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CACtD4P,MAAAA,GAAAA,MAAAA,EACKH,SAQPG,IAA0B,OAAAC,GAAA,CAAAJ,EAAA,QAAA,KAAAK,IAAAA,GAAA,KAAAD,EAAA,EAAA,CAAA,GAO1B,MAAA,CAEO,GAAAF,EACL,MAAGA,CAAAA,CAEL,CACF,MAAAI,EAAAnV,IAEA,kBAAiC8U,EAAA,CACjC,OAAAA,MAAyC,WACnCA,EAAcK,QAAAA,EAAkBjV,GAAS,SAAA,cAAAwB,EAAA,CAC3CyT,MAAAA,EAAgE,CAAA,GAGlE,MAAAA,EAAA,QAAA,KAAA,CAEOJ,CACT,MAAAK,EAAAzC,EAAA,MAAA/K,EAEMwN,IAAyB,IAAQxN,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA,GACjCyN,OAAAA,EAAAA,MAAcrU,CAEpB,4BACE4N,IAAA,UAAA,WAAA,EAAA,GACEjK,MAAQ,CACD,mBAAA+P,GAAA,CAAA,EACL,mBAAoBA,GAAmB,CAAC,EACxC,mBAAoBA,GAAmB,CAAC,EACxC,mBAAoBA,GAAmB,CAAC,CACxC,EACF,SAAA,CAAA9F,IAAA,SAAAhK,EAAA,MAAA,CAECgK,MAAAA,WACMjK,SAAM,CAAAhB,EAAA,IAAA,CAAUG,SACnBH,yBAAA,CAAA,EAAGA,EAAA,IAAA,CACHA,SAAAiB,EAAA,IAAA,CAAAd,KAAAA,EACEqC,EAAAK,EACEmB,gBACAkF,IAAO,sBACPE,SAAI,CAAA,sBAAApJ,EAAAI,EAAA,CACL,KAAA,UACyB,CAAA,CAACC,CAAK,CAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EACD4K,IAAA,UAAAhK,EAAAK,EAAA,CACD,SAEM,CAAAtB,EAAA,SACXiB,CAAAd,SACEH,EAAA2R,GAAA,CAAAxR,kBACgByR,SAAW,EAAA,CAAA,CAAe,CAAA,EAAE3Q,EAAA,OAAA,CAE5CA,SAAA,CAAAA,EAAA,MAAA,CAAAd,MAAAA,OACOa,SAAM,CAAAhB,EAAA,IAAA,CAAMG,SACfH,kBAAA,CAAA,EAAGA,EAAA,IAAA,CACHA,SAAA,iCAAA,CAAA,CAAAG,CAAG,CAAA,EAAmCc,EAAA,IAAA,CAExCA,MAAAA,QAAGD,SAAM,CAAAC,EAAA,MAAA,CAAOd,SACdc,CAAAA,EAAA,OAAA,CAAAd,SACEH,IAAA,CAAA,EAAM,YAAA,CAAA,CAAE,IACV,MAAA,CACAiB,SAAA,CAAAjB,EAAA,OAAA,CAAAG,SACEH,IAAA,CAAA,EAAM,YAAA,CAAA,CAAE,IACV,MAAA,CACAiB,SAAA,CAAAjB,EAAA,OAAA,CAAAG,SACEH,IAAA,CAAA,EAAM,QAAA,CAAA,CAAE,IACV,MAAA,CACAA,SAAA,WAAA,CAAA,CAAAG,CAAK,CAAA,CAAS,CAAM,CAAA,CAAA,CAClB,CAAA,EACCnB,GAAAiC,EAAAK,EAAA,CACP,SAGAL,CAAAA,CAAAA,CAAAA,IAAAA,EAAA,MAAA,uBAESD,SAAM,CAAAC,EAAA,IAAA,CAAed,SACxBc,CAAAA,EAAA,IAAA,CAAAd,SACEH,CAAA,CAAA,EAAI4P,+CAAAA,CAAAA,CAAW,IAEjB+B,GAAA,CACA3R,QAAawQ,GACXhO,SAAAA,EACAnF,QAAAA,GAAAA,mBACgB,EACdmC,EAAkB,YAAAgR,EAClBjT,CAAqBiT,CACvB,CAAA,CAAA,CAAA,EACAG,GAAA,CAAA,gBAAA,KAAAA,CAAA,GAAA3Q,EAAA,MAAA,KAGK2Q,EAEPtG,IAAKsG,GACLpQ,MAAI,iBAAAmQ,GAAA,mBAAA,EAAA,GACJ1P,QAAQxB,GAAA,UAGQ,YACR0J,SAAoB,MAAA0H,EACpBpR,EAAAA,OAAS6K,IAAAA,GAEN7K,EAAA,OAAA,gBAAA,aAAA,EACH0J,EAAAA,OAAO2I,OAEXrS,EAAA,OAAA,MAAAoR,EACSpR,EAAAA,OAAAA,IAAS6K,EAEb7K,EAAA,OAAA,QAEP,EACF,YAAA,YACAsS,OAAYtS,GAAA,UACG,UAAA,IAAA,QAAA,EACX0J,GAAAA,CACE,MAAA6I,EAAA,SAAA,cAAA,QAAA,EAEIA,EAAAA,EAAkBC,WAAAA,KAAAA,CAClBC,mBAAaC,EAAiB,CAAA,EAEpCH,EAAC,MAAAvS,EAAA,OAAA,MACM8K,EAAAA,SAAiBA,OAAAA,OACjB6H,EAAAA,UAAAA,EAAS3S,OAAS2S,EAAAA,CAAAA,EACzBF,MAAczS,EAAU,GAqDvB4S,GAxCsB,CAAAH,EAAA,aAAA,EAAA,EAAAI,EAAAA,CAAA,EAAA,KAAAJ,EAAA,aAAAzS,EAAA,OAAA,MAAA6S,EAAA,EAAAA,EAAAA,CAAA,EAAA,KAAAJ,EAAA,aAAA,EAAAzS,EAAA,OAAA,OAAA6S,EAAAA,EAAAA,CAAA,EAAA,KAAAJ,EAAA,aAAAzS,EAAA,OAAA,MAAA6S,EAAA7S,EAAA,OAAA,OAAA6S,EAAAA,EAAAA,CAAA,EAAA,IAAA,EAAA,IAAAxL,GAAA,CACjByL,IAAAA,GAAAA,EAsBAvT,GAAI,EACJwT,GAAI,EACJC,GAAI,EACR,QAAQ/P,GAAA,EAAAA,GAAAoE,EAAA,OAAApE,IAAA,EACR1D,IAAA8H,IAAa,EACX9H,IAAK8H,EAAKpE,GAAC,CAAA,EACNoE,IAAAA,EAAKpE,GAAI,CAAC,EACVoE,IAAAA,EAAKpE,GAAI,CAAC,EAEjB,MAAAgQ,GAAA5L,EAAA,OAAA,EACM4L,MAAAA,CAAAA,GAAAA,GAAkBvU,GAASuU,GAAAD,GAAAC,GAAAC,GAAAD,EAAA,CACjC,CAAO,EAMR,IAAAE,GAAA,CACKP,KAAAA,CAAAA,GAAAA,GAAAA,GAAYE,EAAO/Q,EAAAA,GAAeoR,CAAA,EACtC,MAAO5T,UAAS2T,KAAKE,cAAgBF,EAAA,GACrC,CAAA,EACF1B,GAACoB,EAAA,CACDpB,MAAAA,CACApU,CAAc0V,CAAAA,CAAQF,EAAAA,EAAAA,SAAAA,CAAAA,SAAWpS,EAAA2R,GAAA,CACnC,QAASnS,EACP,SAAAnC,EAEJ,WAAA,OAGJ2C,SAAAgP,EAAA7O,WACe,CAAA,CACFnB,CACT3B,EAAAA,EAAAA,OAAAA,CAAAA,SACW,KAAA,SACD2R,CAAAA,CAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CACV6D,YACD,SAAA,aAEH5R,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAA,OAAA,CAAe,MAAA,eACX,CAACsP,EAAAA,EAAAA,CAAwB,KAAA,KAAM,CAAA,EAAA,YAAA,CAAiB,CAAA,EACjD,CAAC,CAACb,KACD,OAAA,CAAM1O,MAAM,MAAKb,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,OAAO,CAAA,EACpB,QAAA,CAAA,CAAM,EAEPoQ,IAAA,YAAAA,GAAER,OACDhP,EAAA,OAAA,CAAMD,MAAM,MAAKb,SAAA,CACfH,EAACI,KAAI,CAAA,CAAAyQ,IAAA5P,EAAAK,EAAA,CAACjB,SAAK,CAAA,IAAAL,EAAA,OAAA,CACb,MAAA,qBAEDyQ,SAAYqC,EACX,CAAY,CAAA,CAAA,CAAK3S,CAAAA,CAGb,CAAA,GAAAH,EAAA,MAEEA,CAAA,MAAY,OAAA,IAAsB6Q,OAAAA,QAAuBkC,GAAA,CAE5D,SAAA1V,CAAA,CAGL2C,EACEgB,wBAAM,CACF,OAAAgS,GAAA5C,EAAA,SACwB,CAC1B/S,CACD,CAAA,CAAA,EACwB4D,EAAA,MAAA,CACvBgS,MAAAA,uBAA+BpD,SAAAA,EAAAA,GAAAA,YAAAA,EAAAA,QAAAA,GAAAA,EAAAA,MAAAA,CAAO,MAAC,mBACzC,SAAAC,EAAA,IAAA,CAAA,CAEF7O,KAAAA,EAAW,MAAAjD,cAEP,EAAWyE,IAAAxB,EAAA,MAAA,CAAkBd,MAAAA,iBACd+S,EAAA,mBAAA,EAAA,GAAE1K,IAAAA,OAAMxK,SAAAA,CAAAA,EAAAA,IAAAA,CAAOkV,SAAAA,CAAAA,EAAAA,GAAAA,CAC1BjS,KAAAA,EACU,OAAA4O,CAIJ,CAAA,EAAA,IAAA,CAAA,CAAAqD,GAAAlT,EAAAI,EAAA,CAAMD,oBAEVA,KAAAA,GACY,CAAA,CAACgT,CAAM3K,CAAMqH,EAAAA,EAAAA,IAAAA,CAAe,wBAEpC7P,CAAMK,OAAK2S,GAAAhV,EAAA,CAAoB,OAAA6R,CAAA,CAChC,CAEH7P,CAAA,CAAA,CACEoT,CAAyB,EACvBH,EAAAA,CAAAA,CAAAA,CAA8B,CAAEpD,EAAAA,EAAAA,MAAAA,CAAAA,MAAQ,QAC1C,SAAA,CAAA5O,EAAAwQ,EAAA,CAAE,SACF,EAAA,GAbUhP,EAkBpBxB,QAAA,IAAA,CAAW1D,EAAA,YAAA,GAAO4C,EAChBc,oBAAU,CACE,QAAA,YACNyQ,cAAAA,EAAAA,CAEFnU,EACAA,SAA6B,CAAA,CAAA,CAAA4R,EAAA,kBAAA,QAAAnP,EAAA,OAAA,CAAA,MAClB,8BAAA,SACMqT,EAAAA,OAAAA,CACjB,MAAA,6CACF,UAAAlE,EAAA,mBAAA,CAAA,GAAA,IAAAmE,GAAAtT,EAAA4C,GAAA,CAAEzC,IAEDmT,eACa,KAAA,IAA6BnT,IAAAA,KACvC,WAAA,KAAAmT,EAAA,IAAA,GAAY,SAAAA,GAAA,YAAAA,EAAA,GAAA,CAA4CnT,CAAAA,CAG3C,CAAA,CACS2C,CAAAA,EAAAA,EACT,OAAA,CAAA,QAC0C,YAC3B4M,CAAAA,CAAAA,CAAAA,EAAI,IAG9B,WAAA,CAAA,CAAA,EAACzO,EACGwQ,EAAA,CAAC,MAGXzR,gBAAA,SAAa+P,EAAe5P,GAAAA,EACI,QACpB,IAEd,CACAc,EAAU,YAAA,GACF1D,EAAA,oBAAA,CACI,QAAA,YACNmU,cAAAA,EAAAA,CAEFnU,EACAA,SAA6B,CAAAyC,EAAA,OAAA,CAAA,MAClBgQ,EAAA,SACMuD,GAAAA,CAAAA,CAAAA,CACjB,EAAA,IAAA,YAAAvT,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CACF,EAAAiB,EAAAwQ,EAAA,CAAEtR,MAAAA,gBAEF,GAAa6P,EAAe7P,QAAAA,SACG,IAAA,KAKjCc,EACED,SAAM,CAAAhB,EAAA,OAAA,CACF0R,MAAAA,GACJxR,SAEMmF,GAAAA,EACM,CACJmO,CAAc,EAAA,IAAA,OAAA,CAChB,CAAA,EAAA,CAAA,CAAA7D,GAAA1O,EAAA,MAAA,CACLd,MAAAA,gBAED,SAAakQ,CAAAA,SAAAA,IAAAA,EAAAA,OAAAA,CAAclQ,SACxBsT,EACK,SAEVC,GAAA/D,EAAA,CACGA,SAAAA,EACD,CAAW,CAAA,CAAgB,CAAA,CAEzB,CAAA,CAAA,CAAgBA,CAAUxP,CAAAA,CACC,CAAA,EAAAH,EAAA2T,GACb,CAAA,KAAA3U,EACX,SAAA3B,EACI,cAAA2K,EAEV,WAAAgH,CACG,CACH,CACLhP,CAAe,CACbhB,CAAAA,CAAAA,CACA3B,CAAAA,CAAAA,CACA2K,CAAAA,CACAgH,MAAAA,GACA,EAAA,SACG2E,GAAA,CAAA,KAAA3U,EAGZ,SAAA3B,EAGP,cAAA2K,EAEA,WAAAgH,CAEA,EAAA,OAA0BhQ,GAAAA,CAAAA,EAAM3B,OAAAA,KAAU2K,KAAAA,CAAegH,MAAAA,EAAc,SAAA4E,EACrE,cAAK5U,CAAa,EAAA1B,EAAA,EACZuW,EAAAxW,IAAAuW,EACGE,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EACGF,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EACKG,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EACT,CACR,GAAAhW,EAEA,KAAAyR,EACA,IAAA3M,EACA,SAAAyN,EAEM,OAAAH,EAAEpS,aAAAA,EAAIyR,KAAAA,EAAM3M,OAAAA,EAAKyN,MAAAA,CAAUH,EAAAA,EAAQD,EAAAA,EAAAA,CAAAA,EAAcE,CAAMN,UAAAA,EAAQU,eAAAA,EACnExR,UAAAA,EACIgV,WAAAA,EAEA,SAAAC,EACJC,UAAAA,GACAC,OAAAA,EACAC,oBAAAA,GACAC,UAAAA,GACAJ,eAAAA,GACAK,SAAAA,EAAAA,EACAC,GAAAA,CAAAA,EACAC,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EACAC,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,IAAAA,CACAC,GAAAA,EAAAA,CACEC,QAAiBlT,EAAA,QAAA,IAAA,gBAAA,EAErB,IAAOmT,GACP,SAAwB,CAExBvY,GAAUuX,GAAM7L,EACJ8M,EAAA/W,UACe2D,CAAAA,GAAcK,EAAoB,CACrD+S,MAAAA,EAAAA,EAAAA,KAAAA,SAAAA,GAAAA,EACS,GAAA,CACPjB,QAAgB7L,MAAe8L,EAAA,GAAA,OAAA,CACrB/V,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,QAAAA,IAAAA,CAAAA,GACd,KAAY8V,WAEV,MAAwB7U,EACpB,QAAA,EACF,CAAA,EACE+V,oBACA9U,EAAMmR,EAAA,SAAA,CAAA,EAAA,GACNvT,EAAOuT,EAAA,SAAA,CAAA,CAAA,EACE,MACV,CAAA,CACO1S,CACJ0S,GAAAA,CAAAA,EACUA,OACGA,GAAAA,IAAAA,EAAiB,CAClC4D,GAAA,EAAA,EACF,MACEpY,CAEJ,GADEoX,EAAA,QAAAc,EACFtE,EAEA,OAAgByE,EAAA,SAAA,EAEhBtG,qBAAkC,GAEhCqG,EAAc,IAAA,EACd,MAAAE,EAAApB,EAAA,GAAA,SAAA,mBAAA,CAAAgB,CAAA,CAAA,EACF,GAAA,CAEAd,MAAAA,EAAoBc,MAAAA,EAET,GAAPtE,EAAAA,SAAAA,EAAO2E,EAAA,OAAA,CAEXF,MAAAA,EAAgCE,EAAA,CAAA,EAEhCC,GADAzG,KACAyG,CAAAA,EAAoB,UAEdF,IAIF,MAAAG,GAAAvB,EAAA,GAAA,SAAA,uBAAAgB,CAAA,IAC0BI,EAAAA,GAAAA,SAAAA,aAAAA,EAAAA,CACpBxW,QACRuW,CAAAA,EAAAA,KAAAA,KAE0B,MAAAI,GAExBC,GADMV,GAAeO,kBAAeI,GAAA,CAAA,EAAA,SAAA,MAAA,EAAAC,EAAA,EACpCF,CAAAA,EAA4B,OAGtB,MAAAG,EACF,EAAMJ,MACJvB,EACoBA,GAAAA,CAEX,MAAA2B,GAAA,OAEH,UAAA,EAER,UACQ/W,OAAI,CACZiQ,EAGA8G,GAAiB,QAAAC,IAAA,CACTA,GAAA,OAASD,GAAAA,SAAmBE,GAAAA,qBAAAA,GAAAA,GAAAA,YAC1BjX,GAAAA,aAEUR,WACL,CAAA,EACF0X,GACD,kBAAA,KAAA,MAAA,KAAA,MAAA,IAAA,KAAAH,GAAAA,GAAA,OAAA,CAAA,EAAA,SAAA,GAAA,KAAA,EACVL,EAAAQ,EAAA,CAMAH,CACE,QACQI,CAKAC,MAAAA,CAAAA,EACD,OAAA,CACCC,CAAAA,IACR,CAIFH,EAAAA,CAAAA,EAAAA,CAA0BI,CAAAA,EAMlBtX,EAAAA,IAAAA,CACR0W,GAAAA,GACFa,GAAAjX,CAAA,CAEApC,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EACF,MAAAsZ,GAAAC,IAAA,UACFC,GAAA/Z,EAAA,IAAA,EACF,CAAAga,GAAAC,CAAA,EAAApZ,EAAA,EAAA,EACF,IAAYqZ,CAAA,EAAArZ,EAAA,EAAA,EACVN,IAAe4Z,GAAA,YAAAA,EAAA,QAAA,EACfvB,EAAAA,EAAuB,IAAO5X,CAAA,MAAAU,CAAA,GAAA,MAAAA,CAAA,GAChC,OAAAkD,EAAAK,EAAA,CAAA,SACC,CAAAmV,IAAAzW,EAAAiE,EAAA,CACL,GAAAyN,EACE1S,MAAMgJ,uBAEV1L,QAAgB,IAAA,CACV0C,cAAgB,EAClBiX,EACF,SAAAjW,EAAA,MAAA,CACQoP,MAAAA,mBAEJ8G,SAAUC,EAAwB,MAAA,CAClCC,MAAAA,yBAECC,SAAAA,EAAAA,MAAuC,CACvCK,MAAAA,gBAEDD,MAAAA,GAAAA,aAAyC,UAAAD,EAAA,MAAA,GAAA,CAAA,qBAAA,KAAA,MAAAA,EAAA,QAAAA,EAAA,MAAA,GAAA,CAAA,cAAA,KAAA,MAAAA,EAAA,OAAAA,EAAA,MAAA,GAAA,CAAA,WACzC9E,SAAcrU,SAAeA,UAGjCmZ,EAAA,kBAAA,IAAA,QAAAA,EAAA,KAAA;AAAA,sBAEIxW,EAAAA,iBAAK,OAAAwW,EAAA,kBAAA,EAAA,IAAA,EAAA,GAAA;AAAA,4BACC9E,EAAAA,KAAAA;AAAAA,qBACE,GACS1R,EAAA,MAAA,CACbzC,MAAqB,oBACvB,MAAA,CAEW,yBAAA,GAAAiZ,EAAA,UAAAA,EAAA,MAAA,GAAA,IAAkBrW,uBAC3B,IAAAqW,EAAA,UAAAA,EAAA,SAAAA,EAAA,MAAA,GAAA,GAAW,CAAA,CAAwBrW,EAAAA,QACjC,CACQ,MAAA,wBACNoD,SAAUyS,CAAAA,EACPQ,OAAAA,CAKSrW,MAEZH,cACgB2W,CAAAA,EAAAA,OAAAA,CAEVH,MAAAA,+DAGC,CAAA,EAAA,IAAA,WACwB,CAAA,EAAA,IAAAvV,EAAA,OAAA,CAG/BjB,MAAA,KACQ,SAAA,CAAAA,EAAA,OAAA,CACC,MAAA,6DAAA,CAAA,EAAA,IAAA,SAAA,CAAA,CAAA,gBAKL,MAAA,KAKF,SAAA,CAAAA,EAAA,OAAA,CAEFiB,MAAA,4DAAA,CAAW,EAAA,IAAA,QAAA,CAAA,CAAuBd,CAAAA,CAChC,CAAA,CAAA,CAAY,CAAIA,CACd,CAAA,CAAY,CAA+D,CAE7E,CAAA,EAAAc,EAAA,IACAA,CAAA,MAAA,UAAgBd,SAAAA,CAAAA,EAAAA,OACdH,CAAA,SAAMgB,CAAMqT,EAAArU,EAAA,OAAA,CAA6D,MAAE,MAE7E,SACAiB,eAAA,CAAA,EAAAiP,EAAYjP,EAAA,QAAA,CAAId,MAAAA,gBACd,SAAY,CAAA,aAAA,IAAAuT,GAAAxD,EAAA,CAA4D,SAAI,EAE9E,CAAA,CAAA,CAAO,CAAA,EACJlQ,EAAC,OAAA,CAAA,CAAA,EAAAuU,GAAAvU,EAAA,OAAA,CAAA,MACH,aACF,SAAA,OAAA,CACF,EAAAiU,GAAAjU,EAAA,OAAA,CAGTiB,MAAA,aAAS,SAAA,SAAA,CAASd,CAAAA,CAChB,CAAA,EAAA,IAAAc,EAEIjB,OAAAA,CAAA,MAAY,UAAA,SAAM,CAAAiB,EAAAmC,GAAA,CAChB,YAAE8M,GACGlP,OAAM,CAAe,OAAA,SACf,IACiB,EAE5B,eAAE,OAGJ,CAEkC,OAAA,IACvBhB,EAAY,QAAAR,GAAA,SAAaA,EAAA,SAAAA,EAAA,iBAAcoX,GAAAC,EAAAT,GAAA,UAAA,YAAAS,EAAA,YAAA,MAAAD,EAAA,KAAAC,GAE1C,CAAS1W,EAEjB2W,MAAaV,SACbW,SAAQ,SAAA,SACEra,OACV,mBAAA,UACAsa,WAAgBhX,EAAA,SAAA,CACdiK,KAAO,SAAA,MAAA,OAAA,MAEG,QACV,SAAAiM,GACAhW,SAAgBF,EAAAI,EAAA,CACVZ,KAAE0J,OACJkN,KAAAA,IACF,IAAA,MAAA,CACF,CAAA,CACF,EACA/S,SAAM,CAAA0Q,GAAA,CAAA3E,GAAAnO,EAAAK,EAAA,CACG,SAAA,CAAAL,EAAAuC,EAAA,CACA,QAAA,IAAA,CACUjG,EAAA,YAAA,CACnB+F,YACE,CACO,OAAA,KAAAuR,IAAA,YAAAA,GAAA,OAAArF,CAAA,GACC,CAAA,CAEI0G,EAAQ/V,YAEbC,EAAA,CAAM,KAAA,IAAA,CAAY,EAAAa,EAAA,OAAA,CAAQ,SAAA,CAAA,YAAAqP,CAAA,CAAA,CAAQ,CAAA,CAAA,CACjC,EAAArP,EAAAuC,EAAA,SAGTuQ,IAAAA,CACC5T,EACW,EAAA,GAEL5C,SAAqB,CAAAyC,EAAAI,EAAA,CAAA,KACN,WAAA,CAAA,EAAAJ,EACF,OAAA,CACX,SAAA,eAAA,CACF,CAAA,CAAA,CACF,EAAAkU,GAAAjT,EAAAuC,EAAA,CAAErD,QAAAA,IAEFH,CAAMK,EAAK,EAAA,CAAM,EACjBF,SAAAA,CAAAA,EAAMC,EAAA,CAA0B,KAAA,MAAA,CAElCa,EAAAA,EAAS,OAAA,UACQ,uBACbqV,CAAAA,CAAAA,CACF,CAAA,EAAAtW,EAAAyD,GAAA,CAAA,CAAA,CAAA,CAAA,CAAEtD,EAAAA,EAAAA,EAEDC,CAAI,KAAMyC,EAAW,OACtB7C,SAAA,SAAM,CAAAA,EAAAI,EAAA,CAAa,KAAO,UAAA,CAClB,EAET8T,EACCjT,QAAAA,CACEf,0BACEqW,SAAAA,GAA0B1T,CAAA,CAAA,CAC5B,CAAA,CAAA,CAAE1C,EAAAA,EAAAA,MAEFH,CAAK,MAAM,kBAAM,SACjBA,CAAAiB,EAAAuC,EAAA,CAAA,QAAM,IAAA,CAA4B,GAAA,CAGtCxD,oBAAe,UAAA6C,CAAA,EAGnB5B,GAAS,aAAA,CAAO4B,MAAAA,CAAYoU,GAAA,qBAAA,CAAQ9W,CACvB,EACXH,SAAA,CAAAA,EAAAI,EAAA,CAAa,KAAA,MAAA,CAAmBD,EAAAA,EAAAA,QAA8B,SAAA,MAAA,CAEhEc,CAAAA,CAAW,CAAA,GAAA,iCAAA,UAAA4V,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CAAiB1W,IAAAA,CACjB,OACQqD,EAAA,CAET,QAAA,IAAA,CACQ0T,GAAAA,CACVD,UAAU,MAAa,MAEvBra,CAAAA,CACAqa,MAAU,CACZ,MAAA,+BAAA,CACF,CAAE9W,EAEG,SAAM,CAAAH,EAAAI,EAAA,CACXJ,KAAAA,OAAA,CAAA,EAAMA,EAAA,OAAA,CAAW,SAAA,QAAA,CACT,CACT8E,CACuB,CACpBjC,CAAAA,CACF,CAAA,EACE5B,CAAAA,CAAAA,GAASA,EAAAK,EAAA,CAAA,UACEpB,EAAMuD,GAAA,CAAA,CAAA,EAAA8Q,EAAAtT,EAAAuC,EAAA,CACT,QAAA,IAAA,CACFsB,EAAgB,SAAA,GACdjC,SAAAA,CACF,GAAC,OACSsU,EAAA,MAAArD,EAAA,GAAA,SAAA,QAAAe,IAAA,YAAAA,GAAA,KAAA9W,CAAA,EACVnB,EAAeua,CAAA,EACfxX,EAAqC,SAAA,EACvCsX,GAAA,YAAA3G,CAAA,EAAA,EACF/S,EAAA,sBAAA,GAAA,OAAE4C,EAEFH,sBAAK,SAAM,MAAA,CACXA,EAAA,OAAA,CAAM,CAAA,IAET,EAEJ,SAAE4U,CAAAA,EAAAA,GACDzU,KAAA,QAGa,KACQ,OAAA,CACb8U,SAAAA,CAAAA,WAAuB3E,CAAS,CAChC,CAAA,CAAA,CACE,CAAI,EAAAtQ,EAAAoX,GAAA,CACID,YAAAA,YAIEzY,UAAAA,SACR4W,SAAAA,OACAL,MAAAA,GACW,MAAAhU,EAAAK,EAAA,CACX/D,SAAAA,CAAO8Z,KACP9Z,KAAAA,MAA6B+Z,CAAAA,WACnB,CACV1a,MAAAA,YACAqY,SAAAA,CAAAA,SAAAA,EAA8B,GAAA,CAAA,CAChC,EAAAhU,EAAA,OAAA,CACC,MAAA,CACL,aAAA,MAAEd,EAES,SAAA,CAAAH,EAAAI,EAAA,CACXa,KAAA,MAAA,CAAAd,EAAAA,EAAMC,EAAA,CAAyB,KAAA,eAAA,CAGjCJ,CAAAA,CAAQ,CACM,CAAA,CAAA,CACF,EACVuX,SAASvX,EAAA,MAAA,CACF,MAAA,YACP4M,YACE,IAAA4K,GAAAxX,EAAAwD,EAAA,CAAArD,QACEH,IAAK,CAAMiV,EAAA,SAAA,GACXhU,SAAA,CAAY,GAAA,CAAY,MAAOqP,EAAAA,MAAUwD,EAAA,GAAA,SAAA,MAAAe,IAAA,YAAAA,GAAA,KAAA9W,EAAA,CACzC,SAAAyZ,CAAA,CACS,EACSlC,EAAA6B,CAAA,EAChBlC,EAAA,SAAA,EAAE9U,GAEDC,UAAIkQ,CAAA,QAAA7B,GAAA+I,CAAA,CAAA,EAAA,EAAMja,EAAA,sBAAA,GAAA,OACXyC,EAAK,sBAAA,SAAM,MAAA,CAAkBiV,EAAA,OAAA,EACxBgC,GAAA,mBAAA3G,CAAA,EAAA,CACP,CAAA,IAGO,EACR9B,SAAAA,GAAoBgJ,CAAAA,CACV,CAAA,CACPtX,CACE+U,CAAAA,CACA,CAAA,EAAAjV,EAAC4D,GAAY,CACP,QAAA,GACIuT,QAAAA,CAAAA,EAIAK,aAAAA,EAAAA,EAAAA,CAAAA,SAEJ,CAAAxX,EAAAI,EAAA,CACM1B,KAAAA,OACR4W,CAAAA,EAAAA,EAAAA,OAAAA,CACAL,SAAAA,CAAAA,UAAAA,EAAgC,GAAA,CAChCgC,CAAAA,CAAAA,CAGA1Z,CAAAA,EACAA,kBAA6B+Z,SAAAA,aAE7B1a,EAAe,SAAA,GACfqY,SAAAA,CACW,GAAA,CACb,GAAAhB,EAAA,CACC,MAAAkD,EAAA,MAAArD,EAAA,GAAA,SAAA,SAAAe,IAAA,YAAAA,GAAA,KAAA9W,CAAA,EACLuX,EAAA6B,CAAA,EAAEhX,WAE6B,EAElC8W,GAAA,cAAA3G,CAAA,EAAA,CAAA,KACE,CAGG,MAAA6G,EAAA,MAAArD,EAAA,GAAA,SAAA,OAAAe,IAAA,YAAAA,GAAA,KAAA9W,CAAA,EACHuX,EAAA6B,CAAA,IACGlD,SAAAA,EACVnQ,eACEwM,CAAA,EAAA,CAAAnQ,CACa5C,EAAA,sBAAA,GAAA,QACX0D,EAAA,sBAAA,SAAM,MAAQqP,CAAiB2E,EAAA,OAAA,EAC/BhB,EAEcgD,GAAA,sBAAA3G,CAAA,EAAA,EAKhB2E,GAAAA,oBAAgC3E,CAAA,EAAA,CAE1B,CACF,IACQ6G,EAIEzY,SAAAA,MAAiC,CACzC4W,SAAAA,CAAAA,EAAAA,EAAgB6B,CAChBlC,KAAAA,SACAgC,CAAW,EAAAhW,EAAA,OAAA,CAAuB,SAC7B,CAAA,YAAAqP,CAAA,CACL,CAAM6G,CAAAA,CAINva,CAAQ8B,EAAAA,EAAAA,GACR4W,SAAAA,CAAAA,EAAAA,EAAgB6B,CAChBlC,KAAAA,OACAgC,CAAW,EAAAhW,EAAA,OAAA,CACb,SAAA,CAAA,UAAAqP,EAAA,GAAA,CACA/S,CAAAA,CAAAA,CACAA,CAAAA,CAA6B+Z,CAAAA,CAAAA,CAE7B1a,CAAAA,CAAAA,CACAqY,CAAAA,EAAAA,CAAAA,GAAAA,IAA8B,WAAAjV,EAAAyX,GAAA,CAC9B,OAAA,EACa,CAAA,EAAA,CAAA,CAAA7C,GAAA5U,EAAA4D,GAAA,CAA+B,QAAAsQ,GACrCO,GACM,aAAAzU,EAAA,OAAA,CACb,SAAAyU,GAAA,2BAAA,aAAAzV,EAAA,MAAAA,EAAA,QAAA,GAAA,CACF,EAAA,kBACC,SACL,MAAA,MAAEmB,SAAAA,GAGAA,QAAAA,IAAAA,CACO8U,EAAM,SAAA,GAAS,SACpBhU,CAAAd,GAAAA,CAAwB,IAAQgX,EAGlClW,GAAAwT,GAAAtU,EACO,MAAA2T,EAAA,GAAA,SAAA,SAAAE,EAAA,OAAA,EACL/S,EAAA,MAAA6S,EAAA,GAAA,SAAA,OAAAE,EAAA,OAAA,EAA+BmD,GAC/B7B,EAAA6B,CAAA,EAEQlC,EAAA,SAAA,CAMjB,OAAAzV,EAAA,UAGayV,EAAA,OAAA,CAEbL,CACW,IAEV9Q,EACE,WAEM,SAAA,CAEA,KAAA,SAEU,MAAA,GAAAoQ,GAAAO,GAAA,aAAA,EAAA,GACZ,kBAAAP,GAAAO,GAAA,SAAA,GACIyB,SAAAA,YACKhC,EAAAjT,EAAAK,EAAA,CACb2T,SAAAA,CAAAA,EAAAA,OAAgC,CACnB,SAAA,WACX,CAAI,EAAAjV,EAAA,OAAA,CACEmX,SAAAA,WAEJ,CAAA,CAAA,CAQEA,CAAAA,EAAAA,GAAAA,EAAAA,EAAqCzZ,CAErC,SAEK,CAAAsC,EAAA,OAAA,CACLmX,SAAAA,WAEA,CACF,EAAAnX,EAAA,OAAA,CAEImX,SAAAA,WAAiB7B,CAAAA,CAAAA,CACrBL,CAAAA,EAAAA,EAAAA,EAAAA,EAAgC,CAClC,SAAY,CAAAjV,EAAAI,EAAA,CACVT,KAAMH,MACNyV,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CACF,SAAA,QAAA,CACC,CAAA,CACL,CAAA,EAAA,QAAA,CAAE9U,CAEF,CAAA,CAAA,CACO,CAAA,CAAA,CAEL,CAAA,EAAA,CAAA,CAAAkW,IAAiBnC,EAAaO,GAAAA,CAAuB,MAC3CyB,QAAQ/V,QAAAA,IAAAA,CAGhBA,EACEH,EAAA,CAAA,EAAe,SACfA,EAAAA,GAAA,CAAA,KAAAoQ,EAAM,OAAAN,EAAgB,QAEtB2E,IACFxT,EAAA,EAAA,CAAA,CAAAd,CACE,CAAA,EAAA,CAAA,CAAAuW,IAAM1W,EAAAe,GAAA,CAAS,MAAA,QACf,QAAA,IAAM,CAAAwV,EAAgB,EAAA,CAAA,EAGxBpW,SAAAA,EAAAA,GACO,CAAA,UAAM6T,EAAA,QAAA,QAAQ,IAAEhU,EAAA,EAAA,CAAA,CAAA,CAAM,CAAA,CAAA,CAAa,CAAA,CAG1C,CAEI,SACG4S,GACd,CAAA7T,EAAAwT,EAAAC,CAAA,EAAA,CAAA,MACIkF,EAAA,MAAA3Y,EAAA,MAAAwT,EAAA,MAAAC,EAAA,IAERmF,EACO,OACJ3W,GAAM,IAAA2W,IAEJrB,GAAAA,GACFqB,EAAA,GAGEvH,EAAAA,EAAAA,IAEAzP,EAAAA,KAAAA,IAAe2V,EAAAA,CAAAA,EAChB,CAAAvX,EAAAwT,EAAAC,EAAAmF,CAAA,CAAA,CAIG,SACEC,GAAA/U,EAAA,CAAA,GACNlC,GACE4V,OACF,MAAAsB,EAAA,IAAA,IAAAhV,CAAA,EAAE1C,CAEkB,KAAA2X,EAElBnX,SAAAA,CAA0C,EAAEkX,EAGjDE,EAAAC,EAAA,QAAA,MAAA,EAAA,EAAA,QAAA,MAAA,EAAA,EAAA,OACD/W,EAAAK,EAAA,CAEN,SAAA,CAAAL,EAAA,OAAA,CAGA,MAAoB,qBAClB,SAAkB,CAAA6W,EAAA,GAAA,CAClBlb,CAAQ8B,EAAAA,EAAAA,YAA0B,OAAA,CAC9BiZ,SAAAA,CACJ,CAAA,CAAID,CACFC,CAAQ,CAAA,CAERA,SAAQM,GAAA,CACV,KAAA7H,EACEuH,OAAAA,EACF,QAAAhX,CACAgX,EAAQ3B,CACR,MAAAkC,GAAsBpI,GAAA,YAAAA,EAAA,IAAA,CAAA,CACxB,KAAAtH,EAEA,MAAAxK,CACE,IAAK6E,GAAAA,CAAAA;AAAAA,EAAKsV,GAAAna,CAAA,CAAA,IAAA,KAAA;AAAA;AAAA,KAAA,GACJ6Z,EAAAA,GAAoBzH,CAAA,GAAA8H,EAAA;AAAA;AAAA,EAClBJ,CAAAA,GAAAA,IAAME,OAAAA,EAAAA,MAAAA,CAAaH,MAAAA,QACrBE,SAAAA,CAAOC,KAAiBhY,EAAA,SAAW2F,CACzC,cACExF,MAAAA,cACQa,QAAML,EAAoBR,SAAAH,EAAE8X,EAAM,CACxC9X,KAAM,GACN,CAAO+X,CAAAA,CAAW,EAAC/X,EAAA,SAAA,CACnB,SAAAA,EAAA,KAAA,CAEN,SAAA,gBAEA,CAAA,CAA4B,CAAEoQ,EAAAA,EAAAA,OAAAA,CAAMN,SAAAA,CAAAA,EAAAA,IAAAA,CAAQnP,MAAAA,CAAW,WAAA,UAC/CuX,EAEO1P,SAAAA,CAAAA,CAAMxK,EAAAA,EAAAA,GAAAA,CAAa,eAAO,SAGvC,CAAA,CAAMmV,CAA0C,CAAA,CAAA,CAAA,EAEhD,CACE,SAAWiF,GAAA,CAAA,UAAApE,EAEP,QAAArT,CAAa,EAAA,CAAe,KAAuBA,CAAQR,MAAAA,CACpD,EAAA7C,EAAM,EAAK,CAAA2N,EAAAK,CAAA,EAAApO,EAAA,SAAA,EAGpB8C,CAAAA,EAAAqY,CAAA,EAAAnb,EAAA,CAAA,CAAA,EAAAiD,CAAAA,EACEmY,CAAA,EAAApb,EAAA,CAAA,CAAA,EAAAiD,CAAIoY,EAAAnW,CAAA,EAAAC,GAAAmW,GAAAA,EAAA,EAAA,CAAA,EAAAlc,EAAkB,IAAA,CAACgP,EAEzB,SAAA,GAAAnL,SACEH,CAAA,GACS,CAAA,MACOyY,EAAA,MAAArb,EAAA,GAAA,MAAA,KAAA,EACdsb,EAAA,MAAAtb,EAAA,GAAA,SAAA,UAAA4W,CAAA,EAAE7T,EAEDgT,CAAAA,EAEHnT,EAAiB0Y,CAAA,EAACC,EAAc,SAAA,CAACxF,MAAAA,CAAc7H,EAAA,OAAA,CAC1C,CAAA,IAGb,EAAA,CAAAiN,CAAA,CAAA,EAEA,KAAA,CAASH,EAAoBQ,CAAA,EAAA1b,EAAA,EAAA,EAAE8W,OAAAA,EAAAA,MAAAA,CAAWrT,MAAAA,QAAW,GAAA,4BAC7C,SAAA,CAAA,CAAA,CAAAA,GAAAX,EAAA,SAAA,CAAE5C,KAAAA,SAAUE,MAAI,cACtB,QAAO2N,EACP,SAAcoN,EAAAA,EAAYnb,CACpB,KAAyBob,GAC/B,CAAM,CAENhc,CAAAA,EAAAA,EAAgB,SAAA,CACdgP,SAAoBtL,EAAA,KAAA,CACP,SAAA,uBACX,CAAI,CACF,CAAA,EAAAiB,EAAM4X,OAAQ,CACd,uBAAqCzb,KAAAA,CAGrCR,MAAAA,kBAAY,SAAEic,EAAAA,IAAAA,GAAAA,CAAOC,MAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAwB,OAAA9Y,EAAA,KAAA,CAC7CqY,SAAcpX,EAAA,SAAA,CACdqX,KAAAA,SACAhN,MAAoB,SAAAyN,EAAA,UAAA,EAAA,YACV9N,IAAA,UACVrO,QAAe,IAAA,CACf0O,EAAkB,SAAA,GACpB,SAAA,CACC,GAAA,CACWyN,EAETC,MAAAA,EAA6C,GAAA,MAAA,cAAApb,MAGlD,WAAA,CAAAoW,CAAA,CAAA,CAAW,EACNrT,MACDX,EAAA,GAAA,MAAA,WAAApC,EAAA,GAAA,CAAa,WAAA,CAAAoW,CAAA,CAAA,CAAe,KACf,MAAA,CAAK1I,EAAA,OAAA,EAGpB,MAAAyN,EAAA,8BAAA,wBAAA,EACE,IAA6B,EAE/B,SAAA,CAAA/Y,EAAAI,EAAA,MACGyY,cACC,CAAU,EAAA7Y,EAAA,OAAA,CAAiBG,SAClBoB,EAAc,KACnB,CAAA,CAAMwX,CAGN,CAAA,CACE,CAAA5Y,CACE,CAAA,CACO,CAAA,EAAA8K,IACG,UAAiBjL,EAAA,IAAA,CAAe,iBAClB,WACbE,GAAM,CACboL,OAAAA,EACA,CAAA,CACM,CAAA,EAAAL,IAAA,QAAAjL,EAAA,IAAA,CACF,MAAA,WACE,SAAA,uBAA4C,CAC1CiZ,EAAAA,EAAAA,IAAAA,CAAsB,MAAA,WACvB,SAAA,WAED,CAAA,EAAAhY,EAAA,SAAA,CACEgY,KAAAA,SAAsB,MAAA,SAE1B,QAAA,IAAAL,EAAA,EAAA,EAEO,SAAA3N,IAAA,UAAA,SACT,KAAY,CACVrO,KAAAA,OACA0O,KAAAA,GACA3L,CACEoZ,EAAAA,IAAAA,EAAAA,OAAAA,CAIJ,SAAA,UAAA,CAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAE5Y,EAAAA,GAEGH,EAAAe,GAAA,CAAA,MAAA,QAAoB,QACzBf,GAAAA,CAAAR,EAAA,WAAY+D,eAAAA,EAAa,EAAA,CACnB,EACN,SAEPvD,EAAA2N,GAAA,CACC,KACUqL,GAAA,YAAAA,OACXhY,QAAMkY,GAAA,CAAU/Y,UACV,WAAOiC,IACbwW,IAEH,CAAS,CAAA,CAAA,CAAW,CAAqB,CAAA,CAEzC,CAAA,CAAS,CCtxCnB,SAASO,GAAa,CAAE3W,QAAAA,EAASnF,SAAU+b,EAAczY,QAAAA,CAAQ,EAAG,CAC5D,KAAA,CAAEvD,MAAAA,EAAOC,SAAAA,EAAU2K,cAAAA,GAAkB1K,EAAI,CAAED,SAAU+b,CAAAA,CAAc,EACnEnK,EAAW,OAAOzM,GAAY,SAEpClG,OAAAA,EAAU,IAAM,CACT2S,IACH1R,EAAOkE,SAAU,GAAEe,EAAQzE,EAAG,IAAGV,CAAS,EAAC,EAAImF,EACjD,EACC,CAACA,CAAO,CAAC,EAGVvB,EAAA,MAAA,CACED,MAAM,QACNd,QAAgBV,GAAA,CACOA,EAAE0J,OAAOmQ,QAAQ,gBAAgB,GAE5C1Y,EAAA,CACN2Y,YAAa,kBAAA,CACd,CAEL,EAAEnZ,SAED,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,oBAAoBd,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAC8O,GAAW,CACVzR,SAAAA,EACA2K,cAAAA,EACAxF,QAAAA,EACAuM,aAAc,SAAY,CACxB,GAAIE,EACE,GAAA,CAKKjQ,OAJM,MAAM5B,EAAMM,GAAG+D,SAAS8X,OAAO,CAC1C/J,KAAMhN,EACNgX,eAAgB,EAAA,CACjB,OAES,CACV,MAAMN,EAAS,MAAM9b,EAAMqc,GAAGC,OAAO,CACnC3E,EAAGvS,EACHvC,KAAM,WACNpC,MAAO,EACP8b,QAAS3R,CAAAA,CACV,EACGkR,GAAAA,EAAOzX,SAASvD,OACXgb,OAAAA,EAAOzX,SAAS,CAAC,EACf,GAAA,sBAAsBwB,KAAKT,CAAO,EAAG,CAE9C,MAAMgN,EADa,IAAIoK,IAAIpX,CAAO,EACVwV,SAASrS,QAAQ,MAAO,EAAE,EAC5CuT,EAAS,MAAM9b,EAAMqc,GAAGC,OAAO,CACnC3E,EAAGvF,EACHvP,KAAM,WACNpC,MAAO,EACP8b,QAAS3R,CAAAA,CACV,EACGkR,GAAAA,EAAOzX,SAASvD,OACXgb,OAAAA,EAAOzX,SAAS,CAAC,CAE5B,CACF,KAEOe,QAAAA,CAEX,CAAA,CACD,CAAC,CAAA,CACC,CAET,CC/DA,SAASqX,GAAO,CAAElZ,QAAAA,CAAQ,EAAG,CACrB,KAAA,CAAEvD,MAAAA,GAAUE,EAAI,EAChB,CAAC2N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAAC4c,EAAQC,CAAS,EAAI7c,EAAS,CAAE,CAAA,EACjC,CAACqb,EAAanW,CAAM,EAAIC,GAAkBmW,GAAAA,EAAI,EAAG,CAAC,EAExDlc,EAAU,IAAM,CACdgP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMjK,EAAO,MAAM2Y,GAAGF,OAAOzY,KAAK,EAClC,GAAIA,EAAKnD,OAAQ,CACf,MAAM+b,EAAKC,KACLC,EAAU9Y,EAAK+Y,UAAgB7N,EAAI8N,WAAWJ,CAAE,CAAC,EACvD,GAAIE,EAAQjc,OAAQ,CAClB,MAAM4b,EAAS,MAAME,GAAGF,OAAOQ,QAAQH,CAAO,EAC9CL,EAAOS,KACL,CAAC7H,EAAGF,IACF,IAAI1H,KAAK0H,EAAEgI,SAAS,EAAEC,QAAAA,EACtB,IAAI3P,KAAK4H,EAAE8H,SAAS,EAAEC,SAC1B,EACAV,EAAUD,CAAM,CAAA,MAEhBC,EAAU,CAAE,CAAA,CACd,MAEAA,EAAU,CAAE,CAAA,EAEdzO,EAAW,SAAS,OACV,CACV1O,SAAe,CACf0O,CAAkB,IACpB,EACC,CAAAiN,CAAA,CAAA,EACL,MAAIA,GAAYuB,GAAA,YAAAA,EAAA,QAAA,EAEVY,OAAAA,EAAAA,OAEN,cACO1Z,SAAM,CAAA,CAAA,CAAAL,GAAAX,EAAA,SAAA,eAECC,MAAK,cAASe,QAAML,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKc,EAAA,SAAA,CAGpBA,SAAA,CAAAA,EAAA,KAAA,CAAAd,SACEc,CAAAA,iBAAAjB,EAAAyX,GAAA,CAAI,OAAA,GACoBkD,OAAM1P,IAAA,SAAA,CAAA,CAACxO,CAAoB,CAAA,EAAaie,GAAA1a,EAAA,MAAA,CAC5D,MAEFA,gBAAKgB,SAAM,uEAAA,CAAA,CAAeb,CAAC,CAAA,EAI5BH,EAAA,OAAA,CAEHA,SAAA0a,EAAAzZ,EAAAK,EAAA,CAAAnB,SAEIc,CAAAA,EAAAA,KAAAA,CAAAd,MAAAA,cACMa,SAAM8Y,EAAA,IAAAc,GAAA,CAAaza,KAAAA,CAEb,UAAAqa,EAAEA,IAAAA,EAAWjO,YAAAA,EAAKsO,QAAAA,CAAaC,EAAAA,EAAYF,EAAAA,IAAAA,KAAAA,CAAAA,EAC3CG,OAAAA,EAAAA,KAAAA,CACN,UACE9Z,EAAA,MAAA,CAAAd,MAAAA,kBACOa,SAAM,CAAAC,EAAA,IAAA,CAAiBd,SAC1Bc,CAAAA,EAAAb,EAAA,CAAAD,KAAAA,EACO,QAAA,QAACE,KAAMya,GAAoB,CAAA,EAAc,IAAA7Z,EAAA,OAAA,CAAK,SACnDA,CAAAA,CAAAA,CAAA6Z,GAAA7Z,EAAAK,EAAA,UACI,CAACwZ,IAAAA,UACD,KAAA9a,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAAA,GAAE4a,CACUvY,CAAAA,CACJ,CAAA,CAAA,CAGkB,CAAA,EACvBxC,EAAA4D,GAAA,CAET5D,aAAYA,EAAA,OAAA,CACV8D,SAAAA,oBAAc,CAAA,EAAwB,kBAAM,SAC5CC,MAAkB,MAClBV,SAAM4H,IAAA,UACNvH,YAAsB,WACP,CACA,GAAA,CACP,MAAAsW,GAAA,OAAA,IAAAzN,CAAA,EAGIyN,GACC,MAAA,gDAEG,CACVra,CAA+C,IACjD,EAEJ,SAAAK,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLe,SAAMiK,IAAA,UACNvH,SAAUuH,SAAY,CAAA,CACvB,CAAA,CAED,CAAQ,CAAA,EACIjL,EAAA,SAAA,CAEhBA,KAAAA,SACEC,SAAKgL,IAAA,UACLvH,mBACA1C,QAAM,SAAA,OAGAga,GAAAA,EAAAA,CACJ1P,EAAa,SAAA,EACXA,GAAAA,CACI0P,EAAA,MAAA5d,EAAA,GAAA,SAAA,MAAA0d,EAAA,EAAA,CACFE,MAAAA,wCAGU,EACVpe,WAAe,EACf+C,MACA2L,CACAA,EAAA,SAAA,CACF,CACAA,OAAAA,YAAoB,CACtB,YAAAuP,EACA9V,cAAAA,CAAqB,EAEnBiW,EAAAA,YAAAA,GACFzd,EAAA,WAAA,EACAA,EACAA,SAAoByC,EAAAib,GAAA,CACtB,MAAAL,CAAA,CAAEza,CAEQ,CAACya,CAAAA,CAAAA,EAAAA,CAAe,CAAA,CAAA,CACnB,CAAA,EAAAd,EACP,OAAA,GAAA9Z,EAAA,IAAA,CAER,SAACA,EAAA4D,GAAA,CAEFkW,aAAgB9Z,EAAA,OACf,CAAAG,6BACc,CACV2D,EAAc,kBAAM,SAAkB,SAAMmH,IAAA,UAC5ClH,QAAkB,IAAA,WACI,GACP,SAAA,EACA,GAAA,CAGXuH,MAAAA,GAAW,OAAS,QAAAwO,EAAA,IAAAc,GAAAA,EAAA,GAAA,CAAA,EAChBtP,EAAA,SAAA,EACI0O,GAGN1O,MAAAA,CACO,MAAA,0CAAA,IACG,OAAA,CACV1O,CACA+C,IACA2L,EACF,SAAAtL,EAAA,SAAA,CAEF,KAAG,SACL,MAAA,eAAEG,aAEF,UACEF,SAAK,aAAA,CAAA,CACC,CAAA,CACgB,CAAA,CAAA,CACvB,CAAA,EAAAD,EAEO,IAAA,CAAA,SACG,kBAAA,CAAA,CAEhB,CAAA,CAAA,CAGH,CAAA,CAAG,CAAmB,SAEnBib,GAAA,CAAA,MAAAL,CAGb,EAAA,OAEA,KAAA,CAAqBA,YAAAA,EAAS,QAAAE,CACtB,EAAAF,EAAEC,CAAaC,OAAAA,EAAYF,YAAAA,EAC3B,KAAAxO,EAAEsJ,iBAAAA,CAAQwF,EAAAA,EAAa9O,IAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,EAAM+O,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,EAAqBN,EAAAA,GAAAA,EAClDO,EAAgBC,GAAkB,IAAA,CAClCC,GAAAA,CAAAA,EACN,OACMC,MAAAA,EAAAA,EAAgC,KAAAC,GAAA,QAAA,KAAAA,EAAA,IAAA,CAAA,EACpC,GAAI,CAACF,EAAU,OACTG,KAAAA,CACN,KAAAC,CAAY,EAAAD,EACJC,OAAF,IAAA,gBAAAA,CAAA,CAAEA,EAASD,CAAAA,EAAAA,CAAAA,CAAAA,EACXE,OAAAA,EAAAA,EAAgBC,CACfD,SAAAA,EAAAA,MAAAA,CACLL,MAAUH,aACd,SACE,CAAAU,GAAA5a,EAAA,MAAA,CAAAd,0BACEob,EAAA,YAAA,EAAA,GAAW,MAAAA,EAAA,CAAY,aAEnBta,OAAAA,CAAA,GAAA,EACU,CAAA,EACRgJ,SAEM,CAAAmR,GAAApb,EAAAI,EAAA,CACE,KAAA,MAAqC,GAEvCkb,GAACra,EAAA,OAAA,CAGNma,SAAWpb,CAAAA,EAAAA,EAAAA,CAAW,KAAA,YAAA,CAAQ,EAE7BiB,IAAAA,EAAAA,QAAA,CAAAd,SACEH,GAAAA,YAAAA,EAAK,MAAA,CAAA,CAACK,CAAK,CAAA,CAAY,CACvB,CAAA,EAAAY,QAA0B/C,CAAAA,MAAe,kBAAA,SAE5C,CAAA,CAAA,CAAAgd,GAAAlb,EAAA,MAAA,CAGLiB,MAAA,qBAAW,SAAAia,SACNA,EAAAA,MAAelb,CAAKgB,MAAM,oBAAoBb,SAAE+a,CAAAA,CAAiB,CACnE,CAAY,CAAA,CAAA,CAAW,CAAA,CAAqBxF,CAAAA,CAAa,CCnOpE,SAAwBoG,GAAgB,CAAEnb,QAAAA,EAAUA,IAAM,CAAC,CAAE,EAAG,CACxDF,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAC0N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAACuE,EAAUsa,CAAW,EAAI7e,EAAS,CAAE,CAAA,EACrC,CAAC8e,EAAUC,CAAW,EAAI/e,EAAS,EAAK,EAE1C,GAAA,CAACuD,EAAWyb,oBACP,OAAA,KAGH,KAAA,CACJne,GAAAA,EACAoe,QAAAA,EACAC,cAAAA,EACA3a,SAAU4a,EACVC,cAAAA,CAAAA,EACE7b,EAAWyb,oBAETK,EAA8BpL,GAAA,CAC7BiL,IACDjL,GAAW4K,EAAY,CAAE,CAAA,EAC7BzQ,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACI,KAAA,CAAEkR,KAAAA,EAAMxe,MAAAA,CAAAA,EAAU,MAAMoe,EAAcjL,CAAS,EACjDsL,MAAMC,QAAQ1e,CAAK,GAEnB+d,EADE5K,EACUnT,KAEU,CAAC,GAAG2e,EAAM,GAAG3e,CAAK,CAFvB,EAInBie,EAAY,CAACO,CAAI,GAEjBP,EAAY,EAAK,EAEnB3Q,EAAW,SAAS,OACV,CACV1O,SAAe,CACf0O,CAAkB,KACpB,EAEJhP,OAAAA,EAAA,IAAA,EAEAA,GAAAA,YAAAA,EAAgB,QAAA,EACV+f,EAAAA,GAEGE,EAAA,EAAA,CACY,EACnB,CAAAF,EAAAD,CAAA,CAAA,EACF9f,EAAoB8f,IAAAA,SAEpB9f,EAAAA,EAAgB,wBAAhBA,YAAAA,EAAgB,MAAAyB,GAGV0C,EAAW4W,EAAuBtZ,CAEtC,EAAA,CAAA0C,EAAA,sBAAA,OAAA,CAAA,EACa4W,EAAAA,MAAAA,CAEf,GAAA,6BACOtZ,MAAG,QAA6BiD,SAAM,KAAQE,SAAS,CAAAlB,EAAA,SAAA,CAAIG,KAAAA,SACtDF,MAAK,cAASe,QAAML,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,YACE,UAAA,CAAA,CAAgB,CAAA,EAAeH,EAAA,OAAA,CAEjCA,SAAAyB,EAAA,OAAA,EAAAR,EAAAK,EAAA,CACGG,SAAAA,CAAAA,EAAAA,KAAkB,CACjBtB,MAAAA,gBACMa,SAAMS,EAAA,IAAAe,GAAAvB,OAAAA,OAAAA,EAAA,KAAA,CACPQ,SAAAA,CAAAA,KAAce,EAAAA,WAAAA,YAAAA,EACb,QAAA,GAAAxC,EAAA,MAAA,CAAAG,MAAAA,kBAESa,SAAMwB,EAAA,OAAA,IAAAvC,GAAAD,EAAAI,EAAA,OAIH,OAAA,SACE6L,UAAQ,OAAA,EACRD,CAAW,EACb,MAAM,GAAA/L,CAAA,OAAA,CAERe,CAAAA,CAAe,CAAA,EAElBhB,EAAA2R,GAAA,CAGL3R,QAAAA,CAAa,CAACwC,CAAAA,CAAAA,EAAmBA,EAAC,IAAAA,EAAA,QAAA,GAAA,EAAA,CAAA,CAAA,MAhBnBzE,UAAc6e,IAkBhCC,GAAA,CAEF5R,SAAAA,GACC+Q,IAGMO,GAEA,EACF,SAAAvc,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLe,QAAM,IAAAub,EAAA,EACNrc,qBAA4B,CAAA,CAC7B,CAAA,EAEOF,EAAA,IAAA,CAGVA,MAAAA,yBAAGgB,SAAM,UAAA,CAAA,EAAyBiK,IAAA,WAAAjL,EAAA,IAAA,CAAW,MAGnC,WACPgB,SAAMhB,EAAAyX,GAAA,CAAUtX,OACjBH,EAAO,CAAA,CAAO,CAAA,CAAA,CAAE,CAAA,EAGrBiL,IAAA,UAAAjL,EAAA,IAAA,CACD,MACY,WACXgB,SAAMhB,EAAAyX,GAAA,CAAUtX,OACjBH,EAAO,CAAA,CAAO,CAAA,EAAEiL,IAAA,QAAAjL,EAAA,IAAA,CACf,MACW,WACXgB,SAAM,wBAAA,CAAA,EAAWhB,EAAA,IAAA,CAEpBA,MAAAA,yBAAGgB,SAAM,iBAAA,CAAA,CAAyB,CAAA,CAAe,CAAG,CAAA,CAEjD,CClIb,SAAwB8b,GAAc,CAAEvc,IAAAA,EAAKoJ,KAAAA,EAAMhJ,QAAAA,CAAQ,EAAG,CACtDF,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAACob,EAAgBoE,CAAiB,EAAI7f,EAAS,EAAK,EACpDoK,EAAiBI,GAA2B,EAAI,EAChDmC,EACJpJ,EAAW8G,SAASsC,iCAAmC,CAAA,EACnDmT,EACJ,CAAC,CAACrT,GACFA,IAASrC,GACT,CAAC2V,GAAY,CAACtT,CAAI,EAAG,CAACrC,CAAc,CAAC,GACrC,CAACuC,EAAgCqT,KACxBvT,GAAAA,IAASwT,GAAKF,GAAY,CAACtT,CAAI,EAAG,CAACwT,CAAC,CAAC,CAC9C,EAEF,OACElc,EAAA,MAAA,CAAKD,MAAM,QAAOb,SACf,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,oBAAoBd,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVY,EAAA,SAAA,CAAQD,MAAM,cAAab,UACzBH,EAAA,KAAA,CAAAG,SAAI,mBAAA,CAAqB,EACzBH,EAAA,MAAA,CAAKgB,MAAM,cAAab,SACtBH,EAACoD,GAAI,CACHC,MAAM,MACNC,WACEtD,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,SAAQb,SAClCH,EAACI,EAAI,CAACC,KAAK,OAAOE,IAAI,OAAOD,KAAK,IAAA,CAAM,CAAA,CAClC,EACTH,SAEDc,EAACuC,EAAQ,CACPE,SAAUiV,EACVzY,QAASA,IAAM,CACb6c,EAAkB,EAAI,CACxB,EAAE5c,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAA,CAAa,EACxBL,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACd,CAAA,CACN,CAAA,CACH,CAAC,CAAA,CACA,EACRc,EAAA,OAAA,CAAM0I,KAAAA,EAAYyT,IAAI,OAAMjd,UAC1BH,EAAA,IAAA,CACEiK,MAAO,CACLoT,WAAY,UACd,EAAEld,SAEDI,CACA,CAAA,GACDyc,GAAqBrE,IACrB3Y,EAACsd,GAAgB,CACf3E,eAAAA,EACA4E,eAAgB5T,EAChBwJ,KAAM5S,CAAAA,CACP,CACF,CAAA,CACG,CAAC,CAAA,CACJ,CAET,CC7DA,SAASid,GAAW,CAClBrC,iBAAAA,EACAsC,SAAAA,EACApgB,SAAAA,EACAsM,KAAAA,EACA+T,MAAAA,EAAQ,EACR/c,QAAAA,EAAUA,IAAM,CAAC,CACnB,EAAG,SACKgd,MAAAA,EAActhB,EAAO,IAAI,EAEzB,CAACuhB,EAAcC,CAAe,EAAI3gB,EAASwgB,CAAK,EAChDI,EAAoBzhB,EAAO,IAAI,EACrC0hB,GAAgB,IAAM,QACpBD,EAAAA,EAAkBvhB,UAAlBuhB,MAAAA,EAA2BE,gBAY7B,EAAG,CAAE,CAAA,EACCC,MAAAA,EAAe5hB,EAAOohB,CAAQ,EACpCnhB,EAAU,IAAM,CACR4hB,MAAAA,EAAaR,EAAQC,EAAYphB,QAAQ4hB,YACzCC,EAAoBH,EAAa1hB,UAAYkhB,EAC/CW,IAAmBH,EAAa1hB,QAAUkhB,GAC9CE,EAAYphB,QAAQ8hB,SAAS,CAC3BC,KAAMJ,EACNK,SAAUH,EAAoB,OAAS,QAAA,CACxC,EACDT,EAAYphB,QAAQgR,OAAM,EACzB,CAACmQ,EAAOD,CAAQ,CAAC,EAEpB,KAAM,CAACe,EAAcC,CAAe,EAAIvhB,EAAS,EAAI,EAErDZ,EAAU,IAAM,CACd,IAAIoiB,EAAcA,IAAM,CACd/d,GAAA,EAEV,OAAIgd,EAAYphB,SACFA,EAAAA,QAAQoiB,iBAAiB,cAAeD,CAAW,EAE1D,IAAM,CACPf,EAAYphB,SACFA,EAAAA,QAAQqiB,oBAAoB,cAAeF,CAAW,CACpE,CAEJ,EAAG,CAAE,CAAA,EAEL7e,GAAW,MAAOc,EAAS,CAACA,CAAO,CAAC,EAEpC,KAAM,CAACke,EAAcC,CAAe,EAAI5hB,EAAS,EAAK,EAEtDZ,OAAAA,EAAU,IAAM,CACd,IAAIyiB,EAAeA,IAAM,CACjB,KAAA,CAAEZ,YAAAA,EAAaD,WAAAA,CAAAA,EAAeP,EAAYphB,QAC1CmhB,EAAQ1H,KAAKgJ,MAAMd,EAAaC,CAAW,EACjDN,EAAgBH,CAAK,CAAA,EAEvB,OAAIC,EAAYphB,SACFA,EAAAA,QAAQoiB,iBAAiB,SAAUI,EAAc,CAC3DE,QAAS,EAAA,CACV,EAEI,IAAM,CACPtB,EAAYphB,SACFA,EAAAA,QAAQqiB,oBAAoB,SAAUG,CAAY,CAChE,CAEJ,EAAG,CAAE,CAAA,EAELziB,EAAU,IAAM,CACVyQ,IAAAA,EAAQC,WAAW,IAAM,UAC3B2Q,GAAAA,EAAAA,EAAYphB,UAAZohB,YAAAA,EAAqBpQ,QAArBoQ,MAAAA,EAAAA,KAAAA,IACC,GAAG,EACC,MAAA,IAAMuB,aAAanS,CAAK,CACjC,EAAG,CAAE,CAAA,EAGH9L,EAAA,MAAA,CAAKD,MAAM,wBAAuBb,UAChCH,EAAA,MAAA,CACEmB,IAAKwc,EACLpb,SAAS,IACT,uBAAqB,KACrBvB,MAAM,WACNd,QAAgBV,GAAA,EAEZA,EAAE0J,OAAOZ,UAAU6W,SAAS,eAAe,GAC3C3f,EAAE0J,OAAOZ,UAAU6W,SAAS,OAAO,GACnC3f,EAAE0J,OAAOZ,UAAU6W,SAAS,YAAY,IAEhCxe,GAEZ,EAAER,SAEDgb,GAAAA,YAAAA,EAAkB5Z,IAAI,CAACia,EAAO/Y,IAAM,CAC7B,KAAA,CAAE2c,SAAAA,CAAa5D,EAAAA,EACf6D,EAAkBD,EACpBE,GAAwBF,CAAQ,EAChC,KACJ,OACEne,EAAA,MAAA,CACED,MAAM,gBACNiJ,MAAO,CACL,kBAAoB,OAAMoV,GAAAA,YAAAA,EAAiBE,KAAK,IAAK,IACrD,wBAA0B,QAAOF,GAAAA,YAAAA,EAAiBE,KAChD,IACA,OACJ,EACAre,SAAS,IAETC,IAAKsB,IAAMmb,EAAeE,EAAoB,KAC9C5d,QAAgBV,GAAA,CACVA,EAAE0J,SAAW1J,EAAEggB,eACjBf,EAAgB,CAACD,CAAY,CAEjC,EAAEre,UAED,CAAC,CAACqb,EAAMiE,aACPxe,EAAA,SAAA,CACEhB,KAAK,SACLe,MAAM,YACNvE,OAAQ,CAAC+hB,EACTte,QAASA,IAAM,CACG4e,EAAA,CACdve,IAAKib,EAAMiE,YACX9V,KAAAA,CAAAA,CACD,CACH,EAAExJ,UAEFH,EAAA,OAAA,CAAMgB,MAAM,YAAWb,SAAC,KAAA,CAAS,EACjCH,EAAA,OAAA,CAAMgB,MAAM,iBAAiB2I,KAAAA,EAAYyT,IAAI,OAAMjd,SAChDqb,EAAMiE,WAAAA,CACH,CAAC,CAAA,CACD,EAEVzf,EAAC0f,GAAK,CAAClE,MAAAA,EAAcmE,aAAY,GAAChW,KAAAA,CAAAA,CAAa,CAAC,CAAA,EA1B3C6R,EAAMzd,EA2BR,CAAA,EAER,CACE,EACLkD,EAAA,MAAA,CAAKD,MAAM,wBAAwBvE,OAAQ,CAAC+hB,EAAare,UACvDH,EAAA,OAAA,CAAAG,SACEH,EAAA,SAAA,CACEC,KAAK,SACLe,MAAM,kBACNd,QAASA,IAAMS,EAAQ,EAAER,SAEzBH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,CACJ,CAAA,GACL8a,GAAAA,YAAAA,EAAkBjd,QAAS,EAC1B8B,EAAA,OAAA,CAAMgB,MAAM,gBAAeb,SACxBgb,GAAAA,YAAAA,EAAkB5Z,IAAI,CAACia,EAAO/Y,IAC7BzC,EAAA,SAAA,CAEEC,KAAK,SACLyD,SAAUjB,IAAMmb,EAChB5c,MAAQ,gBAAeyB,IAAMmb,EAAe,SAAW,EAAG,GAC1D1d,QAAgBV,GAAA,CACdA,EAAE6O,eAAe,EACjB7O,EAAEogB,gBAAgB,EAClBjC,EAAYphB,QAAQ8hB,SAAS,CAC3BC,KAAMX,EAAYphB,QAAQ4hB,YAAc1b,EACxC8b,SAAU,QAAA,CACX,EACDZ,EAAYphB,QAAQgR,OACtB,EAAEpN,SAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,CAAA,EAdxBkb,EAAMzd,EAeL,EACT,CACG,EAENiC,EAAO,OAAA,CAAA,CAAA,EAETiB,EAAA,OAAA,CAAAd,SAAA,CACEH,EAACoD,GAAI,CACHmU,SAAS,OACTlU,MAAM,MACNwc,SAAS,SACTC,mBAAmB,UACnB3V,IAAK,EACL4V,cAAc,aACdzc,WACEtD,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,kBAAiBb,SAC3CH,EAACI,EAAI,CAACC,KAAK,OAAOE,IAAI,MAAA,CAAQ,CAAA,CACxB,EACTJ,SAEDc,EAAC+e,GAAQ,CACPhc,OACEmX,EAAAA,EAAiByC,CAAY,IAA7BzC,YAAAA,EAAgC8E,cAChC9E,EAAAA,EAAiByC,CAAY,IAA7BzC,YAAAA,EAAgCtY,KAElC7B,MAAM,kBACNkI,OAAO,SACP3F,MAAM,oCAAmCpD,SAAA,CAEzCH,EAACI,EAAI,CAACC,KAAK,QAAA,CAAU,EACrBL,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACxB,CAAA,CACN,EAAE,IACRc,EAACgD,EAAI,CACHC,GAAK,GAAE7G,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAKogB,CAAS,GAClD1Y,OAAOmb,WAAW,iCAAiC,EAAEC,QAChD,UAASvC,EAAe,CAAE,GAC3B,EACL,GACD5c,MAAM,yCAQNb,UAEAH,EAAA,OAAA,CAAMgB,MAAM,eAAcb,SAAC,WAAe,CAAA,EAC5C,GAAA,CAAA,CAAM,CAAC,CAAA,CACH,CAAC,CACJ,CAAA,GACJgb,GAAAA,YAAAA,EAAkBjd,QAAS,GAC1B+C,EAAA,MAAA,CAAKD,MAAM,oBAAoBvE,OAAQ,CAAC+hB,EAAare,UACnDH,EAAA,SAAA,CACEC,KAAK,SACLe,MAAM,kBACNvE,OAAQmhB,IAAiB,EACzB1d,QAAgBV,GAAA,CACdA,EAAE6O,eAAe,EACjB7O,EAAEogB,gBAAgB,EAClBjC,EAAYphB,QAAQgR,QACpBoQ,EAAYphB,QAAQ8hB,SAAS,CAC3BC,KAAMX,EAAYphB,QAAQ4hB,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAEpe,SAEFH,EAACI,EAAI,CAACC,KAAK,YAAA,CAAc,CAAA,CACnB,EACRL,EAAA,SAAA,CACEC,KAAK,SACLe,MAAM,kBACNvE,OAAQmhB,IAAiBzC,EAAiBjd,OAAS,EACnDgC,QAAgBV,GAAA,CACdA,EAAE6O,eAAe,EACjB7O,EAAEogB,gBAAgB,EAClBjC,EAAYphB,QAAQgR,QACpBoQ,EAAYphB,QAAQ8hB,SAAS,CAC3BC,KAAMX,EAAYphB,QAAQ4hB,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAEpe,SAEFH,EAACI,EAAI,CAACC,KAAK,aAAA,CAAe,CAAA,CACpB,CAAC,CACN,CAAA,EAEN,CAAC,CAACwe,GACD7e,EAACe,GAAK,CACJC,MAAM,QACNd,QAAgBV,GAAA,CACVA,EAAE0J,SAAW1J,EAAEggB,gBACjBV,EAAgB,EAAK,EACrBnB,EAAYphB,QAAQgR,QAExB,EAAEpN,SAEFH,EAAC8c,GAAa,CACZvc,IAAKse,EAAate,KAAOse,EACzBlV,KAAMkV,GAAAA,YAAAA,EAAclV,KACpBhJ,QAASA,IAAMme,EAAgB,EAAK,CAAA,CACrC,CAAA,CACI,CACR,CAAA,CACE,CAET,CCvSA,MAAesB,GAAA,GAAA,IAAA,IAAA,+BAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,4BAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,4BAAA,YAAA,GAAA,EAAA,KCEf,SAASC,GAAU,CAAEpgB,SAAAA,CAAS,EAAG,CAC/B,GAAI,OAAOA,GAAa,SAAiBA,OAAAA,EACzC,KAAM,CAACgT,EAAMqN,CAAO,EAAItjB,EAAS,EAAE,EACnCZ,OAAAA,EAAU,IAAM,CACdmkB,QAAQ9G,QAAQxZ,CAAQ,EAAEhB,KAAKqhB,CAAO,CAAA,EACrC,CAACrgB,CAAQ,CAAC,EACNgT,CACT,CCcA,MAAMuN,GAAkB,EAElBC,GAAQ,CACZ,YACA,WACA,gBACA,OACA,SACA,WAIA,UACA,YACA,YAAY,EAERC,GAAY,CAChB1M,UAAW,mBACXvW,cAAe,gBACfC,KAAM,OACNijB,OAAQ,6BACRnH,OAAQ,SACR,mBAAoB,UACpBoH,UAAW,YACXC,WAAY,aACZC,QAAS,UACTC,SAAU,WACVC,SAAU,UACZ,EACMC,GAAc,CAClBvjB,KAAM,CACJ,CACEuV,KAAM,UACN3K,KAAM,IAAA,CACP,EAEHqY,OAAQ,CACN,CACE1N,KAAM,aACN3K,KAAM,QACNvI,KAAM,UAAA,EAER,CACEkT,KAAM,WACN3K,KAAM,WACNvI,KAAM,OACNmhB,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHJ,SAAU,CACR,CACE9N,KAAM,WACN3K,KAAM,WACNvI,KAAM,OACNmhB,YAAa,iCACbC,YAAa,EAAA,CACd,EAEH3H,OAAQ,CACN,CACEvG,KAAM,cACN3K,KAAM,QACNvI,KAAM,MAAA,CACP,EAEH,mBAAoB,CAClB,CACEkT,KAAM,IACN3K,KAAM,KACNvI,KAAM,OACNmhB,YAAa,yBAAA,CACd,EAEHJ,QAAS,CACP,CACE7N,KAAM,IACN3K,KAAM,UACNvI,KAAM,OACNmhB,YAAa,yCACbE,QAAS,OAAA,EAEX,CACEnO,KAAM,WACN3K,KAAM,WACNvI,KAAM,OACNmhB,YAAa,iCACbC,YAAa,EAAA,CACd,CAEL,EACaE,GAAiB,CAC5BrN,UAAW,CACTnW,GAAI,OACJwF,MAAOA,CAACpB,EAAGub,IAAWA,IAAU,EAAI,OAAS,YAC7C3F,KAAM,IACN1X,KAAM,MACR,EACA6gB,SAAU,CACRnjB,GAAI,WACJwF,MAAO,WACPwU,KAAM,YACN1X,KAAM,IACR,EACA1C,cAAe,CACbI,GAAI,gBACJwF,MAAO,gBACPwU,KAAM,iBACN1X,KAAM,cACR,EACAzC,KAAM,CACJG,GAAI,OACJwF,MAAOie,GACL,MAAO,CAAEzjB,GAAAA,CAAAA,KACM,MAAMT,IAAMF,MAAMM,GAAGmb,MAAMxa,MAAMN,CAAE,GACpCwF,MAEd,CACEke,SAAUA,CAAC,CAAC,CAAE1jB,GAAAA,CAAI,CAAA,IAAMA,CAAAA,CAE5B,EACAga,KAAMA,CAAC,CAAEha,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3BsC,KAAM,MACR,EACAwgB,OAAQ,CACN9iB,GAAI,SACJwF,MAAOA,CAAC,CAAE5B,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,YACzC+f,SAAUA,CAAC,CAAErkB,SAAAA,CAAAA,IAAeA,GAAYC,EAAAA,EAAMD,SAC9C0a,KAAMA,CAAC,CAAEpW,MAAAA,EAAOtE,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,KAAIsE,EAAQ,KAAO,EAAG,GAClEtB,KAAMA,CAAC,CAAEsB,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,OAC1C,EACAsf,SAAU,CACRljB,GAAI,WACJwF,MAAO,WACPme,SAAUA,CAAC,CAAErkB,SAAAA,CAAAA,IAAeA,GAAYC,EAAAA,EAAMD,SAC9C0a,KAAMA,CAAC,CAAE1a,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,YACrCgD,KAAM,OACR,EACAqZ,OAAQ,CACN3b,GAAI,SACJwF,MAAOA,CAAC,CAAEoe,MAAAA,CAAAA,IAAYA,EACtB5J,KAAMA,CAAC,CAAE4J,MAAAA,CAAAA,IAAa,aAAYA,CAAM,GACxCthB,KAAM,QACR,EACA,mBAAoB,CAClBtC,GAAI,mBACJwF,MAAOie,GACL,MAAO,CAAEzjB,GAAAA,CAAAA,IAAS,CACVyE,MAAAA,EAAU,MAAMlF,IAAMF,MAAMM,GAAG+D,SAASpD,MAAMN,CAAE,EACtD,OAAOyE,EAAQ8N,UAAY9N,EAAQgN,MAAQhN,EAAQoN,WAAAA,EAErD,CACE6R,SAAUA,CAAC,CAAC,CAAE1jB,GAAAA,CAAI,CAAA,IAAMA,CAAAA,CAE5B,EACAga,KAAMA,CAAC,CAAEha,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3BsC,KAAM,MACR,EACAygB,UAAW,CACT/iB,GAAI,YACJwF,MAAO,YACPwU,KAAM,KACN1X,KAAM,UACR,EACA0gB,WAAY,CACVhjB,GAAI,aACJwF,MAAO,aACPwU,KAAM,KACN1X,KAAM,OACR,EACA2gB,QAAS,CACPjjB,GAAI,UACJwF,MAAOA,CAAC,CAAEyd,QAAAA,CAAAA,IAAcA,EACxBU,SAAUA,CAAC,CAAErkB,SAAAA,CAAAA,IAAeA,GAAYC,EAAAA,EAAMD,SAC9C0a,KAAMA,CAAC,CAAEiJ,QAAAA,EAAS3jB,SAAAA,CAAAA,IACf,GAAEA,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAK2jB,EAAQY,MAAM,KAAK,EAAErC,KAAK,GAAG,CAAE,GACxElf,KAAM,SACR,CACF,EAEA,SAASwhB,GAAkB,CAAElhB,QAAAA,CAAQ,EAAG,CAChCF,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAEH,MAAAA,GAAUE,EAAI,EAChB,CAAEwkB,UAAAA,CAAcrhB,EAAAA,EAEhB,CAACoY,EAAOR,CAAQ,EAAInb,EAAS,CAAE,CAAA,EAC/B,CAAC6kB,EAAkBC,CAAmB,EAAI9kB,EAAS,CAAE,CAAA,EACrD,CAAC+kB,EAAUC,CAAW,EAAIhlB,EAAS,EAAK,EACxC,CAACilB,EAAkBC,CAAmB,EAAIllB,EAAS,EAAK,EAE9DZ,OAAAA,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAMuc,EAAQ,MAAMzb,EAAMM,GAAGmb,MAAMjb,KAAK,EACxCya,EAASQ,CAAK,CAAA,MACJ,CAAA,CACVjc,MACF,SAAA,CACC,GAAA,CAEU,MAAAylB,EAAAjlB,EAAA,GAAA,aAAA,KAAA,EACPklB,EAAA,CAAA,EACF,EAAA,CACA,MACG,MAAAtkB,EACK,KAAAwe,CAAA,EAAExe,MAAAA,EAAAA,OAAOwe,GAAAA,IAAAA,GAAAA,YAAAA,EAAAA,UAAAA,EAAK,MAChBA,EAAAA,KAAAA,KAA6B,OAAA,IAC5B+F,EAAaD,CAAA,CAAA,MACX,CAAA,CACTN,IAAwB,EAAA,IAExBplB,EAAAA,MAAc4C,CAChB,GAAA,+BACF,MAAG,QACL,SAAK,KAEL,UACE,CAAA,CAAAmB,GAAAX,EAAA,SAAA,CAAQ,KAAA,SAAqC,MAAA,cAAiB,QAAAW,WAC1DX,EAACW,EAAAA,CACY,KAAA,GAAA,CAAe,CAAA,CAAA,EAAuBA,EAAAA,SAAAA,CAAQR,SACzDH,EAAK,KAAA,CAACK,SAAK,CAAAL,EAAAI,EAAA,CAAK,KAAA,UAGpBJ,CAAAA,EAAAA,aAAA,IAAAA,EAAA,MAAA,CAAAG,OACEA,SACEH,GAAW,QAAA,GAAa,cAAW,WAE1B,EAAA,SACK,MAAA,CAAA,CAAA,CACD,CAAA,CACM,CACjB,EAAAiB,EAAA,OAAA,CAAA,SACD,CAAAA,EAAA,IAAA,CAED,SAAM,CAAA,iDAAAjB,EAAA,MAAA,CACJ,MAAA,sBAENiB,SAAA,CAAA,CAAAd,MACEc,eAAA,MAAG,kBAEU,OAAAmf,EAAA,GAGLpiB,MAAO,eACP4O,MAAO,eACP4V,OAAQpC,EAAAA,EAEV,CACEpiB,MAAO,eACP4O,MAAO,eACP4V,OAAQlC,EAAAA,CAEV,EAAA,IAAA,CAAA,CACEtiB,MAAAA,EACA4O,MAAAA,EACA4V,OAAAA,CAAQC,IAEVlhB,EAAK,QAAA,CAAEvD,SAAAA,CAAAA,EAAAA,QAAAA,CAAO4O,KAAAA,QAAO4V,KAAAA,sBAAO,MAAAxkB,EAC5BmC,QACEH,EAAA,SAAA,oBAAAhC,GAAAA,IAAA,gBAAA,CAAAyC,EAAA,SAAA,kBACER,SAAKT,GAAA,CACAjC,EAAA,SAAA,kBAAAiC,EAAA,OAAA,KACLxB,CAAAA,CACAqL,EAAAA,IAAAA,SAKAI,MACSlC,IAAAA,GACT,MAAA,KACD,OACDvH,IAAA,CAAA,EAAUwiB,IAAAA,EAAAA,OAAAA,CAAQjiB,SAAIqM,CAAA,CAAA,CAAGtC,CAAM,CAAA,CAAA,CAAY,CAAA,CAAA,CAC3C,CAAA,EAAAwX,EAAOlV,OAAAA,EAAAA,EAAAA,KAAAA,CAAAA,MAAa,iBAAA,SAEvBkV,EAAA,OAAA,OAAA,EAAA,IAAA,CAAAY,EAAAjgB,IAAA,CACG,MAAA8J,EAAA9J,EAAA,OAAA,OAAAigB,CAAA,EA6BPZ,CACW,KAAA7hB,CAAgBE,EAAAA,EAEtB,GAAA,CAAAohB,GAAuBzV,CAAAA,EACjB,OAAA,KAAE7L,GAAAA,CAASyiB,KAAAA,EACb,MAAAnf,EAA8B,SAAAme,CAClC,EAAIH,GAAAthB,CAAA,EAAEI,OAAAA,OAAAA,GAAAA,aAAMkD,EAAAA,EAAAA,EAAAA,CAAAA,GAAoBge,UAAmB,aAC/CG,IAA6BgB,EAAAjgB,CAAA,GAEjC,OAAApC,GAAA,aACIA,EAAAA,IAAoBoC,CAAY,GAEpCxB,EAAA,KAAA,CACI,cAA4B,CACvBZ,KAAAA,CAAgB,CACzB,EAAAY,EAAA,OAAA,CACA,sBACEd,SACEH,CAAAA,EAAKugB,GAAA,CAAClgB,SAAAA,CAAAA,CACNY,EAAAA,GAAAA,EAAAK,EAAA,CAAY,SAAA,CAAA,IAAAtB,EAAA,QAAA,CAAeG,MACzBH,mBAAYuD,SAAAA,CAAAA,CAAiB,CAC5Bme,CACC,CAAA,CAAAvhB,CAEE,CAAA,EAAAc,EAAa,OAAA,CAAA,MAAoBygB,mBAAAA,SAAiB,CAAA1hB,EAAA,SAAA,CAErD,KAAA,SAEHiB,MAAA,cAAY,SAAAwB,IAAA,EAAkBtC,QAC5BH,IAAA,CACO,MAAA2iB,EAAA,MAAA,KAAAplB,EAAA,SAAA,EACC,GAAAkF,EAAA,EAAA,OACIA,EAAMlF,EAAA,UAAAkF,EAAA,CAAA,IACDA,EAAA,CAAA,EAAAigB,EACbC,EAAqBlG,CAAAA,EAAAA,EACrBlf,EAAW,UAAAolB,CACT,CACalgB,EACbkgB,SAAAA,EAAAA,EAAkBC,CAClBrlB,KAAAA,WACF,IAAA,SAAA,CACF,CAAA,CAAE4C,EAAAA,EAAAA,SAEG,CAAA,KAAM,SAAA,MAAe,cAAS,SAAEsC,IAAAqf,EAAA,OAAA,EAEvC9hB,QAAA,IAAA,CACO,MAAA2iB,EAAA,MAAA,KAAAplB,EAAA,SAAA,EACC,GAAAkF,EAAAlF,EAAA,UAAA,OAAA,EAAA,CACNmG,MAAUjB,EAAMqf,EAAAA,UAAmBrf,EAAA,CAAA,IACpBA,EAAA,CAAA,EAAAigB,EACbC,EAAqBlG,CAAAA,EAAAA,EACrBlf,EAAQA,UAAiBW,CACvB,CACauE,EACbkgB,SAAAA,EAAAA,EAAkBC,CAClBrlB,KAAAA,aACF,IAAA,WAAA,CACF,CAAA,CAAE4C,EAAAA,EAAAA,SAEG,CAAA,KAAM,SAAA,MAAiB,cAAW,QAAE,IAAA,CAE3CH,EAAA,CACO,SAAA0iB,EACC,cAAAjgB,CAAA,EAEQ,EACVigB,SAAAA,EAAAA,EAAAA,CAAAA,KACejgB,SACjB,IAAC,MAAA,CACH,CAAA,CAAEtC,CAAAA,CAEG,CAAA,CAAA,CAAM,EAAAoM,CAAA,CAAa,CAAA,CAAQ,CAAA,EAAAtL,EACzB,MAAA,CAAA,MAUJ,yBAAA,SACL,CAAAjB,EAAA,IAAA,CAEP,SAAA,mDAAA,CAGHiB,EAAAA,EAAA,IAAA,CAAW,SAAA,CAAA,wBAAAjB,EAAA,KAAA,EAAA,EAAA,aAAA,IAAAA,EAAA,IAAA,CAAwBG,SAC9B,QAAAX,GAAA,CACHyB,EAAAA,eAAA,EAAAd,EAAG,UAAA,CAAA,CAKM,KAAA,WAAA,GAEDkO,KAAe,eACjB9Q,CAAAA,CACE,EACQ,SAER,oCAAA,CAAA,EAAA,IACQ,QAAA,CAAA,CAAA,CAAA,CACP,CAEL,EAAAyC,EAAA,IAAA,CAAA,MACD,gBAED,SAAK8hB,EAEP,QAAApB,IAAA,OAAAA,EAAA,YAAA,CAAA,EAAIzf,EAAA,IAAA,CAGRjB,MAAA,CAAS,QAAA,OACN8hB,eAAAA,gBAGH7gB,WAAA,QACS,EAAA,SACI,CAAAjB,EAAA,SAAA,CACT6iB,KAAgB,SAChBC,MAAY,QACd,QAAA,IAAAV,EAAA,EAAA,EAAEjiB,SAEFH,eAAA,CAAA,EACOiB,EAAA,SAAA,CACLD,KAAM,SACNd,SAAekiB,EAAAA,QAAAA,GAA0BjiB,QAC1C,IAAA+hB,EAAA,EAAA,EAGDjhB,SAAA,CAAAjB,EAAAI,EAAA,CACO,KAAA,MAAA,CACLsD,EAAAA,IAAAA,SAA8Bgd,CAC9BxgB,SAAegiB,cAAgB,CAAE/hB,CAAAA,CAE5B,CAAA,CAAA,CAAM,CAAA,CAAA,CAAU,CAAA,EAAA8hB,GAAMjiB,EAAAe,GAAA,CAAA,MAAmB,QAAA,QACvCvB,GAAA,CACPA,EAAA,SAAAA,EAAA,eAGJQ,EAAAA,EAAM,GAGER,SAAaA,EAAAA,GAAiB,CAChC0iB,SAAAA,EAAiB,SACnB,cAAAD,EAAA,cACF,MAAApJ,EAAE1Y,iBAAAA,EAGAuiB,SAAUT,CAASS,UAEnB7J,KAAAA,CAAAA,IACAkJ,KACW,OAAE7I,EAAAA,UAAAA,EAAAA,aAAAA,EAAAA,EAAmB3b,EAAA,UAAA,KAAA2b,CAAA,CAE9B,EACS4I,QAAAA,IAAAA,EAAmBiB,EAAAA,CAAiB7J,CAAAA,CAE3C3b,CAAOukB,EAAAA,GAAAA,KAAqB,CAC9B,MAAA,QACF,QAAAtiB,GAAA,CACAmB,EAAAA,SAAeuhB,EAAAA,eAChBE,EAAA,EAAA,CAKK,EACNliB,SAAgBF,EAAAgjB,GAAA,CACVxjB,UAAAA,EACF4iB,QAAAA,IAAAA,EAAyB,EAAA,CAAA,CAC3B,CAAA,CACF,CAAA,CAAA,CAAEjiB,CAEW,CACX2hB,SACAnhB,GAAeyhB,CAAyB,MAAAvJ,EACzC,iBAAAkJ,EAEJ,SAAA3T,EAGP,SAAA1K,EAEA,SAAAgf,EACE7J,cAAAA,EACAkJ,QAAAA,CAAAA,EACA3T,SACA1K,MAAAA,EAAAA,CAAAA,CAAAA,EACAgf,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,GAAAA,YAAAA,EAAAA,OAAAA,IAAAA,EACAK,EAAAA,IACApiB,OAAAA,EAAAA,IAAAA,CACC,GAAAiN,GAAAqV,GAAA9B,GAAA8B,CAAA,EAAA,CACOvkB,MAAAA,IAAwB,QAC1BkP,GAAAA,CAAa8U,EAAAA,QAAAA,CAAAA,CACb,KAAAla,EAEA0a,KAAAA,CACN5mB,IAAU,CACJsR,MAAYqV,EAAAA,EAAAA,cAA2BA,UAAAA,CAAAA,IAAc,EAEjDE,GAAe5mB,EAAAA,CAAAA,IACT0mB,IAAAA,WAAwBza,EAAAA,QAAAA,EAAAA,CAAAA,IAAAA,KAAiB4a,EAAA,MAAAV,EAAAla,CAAA,EAGjD,CAAA,CACE4a,CAAiD,EAAA,CAAAxV,EAC5CqV,CAAA,CAAA,EACCjlB,EAAAA,MAAAA,CACR,GAAA,yBACF,MAAA,QAAA,SACD,CAAA,CAAA,CAAA2C,GAAAX,EAAA,SAAA,CACH,KAAA,SACE4N,MAAUqV,cAEd,QACEtiB,EAAQ,SAAAX,EAAAI,EAAA,CAA+B,KAAA,GAAA,EAEnC,CAAA,EAAaJ,EAAA,SAAA,CAASgB,SAAMC,EAAA,KAAA,CAAuBN,SAAAA,CAAAA,EAAAA,OAAAA,MAAAA,WAAAA,CAAAA,CAAQR,CACpD,CAAA,EAACE,EAAK,OAAA,CAAG,SAAE,KAGpBL,SAAAiB,EAAA,OAAA,CAAAd,IAAAA,EACEA,SAAKyN,GAAW,CAA4BpO,EAAA,eAAA,EAE9CQ,MAAA6G,EAAA,IAAA,SAAArH,EAAA,MAAA,EAAe0Z,EAAA,CAAA,EAAI/Y,EAAAA,QACjB,CAAAnC,EAAAuO,IAAA,CACO2W,EAAAA,CAAAA,EAAAA,GAAAA,YAAAA,EAAAA,WACY,aAEEhK,EAAA3M,CAAA,EAAA2M,EAAA3M,CAAA,EAAA,QAAA,eAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EACjB2M,EAAa3M,CAAA,EAAa/M,EAAAA,CAAE0J,EAAM,QAAA,YAAA,EAAA,EAElCrC,CAAK8E,EACIY,EAAG,OAGDA,EAAAA,CAIP2M,OAAAA,EACF,KAAAtL,EAAA,OAAA,KAAA,CACD,EACOlP,EAAAA,OAAAA,QACR2kB,EAAYpjB,IAAAA,EAAMU,GAAA,MAAAA,IACT,EACPuY,SAAAA,CAAAA,EAAAA,IAAAA,CACAoK,mBAA0B,CAC3B,SAAA,CAAAtjB,EAAA,OAAA,UAEc,UACfqjB,CAAAA,EAAAA,EAAAA,SAAmB,CACT,SAAA,GACZ,SAAA3f,EAAEvD,SAEFX,GAAA,CAAAW,EACEX,EAAA,OAAA,KAAA,CAAAW,EACEA,aAAMyN,EAAA8U,EAAA,KAAA,OACNzhB,KAAAA,OACEsiB,SAAQ,CAAAvjB,EAAA,SAAA,EAAA,EAAA2gB,GAAA,IAAA1gB,GAAAD,EAAA,SAAA,CACR0D,MAAAA,WACiBkd,GAAA3gB,CAAA,CACAT,CAAAA,CAAAA,CAAAA,CAAc,CAC/B,CAAA,CAAA,CACAgkB,CAAyCne,CAAAA,GAAAA,GAAAA,EAAAA,GACpC4d,CAAA,IADoC5d,YAAAA,EACpC,MADoCA,YAAAA,EAAAA,KAAAA,EACpC,CAAA,CAAMlF,KAAAA,EAIT,KAAAqI,EAAoBrI,KAAAA,EAAiB,YAAAihB,EACrC,QAAAE,EACK,YAAAD,CACJ,IAGJlO,IAAAA,OAAM3K,EAAAA,IAAAA,CAAMvI,SAAAA,EAAAA,QAAAA,CAAMmhB,SAAAA,CAAAA,EAAAA,OAAAA,CAAaE,SAAAA,MAAAA,CAASD,EAAAA,EAAAA,SAAAA,CAAkB,KAAA,iBAEzD,SAAA3d,EACEvD,WACE,IAAAvC,GAAAoC,EAAA,SAAA,CAAAG,MACEH,EAAA,GAAM,SAAApC,EAAA,KAAA,CACNoC,CAAAA,CAAA,CAAA,CACEwI,CAAK,CAAA,CACM6Y,CACX3d,EAGE1D,MAAepC,CAAKG,mBAAUwF,CAAAA,SAC/B,CAAAvD,EAAA,OAAA,CAAC,SACKmT,CAAA,CACJ,EAAA,IAAAnT,EAAA,QAAA,CACN,KAAAC,EAEP,KAAAuI,EAEA,YAAA4Y,EACEjhB,aACE,QAAA,CAAAkhB,EAAAlhB,SAAAA,EACEA,KAAOgT,IAAAA,UAAAA,6BAAAA,KAAW,YAClB,MACElT,eAAAA,MACAuI,WAAAA,GACA4Y,QAAAA,CAAAA,CACAmC,EAAAA,IAAmB,WAAWlC,EAAAA,OAAAA,GAAAA,EAAAA,WAAAA,CAC9B3d,GAAAA,6BACA9F,SACkBmkB,EAAA,IAAA0B,GAEZzjB,EAAA,SAAA,CAEM,MAAAyjB,EAAA,IAAA,CACG,CAAA,CAAA,CAAA,CACfC,CAAY,CACZpC,CAAAA,CAAiB,GAIfrgB,EAAa,SAAA,CAAA,SACV8gB,CAAAA,EAAAA,SAAAA,CACC,KAAQ/jB,SAAWwK,MACpB,QAAA,SAAA9E,EAEJ,SACEkK,EAAA,OAAA,KAAA,CACN,EAAAA,GAAA5N,EAAA,SAAA,CAITiB,KAAA,SAAAd,MAAAA,eACUF,QAAK,IAAA,CAAe1C,EAAA,UAAA,OAAAwlB,EAAA,CAAA,EAAQrf,GAAAA,MAAAA,GAAmBvD,EAE/C,SAENH,QAAA,CAAA,CACEC,CAAK,CAAA,CAAA,CACC,CAAA,CAEJ1C,CAAOukB,CAAAA,CACPnhB,CAAU,CAAA,CACZ,SAAAqiB,GACD,CAAA,UAAAlB,EAGF,QAAAnhB,CACM,EAAA,OACL,MACDgjB,EAAAtU,GAAA,IACJ,CAAAyS,GAIT,CAASkB,EAAa,OAAA,OAAA,EAAA,OAAElB,GAAWnhB,GAAAA,8BAAAA,KAAAA,UAAAA,EAAAA,OAAAA,OAAAA,CAAAA,CAAAA,EAAW,CAAAmhB,CAAA,CAAA,EACtC6B,CAAAA,GAA6B,EAAAzmB,EAAA,EAAA,EAC7B,CAAC4kB,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAkB8B,EAAAvU,GAAA,IAAA,CACvB,GAAI,CAACyS,EAAyC,OAAA+B,EAAA,SAAA,OAKhD,GAAM,CACN,MAAOC,EAAAA,KAA+B,MAAAC,GAAAA,kCAAsBC,CAAA,CAAA,EACtDJ,GAAAA,CAAAA,MAAAA,QAAAA,CAAAA,EACA,MAAoB,IAAA,MAAA,cAAA,EACtBC,OAAAA,EAAiB,SAAS,EACnBI,CACT,MAAA,CACI,GAAA,CACF,MAAeC,EAAAA,KACbH,MAAAA,CAAAA,EAGE,GAAOrH,CAAAA,MAAAA,QAAcuH,CAAA,EAAS,MAAA,UAAwB,cAAA,EAC1DJ,OAAAA,EAA0B,SAAA,EACnBI,OACK,CAGR,OAAAJ,EAAA,OAAA,EACII,IACF,CAA8B,CAClCJ,EAAAA,CAAAA,CAAAA,CAAAA,EACOI,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,SACA9d,MAAK,CACZ0d,GAAAA,0BACO,MAAA,QACT,SAAA,CAAA,CAAA,CAAAljB,GAAAX,EAAA,SAAA,CACF,KAAA,SACEgkB,MAAAA,cACEG,QAAAA,EAEN,SACEnkB,EAAAI,EAAA,CAAQ,KAAA,GAAA,CAAgC,CAAA,cACnCO,CACOV,SAAKgB,EAAA,KAAA,CAAe,SAAA,CAAA,iBAAAjB,EAAA,QAAA,CAAuBW,MAAAA,mBAAQR,oBACpD,CAAM,CAAA,CAAA,CAAK,CAAA,CACV,EAEVH,EAAA,OAAA,CAAAG,SACEc,KAAA,SAAA,CAAAA,EACgBjB,UAAAA,CAAA,SAAa,CAAAiB,EAAA,KAAA,CAAkBd,SAAC,CAAAH,EAAAI,EAAA,CAAiB,KAAA,oBAC7D,KAAA,IAENa,MAAA,eAAA,CAAe,EAAA,IAAAjB,EAAA,OAAA,CAAIG,SACjBc,QAAA,CAAAd,CAAAA,CACE,CAAAA,EAAAA,EAAAA,IACEH,CAAK,SAAMA,EAAA,QAAA,CAAoBM,KAAK,OAAIU,KAAM,SAAiB,YAC/D,uBAAAb,MAAM,QAAa,QAAAX,GAAA,CAErBQ,EAAAR,EAAA,OAAA,KAAA,CAAAW,CACE,CAAA,CACO,CAAA,EACLqI,CAAK,CAAAob,GAAA,MAAA,QAAAA,CAAA,GAAA3iB,EAAAK,EAAA,CAAA,SACO,CAAAL,EAAA,IAAA,CACZD,SAAM,CAAAhB,EAAA,IAAA,UACU4jB,EAAA,MACdQ,CAAqB5kB,EAAAA,YAAAA,EAAc,OAAA,EAAA,IAAA,GAAA,IAAAyB,EAAA,QAAA,CACrC,MAAA,gBACD,SAAA,CAAA,IAAA+iB,EAAA,OAAA,cAAA,CAAA,CAED,CAACJ,CAEC,CAAAzjB,EAAAA,EAAAA,KACEc,CAAAd,MAAAA,uBACE,WAA4BjC,IAAAA,GAAAA,SAAAA,OAAAA,EAAAA,KAAAA,CAAW,SAAA,CAAA8B,EACd9B,OAAAA,CACZ,MAAA,SACT8lB,EAAAA,KAAAA,GAGN,OAAA,KAAAK,CAAA,EAAA,MAAA9X,GAAA8X,EAAA9X,CAAA,IAAAmW,EAAAnW,CAAA,CAAA,CAAU,EAAA,EAAA,CACPqX,EACCzjB,SACEH,GAAA,CAAA,EACSiB,EAAA,OAAA,CACLqjB,SAAAA,CAASxC,GAAUyC,EAAMF,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAAA,YAAAA,EAAAA,MAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAAAA,KAAAA,EAEvB3Y,KAAAA,EAEA,KAAAzL,CAIJ,IAAAyiB,EAAAla,CAAA,EAAAvH,EAAAK,EAAA,CACD,SAAA,CAAAL,EAAA,OAAA,CAGDA,MAAA,uCACG2f,CAAAA,EAAU8B,IAASziB,IAAAA,IACVA,WAAAA,EAAmBuI,CAAA,IAAO,KACvBka,IAAAA,IAAAA,EAAala,CAAA,CAAGjH,CACxB4R,CAAAA,EAAAA,GAAAA,CAAAA,CAAM3K,EAAAA,KAAAA,CAAAA,CAAMvI,CAAAA,CAAAA,CAAAA,EAAAA,CAEX,CAAAE,EAAAA,EAAAA,IAAAA,CACE,SAAY,CAAAH,EAAA,QAAA,CAAA,SAA6B,+BAMrB,CAAA,EAAAA,OACT,CAAA,CAAA,EAAAA,EAAA,QAAA,CAAA,SAEX,wDACP,CAAA,CAAA,CACI,CAAA,CAAA,CAET,CAAA,EAEJiB,IAAA,SAAAjB,EAAA,IAAA,CAAAG,MAAAA,QACE,SAAOH,EAAA,QAAA,CAA6B,SAC/B,4BACL,CAAA,CAAO,CAAA,EAEPiB,EAAQ,IAAA,CAAA,SACN,CAAAkjB,GAAAljB,EAAAK,EAAA,CAGTwiB,SAAkB,CAAA9jB,EAAA4D,GACjB5D,CAAS,aAAA,+BAAOG,WACdH,EAAA,MAAA,CAAO,MAAA,SAAiC,SAAA,wEAAA,CAG5CiB,EACGkjB,QACCljB,IAAAA,CAAAd,MAAAqkB,EACcZ,EAAA,OAAAlB,GAAA,CAAAnlB,EAAA,UAAA,KAAA8mB,GAEVI,OAAAA,MACE,EAAA,MAAAlY,GAAA8X,EAAA9X,CAAA,IAAAmW,EAAAnW,CAAA,CAAA,CAAW,CAAA,EAAQpM,GAAC,CAAAqkB,EAAA,OAAA,CAGfvN,GAAA,4BAAA,QAQL,CAE4BoN,IAAAA,EAAAA,CAAAA,GAAAA,EAAAA,UAAAA,GAAAA,CAAAA,EAEtB3Y,MAAAA,EAAegZ,EACC,OAAenY,GAGrCoY,IACIC,IAA4B,MAAA,EAAAlE,EAAA,GAE9BnjB,EAAA,UAAAqnB,EACF3N,GAAA0N,EAAA,oCAAAjE,EAAA,kCAAA,oBAAA,EACA/f,GAAA,MAAAA,GAIMgkB,EACN,SAAmB3kB,EAAA,SAAA,CAEF4kB,KAAAA,SACjB,MAAA,SACArnB,SAAmBqnB,CAAAA,EACnB3N,SACE0N,kBAIFhkB,CAAU,CACZ,CAAA,EAAA,GAAA,CAAA,CAAER,EAAAA,EAAAA,GAEF,CAAA,aACOgkB,EAAA,8BAAA,oBAAA,kBACCA,EAAA,SAAA,OAAA,YACKP,CAAAA,EACZ,UAAAA,EAED3M,GAAQ,oBAAA,cAIdjX,EACE8D,SAAAA,YAKAC,KAAAA,eACS7D,SACP3C,SAAmBqmB,CAAAA,EACnB3M,SAAUkN,EAAoB,eAAA,SAC9BxjB,CAAU,CAAA,CACZ,CAAA,CAAA,CAAER,CAAAA,CAEF,CAAA,EAAAc,EACO,UAAA,CAAA,SACC,CAAAA,EAAA,KAAA,CAAA,YACK2iB,EAAAA,CAAwBzjB,KAAAA,kBAEa,KAC1C,IACI,MAAA,eAAA,CACZ,EAAA,IAAAH,EAAA,OAAA,CAENiB,SAAA,QAAA,CAAAd,CAAAA,CACE,CAAAA,EAAAA,EAAAA,IACEH,CAAK,SAAMA,EAAA,QAAA,CAAkBM,MAAK,CAAU,MAAA,MAAiB,EAC7DH,KAAM,OAAa,MAAAwjB,EAErB3jB,SAAA,GAAAG,WACE,CACS,GAAAX,EAAA,OAAA,MAAgB,CAAAA,EAAA,OAAA,SAClB,GAAA,CACEmkB,UAAAA,UAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EACC1M,GAAA,kBAAA,OACQ,CACVA,GAAUjZ,0BAAAA,CAAO,EACrBwB,CAEA,CAAI,CACFsF,CAAAA,EAAAA,EAAAA,IAAAA,CACAmS,SAAAA,CAAAA,EAA4B,SAAA,CAAA,cAE5Bra,MAAAA,SACAqa,SAAAA,CAAAA,EACF,QAAA,IAAA,CACF,GAAA,CACD,UAAA,UAAA,UAAA0M,CAAA,EAEH1iB,GAAA,0BAAA,CAAAd,MACEc,CACOgW,GAAA,kCAAA,CACC,GAEN/W,SAAe,CAAAF,EAAAI,EAAA,CACT,KAAA,WACF0E,CAAUoS,EAAAA,IAAAA,EAAAA,OAAAA,CACVD,SAAAA,MAAoC,CAAA,CACtC,CACEra,CAAAA,EAAAA,KAAAA,iCAAc4C,UAACqX,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CACfI,KAAAA,CAA4C,KAC9ChW,EAAA,SAAA,CACF,KAAA,SAAEd,MAAAA,SAEG,SAAM,CAAAwjB,EAAW,QAAI3jB,IAAA,CAAAG,GAAM,CAAW,UAAA,MAAA,CACnC,KACE0kB,CACY,CACdlB,CAEN1iB,MAAA,CACO,MAAA,+BAAA,CACC,GAENf,SAAe,CAAAF,EAAAI,EAAA,CACT,KAAA,OACF0E,CAAAA,EAAAA,IAAAA,EAAU+f,OAAM,CAAA,SACRlB,OAAAA,CAAAA,CAAAA,CACP,CAAA,EACH,MAAY,OAAA,GAAA1iB,EAAA,QAAA,CACVrE,MAAAA,gBACA+C,SAAM,CAA+BgkB,EAAA,OAAA,aAAA,CAAA,CACvC,CAAA,CACF,CAAA,EAAA,CAAA,CAAAA,GAAA1iB,EAAA,UAAA,CAAEd,SAAAA,CAAAA,EAEFH,UAAK,CAAA,MAAM,gBAAO,SAAIA,EAAA,QAAA,CAAAG,SAAM,oBAAA,CAAW,CAAC,CAClC,EACPH,EACJ2jB,YACQ3iB,MAAM,CACV2iB,MAAAA,MAEJ,EAEF,KAAEA,GACDxjB,SACEH,GAASgB,SAAM,KAAA,UAAA8gB,EAAA,OAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAe3hB,CAAAA,CAC5B,CAAA,CAAA,CAAO,CAAA,CAAA,CAAyB,CAAC,CAAA,CAEnC,CAAA,CAAiB,CCv7B/B2kB,GAAUvnB,EAAqBwnB,GAAA,CAC7B,SAAW,CAAC3jB,EAAQ2W,EAAM/Z,EAAOgnB,CAAS,IAAKD,EAEzC,SAAS9hB,KAAK8U,CAAI,GAAK,CAAC/Z,GAChB8O,IAGhB,CAAC,EAED,SAAwBmY,IAAS,qBACzBxkB,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B2nB,EAAWC,KACXC,EAAWC,KAEjB,OACEpkB,EAAAK,EAAA,CAAAnB,SAAA,CACG,CAAC,CAACM,EAAWb,aACZI,EAACe,GAAK,CAAAZ,SACJH,EAACslB,GAAO,CACNtK,cACE,OAAOva,EAAWb,aAAgB,UAC9Ba,EAAWb,YAAYob,gBACvBjW,EAAAA,OAAOwgB,cAAPxgB,YAAAA,EAAoBiW,gBAAiB,KAE3CwK,aACEjoB,EAAAA,EAAOqC,cAAPrC,YAAAA,EAAoBioB,eACpBzgB,EAAAA,OAAOwgB,cAAPxgB,YAAAA,EAAoBygB,aACpB,KAEF3K,cACEtd,EAAAA,EAAOqC,cAAPrC,YAAAA,EAAoBsd,gBACpB9V,EAAAA,OAAOwgB,cAAPxgB,YAAAA,EAAoB8V,cACpB,KAEFla,QAAsByQ,GAAA,CACd,KAAA,CAAEqU,UAAAA,EAAWpoB,SAAAA,EAAU4C,KAAAA,CAAAA,EAASmR,GAAW,CAAA,EACjD7T,EAAOqC,YAAc,GACrBmF,OAAOwgB,YAAc,KACjBE,IACKC,EAAAA,mBACGzO,GAAA,CACR9D,KAAM,CACJwS,KAAM,gCACNC,MAAO,8BACPC,KAAM,6BAAA,EACN5lB,GAAQ,MAAM,EAChB6lB,MAAO,IACPtO,SAAU,IACVtX,QAAoB6lB,GAAA,CAClBA,EAAMC,UAAU,EAChBzoB,EAAO0oB,aAAeb,EAEpB/nB,EAAAA,EACK,IAAGA,CAAS,MAAKooB,EAAU1nB,EAAG,GAC9B,MAAK0nB,EAAU1nB,EAAG,EACzB,CACF,CAAA,CACD,EAEL,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC0C,EAAWylB,cACZlmB,EAACe,GAAK,CACJJ,QAASA,IAAM,CACbpD,EAAO2oB,aAAe,EACxB,EAAE/lB,SAEFH,EAACmH,GAAQ,CACPxG,QAASA,IAAM,CACbpD,EAAO2oB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACzlB,EAAW0lB,cACZnmB,EAACe,GAAK,CACJJ,QAASA,IAAM,CACbpD,EAAO4oB,aAAe,EACxB,EAAEhmB,SAEFH,EAACwB,GAAQ,CACPb,QAASA,IAAM,CACbpD,EAAO4oB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC1lB,EAAWiK,aACZ1K,EAACe,GAAK,CACJC,MAAM,QACNL,QAASA,IAAM,CACbpD,EAAOmN,YAAc,EACvB,EAAEvK,SAEFH,EAACmZ,GAAY,CACX3W,UAAS/B,EAAAA,EAAWiK,cAAXjK,YAAAA,EAAwB+B,UAAW/B,EAAWiK,YACvDrN,UAAUoD,EAAAA,EAAWiK,cAAXjK,YAAAA,EAAwBpD,SAClCsD,QAASA,CAAC,CAAE2Y,YAAAA,CAAY,EAAI,KAAO,CACjC/b,EAAOmN,YAAc,GACjB4O,IACF/b,EAAO4oB,aAAe,GAE1B,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC1lB,EAAW2lB,YACZpmB,EAACe,GAAK,CACJJ,QAASA,IAAM,CACbpD,EAAO6oB,WAAa,EACtB,EAAEjmB,SAEFH,EAAC6Z,GAAM,CAAClZ,QAASA,IAAOpD,EAAO6oB,WAAa,EAAA,CAAS,CAChD,CAAA,EAER,CAAC,CAAC3lB,EAAW4lB,gBACZrmB,EAACe,GAAK,CACJb,QAAgBV,GAAA,EAEZA,EAAE0J,SAAW1J,EAAEggB,eACfhgB,EAAE0J,OAAOZ,UAAU6W,SAAS,OAAO,KAEnC5hB,EAAO8oB,eAAiB,GAE5B,EAAElmB,SAEFH,EAACwd,GAAU,CACTrC,iBAAkB1a,EAAW4lB,eAAelL,iBAC5C9d,SAAUoD,EAAW4lB,eAAehpB,SACpCqgB,MAAOjd,EAAW4lB,eAAe3I,MACjCD,SAAUhd,EAAW4lB,eAAe5I,SACpC9c,QAASA,IAAM,CACbpD,EAAO8oB,eAAiB,EAC1B,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC5lB,EAAW6lB,uBACZtmB,EAACe,GAAK,CACJC,MAAM,QACNL,QAASA,IAAM,CACbpD,EAAO+oB,sBAAwB,EACjC,EAAEnmB,SAEFH,EAAC6hB,GAAiB,CAChBlhB,QAASA,IAAOpD,EAAO+oB,sBAAwB,EAAA,CAChD,CACI,CAAA,EAER,CAAC,CAAC7lB,EAAWyb,qBACZlc,EAACe,GAAK,CACJC,MAAM,QACNL,QAASA,IAAM,CACbpD,EAAO2e,oBAAsB,EAC/B,EAAE/b,SAEFH,EAAC8b,GAAe,CACdnb,QAASA,IAAOpD,EAAO2e,oBAAsB,EAAA,CAC9C,CACI,CAAA,EAER,CAAC,CAACzb,EAAWoe,cACZ7e,EAACe,GAAK,CACJC,MAAM,QACNd,QAAgBV,GAAA,CACVA,EAAE0J,SAAW1J,EAAEggB,gBACjBjiB,EAAOshB,aAAe,GAE1B,EAAE1e,SAEFH,EAAC8c,GAAa,CACZvc,IAAKE,EAAWoe,aAAate,KAAOE,EAAWoe,aAC/ClV,MAAMlJ,EAAAA,EAAWoe,eAAXpe,YAAAA,EAAyBkJ,KAC/BhJ,QAASA,IAAM,CACbpD,EAAOshB,aAAe,EACxB,CAAA,CACD,CAAA,CACI,CACR,CAAA,CACD,CAEN,CClMA,SAAS0H,GAAqB,CAAEvS,UAAAA,EAAWvK,SAAAA,CAAS,EAAG,CAC/C,KAAA,CAAErM,MAAAA,GAAUE,EAAI,EAChB,CAAC2N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAACspB,EAAcC,CAAe,EAAIvpB,EAAS,IAAI,EAC/C,CAAC0X,EAAcU,CAAe,EAAIpY,EAAS,IAAI,EAE/CwpB,EAAkB9R,IAAiB,KAEzC,OACE3T,EAAA,IAAA,CAAGD,MAAM,yBAAwBb,UAC/BH,EAAA,SAAA,CACEC,KAAK,SACLyD,SAAUuH,IAAY,UACtB/K,QAASA,IAAM,CACboL,EAAW,SAAS,EACpBmb,EAAgB,QAAQ,GACvB,SAAY,CACP,GAAA,CACF,MAAMrd,EAAM,MAAMhM,EAAMM,GAAGipB,eAAeC,UAAU5S,CAAS,EACzD,GAAA,EAAC5K,GAAAA,MAAAA,EAAKiL,YACF,MAAA,IAAIwS,MAAM,6BAA6B,EAE/CvR,EAAgBlM,CAAG,EACVK,GAAA,MACC,CAAA,CACV7M,WAAe,CAAA,IAEjB0O,EAAoB,SACnB,QAAA,CACL,EAAA,IAAAtL,EAAA,SAAA,CAAEG,KACH,SAEO,SACRH,IAAA,UACEC,MAAK,eACLyD,YAAsB,CAChB4H,EAAA,SAAA,IACS,QAAA,GACbA,SAAoB,CACpBmb,GAAAA,CACa,MAAArd,EAAA,MAAAhM,EAAA,GAAA,eAAA,OAAA4W,CAAA,EACP,GAAA5K,GAAA,MAAAA,EAAA,WACF,UAAY,MAAMhM,+BAEVkY,GAAuC,EAC/C7L,GACA6L,MAAAA,CACShK,EAAA,SAAA,EAET1O,IACA0O,EACF,SAAA,QAAA,CAAA,EACFtL,EAAG,OAAA,CACL,MAAA,wBAAEG,SACHumB,GAAAF,EAAAA,IAAA,SAAAxmB,EAAAI,EAAA,CAGDJ,KAAA,eAAY,IAAA,kCAGD,CAAA,EAAMA,EAAAI,EAAA,CAAeG,KAAI,WAAWS,IAAM,WAE/ChB,MAAAA,iBAAK,CAAA,EAAMA,EAAAyX,GAAA,CAAWlX,OAAI0K,IAAA,SAAA,CAAA,CAAiB,CAAiB,CAAA,CAGvD,CAAA,CAAqB,CC3DtC,MAAM6b,GAAqB,CACzB/a,QAAS,UACT2J,OAAQ,eACRzJ,OAAQ,SACRC,OAAQ,SACRC,eAAgB,aAChBH,UAAW,QACXI,KAAM,OACN1H,OAAQ,SACR,eAAgB,eAChB,eAAgB,iBAClB,EAiBMqiB,GAAc,CAClBhb,QAAS,+BACT2J,OAAQ,oBACRzJ,OAAQ,qBACR,iBAA8B+a,GAAA,WAAUA,CAAM,kBAC9CC,aAAc,sBACd/a,OAAQ,gBACRC,eAAgB,2BAChBH,UAAW,wBACX,oBAAiCgb,GAAA,cAAaA,CAAM,kBACpDE,gBAAiB,yBACjB9a,KAAM,iDACN,YAAa,qCACb,aAAc,sCACd1H,OAAQ,8CACR,mBAAoB,kCACpB,2BACGsiB,GAAA,wBAAuBA,CAAM,kBAChC,yBAA0B,mCAC1B,eAAgB,aAChB,eAAgB,kBAClB,EAEMG,GAAgB,GAEtB,SAASC,GAAa,CAAEzoB,aAAAA,EAActB,SAAAA,EAAU+E,OAAAA,EAAQilB,SAAAA,CAAS,EAAG,aAC5D,KAAA,CAAEtpB,GAAAA,EAAI2X,OAAAA,EAAQlT,QAAAA,EAAS8kB,UAAAA,EAAWC,UAAAA,CAAc5oB,EAAAA,EAClD,GAAA,CAAEsB,KAAAA,CAAStB,EAAAA,EAGT6oB,MAAAA,GAAe9R,GAAAA,YAAAA,EAAQzJ,SAAUyJ,EACjC+R,EAAiBD,GAAAA,YAAAA,EAAczpB,GAE/B8D,EAAiBH,EAAMI,QAAQC,IAAI,gBAAgB,EACnDqN,EAASvN,KAAmBW,GAAAA,YAAAA,EAASzE,IACrC2pB,GAAUhS,EAAAA,GAAAA,YAAAA,EAAQtJ,OAARsJ,YAAAA,EAAciS,MACxBC,EACJ,CAAC,EAAClS,GAAAA,MAAAA,EAAQmS,sBACVnS,GAAAA,YAAAA,EAAQmS,sBAAuBhmB,KAC/B6T,EAAAA,GAAAA,YAAAA,EAAQlT,UAARkT,YAAAA,EAAiB3X,MAAO8D,EAE1B,IAAIimB,EAAY,EACZC,EAAe,EACnB,GAAI9nB,IAAS,mBAAoB,CAC/B,UAAWuC,KAAW8kB,GAChB9kB,EAAAA,EAAQoa,SAARpa,MAAAA,EAAgBwlB,SAAS,cAC3BF,KAEEtlB,EAAAA,EAAQoa,SAARpa,MAAAA,EAAgBwlB,SAAS,WAC3BD,IAGA,CAACA,GAAgBD,IAAkB7nB,EAAA,aACnC,CAAC6nB,GAAaC,IAAqB9nB,EAAA,SACzC,CAEIkT,IAAAA,EA2BAlT,GA1BAA,IAAS,OACXkT,EAAO4T,GAAY3X,EAAS,YAAcsY,EAAU,aAAe,MAAM,EAEzEznB,IAAS,UACTA,IAAS,aACTA,IAAS,oBAELsnB,GAAAA,YAAAA,EAAWrpB,QAAS,EACf6oB,EAAAA,GAAa,GAAE9mB,CAAK,UAAS,EAC3B2nB,EACFb,EAAAA,GAAa,GAAE9mB,CAAK,QAAO,EAElCkT,EAAO4T,GAAY9mB,CAAI,EAEhB8mB,GAAY9mB,CAAI,EACzBkT,EAAO4T,GAAY9mB,CAAI,EAIvBkT,EAAQ,+BAA8BlT,CAAK,IAGzC,OAAOkT,GAAS,aAClBA,EAAOA,GAAKoU,GAAAA,YAAAA,EAAWrpB,UAAUopB,GAAAA,YAAAA,EAAWppB,OAAM,GAGhD+B,IAAS,WAAa,CAACyV,EAElB,OAAA,KAGHuS,MAAAA,EACJtpB,EAAagR,WAAa,IAAI7E,KAAKnM,EAAagR,SAAS,EAAEuY,iBAEvDC,EACJ,CACE,mBAAoB,yBACpBnc,UAAW,iBACXC,OAAQ,cACRC,OAAQ,cAAA,EACRjM,CAAI,GAAK,WACPmoB,EAA4BA,IAAM,CACtC7qB,EAAO2e,oBAAsB,CAC3BC,QAASgM,EACT1mB,SAAU6lB,EACVhL,cAAerc,IAAS,kBAAA,CAC1B,EAGF,OACEgB,EAAA,MAAA,CAAKD,MAAQ,6BAA4Bf,CAAK,GAAGsC,SAAS,IAAGpC,UAC3DH,EAAA,MAAA,CACEgB,MAAQ,kCAAiCf,CAAK,GAC9CsD,MAAO0kB,EAAmB9nB,SAEzBF,IAAS,mBACRgB,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,SAASC,KAAK,KAAKC,IAAKN,EAAMe,MAAM,aAAA,CAAe,EAC9DhB,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKC,IAAKN,EAAMe,MAAM,gBAAA,CAAkB,CAAC,CAAA,CACjE,EAEFhB,EAACI,EAAI,CACHC,KAAMymB,GAAmB7mB,CAAI,GAAK,eAClCK,KAAK,KACLC,IAAKN,CAAAA,CACN,CAAA,CAEA,EACLgB,EAAA,MAAA,CAAKD,MAAM,uBAAsBb,UAC9BF,IAAS,WACRgB,EAAAK,EAAA,CAAAnB,UACEc,EAAA,IAAA,CAAAd,SAAA,CACG,CAAC,eAAe8C,KAAKhD,CAAI,GACxBD,EAAAsB,EAAA,CAAAnB,UACGmnB,GAAAA,YAAAA,EAAWppB,QAAS,EACnB+C,EAAAK,EAAA,CAAAnB,UACEc,EAAA,IAAA,CAAGsB,SAAS,IAAIrC,QAASkoB,EAA0BjoB,UACjDH,EAAA,OAAA,CAAMuD,MAAO+jB,EAAUppB,OAAOiC,SAC3BsT,GAAc6T,EAAUppB,MAAM,CAAA,CAC3B,EAAE,IAAI,QAEd,CAAG,CAAA,EAAE,GAAG,CAAA,CACR,EAEF+C,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACgD,GAAQ,CAACR,QAAAA,EAAkB6lB,WAAU,EAAE,CAAA,EAAE,GAAG,CAAA,CAC7C,CAEJ,CAAA,EAEHlV,EACAlT,IAAS,WACRgB,EAAA,OAAA,CAAMD,MAAM,gBAAeb,SAAA,CACxB,IAAI,IACH,IACFH,EAAC4K,GAAY,CACXC,SAAUlM,EAAagR,UACvB2Y,OAAO,OAAA,CACR,CAAC,CAAA,CACE,CACP,CACA,CAAA,EACFroB,IAAS,kBACRD,EAACumB,GAAoB,CACnBvS,UAAWxR,EAAQzE,GACnB0L,SAAUA,IAAM,CACd,CAAA,CAEH,CACF,CACD,CAAA,GAEH6d,GAAAA,YAAAA,EAAWppB,QAAS,GACnB+C,EAAA,IAAA,CAAGD,MAAM,gBAAeb,UACrBmnB,EAAUiB,MAAM,EAAGpB,EAAa,EAAE5lB,IAAI,CAACiB,EAASC,IAC/CxB,EAAAK,EAAA,CAAAnB,UACEc,EAAA,IAAA,CACE+C,KAAMxB,EAAQK,IACduG,IAAI,sBACJpI,MAAM,uBACNd,QAAgBV,GAAA,CACdA,EAAE6O,eAAe,EACjB9Q,EAAOmN,YAAclI,CACvB,EAAErC,SAAA,CAEFH,EAAC4C,GAAM,CACLC,IAAKL,EAAQM,aACbxC,KACEgnB,EAAUppB,QAAU,GAChB,MACAopB,EAAUppB,OAAS,GACnB,KACAopB,EAAUppB,OAAS,GACnB,IACAopB,EAAUppB,OAAS,GACnB,IACA,IAGNqC,IAAM,GAAEiC,EAAQoN,WAAY,KAAIpN,EAAQgN,IAAK,GAC7CgZ,SAAUhmB,GAAAA,YAAAA,EAASkN,GAAAA,EAFdlN,EAAQzE,EAGd,EACAkC,IAAS,oBACRD,EAAA,MAAA,CAAKgB,MAAM,oBAAmBb,SAC3BqC,EAAQoa,OAAOrb,IAAKtB,GACnBD,EAACI,EAAI,CACHC,KAAMymB,GAAmB7mB,CAAI,EAC7BK,KAAK,IACLU,MAAQ,GAAEf,CAAK,OAAA,CAChB,CACF,CAAA,CACE,CACN,CACA,CAAA,EAAE,GAAG,CAAA,CACR,CACH,EACDgB,EAAA,SAAA,CACEhB,KAAK,SACLe,MAAM,cACNd,QAASkoB,EAA0BjoB,UAElCmnB,EAAUppB,OAASipB,IACjB,IAAGG,EAAUppB,OAASipB,EAAc,GACvCnnB,EAACI,EAAI,CAACC,KAAK,cAAA,CAAgB,CAAC,CAAA,CACtB,CAAC,CACR,CAAA,GAEJknB,GAAAA,YAAAA,EAAWrpB,QAAS,GACnB8B,EAAA,KAAA,CAAIgB,MAAM,8BAA6Bb,SACpConB,EAAUhmB,IAAKmU,GACd1V,EAAA,KAAA,CAAAG,SACEH,EAACyoB,GAAa,CACZznB,MAAQ,2BAA0Bf,CAAK,GACvCiE,GACE7G,EAAY,IAAGA,CAAS,MAAKqY,EAAO3X,EAAG,GAAK,MAAK2X,EAAO3X,EAAG,GAC5DoC,SAEDH,EAAC0oB,GAAM,CAAChT,OAAQA,EAAQpV,KAAK,GAAA,CAAK,CAAA,CACrB,CAAA,EARRoV,EAAO3X,EASZ,CACL,CAAA,CACC,EAEL2X,IAAW,EAAC6R,GAAAA,MAAAA,EAAWrpB,UAAUqpB,GAAAA,YAAAA,EAAWrpB,SAAU,IACrD8B,EAACyoB,GAAa,CACZznB,MAAQ,2BAA0Bf,CAAK,GACvCiE,GACE7G,EACK,IAAGA,CAAS,MAAKoqB,CAAe,GAChC,MAAKA,CAAe,GAE3BkB,cAAsBnpB,GAAA,CACpB,MAAMmmB,EAAOnmB,EAAE0J,OAAOnJ,cAAc,SAAS,EAC7C,GAAI4lB,EAAM,CAER,GAAInmB,EAAEopB,QAAS,OACfppB,EAAE6O,eAAe,EACZwa,EAAAA,cACH,IAAIC,WAAW,cAAe,CAC5BC,QAASvpB,EAAEupB,QACXC,QAASxpB,EAAEwpB,OACZ,CAAA,CACH,CACF,CACF,EAAE7oB,SAEDknB,EACCrnB,EAAC0oB,GAAM,CAAChT,OAAQ8R,EAAclnB,KAAK,GAAA,CAAK,EAExCN,EAAC0oB,GAAM,CAACjL,SAAUgK,EAAgBnnB,KAAK,GAAA,CAAK,CAAA,CAEjC,CAChB,CAAA,CACE,CAAC,CAAA,CACH,CAET,CAEA,SAASmoB,GAAcQ,EAAO,CAC5B,MAAM9nB,EAAM+nB,KACZ,OAAOlpB,EAACiE,EAAI,CAAA,GAAKglB,EAAO,iBAAe,cAAc9nB,IAAAA,CAAAA,CAAW,CAClE,CC9SA,MAAAgoB,GAAersB,GAAK,UAA+B,CACjD,GAAI,EAAE,kBAAmBgI,WAAmB,OAAA,KAEtCrE,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAE6rB,kBAAAA,CAAsB3oB,EAAAA,EAEtB/B,CAEF,GAAAX,EAAEA,YAAAA,CAAAA,EAAIsrB,GAAAA,CAAAA,KAAsCC,CAAA,EAAApsB,EAAA,EAAA,EAClD6gB,GAAOwL,IAAAA,CAEPxL,GAAAA,CAAAA,GAAAA,CAAAA,EACM,OAAqB,KAAA,CACnB,SAAAnK,CAAA,EAAYA,EAAAA,EAAwB,CACpC,MAAAxW,EAAEA,SAAAA,CAAOC,EAAAA,EAAAA,cAAiB,CAC9BgsB,EACDxV,EAAAD,IAAAvW,EACDT,EAAmBysB,EAAAG,GAAAH,CAAA,EAAA7iB,GAAA,GAAE6iB,SAAAA,CAAazV,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,cAAAA,MAAAA,CAAAA,EAAiBvW,GAAAA,GAAAA,EAAAA,CAAU,MAAAwT,EAAArO,EAAA,aAEvDA,KAAAA,EAGO,OAAAkT,EACX,SACA,IACE9Y,EAAgC,CAAA,CAAA,SAAA,cAAA,sBAAA,EAAEmB,EAAAA,IAAAA,UAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAAIY,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAAc6D,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAASinB,GAAA5V,EAC7DtW,eACM,QAAAmsB,EAAEzpB,SAAAA,CAAAA,EAAuBypB,GAAAA,CAAAA,GAAAA,GAAAA,EAAwB/qB,EAAAA,CACvD,GAAAZ,EACA,QAAAyE,EACMmnB,aAAAA,EACAC,aAAAA,CACN,CAAA,EAGaF,EACTrsB,SAAUwT,KAAAA,IAAAA,CAAAA,MAAAA,EAAAA,EAAAA,GACZ4Y,EACS5oB,SAAAA,KAAAA,IAAagT,CAAAA,QAA2C,EAAA,GAM/D9V,SAAAA,KAAAA,gBAEAY,CACAkV,IACD,EAAA,CAAA9V,EACIsrB,CAAA,CAAA,EACLtL,GAAe,IAAA,CAEbqH,MAAAA,EAAiByE,GAAmB,CAAe,MAGnDzE,KAAAA,EAAgE,GAC3D0E,EAEL1E,YAAS2E,CAAO,GAClBF,GAAA,YAAAA,EAAA,OAAA,GACF5pB,IAAA,iBACK1C,EAAA,kBAAA,CACGmP,GAAAA,EAKV,YAAAsd,CAAA,EAIJjM,EAEE,+BAAiC,iBAAA,UAAAkM,CAAA,EACvBvrB,IAAAA,CACF,UAAA,cAAA,oBAAA,UAAAurB,CAAA,CAAA,CAAEhqB,EAAAA,CAAAA,CAAAA,EAAMlC,GAAIsrB,IAAAA,CAAY,2BAAWxiB,eACzC,wBAA6B,CACA,EAAA,CAAA,CAAA,EACzB9I,GACAsrB,GAAAA,CACFrsB,IAAA,2BAAA,gBACF,UAAA,cAAA,CAEFJ,CAAAA,EACUqI,MAAAA,EAAAA,IAAAA,CACVqkB,EAAa,EAAA,EACX1sB,EAAAA,kBAA6C,KACnCqI,wBAAkC,KAAA,SAAA,IAAA,IAC9C,SAAA,KAAA,iBAGF8Y,EACE,GAAAwL,EAA8B,CAC5BzkB,KAAAA,CACF,GAAAglB,YAEF7tB,aAAAA,EACMe,aAAAA,CACFJ,EAAAA,EACAkI,OAAAA,EAAUolB,GAAc,CAC1B,MAAA,QACD,QAAA1qB,GAAA,YAEqBA,EAAA,eACpB8pB,GAIA,EACElE,SAAgBnkB,EAAA,MAAA,CAClB,MAAA,QACF,SAAA,KAE2B,SAAA,CAAAjB,EAAA,SAAA,CACnB,KAAA,SAAEjC,MAAAA,cAAIyE,QAAAA,EAAS7D,SAAAA,EAAAA,EAAAA,CAAckV,KAAAA,GAAAA,CAAiB0V,CACpD,CAAA,IACQ,SAAA,CACE,SAAAvpB,EAAA,IAAA,UACU,cACd,CAAIR,CACFmB,CAAQ,EAAAM,EAAA,OAAA,CACV,SAAA,CAAA,CAAA4S,GAAA7T,EAAA,IAAA,CACF,SAAA,+CAAA,CAAEG,EAAAA,QAEF,CAAW,MAAA,oBAAiB,QAAAX,GAAA,CAAIW,KAC9BH,CAAa,OAAAkJ,CAAe,EAAA1J,GAAuBmB,EAAAA,OAAAA,UAAAA,UAAAA,EAAAA,OAAAA,UAAAA,MAAQR,GACzC,EAElBH,SAAAA,EAAAonB,GAAA,CAAAjnB,WACE,YAAG,aAAAxB,EAAe,SAAA,EAAA,CAEpBsC,CAAA,CACG,EAAAjB,EAAA,MAAC6T,CACA1T,MAAG,CAELH,UAAA,KACQ,EAINE,SAAgBe,EAAAgD,EAAA,CACR,GAAA,iBAAEiF,MAAAA,eAAO,QAAI1J,EAEnB,SAAa2qB,CAAAA,EAAAA,OAAAA,CACH,SAAA,wBAAA,CACV,EAAA,IAAAnqB,EAAAI,EAAA,CACF,KAAA,aAAA,CAAED,CAAAA,CAEW,CAAA,CACOiqB,CAClBzrB,CAAAA,CAAAA,CAAAA,CAAAA,CACQ,CAAA,CACT,CAAC,CAEJ,CACS,OAAA,IACM,CACb,ECrKd,MAAM0rB,GAAaC,GAAW,CAACrB,EAAO9nB,IAAQ,CACtC,KAAA,CAAE9D,SAAAA,GAAaC,EAAI,EACnB,CAACitB,EAAcC,CAAe,EAAIC,GAAgB,EAClD,CAACC,EAAgBC,CAAiB,EAAIztB,EAAS,EAAK,EACpD,CAACykB,EAAOiJ,CAAQ,EAAI1tB,EAASqtB,EAAaxoB,IAAI,GAAG,GAAK,EAAE,EACxD9B,EAAOsqB,EAAaxoB,IAAI,MAAM,EAC9BmhB,EAAU7mB,EAAO,IAAI,EAErBwuB,EAAiBxuB,EAAO,IAAI,EAClCyuB,OAAAA,GAAoB3pB,EAAK,KAAO,CAC9B4pB,SAAqB/sB,GAAA,CACnB4sB,EAAS5sB,CAAK,CAChB,EACAuP,MAAOA,IAAM,CACXsd,EAAetuB,QAAQgR,OACzB,EACAyd,OAAQA,IAAM,CACZH,EAAetuB,QAAQyuB,QACzB,EACAC,KAAMA,IAAM,CACVJ,EAAetuB,QAAQ0uB,MACzB,CACA,EAAA,EAGAhqB,EAAA,OAAA,CACEE,IAAK+hB,EACLliB,MAAM,2BACNoN,SAAiB5O,GAAA,OAIf,GAHAA,EAAE6O,eAAe,EAEI,WAAWpL,KAAKmiB,SAAS2E,IAAI,EAEhD,GAAIpI,EAAO,CACT,MAAMrV,EAAS,CACbyI,EAAG4M,CAAAA,EAED1hB,IAAMqM,EAAOrM,KAAOA,GACxBuqB,EAAgBle,CAAM,CAAA,MAEtBke,EAAgB,CAAE,CAAA,OAGhB7I,EACOoI,SAAAA,KAAQ,aAAYmB,mBAAmBvJ,CAAK,CAAE,GACrD1hB,EAAQ,SAAQA,CAAK,GAAI,EAC1B,GAEDmlB,SAAS2E,KAAQ,WAIrBd,EAAAA,GAAAA,YAAAA,EAAO7a,WAAP6a,MAAAA,EAAAA,KAAAA,EAAkBzpB,EACpB,EAAEW,UAEFH,EAAA,QAAA,CACEmB,IAAK0pB,EACL7sB,MAAO2jB,EACPnZ,KAAK,IACLvI,KAAK,SAELmhB,YAAY,SACZhE,IAAI,OACJ+N,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,SAAiB9rB,GAAA,CACVA,EAAE0J,OAAOlL,OACZwsB,EAAgB,CAAE,CAAA,CAEtB,EACAviB,QAAgBzI,GAAA,CACLA,EAAAA,EAAE0J,OAAOlL,KAAK,EACvB2sB,EAAkB,EAAI,CACxB,EACAY,QAASA,IAAM,CACbZ,EAAkB,EAAI,CACxB,EACAa,OAAQA,IAAM,SACZxe,WAAW,IAAM,CACf2d,EAAkB,EAAK,GACtB,GAAG,GACNzH,GAAAA,EAAAA,EAAQ3mB,UAAR2mB,YAAAA,EACInjB,cAAc,gCADlBmjB,MAAAA,EAEI5a,UAAU1D,OAAO,QACvB,EACA6mB,UAAkBjsB,GAAA,OACV,KAAA,CAAE+M,IAAAA,CAAQ/M,EAAAA,EAChB,OAAQ+M,EAAG,CACT,IAAK,SACHoe,EAAkB,EAAK,EACvB,MACF,IAAK,OACL,IAAK,YAEH,GADAnrB,EAAE6O,eAAe,EACbqc,EAAgB,CAClB,MAAMgB,EAAYxI,EAAQ3mB,QAAQwD,cAChC,4BACF,EACA,GAAI2rB,EAAW,CACb,IAAIC,EAAWD,EAAUE,mBAClBD,KAAAA,GAAYA,EAASlvB,QAC1BkvB,EAAWA,EAASC,mBAElBD,IACOrjB,EAAAA,UAAUujB,IAAI,OAAO,EACbpP,MAAMqP,KACrBH,EAASI,cAAc5rB,QACzB,EAAEia,OAAexO,GAAAA,IAAO+f,CAAQ,EACvBhgB,QAAgBC,GAAA,CACpBtD,EAAAA,UAAU1D,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACL,MAAMonB,EAAY9I,EAAQ3mB,QAAQwD,cAChC,sBACF,EACIisB,GACQ1jB,EAAAA,UAAUujB,IAAI,OAAO,CAEnC,CACF,CACA,MACF,IAAK,KACL,IAAK,UAEH,GADArsB,EAAE6O,eAAe,EACbqc,EAAgB,CACZgB,MAAAA,EAAYhvB,SAASqD,cACzB,4BACF,EACA,GAAI2rB,EAAW,CACb,IAAIO,EAAWP,EAAUQ,uBAClBD,KAAAA,GAAYA,EAASxvB,QAC1BwvB,EAAWA,EAASC,uBAElBD,IACO3jB,EAAAA,UAAUujB,IAAI,OAAO,EACbpP,MAAMqP,KACrBG,EAASF,cAAc5rB,QACzB,EAAEia,OAAexO,GAAAA,IAAOqgB,CAAQ,EACvBtgB,QAAgBC,GAAA,CACpBtD,EAAAA,UAAU1D,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACCunB,MAAAA,EAAWzvB,SAASqD,cACxB,iCACF,EACIosB,GACO7jB,EAAAA,UAAUujB,IAAI,OAAO,CAElC,CACF,CACA,MACF,IAAK,QACH,GAAInB,EAAgB,CACZgB,MAAAA,EAAYhvB,SAASqD,cACzB,4BACF,EACI2rB,IACFlsB,EAAE6O,eAAe,EACjBqd,EAAUU,MAAM,GAElBzB,EAAkB,EAAK,GACvB1B,EAAAA,GAAAA,YAAAA,EAAO7a,WAAP6a,MAAAA,EAAAA,KAAAA,EAAkBzpB,EACpB,CACA,KACJ,CACF,CAAA,CACD,EACDQ,EAAA,MAAA,CAAKgB,MAAM,iBAAiBvE,OAAQ,CAACiuB,GAAkB,CAAC/I,EAAMxhB,SAC3D,CAAC,CAACwhB,GACD,CACE,CACE/U,MACE3L,EAAAK,EAAA,CAAAnB,SAAA,CAAE,cACWH,EAAA,IAAA,CAAAG,SAAIwhB,CAAAA,CAAS,CAAC,CAAA,CACzB,EAEJzd,GAAK,aAAYgnB,mBAAmBvJ,CAAK,CAAE,iBAC3CllB,OAAQ,WAAWwG,KAAK0e,CAAK,CAAA,EAE/B,CACE/U,MACE3L,EAAAK,EAAA,CAAAnB,SAAA,CAAE,qBACkBc,EAAA,OAAA,CAAAd,SAAA,CAAM,IAAEwhB,EAAMhc,QAAQ,KAAM,EAAE,CAAC,CAAA,CAAO,CAAC,CAAA,CACzD,EAEJzB,GAAK,IAAG7G,CAAS,MAAKskB,EAAMhc,QAAQ,KAAM,EAAE,CAAE,GAC9ClJ,OACE,KAAKwG,KAAK0e,CAAK,GAAK,WAAW1e,KAAK0e,CAAK,GAAK,KAAK1e,KAAK0e,CAAK,EAC/D0K,IAAK,KAAKppB,KAAK0e,CAAK,EACpB1hB,KAAM,MAAA,EAER,CACE2M,MACE3L,EAAAK,EAAA,CAAAnB,SAAA,CAAE,WACQH,EAAA,OAAA,CAAAG,SAAOwhB,CAAAA,CAAY,CAAC,CAAA,CAC5B,EAEJzd,GAAK,IAAGyd,CAAM,GACdllB,OAAQ,CAAC,WAAWwG,KAAK0e,CAAK,EAC9B0K,IAAK,WAAWppB,KAAK0e,CAAK,EAC1B1hB,KAAM,MAAA,EAER,CACE2M,MACE3L,EAAAK,EAAA,CAAAnB,SAAA,CAAE,iBACcH,EAAA,IAAA,CAAAG,SAAIwhB,CAAAA,CAAS,CAAC,CAAA,CAC5B,EAEJzd,GAAK,aAAYgnB,mBAAmBvJ,CAAK,CAAE,gBAC5C,CAAA,EAEApH,KAAK,CAAC7H,EAAGF,IACJE,EAAE2Z,KAAO,CAAC7Z,EAAE6Z,IAAY,GACxB,CAAC3Z,EAAE2Z,KAAO7Z,EAAE6Z,IAAY,EACrB,CACR,EACA9qB,IAAI,CAAC,CAAEqL,MAAAA,EAAO1I,GAAAA,EAAIzH,OAAAA,EAAQwD,KAAAA,CAAAA,IACzBgB,EAACgD,EAAI,CACHC,GAAAA,EACAlD,MAAM,sBACNvE,OAAAA,EACAyD,QAAgBV,GAAA,QACdypB,EAAAA,GAAAA,YAAAA,EAAO7a,WAAP6a,MAAAA,EAAAA,KAAAA,EAAkBzpB,EACpB,EAAEW,SAAA,CAEFH,EAACI,EAAI,CACHC,KAAMJ,IAAS,OAAS,cAAgB,SACxCe,MAAM,oBAAA,CACP,EACDhB,EAAA,OAAA,CAAAG,SAAOyM,CAAY,CAAA,EAAE,GAAG,CAAA,CACpB,CACP,CAAA,CACF,CAAC,CAAA,CACF,CAEV,CAAC,EC/OD0f,GAAexvB,GAAK,SAAuB,CAAE6D,QAAAA,EAAUA,IAAM,CAAC,CAAE,EAAG,CACjE,KAAM,CAAC4rB,EAAYC,CAAa,EAAItvB,EAAS,EAAK,EAC5CuvB,EAAgBpwB,EAAO,IAAI,EAEjCwD,GACE,IACOL,GAAA,CACLgtB,EAAc,EAAI,EAClBxf,WAAW,IAAM,cACfyf,GAAAA,EAAAA,EAAclwB,UAAdkwB,YAAAA,EAAuBlf,QAAvBkf,MAAAA,EAAAA,KAAAA,IACAA,GAAAA,EAAAA,EAAclwB,UAAdkwB,YAAAA,EAAuBzB,SAAvByB,MAAAA,EAAAA,KAAAA,IACC,CAAC,CAAA,EAEN,CACEpe,eAAgB,GAChBvO,gBAAwBN,GAAA,CACtB,MAAMktB,EAAe,WAAWzpB,KAAKmiB,SAAS2E,IAAI,EAC5ClpB,EAAW,CAAC,CAACnE,SAASqD,cAAc,sBAAsB,EAChE,OAAO2sB,GAAgB7rB,CACzB,CAAA,CAEJ,EAEA,MAAM8rB,EAAcA,IAAM,CACxBH,EAAc,EAAK,EACX7rB,GAAA,EAGVd,OAAAA,GACE,MACOL,GAAA,UACLitB,GAAAA,EAAAA,EAAclwB,UAAdkwB,YAAAA,EAAuBxB,OAAvBwB,MAAAA,EAAAA,KAAAA,GACYE,GAAA,EAEd,CACEC,QAASL,EACTM,iBAAkB,GAClBxe,eAAgB,EAAA,CAEpB,EAGErO,EAAA,MAAA,CACEjC,GAAG,2BACHtB,OAAQ,CAAC8vB,EACTrsB,QAAgBV,GAAA,CACd5C,EAAAA,SAAa4C,EAAA,eACTA,GAEJ,EACF,SAAAQ,EAAAqqB,GAAA,CAAElqB,IAAAA,EAGAgB,SAAKsrB,IAAAA,IAES,CAAA,CACd,CAAA,CAAA,CACD,CAAA,EChDP,SAASK,IAAY,CACb,KAAA,CAAEzvB,SAAAA,GAAaC,EAAI,EACnBmD,EAAaC,GAAYnD,CAAM,EAC/B,CAAEukB,UAAAA,CAAcrhB,EAAAA,EAElB,GAAA,CAACqhB,EAAU5jB,OACN,OAAA,KAGT,MAAM6uB,EAAU1wB,IAEV2wB,EAAqB3d,GACzB,IACEyS,EACGvgB,IAAI,CAAC0rB,EAAKxqB,IAAM,CACT,KAAA,CAAExC,KAAAA,EAAM,GAAG4G,CAASomB,EAAAA,EACtB,GAAA,CAAC1L,GAAethB,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAElC,GAAAA,EAAIga,KAAAA,EAAMxU,MAAAA,EAAOme,SAAAA,EAAUrhB,KAAAA,CAAAA,EAASkhB,GAAethB,CAAI,EAEzD,OAAA,OAAOlC,GAAO,aACXA,EAAAA,EAAG8I,EAAMpE,CAAC,GAEb,OAAOsV,GAAS,aAClBA,EAAOA,EACL,CACE,GAAGlR,EACHxJ,SAAUwJ,EAAKxJ,UAAYA,GAE7BoF,CACF,GAEE,OAAOc,GAAU,aACXA,EAAAA,EAAMsD,EAAMpE,CAAC,GAEnB,OAAOif,GAAa,aACXA,EAAAA,EAAS7a,EAAMpE,CAAC,GAEzB,OAAOpC,GAAS,aACXA,EAAAA,EAAKwG,EAAMpE,CAAC,GAGd,CACL1E,GAAAA,EACAga,KAAAA,EACAxU,MAAAA,EACAme,SAAAA,EACArhB,KAAAA,CAAAA,CAEH,CAAA,EACA+Z,OAAO8S,OAAO,EACnB,CAACpL,CAAS,CACZ,EAEMoD,EAAWC,KACjBtlB,OAAAA,GAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAAG,CAACL,EAAG2tB,IAAY,SACxE,MAAMzP,EAAQ5U,SAASqkB,EAAQ9rB,KAAK,CAAC,EAAG,EAAE,EAAI,EAC1Cqc,GAAAA,EAAQsP,EAAmB9uB,OAAQ,CAC/B,KAAA,CAAE6Z,KAAAA,CAAAA,EAASiV,EAAmBtP,CAAK,EACrC3F,IACFmN,EAASnN,CAAI,GACbgV,GAAAA,EAAAA,EAAQxwB,UAARwwB,YAAAA,EAAiBK,YAAjBL,MAAAA,EAAAA,KAAAA,GAEJ,CAAA,CACD,EAGC/sB,EAAA,MAAA,CAAKjC,GAAG,YAAWoC,SAChBM,EAAW8G,SAAS8lB,oBAAsB,eACzCrtB,EAAA,MAAA,CAAKgB,MAAM,UAASb,SAClBH,EAAA,KAAA,CAAAG,SACG6sB,EAAmBzrB,IAClB,CAAC,CAAExD,GAAAA,EAAIga,KAAAA,EAAMxU,MAAAA,EAAOme,SAAAA,EAAUrhB,KAAAA,GAAQoC,IAElCzC,EAAA,KAAA,CAAAG,SACEc,EAACgD,EAAI,CACHjD,MAAO0gB,EAAW,eAAiB,GACnCxd,GAAI6T,EACJ7X,QAAgBV,GAAA,CACd,GAAIA,EAAE0J,OAAOZ,UAAU6W,SAAS,WAAW,EAAG,CAC5C3f,EAAE6O,eAAe,EACjB,MAAMX,EAAOhR,SAASwQ,eAAgB,GAAEnP,CAAG,OAAM,EACzCW,GAAAA,EAAAA,CACRgP,EAAU,UAAA,EACRA,MAAiB4f,EAAA5f,EAAA,cAAA,iBAAA,EACX4f,GAENA,EAAmB,MAAA,CAEnB,CACF,CACF,EACF,SAAA,CAAAttB,EAAAI,EAAA,CAAED,KAAAA,EAEIE,KAAAA,KAAYC,IAAKiD,CAAA,CAAA,EAAUA,EAAAA,OAAAA,CACjCtC,SAAA,CAAAjB,EAAAugB,GAAA,CAAApgB,SACEH,CAAU,CAAA,EAAEuD,GAAAA,EAAAA,EAAAA,CAAiB,SAE3BtC,CAAAA,EAAAA,KAAA,CAAA,CAAA,EAAAjB,EAAA,QAAA,CAAAG,SACOuhB,CACL,CAAA,CAAAvhB,CAAQuhB,CAAAA,CAAQ,CAAS,CAAA,CAAA,CAE5B,CAAA,CACI,EACHjf,EAAAc,CAAA,CAAC,CACL,CAAA,CAGV,CAAA,EACEvD,EAAAoD,GAAA,CAGNpD,YAAK+sB,EACHjW,SAAaiW,OACbxV,WAAS,QACTgW,mBAAW,UACXzN,cAAmB,4BACnBC,IAAc,EACd5V,SAAK,SACL0V,WAAS7f,EAAA,SAAA,CACTsD,KAAAA,SAEIrD,GAAK,mBACLlC,MAAG,QACHiD,kBAAMxB,GAAA,aAGA,KAAA,CACI,OAAA0J,CAAEA,EAAAA,EAAW1J,iBAAAA,CAAAA,EAAAA,gBAAAA,UACnBoX,GAAAC,EAAAkW,EAAqB7jB,UAArB,YAAA2N,EAAqB3N,YAArB,MAAA0N,EAAA,KAAAC,GAEA,MAAA,EACW,EACf,SAAA7W,EAAAI,EAAA,CAAED,KAAAA,WAEIE,KAAK,KAAWC,IAAK,WAAA,CAAA,CAAS,CAAA,EAAc,SAC5C0sB,EAAA,IAAA,CAAA,CACT7sB,KAAAA,EAE0B4X,MAAAA,EAAMxU,SAAAA,EAAOme,KAAAA,CAAUrhB,EAAAA,IAAcY,EAAA+e,GAAA,CAC9D,GAAAjI,EACY7T,MAAI6T,kBAAsB/W,SAAM,CAAAhB,EAAAI,EAAA,CAAiBD,KAAAA,EACnDE,KAAAA,GAAAA,CAAAA,EAAiB,IAAAY,EAAA,OAAA,CAAK,MAC5BA,YAAMD,SAAM,CAAAhB,EAAA,OAAA,CAAWG,SACrBH,EAAAugB,GAAA,CAAApgB,UACY,CAAA,CAAEoD,CAAAA,EAAiBme,GAAAzgB,EAAAK,EAAA,CACzB,SAEJL,CAAAA,IAAAA,EAAA,QAAA,CAAA,MAAA,qBAESD,SAAM0gB,CAAA,CAAA,CAAoBvhB,CAAEuhB,CAAAA,CAAQ,CAAS,CAAA,EAEvD1hB,EAAA,OAAA,CAEHA,MAAA,yCAAMgB,SAAMyB,EAAA,CAAA,CAAA,CAAwCtC,CAC7C,EACDsC,EAACc,CAAA,CAAA,CACC,CAAA,CAEb,CAAA,CACG,CCzKd,SAASiqB,GAAMvE,EAAO,CACd,KAAA,CAAEjS,eAAAA,CAAmBiS,EAAAA,EACrB3oB,EAAOmtB,KACP3W,EAAcza,IACpB,OACE2D,EAACoD,GAAI,CACH0c,mBAAoB4N,GAAuB,EAC3CC,eAAiB,GAAErtB,EAAKgK,KAAM,IAAGhK,EAAK6R,MAAO,GAAE,GAC3C8W,EACJnS,YAAAA,EACAE,eAAgB,CACd9W,QAAgBV,GAAA,WACVA,EAAE0J,SAAW1J,EAAEggB,iBACjB1I,GAAAA,EAAAA,EAAYva,UAAZua,YAAAA,EAAqBsW,YAArBtW,MAAAA,EAAAA,KAAAA,KAEFE,EAAAA,GAAAA,YAAAA,EAAgB9W,UAAhB8W,MAAAA,EAAAA,KAAAA,EAA0BxX,EAC5B,EACA,GAAGwX,CACL,CAAA,CACD,CAEL,CC1BO,SAAS4W,GAAY9hB,EAAQ,OAClC,IAAI+hB,EAAY,CAAA,EACZC,EAAa,CAAA,EACbC,EAAe,EACnB,QAAStrB,EAAI,EAAGA,EAAIqJ,EAAO5N,OAAQuE,IAAK,CAChCurB,MAAAA,EAAOliB,EAAOrJ,CAAC,EACjBurB,EAAK/hB,QAAU,GAAC+hB,EAAAA,EAAKxrB,UAALwrB,MAAAA,EAAc/d,QAChC6d,EAAWvL,KAAKyL,CAAI,EACpBD,MAEAF,EAAUtL,KAAKyL,CAAI,EACfD,EAAe,IACFA,EAAA,GAGrB,CAIEjiB,GAAAA,EAAO5N,OAAS,KACf4vB,EAAW5vB,OAAS4N,EAAO5N,OAAS,GAAK6vB,GAAgB,GAC1D,CAEA,MAAME,EAAeH,EAAWvsB,IAAKmU,GAAWA,EAAO3X,EAAE,EACzD,GAAI+vB,EAAW5vB,OAAU4N,EAAO5N,OAAS,EAAK,EAEhC2vB,EAAA,CACV,GAAGA,EACH,CAAE9vB,GAAIkwB,EAAcC,MAAOJ,EAAY7tB,KAAM,QAAA,CAAU,MAEpD,CAEL,MAAMkuB,EAAOnY,KAAKoY,MAAMP,EAAU3vB,OAAS,CAAC,EAC5C2vB,EAAY,CACV,GAAGA,EAAUtF,MAAM,EAAG4F,CAAI,EAC1B,CACEpwB,GAAIkwB,EACJC,MAAOJ,EACP7tB,KAAM,QAER,EAAA,GAAG4tB,EAAUtF,MAAM4F,CAAI,CAAC,CAE5B,CACON,OAAAA,CAAAA,KAEA/hB,QAAAA,CAEX,CAEgBuiB,SAAAA,GAAaH,EAAO7wB,EAAU,CAC5C,MAAMixB,EAAmB5sB,EAAMc,QAAQT,IAAI,kBAAkB,GAAK,GAC5DwsB,EAAgBL,EAAM9T,OAAiB4T,GAAA,CAC3C,GAAI,CAACA,EAAK/hB,OAAe,MAAA,GACzB,MAAMuiB,EAAa,GAAEnxB,CAAS,IAAG2wB,EAAK/hB,OAAOlO,EAAG,GAC1C0wB,EAAYH,EAAiBE,CAAS,EACxCC,OAAAA,GAAaA,IAAcT,EAAKjwB,GAC1B2O,IAMH4hB,EAAAE,CAAA,EAAAR,EAAA,GAEP,GACA,CAAO,EACR3sB,EAAA,OAAA,KAAAitB,CAAA,EAEKjtB,OAAAA,EAAAA,OAAcA,IAChBA,EAAAA,UAAkB,OAAA,EAAA,EAAA,QAAAkL,GAAA,CACpBlL,UAA8B,CAC5B,CAAA,EAEJK,EAAA,QAAA,IAAA,mBAAA4sB,CAAA,EACM9rB,CACN,CACF,SAAAksB,GAAAR,EAAA,CAEO,MAAAS,KACL,IAAAC,EAAmB,EACnBV,EAAmB,QAAAF,GAAA,CACnBE,UAAwB,EAAA,EAAAS,EAAA,OAAA,IAAA,CACtB,GAAAA,EAAa,CAAGlsB,EAAIksB,KAAAA,UAAsBX,EAAA,EAAA,EACpCW,OAA2C,GAAAA,EAAA,CAAA,EAAA,KAAAE,GAAAA,EAAA,KAAAb,EAAA,WAAA,GAAAW,EAAA,CAAA,EAAA,KAAAE,GAAAA,EAAA,cAAAb,EAAA,EAAA,EAAA,CAC/CW,KACY,MAAcE,EAGfpsB,MACT,CACF,CACF,MAAAqsB,EAAAZ,EAAA,KAAA,GAAA,EAAA,KAAAF,EAAA,WAAA,EACAc,IACAH,EAAiBC,GAAA,EAAA,CAAAZ,EAAAc,CAAA,EAC8B,CAC/C,EACF,QAACrsB,EAAA,EAAAA,EAAAksB,EAAA,OAAAlsB,IAID,QAAassB,EAAAtsB,EAAOksB,EAAAA,EAAAA,SAAsBI,IAChBJ,EAAAA,CAAAA,EAASzwB,QAAaywB,EAAAI,CAAA,EAAA,SAAAF,CAAA,CAAA,IAE5CF,EAAgBlsB,CAAA,EAAA,CAAA,GAAAksB,EAAAlsB,CAAA,EAAA,GAAAksB,EAAAI,CAAA,CAAA,EACLtsB,EAAAA,CAAC,EAAIksB,EAAIA,CAAAA,EAAAA,OAAa,CAAGA,EAASI,EAAEC,IAAAA,EAAA,UAAAH,GAAAA,EAAA,KAAAb,EAAA,EAAA,IAAAtQ,CAAA,EAE7CiR,EAASlsB,OAAKksB,EAAAA,CAAAA,EAILhrB,KAIfgrB,EAAA,QAAAM,GAAA,CAGAN,UAA8Bnc,IACpB+H,CAAAA,EAAAA,aAAe,CAAA/H,EAAA,YACC,IAAA,KAAAE,EAAA,SAAgB,EAAA,IAAA,KAAAF,EAAA,SAAA,EAEtCE,EAAA,cAAAF,EAAA,KACmCA,EAAA,cAAAE,EAAA,IACA,CAAAA,EAAA,YAC5Bwc,GAAoB1c,EAAA,YACA,IAAA,KAAAE,EAAA,SAAA,EAAA,IAAA,KAAAF,EAAA,SAAA,EAApB0c,CACA,CAA4C,CAAA,EAEvDP,EAAC,QAAAM,GAAA,CAGDN,MAAAA,EAA8BM,EAAA,CAAA,EAAA,QAAA,GAC5BA,EAA2BA,QAAAA,GAAAA,CAC3BA,UAA0B,KAAAE,IACpBnB,EAAAA,iBAAwC,GAClB,CAC1B,CAAA,CAAA,EAEHW,EAAA,OAE4BjwB,MAAAA,KAEvB0wB,EAAa,CAAA,EACnB,OAAAlB,EAAMmB,YACNnB,GAAMviB,SAAkB,CACtByjB,EAAiB,KAAApB,CAAA,EACfoB,MACA,CACF,QAAA3sB,EAAA,EAAAA,EAAAksB,EAAA,OAAAlsB,IACA,GAAAksB,EAAalsB,CAAGA,EAAIksB,KAAAA,UAAsBX,EAAA,EAAA,EAAA,CACpCW,GAAAA,EAAwBE,SAASb,CAAKjwB,EACpCsxB,OAAmC,MAAAC,EAAAX,EAAAlsB,CAAA,EACjC6sB,EAAAA,KAAAA,CAAAA,OACO/U,MAAAA,EAAAA,IAAM7H,KAAS,EAAA,SAAA,EACpB6c,EAAQ,IAAIzkB,KAAK4H,EAAE/C,SAAS,EAClC,OAAc4f,EAAAC,CACd,CAAA,EACF,MAACL,EAAAG,EAAA,CAAA,EAAA,QAAA,GACDF,EAA2BE,KAAAA,CAC3BF,GAAAA,EAAc,IAAAK,GAAAA,EAAA,EAAA,EACZ1xB,MAAiBwD,EACjB2sB,KAAOoB,EAAAA,MAAAA,GAAAA,EAAAA,QAAAA,KAAAA,CAAAA,EAAAA,SAAAA,cAAAA,CACPrvB,EAGFovB,EAAC,KAAA5sB,CAAA,EACD4sB,MACA,CAEJD,EAAA,KAAApB,CAAA,CACAoB,CAAAA,EACDA,CAED,CC7Ka,SAASM,GAAU,CAChCC,cAAAA,EACAC,kBAAAA,EAAoB,EACpBC,gBAAAA,EAAkB,EAClBC,qBAAAA,EAAuB,GACvBC,mBAAAA,EAAqB,GACrBC,UAAAA,EAAY,WACZC,oBAAqBC,EACrBC,kBAAmBC,CACrB,EAAI,GAAI,CACN,KAAM,CAACC,EAAiBC,CAAkB,EAAIpzB,EAAS,IAAI,EACrD,CAACqzB,EAAYC,CAAa,EAAItzB,EAAS,EAAK,EAC5C,CAACuzB,EAAUC,CAAW,EAAIxzB,EAAS,EAAK,EACxC,CAACyzB,EAAgBC,CAAiB,EAAI1zB,EAAS,EAAK,EACpD,CAAC2zB,EAAcC,CAAe,EAAI5zB,EAAS,EAAK,EAChD6zB,EAAaf,IAAc,WAEjCjS,OAAAA,GAAgB,IAAM,CACpB,MAAMiT,EAAoBrB,EAAcpzB,QACxC,GAAI,CAACy0B,EAAmB,MAAO,GAC/B,IAAIC,EAAsBF,EACtBC,EAAkBE,UAClBF,EAAkB9S,WAEtB,SAASiT,GAAW,CAClB,KAAM,CACJD,UAAAA,EACAhT,WAAAA,EACAkT,aAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAnT,YAAAA,CACD,EAAG6S,EACEO,EAAcR,EAAaG,EAAYhT,EACvCsT,GAAkBT,EAAaK,EAAeC,EAC9CI,EAAkBV,EAAaO,EAAenT,EAC9CuT,GAAiB1b,KAAK2b,IAAIJ,EAAcN,CAAmB,EAC3DhB,GACJC,GACAla,KAAKrN,IACH8oB,EAAkB7B,EAClB4B,GACAD,CACF,EACIpB,GACJC,GACApa,KAAKrN,IACH8oB,EAAkB5B,EAClB2B,GACAA,GAAkBD,EAAcE,CAClC,EAGAC,KACCT,EAAsBM,EACnBxB,EACAD,KAEJQ,EAAmBW,EAAsBM,EAAc,MAAQ,OAAO,EACtEN,EAAsBM,GAGxBf,EAAce,GAAe,CAAC,EAC9Bb,EAAYa,EAAcE,GAAmBD,EAAe,EAC5DZ,EAAkBW,GAAetB,EAAmB,EACpDa,EACES,EAAcE,GAAmBD,GAAkBrB,EACrD,CACF,CAEAa,OAAAA,EAAkBrS,iBAAiB,SAAUwS,EAAU,CAAElS,QAAS,EAAK,CAAC,EAEjE,IAAM+R,EAAkBpS,oBAAoB,SAAUuS,CAAQ,CACtE,EAAE,CACDvB,EACAC,EACAC,EACAC,CAAkB,CACnB,EAEM,CACLM,gBAAAA,EACAE,WAAAA,EACAE,SAAAA,EACAE,eAAAA,EACAE,aAAAA,EACAe,KAAMA,IAAM,CACNjC,EAAcpzB,SAChBozB,EAAcpzB,QAAQssB,cAAc,IAAIgJ,MAAM,QAAQ,CAAC,CAE3D,EAEJ,CC9EA,SAASC,GAAQ7I,EAAO,eAChBxoB,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,EAAU2K,cAAAA,GAAkB1K,EAAI,EAEzC,CAACuE,EAAgBkwB,CAAiB,EAAI70B,EAAS,EAC/C,CAAC8E,EAAoBgwB,CAAqB,EAAI90B,EAAS,EAAK,EAElEZ,EAAU,IAAM,CACd,MAAMmF,EAAWC,EAAMC,MAAMC,QAAQ,UAAU,GAAK,GAC9CqwB,EAAMxwB,EAASyb,KACN1a,GAAAA,EAAQxD,KAAKjB,KAAO2D,EAAMI,QAAQC,IAAI,gBAAgB,CACrE,EACIkwB,GAAKF,EAAkBE,CAAG,EACRxwB,EAAAA,EAASvD,OAAS,CAAC,CAC3C,EAAG,CAAE,CAAA,EAML,MAAMg0B,GACHzxB,EAAW8G,SAAS4qB,sBACnB1xB,EAAW8G,SAAS8lB,oBAAsB,iBAC5C,CAAC5sB,EAAWqhB,UAAU5E,KAAc+P,GAAAA,EAAIhtB,OAAS,WAAW,EAExDmyB,EAAgBC,GACpB,IAAM,CACJ90B,EAAO4oB,aAAe,EAAA,EAExB,CACEmM,UAAW,IACXC,OAAQ,QACRC,iBAAkB,EAAA,CAEtB,EAEMC,EAAYp2B,IACZ,CAACq2B,EAAWC,CAAY,EAAIz1B,EAASmI,MAAS,EAE9Cya,EAAqB4N,GAAuB,CAChD,EACA,EACAjtB,EAAW8G,SAAS8lB,oBAAsB,eAAiB,GAAK,EAChE,CAAC,CACF,EAEKuF,EAAgBv2B,IACtB,eAAew2B,EAAW1hB,EAAW,CAC/BA,OAAAA,GAAa,CAACyhB,EAAcr2B,WAC9Bq2B,EAAcr2B,QAAUa,EAAMM,GAAGo1B,MAAMl1B,KAAK,CAC1CC,MAAO,EAAA,CACR,GAEa,MAAM+0B,EAAcr2B,QAAQ0B,KAAK,CAEnD,CAEA,MAAM80B,EAAiB12B,IACvB,eAAe22B,EAAY7hB,EAAW,CAChCA,OAAAA,GAAa,CAAC4hB,EAAex2B,WAC/Bw2B,EAAex2B,QAAUa,EAAMM,GAAGu1B,OAAOr1B,KAAK,CAC5CC,MAAO,EAAA,CACR,GAEa,MAAMk1B,EAAex2B,QAAQ0B,KAAK,CAEpD,CAEA,OACEgD,EAAAK,EAAA,CAAAnB,UACEc,EAAA,SAAA,CACEE,IAAKsxB,EACLxyB,KAAK,SACLe,MAAQ,gCACNgB,EAAqB,cAAgB,EACtC,IAAGkxB,KAAO,SAAW,EAAG,GACzBjpB,MAAO,CAAE4V,SAAU,UAAW,EAC9B3f,QAASA,IAAM,CACbyyB,EAAyBQ,GAACA,EAAiB9tB,OAAT,MAAmB,CACvD,EACAsjB,cAAsBnpB,GAAA,CACpBA,EAAE6O,eAAe,EACjB9Q,EAAO4oB,aAAe,EACxB,EAAE,GACEiM,EAAc,EAACjyB,SAElB6B,CAAAA,GACChC,EAAC4C,GAAM,CACLC,MACEhB,EAAAA,GAAAA,YAAAA,EAAgB7C,OAAhB6C,YAAAA,EAAsB4N,WAAU5N,EAAAA,GAAAA,YAAAA,EAAgB7C,OAAhB6C,YAAAA,EAAsBiB,cAExDxC,KAAK,IACLkoB,UAAU3mB,EAAAA,GAAAA,YAAAA,EAAgB7C,OAAhB6C,YAAAA,EAAsB6N,GAAAA,CACjC,EAEH1P,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAM0B,EAAqB,IAAM,GAAA,CAAM,CAAC,CAAA,CACpD,EACRf,EAACmyB,GAAc,CACbrT,cAAc,WACdoT,MAAOT,EACPW,UAAWZ,EACX9xB,QAASA,IAAM,CACbgyB,EAAattB,MAAS,CACxB,EACA2R,eAAgB,CACd/M,MAAO,CACLqpB,OAAQ,EACV,EACApzB,QAASA,IAAM,CACbyyB,EAAattB,MAAS,CACxB,CACF,EACA0R,OAAQ,CACN7N,OAAQxM,SAAS62B,IACnB,EAAE,GACEtK,EACJ1R,SAAS,OACTgW,WAAW,QACX1N,SAAS,SACTxc,MAAM,SACNyc,mBAAAA,EACA0T,eAAc,GAAArzB,UAEb,CAAC,GAACM,EAAAA,EAAWgzB,aAAXhzB,MAAAA,EAAuBizB,aACJjzB,EAAWgzB,WAAWC,aAA1C3oB,WACE9J,EAAA,MAAA,CAAKD,MAAM,WAAUb,SAAA,CACnBc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACDyzB,QAAQ,4BAA4B,IAE7C,SAAY,CACP,GAAA,CACFvO,SAAShjB,OAAO,OACN,CAAC,CAAA,IAGnB,EAAEjC,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWW,MAAM,eAAeV,KAAK,GAAA,CAAK,EAAE,IACvDN,EAAA,OAAA,CAAAG,SAAM,uBAAA,CAA2B,CAAC,CAC1B,CAAA,EACVH,EAACyD,KAAa,CAAC,CAAA,CACZ,EAETxC,EAAA,UAAA,CAAAd,SAAA,CACEc,EAAC+e,GAAQ,CAAC9b,GAAG,IAAG/D,SAAA,CACdH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,MAAA,CAAU,CAAC,CAAA,CACvC,EACT6H,GACC/G,EAAAK,EAAA,CAAAnB,SACG+xB,CAAAA,GACCjxB,EAAC+e,GAAQ,CAAC9b,GAAG,aAAY/D,SAAA,CACvBH,EAACI,EAAI,CAACC,KAAK,YAAYC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACjD,EAEZc,EAAC+e,GAAQ,CAAC9b,GAAG,YAAW/D,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,KAAKC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACzC,EACVc,EAAC+e,GAAQ,CAAC9b,GAAG,iBAAgB/D,SAAA,CAC3BH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,eAAmB,CAAA,EAC9DM,EAAWlC,sBACV0C,EAAA,MAAA,CAAKsC,MAAM,MAAM0G,MAAO,CAAEqa,QAAS,EAAI,EAAEnkB,SAAA,CACtC,IAAI,GAEP,CAAA,CAAK,CACN,CAAA,CACO,EACVH,EAACyD,IAAa,CAAA,EACdxC,EAAC+e,GAAQ,CAAC9b,GAAG,KAAI/D,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACxC,EACVc,EAAC+e,GAAQ,CAAC9b,GAAG,MAAK/D,SAAA,CAChBH,EAACI,EAAI,CAACC,KAAK,UAAUC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,mBAAA,CAAuB,CAAC,CAAA,CACvD,EACVc,EAAC+e,GAAQ,CAAC9b,GAAG,KAAI/D,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAChD,EACVc,EAAC+e,GAAQ,CAAC9b,GAAG,KAAI/D,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,YAAA,CAAgB,CAAC,CAAA,CAC9C,CAAC,CAAA,CACX,EAEJH,EAACyD,IAAa,CAAA,EACdxC,EAAC+e,GAAQ,CAAC9b,GAAK,UAAS/D,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,SAASC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CAC3C,EACVc,EAAC+e,GAAQ,CAAC9b,GAAK,IAAG7G,CAAS,OAAM8C,SAAA,CAC/BH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACzC,EACVc,EAAC+e,GAAQ,CAAC9b,GAAK,IAAG7G,CAAS,KAAI8C,SAAA,CAC7BH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAC7C,EACVc,EAAC+e,GAAQ,CAAC9b,GAAK,IAAG7G,CAAS,YAAW8C,SAAA,CACpCH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CAC5C,CAAC,CAAA,CACJ,EACTH,EAAA,UAAA,CAAAG,SACG6H,EACC/G,EAAAK,EAAA,CAAAnB,SACEH,CAAAA,EAACyD,IAAa,CAAA,IACb5B,EAAAA,GAAAA,YAAAA,EAAgB7C,OAAhB6C,YAAAA,EAAsB9D,KACrBkD,EAAC+e,GAAQ,CAAC9b,GAAK,IAAG7G,CAAS,MAAKwE,EAAe7C,KAAKjB,EAAG,GAAEoC,SAAA,CACvDH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,SAAA,CAAa,CAAC,CAAA,CAC1C,EAEZc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO4oB,aAAe,EACxB,EAAEhmB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACpD,EACVc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO2e,oBAAsB,CAC3Bne,GAAI,OACJoe,QAAS,cACTC,cAAeyW,CAAAA,CAEnB,EAAE1yB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAK,CAAA,EAC9B,eAAA,CAAA,CAAU,EACVW,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO2e,oBAAsB,CAC3Bne,GAAI,QACJoe,QAAS,gBACTC,cAAe4W,CAAAA,CAEnB,EAAE7yB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAK,CAAA,EAE/B,gBAAA,CAAA,CAAU,EACVW,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAOqD,0BAA4B,EACrC,EAAET,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,oBAAA,CAAwB,CAAC,CAAA,CACvB,EACVc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO+oB,sBAAwB,EACjC,EAAEnmB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAgC,CAAC,CAAA,CAC/B,EACVc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO2oB,aAAe,EACxB,EAAE/lB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,EAEFc,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACyD,KAAa,EACdxC,EAAC+e,GAAQ,CAAC9b,GAAG,SAAQ/D,SAAA,CACnBH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CACzC,EACVc,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACb3C,EAAO2oB,aAAe,EACxB,EAAE/lB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,CAAA,CAEG,CAAC,CAAA,CACI,CAAC,CAAA,CACjB,CAEN,CCnRA,MAAMyzB,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACRvV,SAAU,QACZ,EAEA,SAASwV,GAAS,CAChBxwB,MAAAA,EACAywB,eAAAA,EACAj2B,GAAAA,EACAV,SAAAA,EACA42B,UAAAA,EACAC,UAAAA,EACAC,UAAAA,EACA5qB,eAAAA,EACA6qB,WAAAA,EAAaA,IAAM,CAAC,EACpBv1B,gBAAAA,EAAkBA,IAAM,CAAC,EACzBw1B,wBAAAA,EAA0B,IAC1BC,YAAAA,EACAC,UAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,QAAAA,CACF,EAAG,CACKj0B,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAC2wB,EAAOyG,CAAQ,EAAIz3B,EAAS,CAAE,CAAA,EAC/B,CAAC+N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAAC8e,EAAUC,CAAW,EAAI/e,EAAS,EAAK,EACxC,CAAC03B,EAASC,CAAU,EAAI33B,EAAS,EAAK,EACtC,CAACF,EAASC,CAAU,EAAIC,EAAS,EAAI,EACrCyyB,EAAgBtzB,IAEdy4B,EAAyB/2B,GAAWoT,GAAA,CAEtC4jB,EAAAA,EAAYC,EAEdH,IAAgB,YACWvpB,EAAA,SAAA,GAC3BA,SAAoB,CACP,GAAA,CACP,GAAA,CACE,KAAAkR,GAAEA,MAAAA,CAAAA,EAAMxe,MAAAA,EAAAA,CAAAA,EAAU,MAAMo2B,QAAAA,CAAoB,GAC5C3X,IACFze,EAAoB4vB,GAAA5vB,CAAA,GAEpBA,EAAA0wB,GAAA1wB,CAAA,EAEApB,EADAoB,IAGgBi3B,IAAA,CAAA,GAAAA,GAAA,GAAAj3B,CAAA,CAFC,EAIf22B,EAAUzG,SACZ1R,GAAA,IACAP,EAAW/d,CAAAA,EAAAA,GACX+d,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA3Q,EAAW,OAAS,CAAA,QACV,CACV1O,SAAe,CACf0O,CAAkB,KAElBypB,EAAAA,KAAAA,CACF,QAAA,GACF,SAAG,EAAA,GAIMG,GAAA,qCACCC,EAAAt1B,GAAA,aAAA,CAAAsC,EAAAgrB,KAAA,CAEd,MAAAiI,EAAA,SAAA,cAAA,QAAAF,EAAA,EAEsBG,GAAAD,GAAA,YAAAA,EAAA,wBAETv1B,EAAAA,MAAyB,KAAA8vB,EAAgB,QAAA,iBAAAuF,EAAA,CAAA,EAEpD,GAAAE,GAAmB14B,GAAuB2c,IAAAA,EAAqB,QAAA,cAAAgc,GAAA,OAAA,EAAA,CACzDA,MAAAA,IAA6BC,QAAsBF,CAAA,EACzD,IAAMG,EAAW9Y,EAAMqP,EACC1e,CAAAA,EAGtBgoB,GAAAA,QAIMI,EAAAA,EAAAA,KAA2BC,CAAAA,EAAAA,IAAkB/X,EAAA8X,GAAA,CAAAxH,EAAA,UAAA,SAAA,mBAAA,CAAA,GAE/Cb,IAEFxB,EAAAA,MAAoBzO,EAKtByO,EAAA,eAAAiI,EAAA,EAEEjI,KAAAA,CACAA,MAAAA,IAA6C,KAAAqC,GAAA,CAC/C,MAAA0H,EAAA1H,EAAA,wBACK,OAAA0H,EAAA,KAAA,IAAAA,EAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBtJ,MAAAA,EACjBsJ,EAAA,eAAA/B,EAAA,EAEC+B,CACAA,CAAAA,EACFC,GAAA/1B,GAAA,aAAA,CAAAsC,EAAAgrB,KAAA,CACF,MAAAiI,EAAA,SAAA,cAAA,QAAAF,EAAA,EACDG,GAAAD,GAAA,YAAAA,EAAA,wBAEYv1B,EAAAA,MAAyB,KAAA8vB,EAAgB,QAAA,iBAAAuF,EAAA,CAAA,EAEpD,GAAAE,GAAmB14B,GAAuB2c,IAAAA,EAAqB,QAAA,cAAAgc,GAAA,OAAA,EAAA,CACzDA,MAAAA,IAA6BC,QAAsBF,CAAA,EACzD,IAAMG,EAAW9Y,EAAMqP,EACC1e,CAAAA,EAGtBgoB,GAAAA,QAIMI,EAAAA,EAAAA,SAA2BC,CAAAA,EAAAA,IAAkB/X,EAAA8X,GAAA,CAAAxH,EAAA,UAAA,SAAA,mBAAA,CAAA,GAE/Cb,IAEFlB,EAAAA,MAAoB4J,EAKtB5J,EAAA,eAAA2H,EAAA,EAEE3H,KAAAA,CACAA,MAAAA,IAA6C,KAAA+B,GAAA,CAC/C,MAAA0H,EAAA1H,EAAA,wBACK,OAAA0H,EAAA,KAAA,IAAAA,EAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBtJ,MAAAA,EACjBsJ,EAAA,eAAA/B,EAAA,EAEC+B,CACAA,CAAAA,EACFG,GAAAj2B,GAAA,CAAA,QAAA,GAAA,EAAA,IAAA,CACF,MAAAu1B,EAAA,SAAA,cAAA,QAAAF,EAAA,EACDE,GAEDA,EAAwB,MAAA,CAGtB,CAAA,EACEA,CACF,gBAAA/E,GACD,eAAAM,GAEK,aAAAE,GACJR,WAAAA,EACAM,SAAAA,CACAE,EAAAA,GAAAA,CACAN,cAAAA,EACAE,gBAAAA,uBACY,EAAA,CACZd,EAAAA,EACiB,IAAA,QACjBG,EAAAA,EAAsB,UAAtBA,MAAAA,EAAsB,SAAA,CACvB,IAAA,CAEDxzB,GACEqzB,EAAAA,EAAcpzB,CAAkB,EAAA,CAAO,CAAA,EAAAD,EAAG,IAAA,CAC1Cy4B,EAAU,EAAI,CAAA,EACb,EAAE,CAAA,EACLz4B,EAAU,IAAM,CACdy4B,GACEL,EAAQ,EAAA,CAGV,EAAA,CAAAnE,CAAgB,CAAA,EACdwE,EAAAA,IAAc,EAChBlE,IAAAJ,GAAAzU,IACEuU,GAGF,EAAIM,CAAAA,GAAAA,IACQ,MAAAkF,GAAAC,GAAA,GAAA,EACZC,GAAAC,GAAA,MAAA,CACC,kBAAAC,EAAena,EAEZ+Z,EAAAA,KAAAA,CACEjB,wBAAwBnF,EAAA,QAAA,YAAA,IAAAwG,GAAAJ,KAAA,CAAAK,GAAA,EAC1BH,EAAAA,EAAAA,EAC0C,MAAAp3B,KAE1CyK,EAAa7I,GAEb01B,EACAJ,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,SAAAA,WAAAA,CAAAA,KAC2B15B,IAAAJ,GAC5Bo6B,GAAA,CAEC51B,GAAAA,EAAAA,CAKA7D,MAAAA,GAAY,KAAA,IAAA,EAAkB6D,GAAW8G,SACzCwtB,CAAAA,GAAc,SAAAuB,GAAA,IAAA,KACTL,GAAA,CACLr5B,kBAAY,EACZ,CAAM25B,CAEJ35B,MACAi4B,GAAe,QAAA,KAAA,MAEnB53B,EAAAo5B,CAAA,CAAA,EAEF,CAACt4B,KAAsC0C,EAAAA,SAAoB6I,WAAAA,CAAW,EAGxErK,MAA8BjC,GAAA,CAAA43B,EAAAP,EAAA,IAAA,EAC9Bp4B,MAAAA,GAAAA,KACe,OAAA,CAAA00B,GACX,OAAa3wB,EAAA,MAAA,CACX,GAAA,GAAAjC,CAAiB+M,QACjB,MAAK0rB,iBACgB,IAAAC,GAAA,CAAA9G,EACE,QAAA8G,EAAAtB,EACpB,QAAAsB,EACHb,GAAA,QAAAa,EACKX,GAAA,QAAAW,CACUl6B,EACjB,SAAA,KACAU,SAAAA,EAAkB,MAAA,CAEnB4B,MAAAA,qBAIHI,SAEEjC,CAAAA,EAAAA,SAAAA,CAGI05B,OAAAA,GAEN,QACEl3B,GAAA,QACYA,EAAA,OAAA,QAAA,WAAA,IACJqX,GAAA8Y,EAAA,UAAA,MAAA9Y,GAAA,SAAA,CACS,IAAA,EACb8Y,SAAwB8G,QACxBtB,EAEAW,EACF,WAAAt2B,GAAA,CACSA,EAAA,OAAA,QAAA,WAAA,GAAIW,EAEb,EAAA,CAA+BA,EAE3B1D,MAAQi6B,IAAAA,UAAAA,UAAAA,GACRx2B,SAAgB,CAAAe,EAAA,MAAA,CACd,MAAOiI,cACLymB,SAAAA,CAAAA,SAAgC,MACzB,cAAA,SACK,CAAA3vB,EAAA8xB,GAAA,CAAA,CAAA,EAAAwC,GAAAt0B,EAAAiE,EAAA,CACX,GAAA,IACH,MAAA,2BACF,SAAAjE,EAAAI,EAAA,MACmB,OACZZ,KAAS6Z,GACZ0b,CAAAA,CAAc,CAChB,CAAA,CACF,CAAA,EAAAxxB,IAAAywB,GAAAh0B,EAAA,KAAA,CACAgB,SAAmBuC,CAAwB,CAAGpD,GAAAA,EAE9Cc,MAAA,CAAW,MAAA,cAAad,SACtBc,CAAAA,CAAAA,GAAAszB,CAAA,CAAA,CAAKvzB,CAAM,CAAA,EAAab,SACrB2xB,GAAAA,IACAwC,WAAAA,CAAgBoC,IAAQpC,GAAAA,EACvBA,SAAAA,CAEK,MAAI,4BAAA,KAAU,SAA0Bn0B,QAAAA,WACtC40B,EAAM,EAAA,GAAAle,EAAA8Y,EAAY,UAAZ,MAAA9Y,EAAY,SAAA,CAAG,IAAE,EAE/B,SAAA,QAAA,EAE0C,EAAU,SACvD,CAAA7W,EAAAI,EAAA,CAAKY,KAAM,UAAab,CAAAA,EAAAA,YAENo0B,CAAAA,CAAAA,CAAS,CACrB,CAAA,EAEPrG,CAAAA,CAAAA,GAAeluB,EACF,MAAA,CAGV,MACQ,iBAAA,SACDw0B,CAAA,CAAA,WACUvzB,EAAAK,EAAA,CACbyzB,SAAAA,CAAAA,EAAc,KAAA,CACdpF,MAAAA,WAAgC,SACzB,CAAAzB,EAAA,IAAAxY,GAAA,CAAA,KACK,CACX,GAAA+H,GACH,OAAAxR,EAAE9L,MAEFH,GAAW,KAAAC,EACb,QAAA02B,CACD,EAAAjhB,EAEF8e,GAAiBvoB,GAAA,YAAAA,EAAA,KAAAwR,GAAW5a,EAAAxF,EAAA,IAAAA,CAAA,MAAAoqB,CAAA,GAAA,MAAAA,CAAA,GAAkB+M,IAAAA,EAAAA,GACxCt2B,IAAAA,SACPiC,EACEc,GAAAg0B,GAAA,MAAA,UAAUh1B,IAAA,aACDsB,gBACC,MAAMkc,EAAAA,IAAAA,UAAAA,IAAAA,SAAUxR,GAAAA,GAAAA,CAAQiiB,GAAAA,EAAOjuB,OAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAM02B,GAAAA,WAAAA,CAAAA,EAAAA,UAAYjhB,EAEjD7S,CAAAA,cACExF,EAAAA,UAEI,GAEC6wB,CACb,EACUluB,EAAA,KAAA,CACV,MAAA,yBACM42B,SAAAA,EAAsBC,GAAA,CACjB,MAAAC,EACO,MAAA,GAAA72B,CAAA,YAERsa,SAAM7H,GAAS,IAAAsb,IAAA,CACftb,KAAEqkB,CACG,GAAAC,EACT,OAAAC,EACKvkB,EAAeF,GACX0kB,IAAAD,IAAA,YAAAA,GAAA,KAAAD,EACTG,GAAA95B,EAAA,IAAAA,CAAA,MAAA65B,EAAA,GAAA,MAAAA,EAAA,GACO,OAAAl3B,EAAA,KAAA,CACR,SAAAA,EAAAiE,EAAA,OAEC,yCAEQ,GAAAkzB,GAAwBh3B,SAEfg0B,EAAAn0B,EAAA0oB,GAAA,CACNnlB,SAAAA,aACmBpD,KAEnBoB,IACC,kBAAA,GAAMkc,aAAAA,CAAAA,CAAUxR,EAAAA,EAAAA,GAAAA,CAAW+hB,OAAAA,GAC3BvG,SAAAA,EACA5kB,KAAAA,IAGN,kBACE,GAAA1C,aAAAA,CACO,CACG,CAAA,CAAA,CACEA,EAAAA,CAAAA,CAGC,CAAA,CACKsd,CACVpgB,CAAAA,EAAAA,YACKogB,EAAA,EAAA,EAELgX,MAAAA,EAAAA,GAAAA,OAAAA,EAA2B,OAAAQ,GAG7Bj1B,IAAAA,CAAAA,GAAOyC,IAAA,CAAA,KAAA,CAELpF,GAAAA,GAAAA,iBAAAA,EACK,EAAA2wB,GAELyG,GAAAA,EAAAA,IAAAA,CAAAA,MAAAA,EAAAA,GAAAA,MAAAA,EAAAA,GAAAA,GACDhyB,EAAA,GAAAA,EAAAwyB,GAAA,OAAA,EAAAmC,GAECpJ,GAAA,WAAA,CAAA,CAAAA,GAAA,YAACqJ,GACL,CAAAC,IAAAF,IAAA30B,EAAA,GAAA80B,GAAAC,KAAAv3B,IAAA,UAAAA,IAAA,gBAAA,CAAAq3B,IAAA,CAAArC,GAAAxyB,EAAA,CAAA,EAAA,kBAAA,CAAAwyB,GAAAxyB,EAAA,CAAA,EAAA,kBAAA,OAEPzC,EAAA,KAAA,CAAC,MACY,wDAAAC,CAAA,4BAAAwC,IAAA,EAAA,QAAAA,IAAAwyB,GAAA,OAAA,EAAA,MAAA,QAAA,IAAAqC,GAAA,4BAAA,EAAA,GAAC,SAxCA7Z,EAAAA,EAAS,CA2ChC,MAAA,4BACM8Z,GAAAA,GACN,SAAah2B,GAAiBvB,EAAAy3B,GAAA,CACtB,OAAAzJ,GAAMvQ,SAAAA,CAAAA,CAAU6Z,EAAAA,EAAAA,EAAAA,GAAAA,CAAqBtJ,SAAAA,GACrCnrB,SAAAA,EAGA20B,aAAAA,CACN,CAAA,EAAkBxJ,EAAAA,GAAAA,CACZqJ,OAAAA,GASN,SAAAh6B,gBAWK,CAAE8C,CAEE,CAAA,CAAO,EAAA,YAAgC0C,EAAAA,EAAAA,CAAAA,CAAI1C,CAEtB,CAEpB9C,OAAAA,EAAAA,KAAAA,CAAAA,SACD2C,EAEDA,EAAAA,CAAO,MACKyd,4BACVpgB,GAAAA,EACAo3B,SAAAA,EAAAA,EAAAA,GAAAA,CAA2B,SAAAhX,GAGtB,SAAApgB,EAELA,aAAAA,CAAAA,CACAo3B,EAAAA,EAAAA,GAAAA,CAAAA,OAAAA,EAEH,SAAAp3B,EACI,aAAAo3B,CACL,CAEP,CAAA,CACH,CACA,EAAA,YACEhX,GAAAkZ,CAAA,EAAA,CAAAx2B,CAAAA,EAAAA,OACO,WAAAc,EAAAK,EAAA,CAAA,SAAO,CAAAtB,EAAA,KAAA,CAAA,MAAgC6C,CAAI1C,OAAAA,MAG1Csd,EACApgB,SAAAA,EAAAA,GAAAA,CACAo3B,SAAAA,EAAAA,CAA2B,CAGtB,CACL/e,EAAAA,EAAAA,KAAAA,CACArY,MAAAA,CACAo3B,OAAAA,MAAAA,EAEH,SACGz0B,EAAA0oB,GAAA,CAfE,SAAA,EAgBN,CAGP1M,CACC,CAAA7b,CAAAA,CACE,CAAA,CAAA,CACS,CAAA,EAAA8K,IACG,YAAA+Q,EAAAhc,EAAA6c,GAAA,CACV,SAAA6a,GAAA,CAAEv3B,GAEK40B,GAAY,EAErB,SACS/0B,EAAA,SAAA,CAAA,KACG,SACV,MAAA,cAAEG,QAAAA,MAEK,EAAA,MAAS,CAAA,eAAE,KAChB,EAEP,SAAA,YAAA,CAEF8K,CAEU,CAAA,QACiB,CACpB,MAAY,yBACA,SAAA,UACZ,CAAA,EAAA,CACF,CAAA,EAAAA,IAAA,UAAAjL,EAAA,KAAA,CAAEG,MAAAA,WAEF,SACO,MAAA,KAAA,CAAA,OACC,CAAA,CACND,EAAAA,IAAAA,CAAAA,EAAAA,OAAyB,KAAA,CAAA,SAClBF,EAAA0oB,GAAA,CAAA,SAAkB,EAAA,CAAM,CAAA,EAAAjmB,EAAEtC,CAClC,CAAA,CAAA,EAEO8K,IAAA,SAAAjL,EAAA,IAAA,CAAC,MAGXA,WAAA,SAASi0B,CAAA,CAAA,EAAwB9zB,IAAC,SAAAc,EAAA,IAAA,CAAQ,MAC1C,WACJ,SACY,CAAAizB,EAAAl0B,EACdA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAU,MAAA,eAAUG,YACN40B,EAAA,CAAA7G,EAAA,MAAA,EAAEhwB,SAAQ,WAAA,CAAG,CAAEqD,CACzB,CAAApB,CAAAA,CACS,CAAA,CAAS,CAAA,CAAE,CAErB,SACC02B,GAEQ,CAAW,MAAAtzB,EAAS,MAAY0wB,EAAAA,SAAAA,CAG5C,EAAA,CAAS,MAAU9zB,EAEjBH,IAEA,CACQ,WAAAuwB,EACgC,SAAAE,EACvC,KAAAmB,CAEQ,EAAAlC,GAEZ,CAAA,cACE/R,EACF,UAAA,YAET,CAAA,EAEArhB,OAAAA,EAAwB,IAAA,CAAEiH,GAAAA,MAAAA,GAAco0B,EAAAA,CAAAA,CAAAA,EAAWx3B,EAAAA,MAAAA,CAAY,MAAA,mBAAAw3B,CAAA,GAC7D,qBAA2B,CACrB,SAAA,CAAA33B,EAAA,KAAA,CAAEuwB,SAAAA,CAAAA,CAAYE,EAAAA,EAAAA,OAAAA,CAAUmB,SAAAA,CAAAA,EAAAA,SAAAA,CAAmB,KAAA,SAChCjU,MAAAA,eACJ,SAAA4S,EACZ,QAAA,IAAA,UACS3Z,EAAA+G,EAAM,UAAN,MAAA/G,EAAM,SAAA,CACP,KAAA,CAAA,KAAA,IAAA,KAAAC,EAAA8G,EAAA,UAAA,YAAA9G,EAAA,WAAA,EACJ,SAAA,QAEL,EACe,EAA8B1W,SACzCc,EAAAb,EAAA,CAAAD,KACEH,cAAA,CAAKuD,CAAAA,CACLtC,EAAAA,IAAAjB,EAAA,SAAA,CAAAG,KAAAA,SAEIF,MAAK,eACLe,SAAMyvB,EACN/sB,QAAU6sB,IAAAA,cACK,kBAAA,SAAA,CACb5S,KAAAA,cAA8B9G,EAAA8G,EAAA,UAAA,YAAA9G,EAAA,WAAA,EAC5ByH,SAAOtI,QAA8C,EAC3C,EAEd,SAAAhW,EAAAI,EAAA,CAAED,KAAAA,eAEG,CAAA,CAAM,CAAA,CAAc,CAAE,CAAA,CAAC,CAE9B,CAAA,EAAAH,EACO,KAAA,CAAA,IACC2d,EAAA,SAAAxd,CACIswB,CAAAA,CAAAA,CAER9S,CAAAA,CAA8B,CACwB,SAAA8Z,GAC1C,CAAA,OAAA/hB,EAEd,SAAArY,CAAA,EAAE8C,CAEG,MAAAM,EAAMC,GAAAnD,CAAA,EAAA,CAAiB,GAAAQ,CACrB,EAAA2X,EAGb1V,EAAA43B,GAAAliB,CAAA,EAASiI,EAAAA,GAAAA,EAAAA,CAAAA,EAAYxd,OAAAA,EAAAA,UAAAA,CAAU,MAAM,wBAClC,SAAA,KAET,SAAA,CAAAM,EAAA,mBAAAo3B,CAAA,EAAA52B,EAAA,MAAA,CAEA,MAA+B,sBAAEyU,SAAAA,CAAAA,EAAAA,EAAAA,CAAQrY,KAAAA,SAAY,KAAA,GAC7CoD,CAAAA,EAAAA,EAAaC,mBAAkBm3B,CAAA,EAAA,IAAAp3B,EAAA,mBAAAo3B,CAAA,CAAA,KAAA,EAAA,CACrC,CAAM,EAAA73B,EAAA,MAAA,CAAEjC,MAAAA,sBAAO2X,SAAAA,EAAAA,EAAAA,CACToiB,KAAAA,SACAD,KAAAA,GACN,CAAA,CACE,CAAe,EAAA52B,EAAA,MAAA,CAAiC,MAAA,kBAAId,MAAAA,EAE3Ca,SAAM,CAAA82B,EAAApiB,EAAA,WAAAA,EAAA,aAAAzU,EAAAK,EAAA,CAAqBnB,SAC9BH,CAAAA,IAAKA,EAAA,OAAA,CAAM,MAAA,gBAAc,SAAAA,EAAAI,EAAA,CACb23B,KAAAA,YAKd/3B,KAAA,GAAA,CAAW,CAAA,CAAqBG,CAAAA,CACzB,CAAA,CAACE,CAAK,CAAA,CAAA,CAAc,CAAA,CAAK,CAGlC,SAAW+1B,IAAA,CAAA,MAAyB0B,CAAAA,CAAAA,SAAAA,cAAAA,sCAAAA,CAAAA,CC7lB1C,MAAMppB,GAAQ,GAEd,SAASspB,IAAkB,CACnBv3B,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAEQ,GAAAA,EAAI,GAAGuO,GAAW2rB,GAAU,EAC9B,CAAC1N,EAAcC,CAAe,EAAIC,GAAgB,EAClDyN,EAAiB,CAAC3N,EAAaxoB,IAAI,SAAS,EAC5Co2B,EAAgB,CAAC,CAAC5N,EAAaxoB,IAAI,QAAQ,EAC3Cq2B,EAAS7N,EAAaxoB,IAAI,QAAQ,EAClCyZ,EAAQ,CAAC,CAAC+O,EAAaxoB,IAAI,OAAO,EAClC,CAAE3E,MAAAA,EAAOC,SAAAA,EAAU2K,cAAAA,GAAkB1K,EAAI,CAAED,SAAUiP,EAAOjP,QAAAA,CAAU,EACtEg7B,EAA0Bh8B,IAChC,eAAei8B,EAAqBnnB,EAAW,CAC7C,MAAMC,EAAU,CAAA,EAChB,GAAID,EAAW,CACP,KAAA,CAAEnT,MAAOu6B,GAAmB,MAAMn7B,EAAMM,GAAG+D,SAC9C+2B,aAAaz6B,EAAI,CAChB06B,OAAQ,EAAA,CACT,EACAx6B,KAAK,EACR,GAAIs6B,GAAAA,MAAAA,EAAgBr6B,QAAU,CAACk6B,GAAU,CAAC5c,EAKpC+c,GAJJA,EAAe5sB,QAAoB+J,IAAA,CACjCA,GAAOihB,QAAU,GACjB/3B,GAAW8W,GAAQrY,CAAQ,CAAA,CAC5B,EACGk7B,EAAer6B,QAAU,EAAG,CAC9B,MAAMw6B,GAAoBH,EAAeh3B,IAAKmU,IAAWA,GAAO3X,EAAE,EAClEqT,EAAQmR,KAAK,CACXxkB,GAAI26B,GACJxK,MAAOqK,EACPt4B,KAAM,QAAA,CACP,CAAA,MAEOsiB,EAAAA,KAAK,GAAGgW,CAAc,CAGpC,EACIpnB,GAAa,CAACknB,EAAwB97B,WACxC87B,EAAwB97B,QAAUa,EAAMM,GAAG+D,SAAS+2B,aAAaz6B,EAAI,CACnEF,MAAO6Q,GACPiqB,gBAAiBT,EACjBU,gBAAiBT,EACjBU,WAAYrd,EACZ4c,OAAAA,CAAAA,CACD,GAEG,KAAA,CAAEp6B,MAAAA,EAAOwe,KAAAA,EAAS,EAAA,MAAM6b,EAAwB97B,QAAQ0B,OAC9D,OAAID,GAAAA,MAAAA,EAAOE,SACDqkB,EAAAA,KAAK,GAAGvkB,CAAK,EAErBA,EAAM2N,QAAkBqiB,GAAA,CACtBpvB,GAAWovB,EAAM3wB,CAAQ,CAAA,CAC1B,GAEI,CACLW,MAAOoT,EACPoL,KAAAA,EAAAA,CAEJ,CAEA,KAAM,CAACha,EAASs2B,CAAU,EAAI57B,EAAS,EACjC,CAAC67B,EAAcC,CAAe,EAAI97B,EAAS,CAAE,CAAA,EACnD+7B,GACG,GAAEz2B,GAAAA,MAAAA,EAASoN,YAAcpN,EAAQoN,YAAc,IAAM,EAAG,IACvDpN,GAAAA,MAAAA,EAASgN,KAAOhN,EAAQgN,KAAO,eAChC,GACD,mBACF,EACAlT,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAM21B,EAAM,MAAM70B,EAAMM,GAAG+D,SAASpD,MAAMN,CAAE,EAC5CnB,GAAe,CACfk8B,MAAAA,CAAc,CAChB,IACEl8B,MAAAA,EAAe,MAAAQ,EAAA,GAAA,SAAA,iBAAAW,CAAA,EACjBi7B,EAAAE,CAAA,CACA,MAAI,CAAA,CACF,IACAt8B,EAAAA,CAAAA,CAAAA,CAAAA,EAAY,KAAA,CAAEm8B,YAAAA,EACdC,KAAAA,EAA4B,OAAAnpB,CAE5BjT,EAAAA,MACFu8B,EAAA98B,IACC+8B,EAAA/pB,GAAA,IAAA,CACL,MAAOgqB,EAAA54B,EAAA,SAAA,GAAA1C,CAAA,IAAAV,CAAA,EAAA,EAEDi8B,EAAA,CAAApB,GAAAC,GAAAC,GAAA5c,EAAE5L,OAAAA,EAAAA,EAAAA,CAAaJ,SAAAA,CAAAA,EAAAA,GAAAA,CAAMK,SAAAA,UAAsBwpB,GAACt7B,EAE5Co7B,iBAAsB/7B,EAAA,GAAA,SAAA,MAAAW,CAAA,EACtBq7B,cAAAA,EACJ,aACA,CAAA,EAAME,EAAW,MAAmBnB,CACpC,mBACEh4B,IAAAA,EAEI9C,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,QAC0BU,CAAAA,MAAAA,CAAAA,sCAE1BiK,MAAAA,gBACU,SAAAhI,EAAAI,EAAA,CAEZa,KAAA,IAAW,KAAA,GAAA,CAAkBk4B,CAAAA,CAC1BG,EAAAA,EAAAA,EACCt5B,CACEkE,KAAK,SACLlD,MAAM,gBACNuC,KAAM,GAAA,CAAepD,EAAAA,EAAAA,GAEhB,GAAM,IAAA9C,CAAA,MAAAU,CAAA,GAAAm6B,EAAA,aAAA,EAAA,GAAA,QAAS,IAAA,CAAKA,GAG3Bl4B,GAAK,2BAAA,CAAqB,EAAgBM,MAAK43B,EAAA,GAAA,YAEjDl4B,SAAK,WAAA,CACHkE,EAAAA,IAAiB,CACjBhE,QAAe,MAAAnC,CAAA,GAAAo6B,EAAA,GAAA,WAAA,GACb,QAAoB,IAAA,CAClBlhB,GACFA,GAAA,8BAAA,CAEFjW,EAAyCb,MAC1Cg4B,EAAA,YAAA,GAGDn4B,SAAK,UAAA,CACHkE,EAAAA,IAAiB,CACjBhE,QAAe,MAAAnC,CAAA,GAAAyd,EAAA,GAAA,UAAA,GACb,QAAoB,IAAA,CAClBvE,GACFA,GAAA,0BAAA,CAEFjW,EAAyCb,MAC1Cqb,EAAA,YAAA,GAGDxb,SAAK,OAAA,CACHkE,EAAAA,EAAiB,IAAAuf,GAAUjI,EAAAA,GAC3Btb,QAAe,MAAAnC,CAAA,GAAAq6B,IAAA3U,EAAA,KAAA,GAAA,WAAA,mBAAAA,EAAA,IAAA,CAAA,EAAA,GACb,QAAY,IAAA,CACVxM,IAAoCwM,EAAA,MACtCxM,GAAA,8BAAAwM,EAAA,IAAA,EAAA,CAEFziB,EAAgCb,MACjCi4B,IAAA3U,EAAA,KAAA,YAAA,GAGAsV,SAAAA,EAAkBtV,OAAAA,CAEV,SAAY,CAAAzjB,EAAA,OACfo4B,OAIa,qBACTA,SAAAA,GACFnhB,CAAW,EAAAwM,EAAA,IAAA,CAAuC,CACpD,CACF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC2C,CAAGtjB,CAE9C,EAAAA,CAAAA,EAAAA,EAAAA,EACE+3B,EAAAC,EAAAY,EAAAX,EAAA5c,CAAA,CAAA,EAAAlf,EAAA,IAAY,OAAA,MAAAi9B,GAAqB1iB,EAAAsiB,EAAA,UAAA,YAAAtiB,EAAA,cAAA,cAAC0iB,GACzBJ,EACL,QAAA,SAAA,CAAC,SAMT,SACE,KAAAI,EAAA,YAAAJ,EAAA,QAAA,YAAAI,EAAA,aAAA,CAAA,CACN,CAaNj9B,EAAAA,CAAAA,EAAgB87B,EAAA5c,EAAA0c,EAAAC,CAAA,CAAA,EAEd,MAAAtnB,EAAesoB,GAAsBp5B,IACzByC,GAAA,MAAAA,EAAA,IAEGjG,QAAQ8hB,EAAS,GAAA,EAAA,SAD9BzhB,KAEY,CAAA4F,EAER+2B,EAGNC,EAAA,CAAA,CAAAh3B,GAAA,EADGnF,IAAAwT,GAEL,OAAIkoB,EAAAA,IAEEloB,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAgCrO,EAAA,KAAA,OAAA,GACpC,eAAcK,EAAAA,KAAAA,CAAY,MAAA,iBAC1B,SAAe,CAAA7C,EAAA,IAAQwC,CAChBsO,SAAAA,EAAAA,GAAAA,CACLtO,KAAQoN,UAEZ,CAAoB,CAEpB,CAAA,IACW,MAAA,UAEGpN,SAAsBA,CAChCwxB,SACE/yB,KAAAuO,CAAA,CAAA,CACQ,CAAA,CAMNrP,CAAAA,CAEA,CAAAA,EACY,GAAA,mBAAoB0P,SAAAA,EAAAA,UAAiB,2BAAC,UAElD,uBAAA1P,WAAAA,EACEA,UAAAA,GAAY,eAAOM,EAAA,SAAA,eAAA,cACf24B,EAAA,QACJlB,EAAAC,EAAAC,EAAA5c,EAENzd,UAAGiC,EAAAwtB,GAAA,CACHnwB,OAAAA,GACU,SAAA,OACA,WAAA,QACEi7B,SAAAA,SACH,WAAAt4B,EAAA,SAAA,CACTuJ,KAAAA,SACe6vB,MAAAA,QACf1E,SAA0ByD,EAAAA,EAAAA,CAC1B5D,YAEU,KAAA,GAAA,CAEG,CAAA,CACE,EACX1U,SAAS5e,EAAAuC,EAAA,CACTF,SACEtD,GAAQC,QAAK,IAAA,EAAe,SAAA,CAAOE,GAAAA,CACtB,KAAA,CAAY,MAAAs5B,CAAK,EAAAn8B,EAAA,CACtB,SAAAuT,CAAA,CACT1Q,EAGYq5B,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,OAAAA,MACIh3B,EAAA,IACb,CAAa,EACP,CACI,GAAAsnB,CAAA,EAAE1sB,EAAM,SAAQ,KAAA,IAAAyT,CAAA,MAAAiZ,CAAA,EAAA,MACVjZ,CACZ,MAAC,8BAAA,CACD,CAA2C,IAC3BrB,EAEV,SAAA,CAAAxP,EAAAI,EAAA,CAAA,KAAErC,UAAAA,CAAAA,EAAAA,IAAOk0B,EAAAA,QAAAA,CACf7M,MAAAA,oBAA4C,UACrC5lB,iCAAGQ,EAAA,IAAA,CACVpD,SAAQ2S,CACR5P,CAAAA,EAAAA,GAAAA,CAAoC,CACtC,CAAA,CAAA,CAAA,CACC,CACL,CAAEQ,EAAAA,CAAAA,CAEG,CC1RjB,MAAMuO,GAAQ,GAEd,SAASgrB,IAAY,CACnBT,GAAS,YAAa,IAAI,EACpB,KAAA,CAAE77B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1Bq8B,EAAoBt9B,IAC1B,eAAeu9B,EAAezoB,EAAW,CACnCA,OAAAA,GAAa,CAACwoB,EAAkBp9B,WAClCo9B,EAAkBp9B,QAAUa,EAAMM,GAAGojB,UAAUljB,KAAK,CAAEC,MAAO6Q,EAAAA,CAAO,GAE/D,MAAMirB,EAAkBp9B,QAAQ0B,MACzC,CAEA,OACE+B,EAAC+zB,GAAQ,CACPxwB,MAAM,YACNxF,GAAG,YACHk2B,UAAU,2CACVC,UAAU,2BACV72B,SAAAA,EACA+2B,WAAYwF,CAAAA,CACb,CAEL,CCvBA,MAAMlrB,GAAQ,GAEd,SAASmrB,IAAa,CACpBZ,GAAS,aAAc,IAAI,EACrB,KAAA,CAAE77B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1Bw8B,EAAqBz9B,IAC3B,eAAe09B,EAAgB5oB,EAAW,CACpCA,OAAAA,GAAa,CAAC2oB,EAAmBv9B,WACnCu9B,EAAmBv9B,QAAUa,EAAMM,GAAGqjB,WAAWnjB,KAAK,CAAEC,MAAO6Q,EAAAA,CAAO,GAEjE,MAAMorB,EAAmBv9B,QAAQ0B,MAC1C,CAEA,OACE+B,EAAC+zB,GAAQ,CACPxwB,MAAM,aACNxF,GAAG,aACHk2B,UAAU,6CACVC,UAAU,4BACV72B,SAAAA,EACA+2B,WAAY2F,CAAAA,CACb,CAEL,CCpBA,MAAMrrB,GAAQ,IAEd,SAASsrB,IAAmB,CACpB,KAAA,CAAE58B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAChC27B,GAAU,oBAAqB,KAAI,EACnC,KAAM,CAAChuB,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAE1C,CAAC6kB,EAAkBC,CAAmB,EAAI9kB,EAAS,CAAE,CAAA,EAC3DZ,OAAAA,EAAU,IAAM,CACdgP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAM+W,EAAWjlB,EAAMM,GAAGu8B,aAAar8B,KAAK,CAC1CC,MAAO6Q,EAAAA,CACR,EACK4T,EAAO,CAAA,EACV,EAAA,CACK,KAAA,CAAEtkB,MAAAA,EAAOwe,KAAAA,CAAAA,EAAS,MAAM6F,EAASpkB,OACnCue,GAAAA,IAAQxe,GAAAA,YAAAA,EAAOE,UAAW,EAAG,MAC5BqkB,EAAAA,KAAK,GAAGvkB,CAAK,CACX,OAAA,IACJuc,EAAAA,KAAK,CAAC7H,EAAGF,IAAME,EAAElK,KAAK0xB,cAAc1nB,EAAEhK,IAAI,CAAC,EAChD5L,EAAgB0lB,CAAA,EAChBN,EAAAA,SAAoBM,CACpBhX,MAAAA,GACU,OAAA,CACV1O,CACA0O,IACF,EAAA,CAAA,CAAA,EACCtL,EAAA,MAAA,CACL,GAAK,yBAEL,uBACOjC,SAAG,KAAyBiD,SAAMC,EAAA,MAAA,CAA0B,MAAA,qBAAId,YACnE,SAAA,CAAW,SAAAc,EAAA,MAAA,CAAoBd,MAC7BH,cAAAG,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBc,CAAAA,EAAA6wB,GAAA,CAAA,CAAA,EAAA9xB,EAAAiE,EAAA,CAAW,GAAA,IAAa9D,MAAAA,eAEhB+D,SAAGlE,EAAAI,EAAA,CAAU,KAAA,OAAcD,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGH,EAAE,KAAA,CAAC,SACxB,mBAAA,CACJ,EACLA,EAAA,MAAA,CAAAG,MAAI,aAAA,CAAqB,CACzBH,CAAA,CAAA,CAAW,CAAA,EAAaA,EAAG,OAAA,CAAA,SACxB+hB,EAAA,OAAA,EAAA/hB,EAAA,KAAA,CAEPA,MAAA,YACG+hB,SAAAA,EAA0B,IAAA0B,KACzB,KAAA,CAAU,SAAAxiB,EAAAgD,EAAA,CACP8d,GAAAA,EAAAA,IAAAA,CAAsB0B,MAAAA,MACrB,GAAA,MAAAA,EAAA,IAAA,GAAAtjB,YACOC,EAAA,CACH8D,KACc,SAA6C,CAC1D/D,EAAAA,IAAAA,EAEDH,OAAK,CAACK,SAAKojB,EAAA,IAAA,CAAW,CAAA,CAAE,CAAA,CAAWjb,CAAAA,CAAAA,CAAY,CAAA,EAC3CyC,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAEV,WACC,SACUA,EAAAyX,GAAA,CACL,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAO8K,IAAA,QAAAjL,EAAA,IAAA,CAAA,MAAE,WACf,SACW,mCACd,CAAA,EAASA,EAAA,IAAA,CAAUG,MAAC,WAEpBH,SAAA,2BAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,CAA4B,CAAA,CAE7C,CC9ECm6B,SAAAA,GAAanM,EAAMoM,EAAeC,EAAkB,OAC5D,KAAA,CAAEf,SAAAA,CAAatL,EAAAA,EAGjB5e,GAFA,EAACkqB,GAAAA,MAAAA,EAAUp7B,SACAm8B,KAAoBrM,EAAAA,EAAKxrB,UAALwrB,YAAAA,EAAcjwB,MAAOs8B,EACrC,MAAA,GACbC,MAAAA,EAAiBhB,EAASlf,OAAcmgB,GAAA,CACtC,KAAA,CAAEngB,OAAAA,CAAWmgB,EAAAA,EACbC,EAAapgB,EAAO6U,QAAQjH,SAASoS,CAAa,EACxD,OAAKI,EACApgB,EAAOqgB,UACL,IAAI3vB,KAAKsP,EAAOqgB,SAAS,MAAQ3vB,KADV0vB,EADN,EAEqB,CAC9C,EACD,GAAI,CAACF,EAAep8B,OAAe,MAAA,GAEnCtB,GADiB09B,EAAe/V,QAAYgW,EAAEngB,OAAOsgB,eAAiB,MAAM,EAC9DC,MAAAA,GAAUrB,MAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,OAAAA,eAAAA,MAAAA,EAAUgB,GAAAA,EAAAA,CAAgBtM,MAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,KAAAA,EAAMA,EAAA,UAAA,CACpD2M,OAAAA,EAAiB,UAAAC,EAAA,KAAA,KAAA,CACrB,CACA,CACE,OAAAC,CACA7M,CACU4M,SAAAA,GAAAA,EAAAA,EAAAA,CACRE,GAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QACF,MAAA,GACF,GAAA,CAAAV,EACOS,OAAAA,EACT,MAAAR,EAAA34B,EAAA,QAAA,IAAA,gBAAA,EACgB6sB,OAAAA,EAAAA,OAAAA,MAAoCP,EAAAoM,EAAAC,CAAA,CAAA,CAClD,CClBF,MAAM3rB,GAAQ,GAEd,SAASqsB,GAAU,CAAEx3B,MAAAA,EAAOwU,KAAAA,EAAMha,GAAAA,EAAI,GAAGkrB,CAAM,EAAG,CACvC1lB,GAAAA,GAAS,YAAawU,GAAQ,YAAY,EAC7C,KAAA,CAAE3a,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1BmD,EAAaC,GAAYnD,CAAM,EAC/By9B,EAAe3+B,IACf4+B,EAAa5+B,IAEXy4B,eAA0BvxB,EAAAA,EAAAA,EAElC4N,MAAoC,WAC9BA,EAAAA,QAAc6pB,EAAaz+B,GAAS,UAAA,SAAA,CACtCy+B,MAAAA,EAAmD,CAAA,GACrD,MAAA5pB,EAAA,MAAA4pB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAAh9B,CAAEA,EAAAA,EAAM,OAAIoT,GAAAA,MAAAA,EAAAA,aAEd6pB,EAAe,QAAAj9B,EAAA,CAAA,EAAA,IAELU,EAAAA,GAAkBu8B,EAAAA,MAAAA,EAC5Bj9B,EAAA,QAAAgwB,GAAA,CAEQO,GAAAA,EAAAA,EACRvwB,CAAAA,EACEY,EAAAA,GAAyBZ,EAAAX,CAAA,EAC3BW,EAAC,KAAA,CAAA0U,EAAAF,IAAA,CACO6b,MAAAA,EAAAA,IAAAA,gBAA4B,EAIlC,OADmB,IAAA,KAAA7b,EAAA,SAAA,EACL+c,CACd,CAAA,GAED,CACH,GAAAne,EACO,MAAApT,CAAA,CAELA,CACF,eAAAa,GAAA,CACF,GAAA,CAEA,MAAAuS,EAAiC,MAAAhU,EAAA,GAAA,UAAA,SAAA,CAC3B,MAAA,EACF,SAAgB69B,EAAYv9B,OAChB,CAAA,EACD,KAAA,EAAA,WAIP,EAAA0T,EAAEpT,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAUoT,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GAChBxU,EAAYyxB,GAAArwB,EAAAX,CAA8Bd,EAC1CyB,KAAmBA,EAAA,MAAA,EACNzB,EAAAA,KAAAA,GAAgB,CAAAyxB,EAAGjwB,MAAAA,GAK9B,MAAA,CACF,MAAA,EACO,CAAA,CAEA,MAAAS,EAAAnC,IACT6+B,EAAA,SAAA,CACF,GAAA18B,EAAA,UAAAA,EAAA,QAAA,aAAA,UAAA,YAAAA,EAAA,QAAA,aAAA,UAAA,MAEA,OAEUE,MAAAA,EAA+BF,MAAAA,EAAAA,GAAAA,OAAAA,WAAU,EAE/CA,OAAAA,EAAAA,QACCA,EAAAA,GAGD5B,EAAAA,aAA4C,KAAA,OAAA,EAC5C6B,EAAA,GAAA,gBAAAiX,GAAA,CACF9W,GAAA8W,EAAArY,CAAA,CACA,CAAA,EACAmB,cAAoBA,GAAAA,CACjBjC,MAAAA,EAAeyZ,GAAAA,EAAY3Y,CAAA,EACtBqB,IAEDy8B,EAAAA,YACLv+B,CAAAA,EACAgC,EAAAA,GAAAA,YAA2B,GAC5BH,CAEDA,EACUC,OAAAA,EAAAA,IAAK,CAEP2lB,IAAAA,EACFA,OAAAA,SAAGA,EAAa,MAAA6W,OAGf18B,KACL5B,IACF6B,EAAA,GAAA,QAEOA,EAAAA,QAAAA,KAETnC,CACMmC,EAAAA,CAAAA,CAAAA,EACSuB,EAAA+zB,GAAA,CACXt1B,MAAAA,eACF,GAAGV,GAAA,YACH,UAAa,uBACX,UAAY,wBACVU,SAAAA,EACAD,WAAa48B,EACf,gBAAAv8B,EACF,UAAA,GACF,eAAK4B,EAAA,SAAA,eAEL,GAAAwoB,EAEI1lB,aAAgB,EAAA,CAAA,CACN,CC5GhB,MAAMmL,GAAQ,GAKR2sB,GAAsB,EACtBC,GAAmBD,GAAsB,EAE/C,SAASE,GAAS,CAAEC,WAAAA,EAAY,GAAGvS,CAAM,EAAG,CAEtC,GAAA,CAAEjI,QAAAA,EAAS,GAAG1U,CAAAA,EAAWkvB,EAAa,GAAKvD,KAC3ChP,EAAMjI,UAASA,EAAUiI,EAAMjI,SACnC,IAAIya,EAAWza,EAAQ0a,KAAK,EAAE9Z,MAAM,QAAQ,EAC5C6Z,EAASlhB,KAAK,EACdyG,EAAUya,EAAS,CAAC,EAEd,KAAA,CAAEr+B,MAAAA,EAAOC,SAAAA,EAAU2K,cAAAA,GAAkB1K,EAAI,CAC7CD,UAAU4rB,GAAAA,YAAAA,EAAO5rB,WAAYiP,EAAOjP,QAAAA,CACrC,EACK,CAAE2K,cAAe+L,GAAyBzW,EAAI,EAC9Cq+B,EAAeF,EAASl6B,IAAKstB,GAAO,IAAGA,CAAE,EAAC,EAAEtP,KAAK,GAAG,EACpDhc,EAAQlG,EAAY,GAAEs+B,CAAa,OAAMt+B,CAAS,GAAIs+B,EAC5D1C,GAAS11B,EAAQ,wBAAuB,EACxC,MAAM03B,EAAa5+B,IAGbu/B,EAAQv/B,EAAOgJ,MAAS,EAC9B,eAAew2B,EAAc1qB,EAAW,CAUtC,MAAMC,EAAU,MAAMhU,EAAMM,GAAGo+B,UAC5BC,YAAY/a,EAAS,CACpBnjB,MAAO6Q,GACPstB,IAAKP,EAASlT,MAAM,CAAC,EACrB0T,MAAO9qB,EAAY9L,OAAYu2B,EAAMr/B,OAAAA,CACtC,EACA0B,KAAK,EACF,CAAED,MAAAA,CAAUoT,EAAAA,EAClB,OAAIpT,GAAAA,MAAAA,EAAOE,SACLiT,IACS5U,EAAAA,QAAUyB,EAAM,CAAC,EAAED,IAGhCC,EAAM2N,QAAkBqiB,GAAA,CACtBpvB,GAAWovB,EAAM3wB,CAAQ,CAAA,CAC1B,EAEDu+B,EAAMr/B,QAAUyB,EAAMA,EAAME,OAAS,CAAC,EAAEH,IAEnC,CACL,GAAGqT,EACHpT,MAAAA,CAAAA,CAEJ,CAEA,eAAea,GAAkB,CAC3B,GAAA,CACF,MAAMuS,EAAU,MAAMhU,EAAMM,GAAGo+B,UAC5BC,YAAY/a,EAAS,CACpBnjB,MAAO,EACPm+B,IAAKP,EAASlT,MAAM,CAAC,EACrBzqB,SAAUm9B,EAAW1+B,OAAAA,CACtB,EACA0B,KAAK,EACF,CAAED,MAAAA,CAAUoT,EAAAA,EAClB,MAAIpT,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACg+B,EAAeC,CAAgB,EAAIj/B,EAAS,SAAS,EACtD,CAAC8B,EAAMkQ,CAAO,EAAIhS,EAAS,EAEjCZ,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAM0C,EAAO,MAAM5B,EAAMM,GAAG4kB,KAAKjkB,MAAM2iB,CAAO,EAC9CpkB,EAAQ8B,CAAQ,CAChBwQ,MAAY,CAAA,CAAA,IAEZtS,EAAAA,CAAAA,CAAAA,CAAAA,EACF,MAAAw/B,EAAAX,EAAA,QAAAH,GAAA,OACCt7B,EAAA+zB,GAAA,CACL,MAAAxwB,EAEM64B,eAAAA,CAAaX,IAAmBH,EAAAA,KAAAA,CAEtC,uBAGI/3B,SAAAA,CAAAA,EAAAA,IAAAA,CAEE,SAAAo4B,CACE,CAAU,EAAA37B,EAAA,MAAA,CAAgBG,SACxBH,CAAA,CAAA,CAAAG,CAAIw7B,CAAY,EAChB,GAAAx7B,UAAM9C,SAAAA,EAAe,UACnB,gDAGRU,UAAG,qCACHV,WAAAA,EACA42B,gBAAAA,EACAC,UAAU,GACVE,UAAYyH,EAAAA,GAAAA,CACZh9B,OAAAA,GACS,gBAAA,GACT01B,gBAEIxd,WAAM,QACNslB,SAAe,SACf9kB,WAASvX,EAAA,SAAA,CACE,KAAA,SACF,MAAA,QACTsD,SACEtD,EAAAI,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOD,CAC5B,CAAA,EAAM,SAAY,CAAA,CAAA,CAAAnB,GAAAy8B,EAAA,SAAA,GAAAx6B,EAAAK,EAAA,CAAG,SAAE,CAAAtB,EAAA4D,GAAA,CACtB,QAAA,GACTzD,QAEEnB,YACDmB,aACGyD,aAAWod,CAAA,IACVnd,SAAOq4B,IAAA,WAAA,CAAAl0B,EACP2rB,QAAS30B,IAAKkV,CACdpQ,WAAmC,EACnCJ,EAA4B,YACb,GAAA,KAAA,SAAAsd,CAAA,EAAA,KAAA,IAAA,CACbmb,EAAAA,IACSjoB,EAMP9W,UACGk/B,EAECptB,CAAQ,EAAA+H,GAAKjY,eAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAiBQ,GAAA,CAAM,MAACA,CAAA,CACrCyX,CAAW,EAAA,QAAA,IAAA,CAEZ7X,EAAa,SAAA,CACZO,CAAAA,EAEFvC,EACCm/B,GAAAA,KAAc,OAAAvb,CAAA,EAAA,KAAA,IAAA,CACbmb,EAAAA,CACD,GAAAn9B,EACE,UAAA,EACL5B,CAAAA,EAGY6Z,GAAA,aAAA+J,CAAA,EAAA,CAAA,CAAA,EAAA,MAAKhiB,GAAAA,CAAAA,MAAiBQ,CAAA,CAAA,CAAA,EAAM,QAAA,IAAA,CACzB28B,EAAA,UAAqB,CACjC,CAGCv/B,EACF,SACC2/B,EAAQ,UAAMt7B,EAAAK,EAAA,CACb66B,SAAAA,CAAAA,EAAAA,EAA0B,CAC5B,KAAC,cAAA,CACL,EAAA,IAAAn8B,EAAA,OAAA,CACF,SAAA,YAAA,CAEChB,CAAAA,CACC,CAAAmB,EAAAA,EAAAA,EACO,CAAA,SAAM,CAAAH,EAAAI,EAAA,CAAgB,KAAEJ,MAAA,CAAA,EAAM,IAAAA,EAAA,OAAA,CAAiB,SAAA,QAAA,CAGtDiB,CAAAA,CAAA,CAAAd,CACO,CAAA,EAAAH,EAAMyD,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAzD,EAAQw8B,GAAE,CAAA,UAAM,aAAA,SAAaJ,EAAA,SACxC,CAAA,CAGNp8B,IAAAA,CAAe,IAGnBA,EAAc,OAAA,CAAW,SAAAR,GAAA,SAAuB48B,EAAAA,eAAAA,QAC7Cj8B,GAACyW,GAAAC,EAAArX,EAAA,OAAA,CAAA,EAAA,QAAA,YAAAqX,EAAA,OAAA,YAAAD,EAAA,KAAAC,GAAE1V,GAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,YAAAA,IAAAA,EAAAA,YAAAA,CAAAA,IACFF,EAAA,KAAAw7B,CAAA,IACmB,KAAA,EACbpuB,SAAe,KAAAhR,EAAA,IAAAA,CAAA,MAAAo+B,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,GAIfgB,EAKAhB,SAAAA,CAAAA,IAAwB,CACxBA,KAAAA,SAMArW,CAAAA,EAAAA,EAAAA,QAAgB/nB,CAGlB,IAAA8D,EACF,KAAA,OAAEhB,YAEFH,EAAK,OAAAs7B,EAAA,QAAA,cAACj7B,SAAK,GACXL,YAAA,MACEmB,eAAAA,MACAlB,WAAK,GACLmhB,QACEgb,mBAEF7Y,SAAQ6Y,CAAA,CAAA,CACRhR,CAAY,CAAA,CACG,CAAA,EAAAprB,EACH08B,GAAA,CAAA,aAEJ,GAAA,SACEN,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAW,SACrBX,EAAA,SAAA,EACE,QAAAj8B,GAAA,CAGVQ,EAAU,OAAAyC,EAAA,CAAA,EAAag5B,EAAA,KAAA,WACXl6B,KAAAA,EAAQkB,KACP,MAAAg5B,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,EAEP/3B,EACAxD,SAAgB,CAAAF,EAAAI,EAAA,CACLuD,KAAAA,IACT83B,IAAAA,iBAMArW,MAAAA,aAE6B,CAC/B,EAAAnkB,EAAA,OAAA,CAAEd,SAEFH,CAAAA,EAAK,OAAA,CAAM,MAAA,qBAAQ,SAAA,GAAuB,CAAA,EAAA6uB,CAAA,CAAA,CAAe,CACzD5tB,CAAAd,EAAAA,CAAAA,CAAAA,CACE,CAAA,EAAAH,EAAYyD,GAAA,CAAA,CAAA,EAAAxC,EAAAuC,EAAA,CAAA,SAAqB,CAAAuQ,EAAC,QAChC,IAAA,CAAA,MACG2O,EAAA,CACC,KACX,UAEFjf,QAAAA,EAAa,oBAEDsQ,EAEQxW,EAAA,UAAA,KAAA8mB,GAAAA,EAAA,OAAA3B,EAAA,MAAA2B,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA3B,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA2B,EAAA,SAAAA,EAAA,WAAA3B,EAAA,SAAA,GAAA,EAEf1B,MAAAA,8BAA0B,GAE5BzjB,EAAA,UAAA,KAAAmlB,CAAA,EAEAzL,GAAe1Z,wBAAiBgnB,EAc9B5kB,EAAoC,SAC/B,CAAAK,EAAAI,EAAA,CACE0hB,KAAAA,UACP7K,CAAAA,EAAAA,IAAAA,EAAW,OAAuB,CACpC,SAAA,iBAAA,CACF,CAAA,CAAA,CAAE9W,EAAAA,EAAAA,EAEG,CAAA,QAAM,IAAA,CAAY,IAAEH,EAAA,OAAA,6CAAA,EAAAG,GAAM,CAAA,KAAA,KAAAw8B,CAAA,EAAA,CAAsBA,GAEvD17B,MAAS,kBAAA,QAED07B,CAGAA,IACEA,EAAAA,EAAAA,YAAAA,EAAAA,KAAAA,EAAah9B,SAAwB,KAAA,IAAAg9B,CAAA,MAAAlB,EAAA,KAAA,GAAA,CAAA,GAE3C,EACA,SAAiB,CAAAz7B,EAAAI,EAAA,CACDu8B,KAAAA,KAEdvX,CAAAA,EAAAA,IAAAA,SAAoBuX,CACtB,SAAA,yBAAA,CACF,CAAA,CAAA,CAAEx8B,CAAAA,CAEG,CAAA,CAAM,EAAA9C,EAAS2C,CAAA,CAAA,CCjThC,MAAM0O,GAAQ,GAEd,SAASkuB,GAAK3T,EAAO,OACbxoB,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1BS,GAAKkrB,GAAAA,YAAAA,EAAOlrB,OAAMk6B,EAAAA,GAAAA,IAAAA,YAAAA,EAAal6B,IAE/Bk9B,EAAa5+B,IAGbwgC,EAAexgC,IACrB,eAAeygC,EAAU3rB,EAAW,EAC9BA,GAAa,CAAC0rB,EAAatgC,WAC7BsgC,EAAatgC,QAAUa,EAAMM,GAAGo+B,UAAUiB,SAASh/B,EAAI,CACrDF,MAAO6Q,EAAAA,CACR,GAEH,MAAM0C,EAAU,MAAMyrB,EAAatgC,QAAQ0B,KAAK,EAC5C,GAAA,CAAED,MAAAA,CAAUoT,EAAAA,EAChB,OAAIpT,GAAAA,MAAAA,EAAOE,SACLiT,IACS5U,EAAAA,QAAUyB,EAAM,CAAC,EAAED,IAGxBwwB,EAAAA,GAAcvwB,EAAO,MAAM,EACnCA,EAAM2N,QAAkBqiB,GAAA,CACtBpvB,GAAWovB,EAAM3wB,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG+T,EACHpT,MAAAA,CAAAA,CAEJ,CAEA,eAAea,GAAkB,CAC3B,GAAA,CACF,MAAMuS,EAAU,MAAMhU,EAAMM,GAAGo+B,UAAUiB,SAASh/B,EAAI,CACpDF,MAAO,EACPC,SAAUm9B,EAAW1+B,OAAAA,CACtB,EACG,GAAA,CAAEyB,MAAAA,CAAUoT,EAAAA,EAEhB,OADQmd,EAAAA,GAAcvwB,EAAO,MAAM,EAC/BA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACN,EAAMo/B,CAAO,EAAI9/B,EAAS,CAAEqG,MAAO,MAAA,CAAQ,EAEzC3F,GAAAA,EAAK2F,MAAQ,QAAO,EAC7BjH,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAMsB,EAAO,MAAMR,EAAMM,GAAGmb,MAAMxa,MAAMN,CAAE,EAC1Ci/B,EAAQp/B,CAAI,CAAA,MAEF,CAAA,CACVhB,IAAe,EACjB,CAAAmB,CAAA,CAAA,EAAA,KACC,CAAAib,EAAAJ,CAAA,EAAA1b,EAAA,EAAA,EACC,CAAC+/B,EAAAC,CAAA,EAAAhgC,EAAA,EAAA,EAEP,OAAO8b,EAAAA,EAAAA,CACP,SAAOikB,CAAAA,EAAAA,GAAAA,CAEP,QACE,MAAA98B,GAAAA,OAGIoD,UAAYA,eACZxF,UAAG,wBACHk2B,SAAAA,EACAC,WAAU4I,EACVz/B,gBAAAA,EACA+2B,UAAY0I,GACZj+B,eAAAA,EAAAA,SAAAA,eACAs1B,aAAS,GACT5qB,YAAAA,KACY,GAAA,KAEZ+qB,MAAAA,eACQpwB,SAAGlE,EAAAI,EAAA,CAAW,KAAA,OAAcD,KAAAA,GAC3B,CAAA,CAAM,CAAA,EAAY,UAAKc,EAAAusB,GAAA,CACxB,OAAA,GAER+G,gBACQ,GACJxd,SAAM,OACNslB,WAAe,QACf9kB,SAAS,SACTgW,WAAWvtB,EAAA,SAAA,CACF,KAAA,SACTsD,MAAAA,QACUrD,SAAKD,EAAAI,EAAA,CAAe,KAAA,OAAOD,KAAAA,GAC5B,CAAA,CAAM,CAAA,EAAY,SAAK,CAAAc,EAAAuC,EAAA,CACtB,QAAA,IAAAoV,EAAA,CACTzY,KAAAA,CAEQ,CACPD,EAEItC,SAAAA,CAAAA,EAAAA,EAAAA,CACD,KAAA,SACFuC,KAAAA,GAEI,CAAA,EAAMH,EAAA,OAAA,CAASM,SAAK,MAAA,CAAK,CAC9BN,CAAA,CAAA,EAAAG,EAAMqD,EAAA,CAAI,QAAO,IAAA05B,EAAA,EAAA,EAEnBj8B,SAAS,CAAAjB,EAAAI,EAAA,CAACF,KAAAA,QAA+CC,KAAAA,GAClD,CAAA,EAAMH,EAAA,OAAA,CAAQM,SAAK,gBAAA,CAAK,CAC7BN,CAAA,CAAA,CAAA,CAAM,CAAA,CAAqB,EAAAjC,CACnB,EAACib,GAAAhZ,EAAAe,GAAA,CAAA,MACN,QA5CJhD,QA+CNib,GAAAA,CAESxZ,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZoZ,EACF,SAAA5Y,EAAA2N,GAAA,CACF,KAAAqL,GAAA,YAAAA,EAAA,KAAE7Y,WAEU,CACJ6Y,EAAsBpb,QAAAA,WAAAA,EAAAA,OACPsb,EAAA,IAAA,EACRia,EAAAA,QAAuBja,YAChC8jB,cAAmB,MAInB5X,EAAgB,EAAA,CAClB,CACAxM,CAAAA,CAA6B,CAC/B,EAAAqkB,GAAAj9B,EAAAe,GAAA,CAAE,MACH,QACI,QAGPf,GAAAA,CACQR,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZ09B,EACF,SAAAl9B,EAAAm9B,GAAA,CACF,OAAAp/B,EAAEoC,YAEgB+8B,EAAA,EAAA,CAAA,CAAA,CACRn/B,CACR4C,CAAAA,CAA8C,CAAA,CAC/C,CAEJ,MACDy8B,GAAA,GAEN,SAAAD,GAAA,CAEA,OAAAE,EACA,QAAA18B,CAA2B,EAAE08B,CAAQ18B,KAAAA,CAAW,MAAAvD,EAIxC,SAAAC,CAAED,EAAAA,EAAAA,EAAOC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiB,CAAA4N,EAAAK,CAAA,EAAApO,EAAA,SAAA,EAC1B,CAACogC,EAASC,CAAcrgC,EAAAA,EAAW,EAAA,EACnCsgC,EAAoBnhC,IAC1B,eAAO2f,EAAqB7K,GAE5B8K,MAEA3Q,EAAA,YACE2Q,SAAiB,CACjB3Q,GAAAA,EACa6F,GAAA,CAAAqsB,EAAA,WACPA,EAAA,QAAApgC,EAAA,GAAA,MAAA,aAAAigC,EAAA,CACElsB,MAAAA,EACFqsB,CAAAA,GACSJ,MACRhsB,EAAA,MAAAosB,EAAA,QAAA,KAAA,EACH,GAAA,CACA,KAAAhhB,EACI,MAAAxe,CAAEwe,EAAAA,EAAMxe,GAAAA,MAAAA,EAAAA,QACRA,EADkBoT,EACHpT,EAEJA,EAAK,OAAAA,CAAA,CAFD,EAIJs/B,EAAAA,CAAAA,CAAAA,GAEbrhB,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA3Q,EAAW,OAAS,EAEpBA,IACF,CAAAhP,OAAAA,EACC,IAAA,CACLmhC,EAAA,EAAA,CAEAnhC,EAAAA,CAAAA,CAAAA,EACEmhC,EAAAA,MAAiB,CACnB,MAAK,QAEL,GAAA,gCACOz8B,SAAM,CAAA,CAAA,CAAAL,GAAAX,EAAA,SAAA,CAAW,KAAA,6BAEVC,QAAKU,EAASK,SAAMhB,EAAAI,EAAA,CAAuBO,KAAAA,GAAAA,CAAQR,CACpD,CAAA,EAACE,EAAK,SAAA,CAAG,SAAEL,EAAA,KAAA,CAGpBA,SAAA,gBAAA,CAAAG,CACE,CAAA,EAAAA,EAAI,OAAA,CAAc,SAAIc,EAAA,KAAA,CAExBjB,SAAA,CAAAs9B,EAAA,IAAAI,GAAAz8B,EAAA,KAAA,CAAAd,YACEwR,GAAA,SACG2rB,EACCn9B,SAAAA,CACe,CAAA,EAAUu9B,EAAAA,GAAAA,CAAQrgC,QAAAA,EAC/B2C,OAAAA,CAAgB,CAAA,CAACwC,CAASk7B,EAAQL,EAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,WAAAA,EAAAA,GAAAA,CAAe,GAAG,KAAA,SAEvD3F,GACYzsB,GAAAA,EACXjL,EAAQ29B,SAAG39B,EAAA,SAAA,CAAKyJ,KAAAA,SAA+CtJ,MAAAA,cACrDF,QAAKw9B,EAASz8B,SAAM,YAAA,CAAA,CAAuBy8B,CAAAA,CAAAA,CAAc,CAAA,CAEzD,CAAA,CAAA,CAEX,CAAA,CACC,CACC,SACJG,GAAA,CAET,QAAAp7B,EAEA,OAAA66B,CAAyB,EAAE76B,CAAS66B,KAAAA,CAAU,MAAAjgC,CACtC,EAAAE,EAAA,EAAEF,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAAygC,EAAAC,CAAA,EAAA5gC,EAAA,EAAA,EACtB,OAAO+N,EAAAA,GAAmB,CAC1B,QAAO4yB,CAAAA,EAEP,aACc58B,EAAA,OAAA,UACA48B,CAAAA,WAAAA,EAAAA,SAAAA,aAAAA,CAAAA,CACV/5B,EAAc,YAA2C,kBAAM,SAC/DT,QAAM,IAAA,CACYw6B,KACH,SAAA,GACb,SAAa,CACXvyB,GAAAA,CACa,MAAAlO,EAAA,GAAA,MAAA,WAAAigC,EAAA,CACP,WAAA,CAAA76B,EAAA,EAAA,CACF,CAAA,EACEyW,EAAAA,SAAazW,EACfs7B,EAAC,EAAA,CACDxyB,MAAAA,CACAwyB,EAAW,OAAK,EAEhBxyB,OAEJA,EAAG,SAAA,GACE,SAAA,CAGLA,GAAAA,CAEa,MAAAlO,EAAA,GAAA,MAAA,cAAAigC,EAAA,CACP,WAAA,CAAA76B,EAAA,EAAA,CACF,CAAA,EACEyW,EAAAA,SAAazW,EACfs7B,EAAC,EAAA,CACDxyB,MAAAA,CACAwyB,EAAW,OAAI,EAEfxyB,KACF,EAEJ,SAAAtL,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,SAEF09B,EAAA,GAAA,QAAA,GACE59B,SAAKgL,IAAA,UACLjK,SAAQ68B,EAAkB,MAAA,SAAc,CAAA,CAClB,CAAU19B,CAEb,CC5S3B,MAAMuO,GAAQ,GACRqvB,GAAoB,IAAIC,gBAE9B,SAASC,GAAS,CAAEzC,WAAAA,EAAY,GAAGvS,CAAM,EAAG,CAC1CgQ,GAAS,WAAY,WAAW,EAC1B,KAAA,CAAE77B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1B,CAACitB,CAAY,EAAIiR,EAAa,CAACuC,EAAiB,EAAItT,KACpD,CAACyT,EAAWC,CAAY,EAAIjhC,EAAS,IAAI,EACzC+C,GAAOgpB,GAAAA,YAAAA,EAAOhpB,OAAQsqB,EAAaxoB,IAAI,MAAM,GAAKm8B,EAElDE,EAAmB/hC,IACnB4+B,EAAa5+B,IAEnB,eAAegiC,EAAcltB,EAAW,EAClCA,GAAa,CAACitB,EAAiB7hC,WACjC6hC,EAAiB7hC,QAAUa,EAAMM,GAAGC,cAAcC,KAAK,CACrDC,MAAO6Q,GACP4vB,MAAO,CAAC,SAAS,CAAA,CAClB,GAEH,MAAMltB,EAAU,MAAMgtB,EAAiB7hC,QAAQ0B,KAAK,EAChD,GAAA,CAAED,MAAAA,CAAUoT,EAAAA,EAChB,OAAIpT,GAAAA,MAAAA,EAAOE,SACLiT,IACS5U,EAAAA,QAAUyB,EAAM,CAAC,EAAED,IAEhCC,EAAA,QAAA,CAAA,CAEAA,QAAe,IAAUgwB,CAAWpvB,GAAAovB,EAAA3wB,CAAA,CAClCuB,CAAAA,GAEJ,CACO,GAAAwS,EACL,MAAGA,GAAAA,YAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,CAEL,CACF,MAAAmtB,EAAAliC,IAEMkiC,EAA+BliC,IACrC,iBAAsC8U,EAAA,EACtCA,MAA6C,WACvCA,EAAcotB,QAAAA,EAAsBhiC,GAAS,cAAA,KAAA,CAC/CgiC,MAAAA,EAA4D,CAAA,GAG9D,MAAAntB,EAAA,MAAAmtB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAAvgC,CAAEA,EAAAA,EAAM,OAAAA,EAAIoT,GAAAA,YAAAA,EAAAA,OAAAA,GAAAA,EAAAA,YAChBpT,GAAAA,MAAAA,EAAeoc,aAEbokB,EAAe,QAAAxgC,EAAA,CAAA,EAAA,WAAA,IAELU,EAAAA,QAAI,CAAc8/B,CAC5B,WAAAxQ,CAEAhwB,IAAM2N,CAAW8yB,GAAYzQ,EAAAA,CAAAA,CAAAA,CAAW,GAEvC,CACH,GAAA5c,EACQ1S,MAAAA,GAAAA,YAAAA,SAAsBsvB,EAAA,WAC9B,CAAO,CACF5c,SACIpT,KAAYgwB,EAAAA,CACrB,OAAA/tB,IAAA,UACFy+B,EAAA,GAAAC,CAAA,IAG0B,GAAAA,CAAA,CACfD,CACT,eAAA7/B,GAAA,CACOw/B,GAAAA,IAAAA,UACT,GAAA,CAEA,MAAAjtB,EAAiC,MAAAhU,EAAA,GAAA,cAAA,KAAA,OAClB,EACP,SAAAohC,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACP1gC,MAAAA,CACD,EACKsT,EACJ,OAAApT,GAAA,MAAAA,EAAA,QAAEA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,WAAAA,GAAUoT,MAOdotB,MAAAA,CACO,MAAA,EACT,KAEF,KACS,MAAAptB,EAAA,MAAAhU,EAAA,GAAA,cAAA,KAAA,CACT,MAAA,EACK,MAAA,CAAA,SAAA,EACD,SAAA69B,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACPqD,MAAAA,CAAiB,IAEnB,OACMtgC,GAAA,MAAAA,EAAA,QACJi9B,EAAA,QAAAj9B,EAAA,CAAA,EAAA,GAAEA,IACNpB,EACA,OACaL,MAAAA,EACJ,CAEF,CAAA,QACG8S,GAAA,IACHpO,EAAA,MAAA,CACT,MAAA,sBACF,SAAA,CAAAjB,EAAAiE,EAAA,CACF,GAAA,YAEMm1B,MAAAA,EAA8B,GAA9BA,YACJ,QACE55B,GAAA,CAAWg8B,IAAqBr7B,EAAAA,eACzB,EACAg+B,EAAA,IAAA,IAGD,SAAgB,KACd3+B,CAAAA,EAAAA,EAAiByE,EAAA,CACjBk6B,GAAAA,yBACF,MAAAl+B,IAAA,UAAA,YAAA,GACF,QAAAT,GAAA,CACDg8B,IAGDx7B,EAAAA,eAAK,EACAm+B,EAAA,SAAA,IAGD,SAAgB,SACd3+B,CAAAA,CAAAA,CACA2+B,CAAAA,EACF,CAAAl+B,CAAA,CAAA,EACF,OAAAD,EAAA+zB,GAAA,CAAA,MACD,WAAA,GAEM,WAAA,UACJ,0BAET,UAAS,2BAET,SAAA12B,EAEIkG,WAAAA,EACAxF,gBAAAA,EACAk2B,UAAU,GACVC,cAAUkF,EACV/7B,QAAAA,CAAAA,CACA+2B,CAAAA,CCrKN,SAASwK,GAAmBjhC,EAAe,CAIzC,MAAMkhC,EAAmB,CAAA,EACnBC,EAAqB,CAAA,EAC3B,QAASr8B,EAAI,EAAGssB,EAAI,EAAGtsB,EAAI9E,EAAcO,OAAQuE,IAAK,CAC9C9D,MAAAA,EAAehB,EAAc8E,CAAC,EAC9B,CAAEiT,OAAAA,EAAQlT,QAAAA,EAASvC,KAAAA,EAAM0P,UAAAA,CAAchR,EAAAA,EACvCogC,EAAO,IAAIj0B,KAAK6E,CAAS,EAAEqvB,mBAAmB,EACpD,IAAIC,EAAch/B,GACdA,IAAS,aAAeA,IAAS,YACrBg/B,EAAA,oBAEhB,MAAM1yB,EAAO,GAAEmJ,GAAAA,YAAAA,EAAQ3X,EAAG,IAAGkhC,CAAY,IAAGF,CAAK,GAC3CG,EAAqBL,EAAiBtyB,CAAG,EAC/C,GAAI0yB,IAAgB,iBAClBH,EAAmB/P,GAAG,EAAIpwB,UACjBugC,GAAAA,MAAAA,EAAoB18B,QAAS,CAChC28B,MAAAA,EAAgBD,EAAmB5X,UAAUpK,QAC1CxK,EAAE3U,KAAOyE,EAAQzE,EAC1B,EACIohC,GACYviB,EAAAA,OAAO2F,KAAKtiB,CAAI,EAChB2c,EAAAA,OAAOrC,KAAK,EAAE6kB,QAAQ,IAE5BxiB,EAAAA,OAAS,CAAC3c,CAAI,EACHqnB,EAAAA,UAAU/E,KAAK/f,CAAO,EAC3C,KACK,CACGoa,EAAAA,OAAS,CAAC3c,CAAI,EAClBo/B,IAAAA,EAAKR,EAAiBtyB,CAAG,EAAI,CAC/B,GAAG5N,EACHsB,KAAMg/B,EACN3X,UAAW,CAAC9kB,CAAO,CAAA,EAErBs8B,EAAmB/P,GAAG,EAAIsQ,CAC5B,CACF,CAOA,MAAMC,EAAoB,CAAA,EACpBC,EAAsB,CAAA,EAC5B,QAAS98B,EAAI,EAAGssB,EAAI,EAAGtsB,EAAIq8B,EAAmB5gC,OAAQuE,IAAK,CACnD9D,MAAAA,EAAemgC,EAAmBr8B,CAAC,EACnC,CAAED,QAAAA,EAAS8kB,UAAAA,EAAWrnB,KAAAA,EAAM0P,UAAAA,CAAchR,EAAAA,EAC1CogC,EAAO,IAAIj0B,KAAK6E,CAAS,EAAEqvB,mBAAmB,EACpD,GAAI/+B,IAAS,oBAAsBuC,GAAW8kB,EAAUppB,SAAW,EAAG,CACpE,MAAMqO,EAAO,GAAE/J,GAAAA,YAAAA,EAASzE,EAAG,IAAGkC,CAAK,IAAG8+B,CAAK,GACrCG,EAAqBI,EAAkB/yB,CAAG,EAChD,GAAI2yB,EACiB3X,EAAAA,UAAUhF,KAAK5jB,EAAa+W,MAAM,MAChD,CACD2pB,IAAAA,EAAKC,EAAkB/yB,CAAG,EAAI,CAChC,GAAG5N,EACHsB,KAAAA,EACAsnB,UAAW,CAAC5oB,EAAa+W,MAAM,CAAA,EAEjC6pB,EAAoBxQ,GAAG,EAAIsQ,CAC7B,CAAA,MAEAE,EAAoBxQ,GAAG,EAAIpwB,CAE/B,CAEA/B,OAAAA,CAAY,CC1Cd,MAAM8R,GAAQ,GACRqvB,GAAoB,IAAIC,gBAE9B,SAASwB,GAAc,CAAEhE,WAAAA,CAAW,EAAG,CACrCvC,GAAS,gBAAiB,gBAAgB,EACpC,KAAA,CAAE77B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1BmD,EAAaC,GAAYnD,CAAM,EAC/B,CAAC0N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAACqtB,CAAY,EAAIiR,EAAa,CAACuC,EAAiB,EAAItT,KACpDgV,EAAiBlV,EAAaxoB,IAAI,IAAI,EACtC29B,EAA0BnV,EAAaxoB,IAAI,cAAc,EACzD,CAACia,EAAUC,CAAW,EAAI/e,EAAS,EAAK,EACxC,CAACyiC,EAAcC,CAAe,EAAI1iC,EAAS,EAAK,EAChDyyB,EAAgBtzB,IAChB,CAAEw0B,aAAAA,EAAcR,gBAAAA,EAAiBE,WAAAA,EAAYI,eAAAA,GACjDjB,GAAU,CACRC,cAAAA,CAAAA,CACD,EACG+G,EAAWrG,IAAoB,OAAS,CAACM,EACzC,CAAChK,EAAgBkZ,CAAiB,EAAI3iC,EAAS,CAAE,CAAA,EACjD,CAAC4iC,EAAeC,CAAgB,EAAI7iC,EAAS,CAAE,CAAA,EAErDN,EAAoCP,IAEpC,iBAAqC8U,EAAA,EACrCA,MAA6C,WACvCA,EAAc1T,QAAAA,EAAsBlB,GAAS,cAAA,KAAA,CAE/CkB,MAAAA,GACEI,aAAO6Q,CAAAA,gBAAAA,CAAAA,CACPsxB,GAEJ,MAAAC,EAAA,MAAAxiC,EAAA,QAAA,KAAA,EACMwiC,GAAmBA,EAA4B1jC,MACrD,GAAAoB,IAAA,MAAAA,UAAuCK,CAEvCL,WAA2BgB,IAAA,CACzBhB,GAAAA,GAAwC,OAAAN,EAAA,CAC3BsB,cAAAA,EAA+B,CAAA,CACzB,CAAA,EAEnB,MAACuhC,GAAAtB,GAAAjhC,EAAA,EAEKuiC,GAEN3iC,EAAe,kBAAAI,GAAA,CAAA,EACNH,EAAAA,cAAAA,GACPD,EAAAA,GAAuB2iC,QAAAA,OAAAA,CAGjBxiC,cACH6G,CACgB,WAAA5G,GAAA,CAAA,EAAA,EACbQ,CAA6BJ,CAC/B,EAAA,MAAA,IAAA,CAAA,CACD,GAEER,EAAA,cAAA,KAAA,GAAA2iC,EAAA,CAEP,CACF,OAAA3iC,EAAA,qBAAA,GAEAA,EAAOgB,2BAAuB,KAAA,MACvB4hC,CACAF,CACT,SAAAG,GAAA,CAEA,OAASA,EAAsB,GAAA,eAAA,KAAA,CAEtBhjC,MAAAA,EAA6B,CAAA,CAC3B,CAEX,MAAAijC,EAAA,IAAA,CAEA/0B,cACEA,SAAoB,CACP,GAAA,CACP,MAAAg1B,EAAA,MAAAF,IACIE,GAAqC,EAC3CT,EAAAA,SAA0B,CAC1Bv0B,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJ,SAAAi1B,GAAA,CAEA,OAASA,EAAqB,GAAA,cAAA,KAAA,CACrBnjC,CACT,MAAAojC,EAAArvB,GAAA,CAEA7F,cACEA,SAAoB,CACP,GAAA,CACP,MAAAm1B,EAAAC,EAAAvvB,CAAA,EACIsvB,OACAE,OACN,GAAAxvB,GAEA,MAAeyvB,GAAA,MAAAC,GACbD,YAA4BC,IAAAA,CACdtmB,MAAAA,GAAAA,IAAK,KAAU7H,GAAA,WAAAA,GAAA,SAAA,EAG3B,OADc,IAAI5H,KAAK4H,EAAE8H,WAAa9H,EAAE/C,SAAS,EAC/B7E,EAClB,CAAA,EACFi1B,EAACa,EAAA,EACDb,MAAAA,EAAiBD,MAAaa,GAC9Bd,EAAuBc,CAAAA,CACvBd,CACF,KAAA,CAEM,KAAArjB,EAAEA,EAAAA,MAAAA,EAAKP,EAAUwkB,CAAAA,EAAAA,EACvBxkB,EAAAA,SAAiB,CAEjB3Q,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJhP,EAAA,IAAA,CAEAA,EAAgB,EAAA,CACdkkC,EAAAA,CAAAA,CAAAA,EACFlkC,EAAK,IAAA,CACLA,GACEkkC,EAAgB,EAAA,CACQ,EACxB,CAAAjQ,CAAA,CAAA,EACFj0B,EAAIi0B,IAAW,CAEfj0B,GAAgB0f,GACdwkB,GACoB,EACpB,CAAA3P,EAAA7U,CAAA,CAAA,EACF,MAAkBA,GAAAA,GAAAA,GAAAA,EAEZ+Z,KAAmB,IAAA,OACjBjB,0BAAwBje,EAAA8Y,EAAA,UAAA,YAAA9Y,EAAA,aAAA,GAAAkf,IAAA,CAAAK,GAAA,GAAA31B,EAAA,sBAAAwK,IAAA,WAC1B61B,KAC0B,EAC5Bx3B,CAAAA,GAAAA,uBAAiCA,EAAAA,SAAAA,YAAAA,CAAAA,CAAAA,EACjC4nB,EAAAA,EAAyB30B,CAAAA,EAAAA,oBAAuB,CAAA,EAAA,SACrB,IAAA,YACLkE,KAAWlC,GAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EACjC0M,IAAAA,GAAAA,IAAAA,KAAAA,MACD81B,GAAA,CAAAtgC,EAAA,cAAA,KAAA9B,GAAA,IAAA,KAAAA,EAAA,SAAA,EAAA,aAAA,IAAAqiC,GAAA,aAAA,CAAA,EAECvgC,GACAkvB,IAMA6Q,OAAAA,EAAAA,IAAAA,CACFf,IAEA1J,EACAt1B,mBAIFnE,GAAUwkC,EAEJE,kBAAqB,CAC3B,EAEA,EAAA,CAAAvB,EAAuBC,CAAY/hC,CAAAA,EAMnCrB,OAEAA,IAAgB,YACd,SAAoB,CAClBiB,GAAAA,CACMkiC,MAAAA,EAAAA,MAAAA,KACJpW,GAAAA,GAAAA,MAAAA,EAAyC,iBAAA,CAC3C,MAAA1rB,EAAA,MAAAwH,EAAA,kBACF,CACkBu6B,MAAAA,CAEpBpjC,CACE,IAEI,EAAI,CAAA2O,CAAA,CAAA,EACI9F,EAAAA,MAAAA,CACN,GAAA,qBACQxH,MAAAA,iBACEe,IAAAA,EAKV,SAAA,KAAA,WACU,MAAA,CAAC,MAAA,sBAAAihC,EAAA,gBAAA,EAAA,GACf,SAAG,CAAA1+B,EAAA,SAAA,CACL,OAAAy1B,EACEzrB,QAAQzL,GAAA,OAGVA,EAAA,OAAA,QAAA,WAAA,IACKqX,EAAA8Y,EAAA,UAAA,MAAA9Y,EAAA,SAAA,CACG,IAAA,EACD8Y,SAAAA,QAAAA,EAGQ,EAA2DxvB,MAAAA,IACtE,UAAA,UAAA,GACE1D,SAAQi6B,CAAAA,EAAAA,MAAAA,OACEl3B,cACR,SAAc6Z,CAAAA,EAAAA,OACZsW,MAAAA,cAAgC,SAAO,CAAA3vB,EAAA8xB,GAAA,CAAA,CAAA,EAAA9xB,EAAAiE,EAAA,CAAGsa,GAAU,IAAU,MAAA,eAChE,SAAAve,EAAAI,EAAA,CACF,KAAA,OACmB,KAAA,IAA2BD,IAE9Cc,MAAA,CAAW,CAAA,CAAad,CAAAA,CACtB,CAAA,EAAWH,EAAA,KAAA,CAAaG,SAAA,eAEjB,CAAA,EAAC+D,EAAG,MAAA,CAAA,MAAU,aAAA,CAAc/D,CAAAA,CAC1B,CAAA,EAAAM,EAAM,sBAAAwK,IAAA,WAAAhK,EAAA,SAAA,CAAA,MAAY,4BAAA,KAAIV,SAAI,QAAQ,IAAA,OAACigC,EACnC,EAAA,GAETxgC,EAAAA,EAAA,UAAAA,MAAAA,EAAA,SAAA,CAAI,IAAA,EACJA,SAAA,QAAA,EAEK,EAENS,SAAAA,CAAAA,KAES,KAAA,UACD,CAAA,EAAA,oBAAA,CAAA,CAAA,CACLP,CACEsgC,CAAAA,EAAAA,EAAAA,OAAsB,GAAAxgC,EAAA,MAAA,CACtB2vB,MAAAA,mBAAgC,SACzB3vB,EAAA,MAAA,CAAA,MACK,yBAAA,SACXiB,EAAA,UAAA,CACH,MAAA,gBAAEd,SAEFH,CAAAA,EAAK,UAAA,CAAM,SAAA,CAAAiB,EAAA,OAAA,CACb,SAAA,CAAAjB,EAAAI,EAAA,CACD,KAAA,WAEF0/B,MAAuB,oBACX,KAAA,GAAA,CAAkB3/B,MAC3Bc,EAAA,IAAA,CAAW,SAAA,CAAA,eAAA6+B,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAwB3/B,EACjCc,MAAA,QAAA,CAAe,MAAA,gBAAed,SAC5Bc,CAAA,CAAAd,CAAAA,CACEA,CAAAA,EAAAA,EACGC,OAAI,GAAAJ,EAAA,OAAA,CAAA,MAAM,4BAAA,SAAiB8/B,EAAA,IAAA,CAAAmB,EAAAvjB,IAAA1d,EAAA,SAAA,CAAoBM,KAAK,SAAK,MAC1DW,eAAAd,YAAG,SAAsD0W,GAAAqqB,GACzD,UADyD,MAAArqB,GACzD,SAAA6G,GAAA,eAAA,CAAa,SAAA,SAAiBrgB,MAAAA,SAAAA,EAE/ByiC,EACa,SAAApiB,EAAA,CAAA,GAER,CAAA,CAAA,CACO,CAAA,EAAA1d,EACC,KAAA,CAAA,4BACS8/B,EAAA,OAAA,EAAA,WAAA,QAAA,GACboB,IAAAA,GAEiB,SACLpB,EAAA,IAAAmB,GAAAjhC,EAAA,KAAA,CAAA,SACHA,EAAAmhC,GAAA,CAAA,aAAAF,CACR,CACH,CAAA,CAAA,CAAA,CAES,CAAA,CAAA,CAEZ,CAAA,CAEJ,CAAA,CAEH,CAAA,EAAAta,EAEImZ,OAAAA,GAAAA,EAAAA,MAAAA,CACD,MACIoB,kBAAAA,SAEJpB,CAAAA,EAAAA,KAAAA,CACC3/B,MAAAA,kBACqB8gC,SAAAA,iBAAAA,CAAAA,EAAAA,EAA6B,OAAA,EAAAhgC,EAAA,UAAA,CAAA,SAEnD,CAAAA,EAAA,UAAA,CAAC,SACC,CAAA0lB,EAAA,OAAA,kBAAA,CAAA,CACE,EAAA3mB,EAAA,KAAA,CACN,SAAA2mB,EAAA,IAAAnkB,GAAAvB,EAAA,KAAA,CAGR0lB,SAAAA,CAAezoB,EAASyT,IACZ,QAAAnP,CAAA,CAAiBrC,IAC1BH,GAAA,CAAU,UAAAwC,EAAA,GAAkB,SAAA,IAAA,CAC3BmkB,CACC,CAAAxmB,CAAAA,CACE,EAAUwmB,EAAAA,EAAezoB,CAAAA,CAAuB,CAAS,CACzD8B,CAAA,CAAA,EACG2mB,EAAAA,KAAAA,CACCxmB,SAAAA,EACe,IAAAqC,GAAAvB,EAAA,KAAA,CAACuB,SAAAA,CAAAA,EAAAA,GAAAA,CAAiB,QAAAA,CACV,CAAA,EACnBwR,KAAmBjW,CAAAA,YACH,GAEd,SAAA,IAAA,CAEH,CAAC,CAAA,CAAA,CAEL,EACEyE,EAAA,EAAA,CAAA,CAAA,CACE,CAETxC,CAAA,CAAA,EAAAG,EACGwmB,MAAAA,CACCxmB,GAAAA,kBACgBqC,SAAAA,EAAAA,QAAAA,CAAiB,SAC/BxC,CAACumB,EAAoB,QAAA,CAAA,gBACAxoB,UAGjB,SAAAyB,GAAA,CAEFogC,EAAApgC,EAAA,OAAA,OAAA,CARKgD,CAUV,CAEJ,EAAA,IAAA,eAAA,CAAA,CAGLxC,CAAA,CAAA,EAAQA,EAAA,KAAA,CAAiBG,MAAAA,kBACvBA,SAAAA,OACE,CAAA,EAAA4gC,IACO,CAAA,CAAAtgC,EAAA,cAAA,QAAAT,EAAA,IAAA,CAAA,MACI2/B,yBAAAA,aACQ,UAAA,wBAAA3/B,EAAAsB,EAAA,CACC9B,SAAAA,GAAgB,CAClC,CAAE,CAAA,EAAAiB,EAGN,cAAA,OAAAT,EAAAsB,EAAA,CAAA,SAAOb,EAAA,cAAA,IAAA9B,GAAA,CAETqB,GAAAA,GAAArB,EAAA,OAAA,UAAU,OAAA,KACToiC,MAAkBK,EAAazjC,IAAAA,KAAAA,EAC9BqC,SAAAA,EAASqhC,GAAAD,EAAA,aAAA,IAAAE,GAAA,aAAA,EACNr2B,KAAoDq2B,GAAAF,GAGxD3gC,MAAAA,GAAyBvC,EAAAA,iBACxBqjC,GAAA,eAAA,YAAA7tB,GAAA4tB,GAAA,CACG7gC,SAAAA,EACC,CAAIk/B,EACK,OAAA1+B,EAAAK,EAAA,CACT,SAAA,CAAA+/B,IAAArhC,EAAA,KAAA,CACA,MAAwB,kBACxB,SACEohC,EACF,CAAA,EAAkBphC,EAAAonB,GAAA,CACHga,SAAAA,EACf,aAAAziC,EAGMwd,OAAAA,KAIYqkB,EAAA,EAAA,EACXH,GACP,CACE,EAAA1hC,EACmBqB,EAAAA,CAAAA,CAAA,CAAA,CAAU,CAAA,CAAmBmc,CAAO,EAAAlb,EACrDjB,EAAa,CACX3C,SAAAA,CAAAA,IAAAA,WAAAA,EAAAA,EAAAA,CACAsB,SAAAA,EAAAA,KAAAA,CAAAA,sBAGE6hC,SAAAA,MAAAA,KAAAA,CACmB,OAAA,CAAA,CACrB,EAAA,IAAA,CAAAr+B,EAAAM,IAAAxB,EAAA,KAAA,CAAE,MAJgBlD,wBAMpB,SAAA,CAAAiC,EAAA,MAAA,CAEL,MAAA,oBAGHiB,SAAAjB,EAAAI,EAAA,MACe,eACXD,SACE,CAAU,CAAA,CAAeA,EAAAA,QACX,CAAU,MAAA,uBAAKoB,SAAQkB,MACjC,CAAU,SAAA,kBAAA,CAAuBtC,CAC/B,CAAA,CAAKa,CAAM,CAAmBb,CAAAA,CACvB,CAAA,CAAM,CAAA,EAAA8K,IAAoB,SAAAhK,EAAA,IAAA,CAAA,MAAM,WAAC,SAExCjB,CAAAA,+BAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KAAW,SAAsBG,QAAAA,MAC/B,EAAA,EAAA,SAAG,WAAA,CAAA,CAAA,CAAmB,CAAA,CAAA,CAClB,CAAA,EAAA6b,GAEThc,EAAA,SAAA,CAAA,KACC,SAAC,MAGI,cACX,SAASiL,IAAA,UAAA,QAAU,IAEjBjL,EAAAA,EAEA,MAAa,CAASE,eAAesgC,KAAsB,EAAG,SAErDv1B,IAAA,UAAAjL,EAAAyX,GAAA,CAEZ,OAAA,EAAA,CACD,EAGFzX,EAAAA,EAAA,CACO,SAAA,YAAA,CACC,CAAA,CAAA,CACN0D,CAAsB,CACtBxD,CAAiC,CAAA,CAC1B,CAAkB,SAAMk2B,IAAA,CAAA,MAE9BnrB,CAAAA,CAAAA,SAAAA,cAAwBjL,sCAAO,CAAA,CAAO,SAAEmhC,GAAI,CAAA,aAAAF,CAAE,EAAA,CAAmB,KAErE,CAAA,SAAA5jC,CAEA,EAAAC,EAAA,EAET,CAEA,QAAAkkC,CACE,EAAAC,GAAkB1hC,EACpB2hC,EAAAF,GAAA,YAAAA,EAAA,QAEA,CAA6BP,GAAAA,EAAgB,QAAAU,EACrC,SAAAC,EAAEvkC,OAAAA,cACF,OAAAwkC,EAAEL,YAAAA,cACR,KAAAM,EACM,SAAA5gB,EACJnjB,SAAAA,EACA4jC,KAAAA,EACAC,OAAAA,EACAG,UAAAA,CACAC,EAAAA,EACAH,EAAAA,IAAAA,KAAAA,CAAAA,EACAI,EAAAA,GAAAA,CAAAA,EACAznB,EAAAA,IAAAA,KAAAA,CAAAA,EACAsnB,EAAAA,GAAAA,CAAAA,EACA5gB,OAAAA,EAAAA,MAAAA,CACAzL,MAAAA,qBACA6M,SAAAA,CAAAA,EAAAA,GAAAA,CACAzS,QAAAA,CAAAA,CACAqyB,EAAAA,EAAAA,MAAAA,CACEjB,MAAAA,uBAEEkB,QAAAA,GAAsBr3B,CACtBs3B,SAAAA,EACArnB,SAAAA,CACN,CAAMsnB,EAEN,wBACE,CAAW,OAAArvB,GAAA2uB,EAAA,CAAoBxhC,OAAAA,CAChB,CAAUuhC,CACvB1hC,CAAA,CAAA,EACQiB,EAAA,IAAA,CACNf,sBAA8BghB,SAAAA,CAAAA,EAAAA,OAAAA,CAAU7jB,SAAAA,EAAAA,YAAAA,EAAU,SAAAqW,GAAAyuB,CAAA,CACzB,CAAA,EAAA3nB,GAAA6nB,IAAAD,GAAAnhC,EAAAK,EAAA,CACvB2R,sBAAgChS,EAAA,OAAA,CAC9B4O,MAAAA,KACD,SAAA,CAAA,UAAA,IAAA7P,EAAA,OAAA,CACH,SAAA+a,EAAA,YAAA,EAEF9Z,SAAAyS,GAAAqH,CAAA,CAAA,CAAS,CAAA,CAAA,CAAe5a,CAAAA,CACtB,CAAM0K,CAAAA,CAAsC,CAAE1K,EAAAA,EAAAA,OACd,MAE/Bqa,yBACC,UAGE,SAAY0nB,EAAA,IAAAI,GAAA,CAAA,KAAK,CAETz3B,KAAAA,EAAsC1K,MAAAA,EACd,GAAAoiC,EAEzB,UAAAC,EAEV,IAAA3/B,CAEH7C,EAAAA,EAAW,OAAAiB,EAAA,SAAA,CAA+B,KAAA,SAAAd,MAC7BoB,gBAAkBghC,EAAA,UAAA,EAAA,GACrB,SAAA,CAAA1/B,GAAA2/B,EAAAxiC,EAAA,MAAA,CAAEwI,IAAAA,GAAAA,EAAMwe,IAAAA,EAAOub,MAAAA,KAAIC,OAAAA,IAAAA,CAAW3/B,EAAAA,EAAAA,OAAAA,CAAQy/B,SAAAA,CAC5C,CAAA,EAAA,MACE,OAAA,CAAa,MAAA,QAAiB,SAAA7uB,GAAoBuT,CAAA,CAAe,CAC9DnkB,CAAAA,CACC,CAAA,CAAiB2/B,CAAAA,CAAgBh6B,CAAAA,CAAAA,CAAY,CAAA,CAAY,CAEzD,MAAOA,GAAAA,GAAAA,EAAAA,EClgBjBkG,GAAQ,GAEd,SAAS+zB,GAAO,CAAE9gC,MAAAA,EAAO65B,WAAAA,EAAY,GAAGvS,CAAM,EAAG,CACzCxoB,MAAAA,EAAaC,GAAYnD,CAAM,EAC/BmlC,EAAU,CAAC,CAAC/gC,EACZ2K,EAASkvB,EAAa,CAAC,EAAIvD,GAAU,EACrC,CAAE76B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,CAC9BD,UAAU4rB,GAAAA,YAAAA,EAAO5rB,WAAYiP,EAAOjP,QAAAA,CACrC,EACKkG,EAAS,GAAEm/B,EAAU,QAAU,WAAY,cAAarlC,CAAS,IAC9DkG,GAAAA,EAAOm/B,EAAW,kBAAoB,eAAc,EAE7D,MAAMzH,EAAa5+B,IAEbsmC,EAAiBtmC,IACvB,eAAeumC,EAAYzxB,EAAW,EAChCA,GAAa,CAACwxB,EAAepmC,WAC/BomC,EAAepmC,QAAUa,EAAMM,GAAGo+B,UAAU+G,WAAW,CACrDhlC,MAAO6Q,GACP/M,MAAO+gC,CAAAA,CACR,GAEH,MAAMtxB,EAAU,MAAMuxB,EAAepmC,QAAQ0B,KAAK,EAC9C,GAAA,CAAED,MAAAA,CAAUoT,EAAAA,EAChB,OAAIpT,GAAAA,MAAAA,EAAOE,SACLiT,IACS5U,EAAAA,QAAUyB,EAAM,CAAC,EAAED,IAGxBwwB,EAAAA,GAAcvwB,EAAO,QAAQ,EACrCA,EAAM2N,QAAkBqiB,GAAA,CACtBpvB,GAAWovB,EAAM3wB,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG+T,EACHpT,MAAAA,CAAAA,CAEJ,CAEA,eAAea,GAAkB,CAC3B,GAAA,CACF,MAAMuS,EAAU,MAAMhU,EAAMM,GAAGo+B,UAC5B+G,WAAW,CACVhlC,MAAO,EACP8D,MAAO+gC,EACP5kC,SAAUm9B,EAAW1+B,OAAAA,CACtB,EACA0B,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAUoT,EAAAA,EAEhB,OADQmd,EAAAA,GAAcvwB,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,OACE8B,EAAC+zB,GAAQ,CAEPxwB,MAAAA,EACAywB,eACE/yB,EAAA,KAAA,CAAID,MAAM,iBAAgBb,UACxBH,EAAA,IAAA,CAAAG,SAAIuiC,EAAU,iBAAmB,oBAAA,CAAwB,EACzD1iC,EAAA,MAAA,CAAAG,SAAM9C,CAAAA,CAAc,CAAC,CAAA,CACnB,EAENU,GAAG,SACHV,SAAAA,EACA42B,UAAU,kCACVC,UAAU,uBACVE,WAAYwO,EACZ/jC,gBAAAA,EACAs1B,UAAS,GACTG,YAAat0B,EAAAsB,IAAI,EACjBiI,eAAgB9I,EAAW8G,SAASgC,eACpCkrB,aAAY,GACZF,UACEtzB,EAACusB,GAAK,CACJzW,OAAM,GAENQ,SAAS,OACTgW,WAAW,QACX1N,SAAS,SACTvc,WACEtD,EAAA,SAAA,CAAQC,KAAK,SAASe,MAAM,QAAOb,SACjCH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,CAAA,CACtB,EACTH,SAAA,CAEDH,EAACwD,EAAQ,CAACQ,KAAM0+B,EAAW,MAAKrlC,CAAS,KAAO,MAAKA,CAAS,OAAM8C,SACjEuiC,EACCzhC,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACzD,EAEFc,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CACrD,CAAA,CAEI,EACVH,EAACyD,IAAa,CAAA,EACdxC,EAACuC,EAAQ,CACPtD,QAASA,IAAM,CACTy8B,IAAAA,EAAcmG,OAChB,6CACF,EACA,GAAI,CAAC,KAAK7/B,KAAK05B,CAAW,EAAG,CACvBA,GAAah9B,MAAM,kBAAkB,EACzC,MACF,CACIg9B,IACYA,EAAAA,EAAYoG,YAAY,EAAErH,KAAK,EAE7CtW,SAAS2E,KAAO2Y,EACX,IAAG/F,CAAY,OACf,IAAGA,CAAY,KAExB,EAAEx8B,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,yBAAA,CAA6B,CAAC,CAAA,CAChD,CAAC,CAAA,CACN,CAAA,EA/DJ9C,EAAWqlC,CAiEjB,CAEL,CChIA,MAAMh0B,GAAQ,GAEd,SAASs0B,GAAS,CAAExH,WAAAA,EAAY,GAAGvS,CAAM,EAAG,CACpCxoB,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B+O,EAASkvB,EAAa,CAAC,EAAIvD,GAAU,EACrC,CAAE76B,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,CAC9BD,UAAU4rB,GAAAA,YAAAA,EAAO5rB,WAAYiP,EAAOjP,QAAAA,CACrC,EACKkG,EAAS,aAAYlG,CAAS,IACpC47B,GAAS11B,EAAQ,sBAAqB,EAEtC,MAAM03B,EAAa5+B,IAEb,CAACo/B,EAAUwH,CAAW,EAAI/lC,EAAS,CAAE,CAAA,EACrCgmC,EAAgB7mC,IACtB,eAAe8mC,EAAWhyB,EAAW,CAC/BA,GAAAA,GAAa,CAAC+xB,EAAc3mC,QAAS,CACvC2mC,EAAc3mC,QAAUa,EAAMM,GAAG0lC,OAAO5K,aAAa,CACnD36B,MAAO6Q,EAAAA,CACR,EAGG,GAAA,CACF,MAAM2T,EAAWjlB,EAAMM,GAAG0lC,OAAOC,SAAS,EACpC,CAAErlC,MAAOskB,CAAAA,EAAS,MAAMD,EAASpkB,OACvCrB,EAAY0lB,CAAI,CAChB2gB,MAAAA,CAAY3gB,CAAI,CAEhB1lB,MAAAA,QAAesmC,EAAA,QAAA,KAAA,EACjB,GAAA,CACF,MAAAllC,CACA,EAAAoT,EACI,OAAApT,GAAA,MAAAA,EAAA,SAAEA,IAAUoT,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,IAEdpT,EAAeuwB,GAAAvwB,EAAA,QAAA,EACFzB,EAAAA,QAAAA,GAAgB,CAC7BqC,GAAAovB,EAAA3wB,CAAA,CAEAW,CAAQuwB,GAEN3vB,CACF,GAACwS,EACH,MAAApT,CACA,CAAO,CAELA,eAAAA,GAAAA,CACF,GAAA,CACF,MAAAoT,EAAA,MAAAhU,EAAA,GAAA,OAAA,aAAA,CAEA,MAAA,CAGoB,CAAA,EACL,KAAA,EAAA,GAAA,CAAA,MAAAY,CAGR,EACKoT,EACFpT,OAAFA,EAAAuwB,GAAAvwB,EAAA,QAAA,EAAEA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,SAAUoT,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GACRmd,IAEKhyB,EACJ,MAAA,CACT,MAAA,EACO,CAAA,CAEA,MAAA68B,EAAA/pB,GAAA,IACTosB,EAAA,OAGIrC,EAAAA,MAAgB/pB,CACpB,MAAcnR,aAAe,SAAA,CAAA8B,EAAAI,EAAA,CAC7B,aACa,MAAA,gBAAYD,KAAAA,GAChB,CAAA,EAAMs7B,EAAA,IAAA,CAAAhY,EAAAhhB,IAAA,CAAQzB,KAAM,CAAqB,KAAAwH,EAC7CizB,QAAAA,CACO,EAAAhY,EAAEjb,EAAAA,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAM86B,OAAAA,EAAAA,EAAAA,CAAY7f,GAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GACpB8f,SAAAA,CAAAA,EAAgBC,OAAAA,CACtB,SACO,CAAAxjC,EAAA,OAAA,CAAM,MAAY,qBAAYG,SACjCc,GAAAd,CAAAA,EAAAA,CAAAA,CACE,CAAA,EAAMa,EAAM,OAAA,CAAA,MAAqB,eAAC,SAC7BuiC,EAAA,eAAA,CAAA,CACD,CACNvjC,CAAA,CAAA,CAAY,CAAcG,CAAAA,CAAuB,CAAA,EAhB7D,KAgBsE,CAAAs7B,CACtD,CAAA,EAAA,OAERz7B,EAAA+zB,GAAA,CAAA,MAAAxwB,EAGR,eAAatC,EAAA,KAAA,CAEb,uBAGIsC,SAAAA,CAAAA,EAAAA,IAAAA,CACAywB,SAAAA,UACE,CAAU,EAAAh0B,EAAA,MAAA,CAAgBG,SACxBH,CAAA,CAAA,CAAAG,CAAG,CAAQ,EACX,GAAAA,WAAM9C,SAAAA,EAAe,UACnB,qBAENU,UAAG,uBACHV,WAAAA,EACA42B,gBAAAA,EACAC,wBAAU,EAAA,GAAA,IACVE,UAAY+O,GACZtkC,YAAAA,EAAAA,EAAAA,EAAAA,EACAw1B,eAAAA,WAAkC,eAClCF,aAAS,GACTG,cAAat0B,EACbuJ,UAAAA,EAAgB9I,IACJ,OAAA,GACG24B,SAAAA,OACf7E,mBAEIxd,SAAM,SAENQ,WAASvX,EAAA,SAAA,CACE,KAAA,SACF,MAAA,QACTsD,SACEtD,EAAAI,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOD,CAC5B,CAAA,EAAM,SAAYc,EAAAuC,EAAA,CAAG,QAAE,IAAA,CACtB,IAAAm5B,EAAA,OAAA,6CAAA,EACTx8B,GAAAA,CAAAA,UAEQw8B,CAAA,EAAA,IAEDA,MAAAA,kBAEJ,EACA,MACMA,CAAah9B,IACjBg9B,EAAAA,EAAA,YAAA,EAAA,KAAA,EACF,SAAA,KAAA,IAAAA,CAAA,YAEgBA,EAEL5S,SAAAA,CAAAA,EAAAA,GACX,KAAA,KAAA,CACF,EAAA,IAAA/pB,EAAA,OAAA,CAAEG,SAEFH,yBAAK,CAAA,CAACK,CAAK,CAAA,CAAS,CAAA,CAAM,EAAAhD,CAA8B,CAAA,CC/IpE,SAASomC,IAAU,CACjBxK,GAAS,OAAQ,GAAG,EACdx4B,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAAEukB,UAAAA,CAAcrhB,EAAAA,EAEdq0B,QAAiCpS,GAAA,CAEnCghB,GAAAA,CAAAA,EACJ,OAAKhhB,KAAiB,KAAA,CAChB,KAAAziB,EAAEA,GAAAA,CAAAA,EAASqM,EAAWoW,EAAAA,CAC5B,UAAkBqY,GAChB7mB,cAAW6mB,GACXp9B,KAAe6hC,GACf5hC,OAAMg/B,GACN/b,UAAQ4hB,GACR3hB,WAAW4Y,GACX3Y,QAAY8Y,GACZ7Y,SAAS2iB,GACTziB,SAAU+c,EAAAA,EACVhd,CAAU+hB,EACZ,OAAMY,EACiB5jC,EAAA4jC,EAAA,CACvB,GAAAt3B,EACY,WAAyCA,EAAAA,EAAkBrM,EAAA,KAAA,UAAAqM,CAAA,CAAA,EAFlEs3B,IAEkE,CAAA,EAEzE,OAAA/jC,GAAC,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,EAAA,CAAAL,EAAA2tB,IAAA,CAEDttB,GAAAA,CACM,MAAA6d,EAAA,SAAAyP,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EACF,0BAAuBA,cAAiB,EAAEzP,CAAI,EAAA,MAAA,CAC9ChhB,MAA0B,CAAA,CAA6B,CAAA,EAEvDE,EAAQ2S,MAAO,CACjB,GAAA,UACD,SAAAm0B,CAED,CAAA,CAAO,CC/BT,SAASG,IAAO,OACRpjC,MAAAA,EAAaC,GAAYnD,CAAM,EACrCjB,OAAAA,EAAU,IAAM,EACb,SAAY,CACX,MAAM+E,EAAO,MAAM2Y,GAAGF,OAAOzY,KAAK,EAClC,GAAIA,EAAKnD,OAAQ,CACf,MAAM+b,EAAKC,KACK7Y,EAAK+Y,UAAgB7N,EAAI8N,WAAWJ,CAAE,CAAC,EAC3C/b,SACVX,EAAO6oB,WAAa,GAExB,CAAA,IAEJ,EAAG,CAAE,CAAA,EAGHpmB,EAAAsB,EAAA,CAAAnB,UACIM,EAAW8G,SAAS4qB,sBACpB1xB,EAAW8G,SAAS8lB,oBAAsB,mBAC1C5sB,EAAAA,EAAWqhB,YAAXrhB,MAAAA,EAAsBvC,QACtB8B,EAACyjC,GAAS,EAAA,EAEVzjC,EAAC+6B,GAAS,CACRx3B,MAAM,OACNwU,KAAK,IACLha,GAAG,OACHu2B,YAAa,GACbC,UAAWv0B,EAAC8jC,GAAmB,EAAA,CAAA,CAChC,CAAA,CAEH,CAEN,CAEA,SAASA,IAAoB,CACrBrjC,MAAAA,EAAaC,GAAYnD,CAAM,EAC/BwmC,EAAsB1nC,IACtB,CAACq2B,EAAWC,CAAY,EAAIz1B,EAASmI,MAAS,EACpD,OACEpE,EAAAK,EAAA,CAAAnB,SAAA,CACEH,EAACiE,EAAI,CACH9C,IAAK4iC,EACL7/B,GAAG,iBACHlD,MAAQ,qCACNP,EAAWlC,qBAAuB,YAAc,EACjD,IAAGm0B,CAAU,GACdxyB,QAAgBV,GAAA,CACdA,EAAEogB,gBAAgB,EACd7a,OAAOmb,WAAW,yBAAyB,EAAEC,UAC/C3gB,EAAE6O,eAAe,EACjBskB,EAAyBQ,GAACA,EAAiB9tB,OAAT,MAAmB,EAEzD,EAAElF,SAEFH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,IAAIC,IAAI,eAAA,CAAiB,CAAA,CACpD,EACNP,EAACgkC,GAAiB,CAChB7Q,MAAOT,EACPW,UAAW0Q,EACXpjC,QAASA,IAAMgyB,EAAattB,MAAS,CAAA,CACtC,CAAC,CAAA,CACF,CAEN,CAEA,MAAM4+B,GAAsB,GACtBC,GAA8B,EACpC,SAASF,GAAkB,CAAE3Q,UAAAA,EAAWF,MAAAA,EAAOxyB,QAAAA,CAAQ,EAAG,CAClD,KAAA,CAAEvD,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,EAC1BmD,EAAaC,GAAYnD,CAAM,EAC/B,CAAC0N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAE1CO,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAOomC,EAAAA,CACR,EAED,eAAevD,GAAqB,CAC5BT,MAAAA,EAAmB,MAAMxiC,EAAsBQ,OAC/CN,EAAgBsiC,EAAiBjiC,MAEvC,GAAIL,GAAAA,MAAAA,EAAeO,OAAQ,CACzBP,EAAcgO,QAA0BhN,GAAA,CAC3BA,GAAAA,EAAa+W,OAAQrY,EAAU,CACxC8mC,cAAe,EAAA,CAChB,CAAA,CACF,EAEKjE,MAAAA,EAAuBtB,GAAmBjhC,CAAa,EAEtDH,EAAAA,kBAAoBG,EAAc,CAAC,EAC1CJ,EAAOI,cAAgBuiC,EAGjBxiC,EAAAA,GAAGU,QACNmG,OAAO,CACN5G,cAAe,CACbQ,WAAYR,EAAc,CAAC,EAAEI,EAC/B,CAAA,CACD,EACAqB,MAAM,IAAM,CAAA,CAAE,CACnB,CAEA7B,OAAAA,EAAOgB,qBAAuB,GACvB4hC,EAAAA,2BAA6Br1B,KAAKs5B,MAClCnE,CACT,CAEA,KAAM,CAACoE,EAAmBC,CAAoB,EAAIpnC,EAAS,EAAK,EAChE,SAASkjC,GAAsB,CACtBhjC,OAAAA,EAAMM,GAAGipB,eAAe/oB,KAAK,CAClCC,MAAO,CAAA,CACR,CACH,CAEA,SAAS2iC,GAAoB,CAC3Bl1B,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMo1B,EAAmB,EACnB/Z,MAAAA,EAAiB,MAAMyZ,IACRkE,EAAA,CAAC,EAAC3d,GAAAA,MAAAA,EAAgBzoB,OAAM,EAC7CoN,EAAW,SAAS,OACV,CACVA,EAAW,OAAO,CACpB,CAAA,IAEJ,CAEAhP,OAAAA,EAAU,IAAM,CACV62B,IAAU,QAA0BqN,GAAA,EACvC,CAACrN,CAAK,CAAC,EAGRlyB,EAACmyB,GAAc,CACbrT,cAAc,qBACdoT,MAAAA,EACAE,UAAAA,EACA1yB,QAAAA,EACAoW,OAAQ,CACN7N,OAAQxM,SAAS62B,IACnB,EACAhc,SAAS,OACTgW,WAAW,QACX1N,SAAS,SACTxc,MAAM,SACNyc,mBAAmB,UAAS3f,UAE5BH,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAI,eAAA,CAAiB,CAAA,CACf,EACRH,EAAA,OAAA,CAAAG,SACGM,EAAW9C,cAAcO,OACxB8B,EAAAsB,EAAA,CAAAnB,SACGM,EAAW9C,cACT4qB,MAAM,EAAG2b,EAA2B,EACpC3iC,IACCvB,GAAAA,EAAConB,GAAY,CAEX/pB,SAAAA,EACAsB,aAAAA,CAAAA,EAFKA,EAAaZ,EAGnB,CACF,CACH,CAAA,EACAkN,IAAY,UACdjL,EAAA,MAAA,CAAKgB,MAAM,WAAUb,SACnBH,EAACyX,GAAM,CAACkD,OAAM,EAAA,CAAE,CACb,CAAA,EAEL1P,IAAY,SACVhK,EAAA,MAAA,CAAKD,MAAM,WAAUb,UACnBH,EAAA,IAAA,CAAAG,SAAG,gCAAA,CAAiC,EACpCH,EAAA,IAAA,CAAAG,SACEH,EAAA,SAAA,CAAQC,KAAK,SAASC,QAASsgC,EAAkBrgC,SAAC,WAAA,CAE1C,CAAA,CACP,CAAC,CAAA,CACD,CAAA,CAGL,EACNc,EAAA,SAAA,CAAAd,SAAA,CACEc,EAACgD,EAAI,CAACC,GAAG,YAAYlD,MAAM,eAAcb,SAAA,CACvCH,EAACI,EAAI,CAACC,KAAK,IAAA,CAAM,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACpC,EACNc,EAACgD,EAAI,CAACC,GAAG,iBAAiBlD,MAAM,gBAAeb,SAC5CkkC,CAAAA,EACCpjC,EAAAK,EAAA,CAAAnB,UACEH,EAAA,OAAA,CAAMgB,MAAM,gBAAeb,SAAC,KAAA,CAAS,EAAE,IACvCH,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CAC5B,EAEFH,EAAA,IAAA,CAAAG,SAAG,SAAA,CAAU,EACZ,IACHH,EAACI,EAAI,CAACC,KAAK,aAAA,CAAe,CAAC,CAAA,CACvB,CAAC,CAAA,CACD,CAAC,CAAA,CACK,CAEpB,CAEA,MAAevD,GAAAA,GAAK+mC,EAAI,EC5NXU,GAAc,yCACdC,GAAkB,yBAC/B,SAASC,GAAqB5hC,EAAK,CAEjC,KAAM,CAAE6hC,SAAAA,EAAU1sB,SAAAA,CAAS,EAAI,IAAI4B,IAAI/W,CAAG,EACpC,CAAGyN,CAAAA,EAAUQ,EAAQ/S,CAAE,EAAIia,EAAS2sB,MAAMJ,EAAW,GAAK,GAEhE,GAAIxmC,EACF,MAAQ,IAAG2mC,CAAS,MAAK3mC,CAAG,GAG9B,KAAM,CAAA,CAAG6mC,CAAM,EAAI5sB,EAAS2sB,MAAMH,EAAe,GAAK,GAEtD,GAAII,EACF,MAAQ,IAAGF,CAAS,MAAKE,CAAO,EAEpC,CCVA,SAAwBC,IAAY,CAElC,MAAMhiC,EADWwiB,KACIrN,SAASrS,QAAQ,MAAO,EAAE,EACzCm/B,EAAYL,GAAqB5hC,CAAG,EAE1Ckb,OAAAA,GAAgB,IAAM,CAChB+mB,GACF93B,WAAW,IAAM,CACRoY,OAAAA,SAAS2E,KAAO+a,EAAY,cAClC,GAAG,CACR,EACC,CAACA,CAAS,CAAC,EAGZ7jC,EAAA,MAAA,CAAKD,MAAM,WAAWuB,SAAS,KAAIpC,SAChC2kC,CAAAA,EACC7jC,EAAAK,EAAA,CAAAnB,UACEH,EAAA,KAAA,CAAAG,SAAI,cAAA,CAAgB,EACpBH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGgE,KAAO,IAAG8gC,CAAU,aAAY3kC,SAAE2kC,CAAAA,CAAa,CAAA,CACjD,CAAC,CAAA,CACJ,EAEF7jC,EAAAK,EAAA,CAAAnB,UACEH,EAAA,KAAA,CAAAG,SAAI,uBAAA,CAAyB,EAC7BH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGgE,KAAMnB,EAAKqG,OAAO,SAASE,IAAI,sBAAqBjJ,SACpD0C,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEJ7C,EAAK,KAAA,CAAA,CAAA,EACLA,EAAA,IAAA,CAAAG,SACEH,EAACiE,EAAI,CAACC,GAAG,IAAG/D,SAAC,SAAA,CAAa,CAAA,CACzB,CAAC,CAAA,CACD,CAET,CC/BA,SAAS4kC,IAAQ,CACT,KAAA,CAAE3nC,MAAAA,GAAUE,EAAI,EACtB27B,GAAU,QAAS,IAAG,EACtB,KAAM,CAAChuB,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAE1C,CAACqb,EAAanW,CAAM,EAAIC,GAAkBmW,GAAAA,EAAI,EAAG,CAAC,EAClD,CAACK,EAAOR,CAAQ,EAAInb,EAAS,CAAE,CAAA,EACrCZ,EAAU,IAAM,CACdgP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMuN,EAAQ,MAAMzb,EAAMM,GAAGmb,MAAMjb,KAAK,EACxChB,GAAiB,EACjByb,EAAc,SAAA,CACd/M,MAAAA,GACU,OAAA,CACV1O,CACA0O,IAAkB,EACpB,CAAAiN,CAAA,CAAA,EAAA,KACC,CAAAS,EAAAJ,CAAA,EAAA1b,EAAA,EAAA,EACL,OAAIqb,EAAAA,MAAY,CAEhB,GAAM,aAEN,uBACOxa,SAAG,KAAaiD,SAAM,CAAAC,EAAA,MAAA,CAA0B,MAAA,qBAAId,SACvDc,CAAAA,EAAA,SAAA,CAAW,SAAAA,EAAA,MAAA,CAAoBd,MAC7BH,cAAAG,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBc,CAAAA,EAAA6wB,GAAA,CAAA,CAAA,EAAA9xB,EAAAiE,EAAA,CAAW,GAAA,IAAa9D,MAAAA,eAEhB+D,SAAGlE,EAAAI,EAAA,CAAU,KAAA,OAAcD,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGH,EAAE,KAAA,CAAC,SACxB,OAAA,CACJ,EACLA,EAAA,MAAA,CAAAG,MAAI,cACJH,SAAAA,EAAA,SAAA,CAAW,KAAA,SAAaG,MAAAA,QAEpBF,QAAK,IAAA2Y,EAAA,EAAA,EACL5X,SAAMhB,EAAAI,EAAA,CACNF,KAAAA,OAA6CC,KAAAA,IAEvCE,IAAK,UAAA,CAAA,CAAY,CAAA,CAAQ,CAAA,CAAA,CAAY,CAAA,CACrC,CAAA,EAACL,EACL,OAAA,CAAA,SACH6Y,EAAA,OAAA,EAAA7Y,EAAA,KAAA,CAEPA,MAAA,YACG6Y,SAAAA,EAAe,IAAAjb,KACd,KAAA,CAAU,SAAAoC,EAAAiE,EAAA,CACP4U,GAAAA,MAAAA,EAAWjb,EAAAA,GACVuC,WACO,OAAA,CAAC+D,SAAUtG,CAAAA,EAAQwC,EAAA,CAAED,KACxBc,MAAA,CAAAd,EAAAA,IAAAA,EACEH,OAAK,CAACK,SAAKzC,EAAA,KAAA,CAAQ,CAAA,CAAE,CAAA,CAAY2F,CAAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EAcF0H,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAEV,WACC,SACUA,EAAAyX,GAAA,EAAA,CACd,CAAA,EAASxM,IAAA,QAAAjL,EAAA,IAAA,CAAUG,MACjBH,WACC,SACW,uBACd,CAAA,EAASA,EAAA,IAAA,CAAUG,MAAC,WAEpBH,SAAA,eAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,EAAagZ,GAAGhZ,EAAAe,GAAA,CACrC,MACI,QACJ,QAEHf,GAAAA,CACQR,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZoZ,EACF,SAAA5Y,EAAA2N,GAAA,CACF,KAAAqL,GAAA,YAAAA,EAAA,KAAE7Y,WAEU,CACJ6Y,EAAsBpb,QAAAA,eAGjBgb,EAAA,EAAA,CACT,CACAA,CAAAA,CAA6B,CAC/B,CAAA,CAAA,CAAA,CACD,CClHX,MAAeosB,GAAA,GAAA,IAAA,IAAA,0BAAA,YAAA,GAAA,EAAA,KCAT,CAAEC,iBAAkBC,GAAaC,aAAcC,EAAQ,EAAIC,CAAAA,iBAAAA,WAAAA,eAAAA,eAAAA,aAAAA,uBAAAA,aAAAA,aAAAA,SAAAA,KAAAA,KAAAA,aAAAA,IAAAA,GAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAG3DC,GAAS,yBAER,eAAeC,GAAoB,CAAEnb,YAAAA,CAAY,EAAG,CACzD,MAAMob,EAAqB,IAAIxH,gBAAgB,CAC7CyH,YAAaP,GACbQ,cAAetgB,SAASugB,OAASvgB,SAASpN,SAC1C4tB,OAAQN,GACRO,QAAST,EACX,CAAC,EAYDxoC,OADyB,MAVI,MAAMyB,MAChC,WAAU+rB,CAAY,eACvB,CACE0b,OAAQ,OACRC,QAAS,CACP,eAAgB,mCACjB,EACDxS,KAAMiS,EAAmBQ,SAAS,CACpC,CACF,GACoD9mC,MACtC+mC,CAAmB,eAAAC,GAAA,CACjC,YAAA9b,EACF,UAAA+b,CAEA,EAAA,CAA4C/b,QAAW,IAAA,gBAAA,CAAE+b,UAAAA,EAAa,MAAAb,GACpE,aAAyB,SAAA,OAAsB,SAAA,SAE7Cc,cAAa,MACbC,CAAAA,EAEAC,iBADAlc,CAAA,oBAAAmc,EAAA,SAAA,CAAA,EAEF,CACMC,eAAAA,GAAoB,CAC1B,YAAApc,EACF,UAAA+b,EAEA,cAAAM,EACErc,KAAAA,IAEAqc,QAAa,IAAA,gBAAA,CACb78B,UAAAA,EACC,cAAA68B,EACD,aAAmBzI,SAAe,OAAA,SAAC,SACjCmI,WAAS,qBACTM,KAAAA,EACAJ,MAAAA,EACAK,CAAAA,EASAnT,OADC,MAPG,MAAA,MAAA,WAAAnJ,CAAA,eAAA,CACJgc,OAAOd,OACP,QAAA,CACIqB,kDACJb,EACAC,KAAOz5B,EAAE,SAAA,CACP,CAAA,GACD,MAEH,CC/CF,SAASs6B,IAAQ,CACf3N,GAAS,QAAQ,EACjB,MAAM4N,EAAiBxqC,IACjByqC,EAAoBplC,EAAMC,MAAMI,IAAI,aAAa,EACjD,CAACkJ,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAACqtB,CAAY,EAAIE,KACjBptB,EAAWktB,EAAaxoB,IAAI,UAAU,EACtC,CAACglC,EAAcC,CAAe,EAAI9pC,EACtCG,IAAYypC,GAAAA,YAAAA,EAAmB/D,gBAAiB,EAClD,EAEM,CAACkE,EAAeC,CAAgB,EAAIhqC,EAAS,CAAE,CAAA,EACrDZ,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CAEIuK,MAAAA,EAAO,MADD,MAAMxI,MAAM2mC,EAAgB,GACjB9lC,OACvBgoC,EAAiBrgC,CAAI,CAAA,MACX,CAAA,CAEVjK,IACF,EAAA,CAAA,CAAA,EAAA,MACCuqC,EAAA/c,GAAA,CACL1oB,EAAK,MAAA,IAAA,cAAA0oB,CAAA,GAQL,UACQzoB,EAAU,SAAA,EAEH,GAAA,CACX2J,KAAAA,CACI,UAAA66B,EACI,cAAAM,EAAEN,UAAAA,CAAWM,EAAAA,MAAAA,GAAAA,CAAeW,YAAAA,CAAAA,CAAU,EAExChd,GAAAA,GACD1oB,EAAA,QAAA,IAAA,WAAAykC,CAAA,EAEHzkC,cAAgC,eAAA+kC,CAAA,EACxB3kC,EAAAA,QAAQqB,IAAI,WAAYgjC,CAAS,EACjCrkC,SAAAA,KAAY,MAAAokC,GAA6B,CACzCpkC,YAAAA,EAEGkC,UAAAA,CAAiC,CACxComB,GAEF,MAAC,gCAAA,EAEDzqB,EAAsC,SAAA,CACxC,MAAA,CACA2L,EAAW,OAAS,EAEpB1O,IACA0O,EACF8C,EAAA5O,GAAA,CACFA,EAAG,eAAA,EACL,KAAA,CAEA,SAAAgM,CACEhM,EAAiBA,EAAA,OACX,IAAA4qB,EAAA5e,EAAA,YAAA,MAAA,YAAA,EAAEA,EAAAA,EAAAA,QAAAA,eAAAA,EAAAA,EAAAA,QAAAA,OAAAA,EAAAA,EAAS4e,EAAMlhB,EAAAA,QAAAA,YAAAA,EAAAA,EACLsC,KAAAA,KAAAA,CAAAA,IAElB4e,IAAkC,KAAAid,GAAgBA,EAAI1hC,UAAkB,CAAA,GAGxEwhC,EAAe/c,CAAW,CACxBA,EAGFkd,EAAAP,EAAAE,EAAA,OAAAI,GAAAA,EAAA,SAAAN,CAAA,CAAA,EAAA,KAAA,CAAAr0B,EAAAF,IAAA,CACA20B,MAAAA,EAA0Bz0B,EAAA,YAAA,EAAA,WAAAq0B,EAAA,YAAA,CAAA,EAC5BQ,EAAA/0B,EAAA,YAAA,EAAA,WAAAu0B,EAAA,YAAA,CAAA,EAEA,OAAMO,GAAuBP,CAAAA,KAQrB,CAAAS,GAAoBh1B,IAGoB,CACxC,CAAA,EAAA,MAAoB+0B,EAAAA,EAAAA,EAAAA,CAAAA,EAAoB,OAAAvnC,EAAA,OAAA,CACjC,GAAA,QAERuoB,MAAM,CAGb,UACE,QAAS,EAAQte,SAAOhJ,EAAA,OAAA,CAAEwmC,SAAAA,EAAoB,SAAA,CAAAznC,EAAA,KAAA,CAAEG,iBAC9C,CAAMiO,EAAAA,EAAAA,QAAAA,CAAmBjO,SACvBH,CAAAA,EAAA,IAAA,CAAI,SAAA,UAAA,CACJiB,EAAAA,EAAA,QAAA,CAAAd,MAAAA,EACEA,SAAG,GACHH,KAAAA,OACEhC,MAAO+oC,QACPxjB,GAAQ,cACRtjB,IAAK4mC,EACL7lC,SAAMiK,IAAA,UACNlN,YAAG,MACHoD,eAAK0lC,MACLnjC,aAAsB,MAEtB0nB,WAAY,GACZC,YAAe,kBACfF,QAAa3rB,GAAA,CACDwnC,EAAAxnC,EAAA,OAAA,KAAA,CACA,CAAA,CAAA,oBACI,QAAA,EAAAQ,EAAA,KAAA,CACER,GAAAA,wBAClB,SAAA8nC,EAAA,IAAAD,GAAArnC,EAAA,KAAA,CAEDsnC,SAAAA,EAAAA,SAA+B,CACvB,KAAA,eACiB/lC,SACpBpB,YACE,CACOgnC,EAAAE,CAAA,CACC,EACNnnC,SAAemnC,CACbF,CAAAA,CAAuB,CACzB,CAAA,CAAA,CAAA,EAAAnnC,EAEC3C,MAAAA,CAAAA,GACK,eAAC,SAEZ,wBAAA,CACC,CAEJ2C,CAAA,CAAA,EAAKjC,IAAG,SAAAiC,EAAA,IAAA,CAAA,MAAe,QAAkC,SAC1D,yDAAA,CAMI,EACNiL,EAAY,MAAA,CACRjK,SAAM,CAAAhB,EAAA,SAAA,CAAQ,MAAA,QAInBiB,SAAAgK,IAAA,UAAA9K,SACEH,QAAA,CAAA,EAAc,GAAA,CAAA,CAAA,EAAQ0D,KAAsB,CAAA,OAAWuH,IAAA,SAAA,CAEvD,IAAa,KAAA,CAAA,CAAA,EAAAjL,EAAA,IAAA,CAEfA,SAAOA,EAAA,IAAA,MAASiL,mCAChBjL,OAAK,SACLG,6CACE,CAAA,CAAQ,CAAA,EAAmC+I,EAAO,IAAA,CAAA,SAASlJ,EAAAiE,EAAA,CAExD,GAAA,IAELjE,SAAA,SAAA,CAAAG,CACO,CAAA,CAAA,CAAI,CAAA,CAAI,CAAA,CAAa,CC9JpC,MAAMunC,GAAc,EACdh5B,GAAQ,GAEd,SAASi5B,GAAO1e,EAAO,CACrB,MAAM3c,EAAS2rB,KACT,CAAE76B,MAAAA,EAAOC,SAAAA,EAAU2K,cAAAA,GAAkB1K,EAAI,CAC7CD,SAAUiP,EAAOjP,QAAAA,CAClB,EACK,CAAC4N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAC1C,CAACqtB,CAAY,EAAIE,KACjBgC,EAAgBpwB,IAChB0Y,GAAIkU,GAAAA,YAAAA,EAAOtH,QAAS4I,EAAaxoB,IAAI,GAAG,EACxC9B,GAAOgpB,GAAAA,YAAAA,EAAOhpB,OAAQsqB,EAAaxoB,IAAI,MAAM,EACnDk3B,GACElkB,EACK,WAAUA,CAAE,GACX9U,EACK,KACC,CACEwV,SAAU,QACVhU,SAAU,WACVg6B,SAAU,UAAA,EACVx7B,CAAI,CACP,IACD,EACL,GACD,SACH,SACH,EAEA,KAAM,CAAC+b,EAAUC,CAAW,EAAI/e,EAAS,EAAK,EACxC0qC,EAAYvrC,EAAO,CAAC,EAC1BC,EAAU,IAAM,CACdsrC,EAAUrrC,QAAU,CAAA,EACnB,CAACwY,EAAG9U,CAAI,CAAC,EAEZ,MAAM0vB,EAAgBtzB,IACtB0hB,GAAgB,IAAM,UACNxhB,GAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAAS8hB,WAAT9hB,MAAAA,EAAAA,KAAAA,EAAoB,EAAG,EAAC,EACrC,CAACwY,EAAG9U,CAAI,CAAC,EAEZ,KAAM,CAAC4nC,EAAeC,CAAgB,EAAI5qC,EAAS,CAAE,CAAA,EAC/C,CAAC6qC,EAAgBC,CAAiB,EAAI9qC,EAAS,CAAE,CAAA,EACjD,CAAC+qC,EAAgBC,CAAiB,EAAIhrC,EAAS,CAAE,CAAA,EACvDZ,EAAU,IAAM,CACdwrC,EAAiB,CAAE,CAAA,EACnBE,EAAkB,CAAE,CAAA,EACpBE,EAAkB,CAAE,CAAA,CAAA,EACnB,CAACnzB,CAAC,CAAC,EACN,MAAMozB,EAAqB,CACzB1yB,SAAUqyB,EACVrmC,SAAUumC,EACVvM,SAAUyM,CAAAA,EAGZ,SAASE,EAAYj3B,EAAW,CAC9B7F,EAAW,SAAS,EAChB6F,GAAa,CAAClR,IAChB6nC,EAAiBD,EAActf,MAAM,EAAGmf,EAAW,CAAC,EACpDM,EAAkBD,EAAexf,MAAM,EAAGmf,EAAW,CAAC,EACtDQ,EAAkBD,EAAe1f,MAAM,EAAGmf,EAAW,CAAC,IAGvD,SAAY,SACX,MAAMp7B,EAAS,CACbyI,EAAAA,EACA4E,QAAS3R,EACTnK,MAAO6pC,EAAAA,EAELznC,IACFqM,EAAOzO,MAAQ6Q,GACfpC,EAAOrM,KAAOA,EACV+H,IAAesE,EAAO+7B,OAAST,EAAUrrC,UAE3C,GAAA,CACF,MAAM6U,EAAU,MAAMhU,EAAMqc,GAAGC,OAAOpN,CAAM,EAC5C1P,GAAAA,EACA,GAAUuU,EAAA,CACRg3B,EAAeloC,CAAA,EAAAmR,EAAAnR,CAAA,CAAA,EACbkoC,MAAAA,GAAAA,EAAAA,EAAuBloC,CAAUA,IAAjCkoC,YAAAA,EAAiCloC,OAC3B/B,EAAAA,QAAiB+B,GACvB2nC,EAAoBl5B,CAAAA,CAAAA,CAAAA,CACpBuN,KAAY,CACPksB,EAAAloC,CAAA,EAAA0c,IAAA,CAAA,GAAAA,GAAA,GAAAvL,EAAAnR,CAAA,CAAA,CAAA,EACcA,MAAAA,GAAAA,EAAAA,EAAIA,CAAG0c,IAAP1c,YAAAA,EAAO0c,OACpBze,EAAAA,QAAiB+B,EAAO/B,QAAAA,GACpB3B,EAAAA,CAAAA,CAAAA,CAAUqrC,CACR,MAETE,EAAA12B,EAAA,QAAA,EACL02B,IAAiC,QAAA,EACjCE,EAAkB52B,EAAQ3P,QAAQ,EAClCymC,EAAAA,UACAN,EAAoB,EAAA,EAEtBt8B,EAAA,SAAA,CACAA,MAAoB,GACR,OAAA,CACZ1O,CACA0O,IACF,CAAAhP,OAAAA,EACC,IAAA,aACLyY,IAEAzY,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,WAAhBA,MAAAA,EAAAA,KAAAA,EAAgByY,GACdqzB,EAAO,EAAA,IAELA,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,QAAhBA,MAAAA,EAAAA,KAAAA,EAEA3b,EAAAA,CAAAA,EAAAA,EAAAA,IACF5sB,GAAA,IAAAL,GAAA,UACCoX,GAAAC,EAAA4V,YAAA,YAAA5V,EAAmB,QAAnB,MAAAD,EAAA,KAAAC,EAEHhX,EAAAA,CAGI4sB,iBAA+B,CAEjC,EACkBzsB,EAAA,MAAA,CAEpB,GAAA,cAEA,uBACOjC,IAAG4xB,EAAc3uB,SAAMC,EAAA,MAAA,CAAsB0uB,MAAAA,qBAAcxvB,YAC9D,SAAA,CAAW,SAAAc,EAAA,MAAA,CAAoBd,MAC7BH,cAAAG,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBH,EAAA8xB,GAAA,EAAA,CAAA,CAAA,EAAW9xB,EAAAqqB,GAAA,CAAalqB,IACtBH,CAAU,CACP,EACLA,EAACqqB,MAAU,CAAClpB,MAAKsrB,cACjBzsB,SAAA,GAAA,CAAA,CAAKgB,CAAM,CAAA,CAAc,CAAA,EAAMC,EAAM,OAAA,CAAA,SAClC,CAAA,CAAA,CAAA8T,GAAA9T,EAAA,MAAA,CAEPA,MAAA,sBACI,CAAC8T,CAAAA,CAAAA,KACD9Q,EAAA,CAAW,GAAA,UAAA8Q,EAAA,MAAA,mBAAAA,CAAA,CAAA,GAAA,EAAA,YACP,OACM7Q,CAAAA,EAAAA,CAAAA,CAAuD/D,MAAC,gBAK9D,WACEyM,GAAO,aAAA,mBAAAmI,CAAA,CAAA,gBAAA,EACD,CACN7Q,MAAK,WAEP,KAAA,WACE0I,GAAO,aAAA,mBAAAmI,CAAA,CAAA,gBAAA,EACD,CACN7Q,MAAK,QAEP,KAAA,WACE0I,GAAO,aAAA,mBAAAmI,CAAA,CAAA,gBAAA,CAAA,EACD,KAAA,CAAArC,EAAAF,IACDE,EAAA,OAAAzS,KAIDyS,EAAEzS,OAASA,EAAa,EACbA,CAAa,EAAA,IAAAqoC,GAAAtoC,EAAAiE,EAAA,CACrB,GAAAqkC,EAAA,GACR,SACKA,EACJtoC,KAAK,CAAA,CAACkE,EAASA,CAAAA,MAAU0I,EAAAA,CAAK,SAC9B,EAAA,CAAA3M,GAAAA,IAAA,aAAAgB,EAAAK,EAAA,CAGP,cACC,YAAAtB,EAAA,KAAA,OACI,kBAEGC,SAAS,UACR,CAAA,EAAU8nC,EAAA,OAAA,EAAA9mC,EAAAK,EAAA,CAAiBnB,SAAC,CAAAH,EAAA,KAAA,CAE7B+nC,MAAAA,8BACC5nC,SACEH,EAAA,IAAAwC,GAAAxC,EAAA,KAAA,CAAU,SAAAA,EAAA2R,GAAA,CACPo2B,QAAAA,EACC5nC,SAAAA,EAEIqC,UAAAA,EAAAA,CACAnF,CAAAA,EAAAA,EACS,EAAA,CAAA,CAAA,CAAA,EAAA4C,IACV,YAAAD,EAAA,MAAA,CAAC,MALajC,WAQjB,SACMkD,EAAAgD,EAAA,CACG,MAAA,eAAU9D,GAAAA,aACd4U,CAAA,iBACH/T,SAAM,CAAA,qBAAAhB,EAAAI,EAAA,CACN8D,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAjE,IAAAgL,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAEV,WAGH,WACayX,GAAA,CACF,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAgB,EAAAK,EAAA,CAAkB,SAEzC,CAAArB,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,UACR,CAAA,EAAUgoC,EAAA,OAAA,EAAAhnC,EAAAK,EAAA,CAAiBnB,SAAC,CAAAH,EAAA,KAAA,CAE7BioC,MAAAA,yBACC9nC,SACEH,EAAA,IAAAghB,GAAAhhB,EAAA,KAAA,CAAU,SAAAiB,EAAAgD,EAAA,CACPgkC,GAAAA,EAAAA,IAAAA,CAAoBjnB,MAAAA,MACnB,GAAA,MAAAA,EAAA,IAAA,GAAA7gB,YACOC,EAAA,CACH8D,KAEO,SACkB,CACxB/D,EAAAA,EAAAA,OAEI,CAACE,SAAK2gB,EAAA,IAAA,CAAW,CACtBhhB,CAAA,CAAA,CAAewI,EAAAA,EAAY,IAAA,CAAA,CAAA,CAAA,EAAAvI,IACvB,YAAAD,EAAA,MAAA,CAAC,MAVQwI,WAajB,SACMvH,EAAAgD,EAAA,CACG,MAAA,eAAU9D,GAAAA,aACd4U,CAAA,iBACH/T,SAAM,CAAA,qBAAAhB,EAAAI,EAAA,CACN8D,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAjE,IAAAgL,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAEV,WAGH,WACayX,GAAA,CACF,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAgB,EAAAK,EAAA,CAAkB,SAEzC,CAAArB,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,OACR,CAAA,EAAU4nC,EAAA,OAAA,EAAA5mC,EAAAK,EAAA,CAAiBnB,SAAC,CAAAH,EAAA,KAAA,CAE7B6nC,MAAAA,WACC1nC,SACEH,EAAA,IAAA0V,GAAA1V,EAAA,KAAA,CAAU,SAAAA,EAAAiE,EAAA,CACP4jC,MAAAA,cACC1nC,GAAAA,EACO,IAAA9C,CAAA,MAAAqY,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACH1U,SAAMhB,EAAA0oB,GAAA,CACNxkB,OAAAA,CAGsB,CACrB/D,CAEM,CAACuV,CAAAA,EAAAA,EAAiB,EAAA,CAAA,CAAA,CAAA,EAACzV,IACtB,YAAAD,EAAA,MAAA,CAAC,MAVOjC,WAahB,SACMkD,EAAAgD,EAAA,CACG,MAAA,eAAU9D,GAAAA,aACd4U,CAAA,iBACH/T,SAAM,CAAA,kBAAAhB,EAAAI,EAAA,CACN8D,kBAAmB,CACpB,CAAA,CACqB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACtC,CAAAjE,IAAAgL,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAEV,WAGH,WACayX,GAAA,CACF,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,iBAAA,CAAA,EAAS,CAAA,CAAA,EAAUG,CAAC,CAAAF,IAAAgL,IAAA,UAAA+Q,EAAAhc,EAAA6c,GAAA,CAAe,SAEtC6a,GAAA,OASmB,EACd,SAAA13B,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,cAGAF,QAAK,IAAAmoC,EAAA,EACLpnC,MAAM,CACNd,eAA2B,KACpB,EAAA,SAAkB,YAAA,CAAM,CAAA,CAAA,EAChCF,EAAA,IAAA,CAED,MAAQ,yBAGVA,SAAA,UAAA,CAAA,EAASiL,IAAA,WAAAjL,EAAA,IAAA,CAAwBG,MAAC,WAAW,SAGnCH,EAAAyX,GAAA,CACD,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAA,CAAO,CAAA,EAAE8K,IAAA,UAAAjL,EAAA,IAAA,CAAC,MAGrB,WACJ,SACYA,EAAAyX,GAAA,CACL,OAAA,EAAA,CAAUtX,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,6DAAA,CAAA,CAAGgB,CAAM,CAAA,CAAA,CAAW,CAAA,CAGrB,CAAA,CACI,CC7Tf,MAAM0N,GAAQ,GACR65B,GAA6B,GAC7BC,GAAa,EAEnB,IAAIC,GAAsB,CAAA,EACtBC,GAAoB,CAAA,EACpBC,GAAkB,CAAA,EACtB,SAASC,GAAoB7qC,EAAI,CAC/B,OAAO2qC,GAAkB3qC,CAAE,EAC3B,OAAO4qC,GAAgB5qC,CAAE,CAC3B,CAEA,MAAM61B,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACRvV,SAAU,QACZ,EAEA,SAASsqB,GAAWv8B,EAAQ,CACpB,KAAA,CAAEvO,GAAAA,CAAOuO,EAAAA,EACT,CAAElP,MAAAA,EAAOC,SAAAA,GAAaC,EAAI,CAAED,SAAUiP,EAAOjP,QAAAA,CAAU,EACvDoD,EAAaC,GAAYnD,CAAM,EAC/B,CAACgtB,EAAcC,CAAe,EAAIC,GAAgB,EAClDqe,EAAave,EAAaxoB,IAAI,OAAO,EACrCgnC,EAAiBxe,EAAaxoB,IAAI,YAAY,EAC9CinC,EAAalgC,SAASggC,GAAcC,EAAgB,EAAE,EAC5D,IAAIE,EAAYD,EAAa,EACvBE,MAAAA,EAAgB3e,EAAaxoB,IAAI,eAAe,EAChDonC,EAAcC,GAAUF,EAAe7rC,CAAQ,EACjD6rC,GAAiB,CAACC,IACRF,EAAA,IAERI,MAAAA,EAAgBJ,GAAa,CAAC,CAACF,EAE/BlR,EAAOrJ,GAAUzwB,EAAIV,CAAQ,EAC7B,CAACisC,EAAYC,CAAa,EAAIrsC,EAASK,EAAOkY,SAASoiB,CAAI,CAAC,EAClEv7B,EAAU,IAAM,CACViB,EAAOkY,SAASoiB,CAAI,GACRt6B,EAAAA,EAAOkY,SAASoiB,CAAI,CAAC,CACrC,EACC,CAACA,CAAI,CAAC,EAEH2R,MAAAA,EAAYn6B,GAAQ,IAAM,CACxB,KAAA,CAAE4W,aAAAA,CAAiB1oB,EAAAA,EACnBya,IACHiO,GAAAA,YAAAA,EAAcjO,WAAY,MAAOiO,GAAAA,YAAAA,EAAcvM,SAAU,IACtD+vB,EACJC,GAAU,mBAAoB1xB,CAAQ,GAAK0xB,GAAU,SAAU1xB,CAAQ,EACrE,MAAA,CAACA,GAAYyxB,EACR,IAEFzxB,CACT,EAAG,CAAE,CAAA,EAEL1b,EAAU,IAAM,CACV,CAACgtC,GAAcL,IAChB,SAAY,CACP,GAAA,CACF,MAAMvzB,EAAS,MAAMtY,EAAMM,GAAG+X,SAASpX,MAAMN,CAAE,EAC/Ca,GAAW8W,EAAQrY,CAAQ,EAC3BksC,EAAc7zB,CAAM,OACR,CACZ9Y,MAAAA,sBAAiB,EACjB+C,SAA4B,KAAA6pC,CAC5BpkB,CAAgBokB,IAEjB,EACL,CAAAP,CAAA,CAAA,EACF,MAAIA,EAAUC,EAAAC,GAAA,YAAAA,EAAA,iBAAAG,GAAA,YAAAA,EAAA,iBAERnuB,EAAmB+tB,GAAAA,IACR/tB,CAGXwuB,CAAAA,OAAAA,WAAmBzT,iCAAkB,EAAA,SAAAz1B,EAAA,aACzC,QACUyf,KAAAA,EAIHmpB,EACL,SAAmB,KAAAG,GAEZjf,EAAA,OAAA,OAAA,EACLA,EAAaqf,OAAO,eAAO,EAC3Brf,GAAmC,EAGvC,EAAA,CAAA8e,EAAAG,EAAA/oC,EAAA,YAAA,CAAA,EACF,OAAI4oC,EAAAA,MAA0B5oC,CAE9B,sBACOO,SAAM,CAAAioC,EAAA9tB,GAAA,MAAAA,EAAA,OAAAnb,EAAAwd,GAAA,oBAIHrC,SAAAA,GAAAA,EACAsC,SAAAA,EACApgB,KAAAA,GAAAA,YAAAA,EAAAA,SACAsM,MAAkBkgC,EAAAA,EAClBnsB,QAAoBisB,CAAA,CAAA,EACXA,EAAAA,MAAAA,CAGX3pC,MAAAA,gCAAKgB,SAAMhB,EAAAyX,GAAA,CAA+BtX,OACxCH,EAAO,CAAA,CAAO,CAAA,EAAEA,EAAAiE,EAAA,CAIpBjE,GAAAA,CAAK,CAAA,EAAKwpC,CAAAA,GAAAA,EAAAA,GAAAA,CAAY,GAAAzrC,EAIpBA,SAAAA,EAAAA,SACAV,UAAAA,CAAiBA,CACjBmsC,CAAAA,CAAAA,CAAAA,CAEH,CAGP,SAAAM,GAAA,CAEA,GAAA/rC,EAAwBA,UAAAA,EAAAA,IAAIyrC,SAAYpwB,CAAA,EAAeA,QAAgB,KAAA,CAAAmR,EAAAC,CAAA,EAAAC,GAAA,EAC/Dqe,EAACve,EAA6B,IAAA,OAAoB,EAClDue,EAAAA,SAA0B/mC,EAAW,EAAA,EAAA,EACrCknC,CAAYngC,EAAAA,CAAqB,EAAA5L,EAAEqtB,EAAI,IAAA,MAAA,CAAA,EACvCwf,EAAsB,CAAA,CAAA,SAAAxf,EAA0BxoB,IAAAA,WAAAA,CAAI,EACpDgoC,CACA,MAAA3sC,EAAEA,SAAAA,CAAOC,EAAAA,EAAAA,UAAiB+b,CAAA,CAAA,EAA0B,CACpD,MAAAtF,EACJ1W,SAAO0W,EACPzW,cAAAA,CACA2K,EAAAA,EAAAA,EACM6L,EAAAxW,IAAAuW,EACFC,KAA4BD,CAAAA,EAC5BnT,CAAAA,EAAAA,GAA+BvD,EAAA,CAAA,CAAA,EAC/B,CAACuY,EAAUu0B,CAAAA,EAAe9sC,EAAAA,SAAW,EACrC+sC,EAAoB5tC,IACpB4tC,KAAuBlsC,EAAAV,CAAA,EACvBw6B,EAAiB95B,EAAY,CAAA,EAC7BmsC,EAAAA,IAEN5tC,cACAA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,OACdqzB,EAAAA,CAAAA,CAAAA,EACFrzB,EAAK,IAAA,OACLA,MAAAA,EAAgB6tC,GAAA,IAAA,CACRhZ,GAAAA,CAAAA,UAEJ,OAA4B,KAAA,CACtB,UAAAD,CAAA,EAAEA,EAAAA,QAAcvB,IAAcpzB,YACpCosC,GAA2B5qC,CAAA,EAAAmzB,EAE3B,EAAA,EAAA,EACF,OAAAra,EAAA8Y,EAAK,UAAL,MAAA9Y,EAAK,iBAAA,SAAAsa,EAAA,CACS50B,QAAAA,EAA8C,GAE5D40B,IACS,IAAA,OACTA,EAAa,OAAA,GACXA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,oBAAA,SAAAA,EAChBxB,CACF,EAAA,CAAA5xB,EAAAkN,IAAA,SAAA,CAAA,EACF,MAAQA,MAEFm/B,IACN,WAAAC,CAAuBA,EAAAA,KAAAA,CAAW/+B,EAAW,SAAA,EACnCwpB,IAAAA,EACRxpB,MAAAA,EAAoBo9B,GAAA3qC,CAAA,EAChBusC,GAAAA,EAAAA,CAEEC,MAAAA,IAAqC,OACvBlmB,GAAA9mB,EAAA,SAAAs6B,CAAA,CAE0Bzd,EACf4vB,EAAAQ,CAAA,CAAA,MAG7BR,EAAYQ,CAAoB,CAC3B,GAAAzsC,CAQLisC,CAAAA,CAAAA,EAAejsC,OAAAA,SAAK,UAEtB,MAAA0sC,EAAA,IAAAC,GAAA,IAAAttC,EAAA,GAAA,SAAA,MAAAW,CAAA,EAAA,CAEa,QAAA,CACX,CAAM0sC,EAEOE,EAAAD,GAAA,IAAAttC,EAAA,GAAA,SAAA,aAAAW,CAAA,EAAA,CACV,QAAA,CACH,CAAM4sC,EACK/gB,EAAA,CAAA,CAAAnpB,EAAA,SAAAo3B,CAAA,EACX,IAAC+S,EAAAnqC,EAAA,SAAAo3B,CAAA,EAED,GAAA,EAAAjO,GAAkB,CAAAygB,GACdf,GAAAA,CACA1f,EAAcygB,MAAYI,IAC5B7tC,KAAqCS,CAAA,EAChC,MAAA,IAAA,QAAAsc,IAAA,CACD,WAAAA,GAAA,GAAA,CACF2vB,CAAAA,CACA1qC,MAAAA,CAEM0M,SAAaqO,EACjB3M,MAAuB,CAGzBpQ,GAAAA,CACA0O,IAAAA,GAAkB,SAAAu/B,EAAA,CAClB,OAAAA,GAAA,YAAAA,EAAA,IAAAC,KAAA,CACF,GAAAA,GAAA,GACF,QAAAA,GAAA,QAEI,aAAAA,GAAA,aAoEOC,QAAAA,GAAAA,QACAF,OAAAA,GAAuBC,EAAA,EAC5B/sC,QAAOA,GAAAA,GAAAA,SAAAA,CAAAA,GACKyE,EACKwoC,SACLrJ,MAAAA,EACZsJ,CACAn1B,UAASi1B,GACX,YAAAG,EACF,EAAAjc,GA5EAib,EAAsBS,SAAAA,IAAAA,YAAAA,GAAAA,SAAAA,EAChB,MAAAQ,GAAA,IAAA,IAAAC,GAAEC,QAAAA,GAAAA,CAAWH,GAAAA,EAAAA,EAAAA,CAAgBjc,cAAAA,EAEnCib,CAAiB3tC,EAEX4uC,EAAAA,sBAA0B9mB,IAAAA,GAAA,KAAA3O,EAAA,WAAA,GAChC21B,GAA8B,IAAA31B,EAAA,WAAA,CACC,CAAA,EACZ,MAChB41B,GAAAF,GAAA,MAAA/mB,GAAAA,EAAA,QAAA,KAAAumB,EAAA,QAAA,EAAA,EAECl1B,GACA,CAAA,EAEgBmW,GAAAA,QAAAA,GAAsB,CAQX,GAP7BjtB,GAAA8W,EAAArY,EAAA,CACD,cAAA,EACD,CAAMiuC,EAGAC,eAAsB,CAAAL,GAAA,KAAA7mB,IAAAA,GAAA,KAAA3O,EAAA,WAAA,GAAAA,EAAA,cAAAk1B,EAAA,IAC5BM,GAAqBx1B,IAAWA,EAAA,WAAA,EAEbA,EAAA,qBAAAA,EAAA,QAAA,GAChB61B,GAAA,KAAA71B,CAAA,UAGQwZ,EAAAA,cACNgc,EAAwB7mB,GAGTwH,GAAAA,MAAsB,UACxC,CAAAnW,EAAA,oBAAA61B,GAAA,KAAAlnB,IAAAA,GAAA,KAAA3O,EAAA,WAAA,GAAAA,EAAA,QAAA,KAAAk1B,EAAA,QAAA,GAEAW,GAAW1jB,KAAAA,CAAAA,MAET0jB,CACS71B,MAAAA,GAAAA,GAAuB4zB,KAAAA,IAAAA,GAAAA,KAAe5zB,EAAA,WAAA,EAE/C61B,QAEC71B,YAKD61B,GAAAA,UAAuB71B,IAGvB81B,aAA2BtuB,KAAAA,CAAAA,EAErB,CACFsuB,CAAAA,EACFL,GAAA,KACOM,MAAAA,GAAAA,CAAAA,MAAqB,IAAApnB,IAAA,CAAA,GACvBA,EAAA,GAEG3X,SAAAA,GACV,SAAA4+B,GACF,UAAAjnB,EAAA,QAAA,GACD,QAAAA,EAAA,QAEDznB,aAAYynB,EAAA,aAAEgnB,OAAAA,GAAAA,CAAAA,CAAWH,EAAAA,EAAAA,CAAaK,GAAAA,EAAmB,UAAAX,EAAA,QAAA,GACzD,UAA0BA,CAAA,CACxBhuC,EAAAA,GAAAA,GAAc,IAAAynB,IAAoB,CACpC,GAAAA,EAAA,GAaA,QAAoBA,EAAA,QAEhBtmB,UAAMA,EAAAA,QAAAA,GACN2tC,WAAU,GACVC,OAAUL,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,GACVt3B,OAAAA,GAAqBjW,CAAAA,EACrByE,QAAS6hB,GAAE7hB,EAAAA,SAAAA,CAAAA,EACXwoC,GACAC,aACFb,EACA,QAAA,CACErsC,WAAAA,GAAAA,EAAAA,UAAAA,YAAAA,GAAAA,UACAiW,WAAWs1B,EAAAA,EAAmBvrC,UAAnBurC,YAAAA,EAAmBvrC,SAAAA,EAEhC,MACGwtC,GAAkBhqC,GAAY,UAAA8iB,GAAAA,EAAA,KAAAtmB,CAAA,MACzBA,IACNyE,GAAS6hB,GAAE7hB,CAAAA,EACUzE,EACT6tC,EAAA,EAAAlD,GACM3qC,CAAAA,EAAAA,GAClBktC,KAA0B5tC,CAAA,CAC1ByY,MAAAA,CACFxK,EAAG,OAAA,CAGLA,CACA8+B,KACEyB,IAAAA,CACA3a,aAAAA,EAAkCA,CAIpC,EACA50B,EAAIwvC,EAAajuC,CAAOE,EAAAX,CAAA,CAAA,EACtB2uC,EAAAA,IAAAA,SACF,GAAA,CAAAt2B,EAAA,OAEA7Y,OAAcgvC,MAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAaI,EAC3BhC,EAAY4B,QAAW,UAAAI,UACvBtD,EAAwBkD,QAAAA,CAKxBK,MAAAA,cACUp1B,EAAAozB,EAAA,UAAA,YAAApzB,EAAA,UACVja,eAAe,wBAAA,SACf0O,EACF4gC,EAAAC,EAAA,UAAA/B,EAAA,QAAA,UAAA+B,EAAA,UACCxc,EAAA,QAAA,UAAAuc,CAEH,MAAaz2B,EAAA,SAAA,IACXyJ,EAAsB,QAAA,UAAA,GAE1BkrB,EAAA,QAAA,IAEA9tC,EAAAA,CAAAA,CAAuB,CAAA,EACvBA,EAAU,IAAM,CACVmE,EAAUvC,kBAAAA,IACN42B,SAAAA,CACFkX,GAAAA,CACElX,KAAAA,CACFkX,YAAAA,CACJpvC,EAAAA,GAAwB,EACtBmB,EAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,WAED,aADCiuC,MAAAA,OAAAA,KAAAA,KAAAA,GACD,OAAAI,EAAA,CACDzc,aAAkCqc,CACpC,EAC2BK,EAAA,CACvBR,aAAkCA,CAClC3a,CAAkCA,MACpC,CAAA,CACA,IAIAt0B,EAAAA,CAAAA,kBAAwB,CAAA,EAAAN,MAEtB6vC,IAAAA,CACAD,GAAAA,CAAAA,EACAz2B,EAAAA,iBAAsB,EACxBizB,GAAC,CAAA,EACD/Y,GAAsBuB,CAAAA,EACxBob,GAAoBpuC,MAAAA,CAClBtB,EACEmB,CAAAA,CAAAA,EAAAA,MACDurC,EAAA7oC,EAAA,SAAAo3B,CAAA,GAAAp3B,EAAA,SAAA1C,CAAA,EACD4xB,KAAkC,IAAA,CACpC,GAAA,CAAA2Z,EAGAc,MAAAA,GACF,KAAI30B,CAEJnZ,QAAAA,CACE,EAAImE,EAAkC8rC,EAAA,SAAA,cAAA,KAAA,EAEtC,OAAAA,EAAa,UAAA/pC,EAAA,YACP+pC,EAAA,UAAA,MACF,EAAM,CAAAjD,CAAA,CAAA,EAAElf,GAAAA,GAAAA,IAAAA,CAAAA,GAAY,GACpB,MAAA,GACQ1rB,IAAAA,EAAAA,IAA6B,EACrC,OAAAyU,EAAA,OAAiB,KACXq5B,EAAAA,EAAAA,YAA4B,KAAoBr5B,CAEtD,EAAA,CAAAm2B,CAAmB,CAAA,EAAArQ,GACLwT,GAAAC,GAAA,GAAAD,CAAA,MAAAC,EAAA,IAAA,SAAA,mBAAA,EAAA,MACdC,EAACt9B,GAAA,IAAA,CAAA,MAEDzS,OACF,KAAA,CACC,IAAAiG,CACF,EAAY6iB,EAEfppB,GAAAA,EAGIqsC,OAAAA,IAAAA,IAAAA,CAAAA,EAAkB,QAClBprC,EAAAA,CAAAA,CAA0B,CAAA,EAC1BmrC,GAAqBr5B,GAAA,IAAA,CACrBo5B,GAAAA,EAEF,OAAAkE,IAAAtvC,CAAA,EACC,GAAEA,CAAA,CAAA,EAECisC,MAAwB7zB,EAAAA,EAAAA,IACxBg3B,GAAAA,OAECnD,EAAAA,OAAAA,GAAmB,CAAA7zB,EAAA,OAAA5X,EAAA,CAAA,EAClB+uC,GAAAn3B,EAAA,KAAA4O,GAAAA,EAAA,UAAA,EAAE7hB,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,QAAAA,EAAY8mC,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACdiD,GAAev6B,GAAAA,GAAmB,GAAA,EACpC66B,GAAoBj9B,GAAAA,IAAAA,CACjB28B,GAAAA,CAAAA,WAAmBO,EACxBxD,OAAAA,KACEoD,KAAAA,CACJ,IAAArgB,CAAiB,EAAO4d,EAAA,QAAA,wBACpB92B,OAAAA,WAA4B,IAChC,EAAIA,CAAAA,IAGFA,GAAOA,MAAKoV,IAAS,CACvB,SAAA,KAAAihB,CACA,EAAOr2B,CASHw5B,QAAAA,CAAAA,CACJ,CAAA,EAAiB9sC,GAAA,YAAA,IAAA,CACX,SAAA,KAAA2pC,CAAA,CAAE3mC,EAAAA,GAAQymC,IAAAA,IAAAA,CAChB,MAAKzmC,EAAAA,SAAAA,cAAAA,QAAAA,6BAAAA,EAAKkqC,EAAAC,GAAA,YAAAA,EAAA,wBACHC,EAAavI,MAAAA,KAGD/U,EAAA,QAAA,iBAAA,qLAAA,CACnB,EACC,GAAetyB,GAAAA,EAAS,IAAAsyB,EAAA,QAAA,cAAAod,EAAA,OAAA,EAAA,CAE3B,MAAOlvC,IAAiC,QAAAmvC,CAAA,EAClChxB,IAAAA,IAAyBkxB,EAAA,CAAA,EAE7BC,IACWjvC,EAAAA,QAEP0uC,EAAiBn3B,eAAS8O,EAAwB,EAGxD,KAAOuoB,CACDM,MAAAA,EAA8BC,EAAAA,KAAeC,GAAG,CAChDC,MAAAA,EAA4BD,EAAA,wBAE5B,SAA0BR,KAAAA,IAAAA,EAAAA,MAAAA,CAAY,CAAO,EAC3CU,IAAEnhB,EAAAA,MAAAA,EAAQ4d,EAAc1tC,eAA8Bq3B,EAAA,EAE3D,CAEH/zB,CAAAA,EAGIulB,GAAS2E,IAAOyf,IAAAA,CAElB,MAAAwD,EAAA,SAAA,cAAA,QAAA,6BAAA,EAAAD,EAAAC,GAAA,YAAAA,EAAA,wBAAAC,EAAA,MAAA,KAAAtd,EAAA,QAAA,iBAAA,qLAAA,CAAA,EAGE/C,MAAUqc,EAAAA,IAAAA,EAAAA,QAAAA,cAAAA,EAAAA,OAAAA,EAAAA,CAEd,MAAAiE,EAAAD,EAAA,QAAAD,CAAA,EAEAntC,IAAAA,IAA8BqtC,EAAA,CAAA,EAC5B9nB,IACDqoB,EAAA,MAAA,EAED5tC,EAAsB,eAAA+zB,EAAA,EAIpB,KAAMmZ,CACN,QAA6BjhB,EAAAA,KAAAA,GAAAA,CAAAA,MAAAA,EAAAA,EAAAA,wBAAAA,OAAAA,EAAAA,KAAAA,IAAAA,EAAAA,MAAAA,CAAAA,CAAAA,EAI3B6D,IAGF6d,EAAA,MAAA,EACA5wC,EAAY,eAAAg3B,EAAA,EAAkB,CAC9B,CACEoZ,EAIME,GAAAA,IAAAA,IAAAA,CACFC,MAAAA,EAA4BD,SAAAA,cAAAA,QAAAA,6BAAqB,EACrD,GAAAF,EAAgB,CACdG,MAAAA,EAAiBH,EAAA,mBACjBG,aAA+C,YAAA,IAAA,YACjDO,EAAA,KAAA,CAAAA,EAAA,KAGMF,CACJ,CAAMG,EACN,KAAA,CAA0D,eAAAhd,EAE5D,EAAAjB,GAAuB,CACrB8d,cAAAA,EACAA,oBAAAA,EAAsD,CACxD,EACFI,EAAAvxC,EAAA4sC,EAAA,eAAA,QAAA,EACD4E,GAAA3X,GAAA,CAAA12B,EAAAiD,EAAA+Y,EAAA9F,IAAA,CAED7V,EAAAA,eAAsB,EACpBL,EAAA,gBAAqB9C,EAGfqwC,EAAAA,CACN,UAMEC,cAAAA,IAIA,CAAME,CACN,EAAIO,CAAAA,CAAAA,CAAAA,EACJK,EAAgB5X,GAAA,CAAA12B,EAAAkW,IAAA,CACd+3B,GAAiB/3B,EAAA,EAAA,CACjB+3B,EAAAA,CAAAA,CAAAA,EACF,OAAAxsC,EAAA,MAAA,CACF,SAAO,KAECusC,IAAAA,EACEG,MAAAA,gCAAkD,OAAA,EAAA,gBAAA,EAAA,IAAAC,EAAA,UAAA,SAAA,WAAA,EAAA,IAAAG,EAAA,aAAAA,CAAA,GAAA,EAAA,GACxD,eAAsB1hB,GAAAA,CACvBuhB,EAAA,UAAA,WACDA,EAAuB,QAAA,KAErBJ,EACF,SAAA,CAAAxtC,EAAA,SAAA,CACF,MAAA,GAAA8sC,EAAA,SAAA,EAAA,IAAA7hC,IAAA,UAAA,UAAA,EAAA,GACD,WAAAzL,GAAA,CAIDK,oBACE,EAGA,SAAkBoB,EAAA,MAAA,CAChB,kCACA,SAAeysC,CAAAA,EAAAA,KAAgB3K,CACrB7P,SAAAA,CAAAA,CAAAA,CAAO,SAASA,MAAAA,GAAAA,EAAAA,eAAAA,YAAAA,GAAAA,QAAAA,GAAAA,EAAAA,SAAAA,CAC1B,KAAA,SACF,MAAA,kBACD,QAAA,IAAA,CAEK,QAAA,KAAA,CAAEvC,EAA6B,SAAA3wB,EAAAI,EAAA,CACnCuvB,KAAAA,eACqB,KAAA,IAAA,CACtB,CAED,CAAyBtzB,EAAAA,CAAAA,GAAAA,GAAmB4O,IAAA,UAAyBhK,EAAAK,EAAA,aAGnE,OAAA,CACmB,MAAA,eACC,SAAA,CAAAtB,EAAAgD,GAAA,CACF,QAAAsmC,EAAA,QACH,SAAAjsC,aACWU,GACvB,MAAA,EAAA,CAGL,EAAA,IAAAkD,EAAA,OAAA,CAE8Bi1B,MAAAA,gBAC5B0S,cAA6B,IAAA5oC,EAAA4K,GAAA,CAC1B,SAAA0+B,EAAA,UAGH,OAAA,OAAA,CACW,CAAA,CAAA,CACJ3Z,CAAAA,CAAAA,CAEHla,EAAAA,IAAAA,EAAAA,SAAAA,MAIejW,SAGXouC,MAAAA,kCAEFA,QAAAA,GAA2B,CAC7BpuC,EAAA,eAAA,EACFA,EAAA,gBAAA,EAEAQ,EAAA,QAAA,eAAA,CACyB,SAAA,SAGVR,MAAM,OAEjBjC,CAAOmoB,CACT,EAAEvlB,wBAOS,SAAAH,EAAAI,EAAA,CAA2BD,KACpCc,KAAA,OAAA,aAAA,UAAA,CAAAd,CAEI,CACO,CAAA,CAAA,CAAA,EACCc,EAAAK,EAAA,CACNpB,SAAe,CAAA,OAAA,IAAAe,EAAA,SAAA,CACbqiC,KAAAA,SACF,MAAA,kCAAEnjC,WAEG,CAAMX,EAAA,eAAA,EAAoBA,EAAA,gBAAA,EAAMmwB,EAAA,QAAA,SAAA,CAGvCmd,IAAAA,EACA3sC,SACEc,QAAA,CAAY,CAAcd,EACf,UACaqC,QAAAA,GACpBnF,MAAAA,GAAAA,EAAAA,MAAAA,2BAAAA,SACU,CAAA2C,EAAAI,EAAA,CACV4tC,KAAK,UACN,CAAA,EAAE3C,EACHpqC,OAAA,CAAAyR,EAAAjQ,EAAAwrC,IAAAA,EAAA,UAAAz7B,GAAAA,EAAA,YAAAE,EAAA,SAAA,IAAAjQ,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAAipC,GAAA1rC,EAAA4C,GAAA,CAAM5B,IAAM0qC,EAAA,QAAA,OAAevrC,MAClB,mBACM,EAAAurC,UACU/7B,EAAAA,CAAAA,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,EAAAA,CAAAA,SACd,CAAA,IAAA3P,EAAA,OAAA,CACP,MAAA,gBACG,SAAAyT,GAAA43B,EAAA,MAAA,CAAA,CAETrrC,CAAAA,CAAA,CACO,CAAA,CAAA,CAAA,CACLgB,CAAM,CAAA,CAAA,CAEJxB,CAAAA,EAAAA,EAAE6O,MAAe,CACjB7O,MAAAA,cACAyqC,SAAAA,CAAAA,EAAAA,IAAqC,MACzB,MAAA,OACH,CAEX,OAAAta,EAAA,OAAA,EACuBxvB,WAEvBH,EAACI,SAAI,CACHC,KAAAA,SAAyD,MAC1D,gBACM,SAAAL,EAAAI,EAAA,CAGXa,KAAA,OAAE,IAAA,UAGO,KAAA,IAAA,CACC,CAAA,CAAA,EAGJzB,SAAiB,CAAAyB,EAAAuC,EAAA,CACjBhE,SAAkByL,IAAA,UAClB0kB,QAAAA,IAAAA,CAA+BpyB,EACxB,kBAAA,EACK,SACX,CAAAyC,EAAAI,EAAA,CACH,KAAA,SAAA,CACA3D,EAAAA,EAAS4uC,OAAAA,CACT9nC,SAAU8nC,SAAiB,CAA0BlrC,CAAAA,CAEhD,CAAA,EAACE,EAAKmD,EAAA,CAAU,UACpB6nC,mBASKxoC,aACAtC,MAAsBqP,OAAAA,KAAAA,MAAAA,EAAY2a,EAFpB/nB,OAGf,OAGMtE,EACTiC,EAEEH,OAAAA,YAAA,EAAY+tC,IAAA,OAAe5tC,EACVkrC,OAAAA,MAAAA,EAGpB9gB,EAAA,IAAA,OAAA,MAAA,EAGNC,EAAAD,CAAA,CAEHtpB,EAAW,SAAA,CAAAjB,EAAAI,EAAA,CAAaD,KACtBc,CACQ,GAAA,UACE,KAAA,SAAA,EAAA8sC,GAAA,EAAA,CAAA,KAEgBxxC,OAAAA,CACxB,SAAA,CAAA,aAAAwxC,IAAA,OAAA,YAAA,OAAA,OAAA,CAAA,CACAzqC,CAAAA,CACE,CAAA,EAAarC,EAAAuC,EAAA,CAASxC,QAAM,IAAA,CACrB,MAAA,KAAA2uB,EAAA,QAAA,iBAAA,+BAAA,CAAA,EAAM,QAAAue,GAAA,CAAWA,EAAA,MAAA,CAAA,CAAe,CAAM,EACrC,SAAA,CAAAluC,EAAAI,EAAA,CACTD,KAAA,UAEQ,SACe,OAAA,UACP,4BACb5C,CAAOmoB,CAAAA,CAAAA,CACT,EAAA1lB,EAAAyD,GAAA,CAAA,CAAA,EAAAzD,EAAAmuC,GAAA,CAAEhuC,UAEFH,QAAK,SAAM,cAAA,CAAS,EACpBA,EAAAA,EAAA,CAAA,SAAMouC,GAAO,QAAO,IAAA,CAEtBntC,MAACuC,EAAQihC,GAAA6E,EAAA,GAAA,EACGxE,WACK,KAAAA,EAEbva,MAAAA,kBAA2B,CAE3B,EACEA,SAAAA,CAAAA,EAAAA,GACF,KAAO,UACLA,CAAapnB,EAAAA,EAAAA,QAAAA,CACf,MAAA,oBACAqnB,SAAAA,CAAAA,8BAA4BxqB,EAAA,IAAA,CAC9B,SAAA2sC,CAAExsC,CAAAA,EAAAA,GAAAA,CAEG,CAAA,CACHE,CACE,CAAA,CAAA,CACM,CAAA,EAAAL,EACEiE,EAAA,CACR,gCACD,GAEHhD,EAAA,WAAMb,EAAA,CAEN,KAAO,IAETa,KAAAA,IAAS,CAAA,CAGL,CAAA,CAAA,CAKAotC,CAAAA,CAAAA,CACEH,CAAAA,CAAa,CAAA,EAAAz4B,EACd,QAAA6zB,EAAAroC,EAAA,KAAA,CACH,MAAA,iCAAAgK,IAAA,UAAA,UAAA,EAAA,GAAE9K,SAAAA,CAAAA,EAEFH,MAAK,EAAAnC,EAAA,EAAA,IAAA6X,GAAA,CAAA,KAAA,CAAM,GAAU+H,EAAI,SAAAiuB,EAAM,SAAAC,EAAiC,WAAA2C,EAGvD,OAAAC,EAAW,QAAAz4B,EAAoB,aAAAk1B,GACjC,OAAAC,CACGmD,EAAAA,EAEFtJ,GAAAA,IAAiCwE,EACvC,OAAAroC,EAAe,KAAA,CACbmkB,IAAAA,GAAAA,EAAgB0f,KAAAA,MACX,GAAA4G,EAAA,WAAA,EAAA,IAAA4C,EAAA,aAAA,EAAA,IAAAC,EAAA,SAAA,EAAA,IAAAC,GAAA,OAAA,EAAA,GACL7uC,SAAAA,CAAAA,GAAwBsB,EAAAK,EAAA,CAC1B,SAAA,CAAAtB,EAAA6c,GAAA,CACF,UAAA,GAAE1c,SAAAitC,GAEG,MAAM,eAAU,SACrB,EAAA,SAAaptC,EAAA0oB,GAAA,CAAmBvoB,SAAAA,EACH,SAAA9C,EAAgB,cAC7C,GAAQ,KAAA,IACC,gBAAA,GAEb2C,eAAK+pC,CAAA,CAAO,CAAA,CAA8BP,EAAAA,IAAAA,WAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAUrpC,MAAAA,qBAC5CE,SAAK,CAAAL,EAAA,IAAA,CAAS,SAAA,0EAAA,CAAM,EAAAA,EAAAiE,EAAA,CACrB,GAAA,SACH,MAAA,SACH,SAAA,QAAA,GAIK,CAAA,EAAA,CAAA4P,GAAA5S,EAAA,MACM,CACXd,MAEOooB,qBACF,SAAA,CAAAtnB,EAAA,IAAA,CACAwc,SAAAA,CAAAA,uCAAAA,EAAAA,IAAAA,CACJiuB,SAAAA,CACAC,CAAAA,EAAAA,uDAAAA,CAAAA,CACA2C,EAAAA,EAAAA,SAAAA,CACAC,KAAAA,SACAz4B,SAAAA,IAAAA,UACAk1B,QAAAA,IAAAA,CACAC,EAAAA,SAAAA,GACEv1B,SAAAA,IACwB3X,CAoB1B,MAAAqT,GAAA,MAAA0C,EAAA,GAAA,OAAA,CAEgBm2B,EAAgBX,EAAA,IACpBoC,KAAAA,WAKRzqC,QAAAA,GACEjB,MAAO,CAAA,CACM,EACDotC,GAAAA,GAAAA,SAAAA,OAAAA,CACJ,MAAAqB,GAAAr9B,GAAA,SAAA,CAAA,EACI,SAAA,KAAAwC,EAAA,IAAAA,CAAA,MAAA66B,GAAA,EAAA,GAAA,MAAAA,GAAA,EAAA,EAAA,KAGRhxB,OAAAA,IAAAA,MAAAA,YAAAA,CAEa,OAAAje,GAAA,CACR8L,EAAA,SAAA,EACU,MAAA,UAAA9L,EAAA,CACCuqC,CAAAA,IAGnB9+B,EACY,SAAA,CAAAjL,EAAAI,EAAA,CAAoBD,eAC1B,CAAA,EAAA,+CAAA,CAAA,CAGA,CACHH,CAAK,CAAA,CAAA,CAAI,CAAA,EAAwBiB,EAE1BgD,EAAA,CACJ,MAEJ4P,cACM7S,GAAM3D,EAAA,IAAAA,CAAA,MAAAogB,CAAA,GAAA,MAAAA,CAAA,GAAoBtd,QAAAA,IAC7Bc,CAAAd,GAEEH,CAAAA,CAAA,EAAY,SAEd,CAAAA,EAAA0oB,GAAA,CACAznB,SAAAA,EACEhB,SAAAA,EACAyD,cAAsB,GACtBxD,QAAewrC,EAAA,IAAA,IACbpgC,gBAAoB,GACpB,aAAauiC,GACP,kBAAAC,CACF,CAAA,EAAApC,GAAgBC,GAAAX,GAAmBvxB,GAAUxY,EAAA,MAAA,CAAA,MAAA,eAC7B4B,SACR,CAAA7C,EAAAI,EAAA,CAAA,KACNuZ,SAAS,CAAA,EAAA,IACF3Z,EAAA,OAAA,CAAA,MACRgrC,GACG55B,SAAAA,KAAyB,CAC3B,CAAMsE,CAAAA,CACGqU,CAAAA,EAAAA,GAAAA,CAEW,CAAA,EAEdukB,IAAAx4B,GAAA,YAAAA,UAAsB,GAAA9V,EAAA0uC,GAAA,CAC9B,SAAArxC,EAAA,QAAAyY,EAEAxK,gBAAAA,EACA3L,MAAAA,EACA/C,UAAAA,EACF,QAAAstC,EAAA,QAAA3B,EAAA,CAAA,EAAAt9B,IACC,WAAAujC,IAAA,CAAA,EAAAlF,GAAA,MAAAA,EAAA,eAAA,CAAAsD,IAAA5sC,EAAA,MAAA,CACL,MAAA,iBAAEG,SAAAA,EAEFH,GAAK,EAAA,CAAA,CAAA,EAAAiL,IAAM,SAAAujC,IAAA,CAAA,EAAAlF,GAAA,MAAAA,EAAA,eAAA,CAAAsD,IAAA3rC,EAAA,MAAA,CAAU,qBAEvB,SAAS,CAAA,0BAAAjB,EAAA,KAAA,EAAA,EAAAA,EAAA,SAAA,CAGd,KAAA,SACD,MAAA,QAAA,QAAA,IAAA,GAGG,kBACG,EACNkE,oBAC2D,CAAA,CAE3DhE,CACE0oC,CAAAA,CAAAA,CACF,EAAAnrB,CAAA,CAAEtd,CAAAA,EAAAA,GAAAA,GAEFH,EAAO,KAAA,CACLyd,SAAAA,EAAAA,SAAAA,CACApgB,KAAAA,SAAAA,MACa,wBACbiD,SAAAA,IAAgBorC,UAAiB,QAClB,IAAAK,GAAA5uB,GAAAA,EAAAzO,EAAA,EAAA,MACDm/B,CAAAA,eACKC,KAAAA,EAGnB,SAAW,CAAA9tC,EAAA,MAAA,CAAcG,MAAAA,KAClB,SAAMsV,EAAA,MAAA5X,GAAAA,GAAA,CAAA,EAAA,IAAA6X,GAAA1V,EAAA4C,GAAA,CAAA,IAAW8S,EACtB1V,QAAA,YAAagrC,EAAa7qC,EAAAA,EAAAA,CAAAA,CACG,CAAA,EAAA,IACtBc,EAAA,MAAA,CAAA,MAEL,KAAA,SAUF,CAAA,aAAA,IAAAjB,EAAA,OAAA,CAEO8V,MAAAA,MAEXzY,SAAAA,GAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,CACAyY,CAAAA,CAAAA,CAAAA,CACA64B,CAAiBJ,CAAAA,CACV,CAAA,CAAA,CACItD,CACX2D,EAAAA,EAAAA,GAC6BrG,SAIpB,CAAAt9B,IAAA,WAEXjL,EAAA,KAAEspC,CAEA,MAAW,wCAAA,SACTtpC,EAAAA,KAAS,CAAC,SAGHA,EAAA0oB,GAAA,CAIJ1nB,SAAM,GAAcb,KAAAA,GAGvB,CAAA,CACO,CAAA,CACC,CAAA,EAAA8K,aACShK,EAAA,IAAA,CACNykB,MAAAA,WACT,SAAA,CAAA,sBAAA1lB,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KACD,SAAA,QAEQ,IAAA,CAEZzC,EAAA,kBAzJEkgB,EA6JVzB,SAAW,WACV,CAAA7b,CAAAA,CACE,CAAA,CAAA,CACO,CAAA,CAAA,CACC,CAAA,CACgB,CACkB,SAAAuuC,GACjC,CAAA,QAAA54B,EAAwB,SAAAzY,EAAE8C,gBAAAA,EAEjC,MAAA0uC,EAAe1uC,UAAAA,EAKT0C,QAAAA,CAAoBC,EAAAA,CACpB,KAAA,CAAAynB,EAFYxsB,CAIf,EAAA0sB,GAAA,EAAAqkB,EAEH7tC,GAAA8tC,EAAW,OAAA,CAAA9c,EAAArM,IAAA,CAAA,KAAIzlB,CAEb,aAAA6qC,EAAY,QACThvB,CAAiCA,EAAAA,EAEhCgL,GAAAgoB,GAAA,YAAAA,EAAA,SAAAhE,EAAA,OACA/Y,EAAAjL,EAAA8nB,EAAAE,GAAA,CAAA,CAAA,CAAA,EACN,CACL,EAIA/jC,EAAY6K,EAAA,OAAAg5B,EACXh5B,CAAA,EAAI9U,EAAM8U,EAAA,SAAAm5B,EAAuC9uC,IAC/C,IAAApB,GAAAA,EAAA,OAAA,EAAA,OAAA,CAAA2T,EAAAjQ,EAAAwrC,IAAAA,EAAA,UAAAz7B,GAAAA,EAAA,KAAAE,EAAA,EAAA,IAAAjQ,CAAA,EAAA,MAAA,EAAA,CAAA,EAAAtC,KACS,IAAA2V,GAAA,YAAAA,EAAS,OAAA,CAAAmc,EAAArM,IAAMqM,GAAArM,GAAA,YAAAA,EAAA,QAAAspB,GAAK,CAAAA,EACzBp5B,GAAA,YAAAA,EAAA,MAAA,CAAA,EAAA,IAACod,EAGI,IACX0b,GAKSO,GAAA3G,IAEI9iB,CAAAA,GAAAA,IAAAA,GACT0pB,GAAAt5B,EAAA,CAAA,CAAA,EAAA,KACDod,EAEQ,IAEZ,MAEJmc,EAAA5G,GAAA3yB,EAAA,CAAA,EAAA,EAAA,EACE+3B,EAAA3X,GAAA,CAAA12B,EAAAiD,EAAA+Y,EAAA9F,IAAA,CAETlW,EAAA,eAAA,EAEAA,EAAA,gBAAqB,EACnBsW,EAAAA,CACAzY,MAAAA,EAAAA,EACAsxC,cAAAA,EAAAA,EAAAA,CACAE,CACAK,EAAAA,CAAAA,CAAAA,EACAN,EAAAA,IACC7wB,OAAAA,GAAA,IAAA,OACD,SAAOwM,EAA6B/qB,EAAA,CAG9BsvC,EAAAA,OAAAA,QAAwB,WAAAtvC,EAAA,OAAA,UAC5B,CACQ,OAAAqX,EAAAy4B,EAAA,UAAA,MAAAz4B,EAAA,iBAAA,SAAAkI,EAAA,CAAEisB,QAAAA,EAAAA,GAA0BplB,IAAAA,QAC5BoB,EAAAA,EAAAA,UAAAA,MAAAA,sBAA2BgkB,SAAAA,EACjC,CAA2C,GAC1C,CAAA,EACL/pC,EAAA,UAAA,CACA,IAAsB6U,EAChBy5B,MAAAA,UAGA9tC,KAAAA,GACHF,EAIG4tC,SAAAA,GAAAA,CACJ,KAAgB3L,CACd,MAAoByH,EACVzrC,EAAA,OACV0vC,GAAoBhxC,EAAO,CAAA,EAAA,EAAA,EAAAsxC,CAE/B,EACA,MAAa,CACJ,mBAAAX,CACT,EACS,sBAAAA,EACE,+BAAoBI,EAAAA,EAC7B,SAAmBG,CAAAA,EAAAA,UAAAA,CACfK,MAAAA,kBAAmB,OAAAvc,EACzB,SAAA,CAAAlzB,EAAA,OAAA,CACMqvC,MAAa5G,UAEboF,WAAmB3X,IAAYxjB,GAAA1S,EAAIyC,IACtB,IAAAiQ,EAAA,aACC,MAAA,GAAAA,EAAA,WAAA,KAAAA,EAAA,QAAA,GACF,SAAAA,GAAA,YAAAA,EAAA,GAAA,IACPjQ,EAAI,CAAA,CAAA,YACW1E,CACvB,SAAA,CAAAiC,EAAA,OAAA,CACE,MAAA8V,EAAA,mBAEqBA,EAAA,MAAA,CAC1BiI,CAAAA,EAAAA,IAAAA,OAAsBjI,EAAA,SAAA,EAAA,IAAA,KAAA,CACpB,CAAA,EAAA,CAAAy5B,KAAyB,GAAAtuC,EAAAK,EAAA,CACrB4H,SAAOwmC,CAAAA,IAAqBlwC,IAAAA,IAAAA,EAAS0e,OAAAA,CACzC,SAAA,CAAAle,EAAA,OAAA,CACWzD,MAAAA,EACA,SAAAkX,GAAAw7B,CAAA,CAAA,CACV,EAAA,IAAA,UAAAA,IAAA,EAAA,GAAA,GAAA,CACD,CAAA,CAAA,CACEK,CAAW/yC,CAAAA,CAAmD,CAChE,EAAAyD,EAAA,KAAA,UACG8V,EAAA,IAAA/W,GAAAkC,SAAAA,OAAAA,EAAA,KAAA,CAEL,SACE,CAAAA,EAAAgD,EAAA,CACOqrC,MAAAA,cACC,GAAAjyC,EAAA,IAAAA,CAAA,MAAA0B,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACAswC,QAAcnc,IAAAA,IACHn0B,EAAA,EAAA,CACT,EAAEm0B,SAAAA,CAAAA,EAAAA,GAAAA,CAAWhqB,SAAAA,EAAAA,GAEnBu/B,SAAAA,EACF,cAAA,GACO,KAAA,IACeoG,gBAAAA,GACtB,aAAAhB,CAAA,CACqBgB,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,EAAAA,aAAAA,GAAAA,EAAAA,MAAAA,sBACmB1uC,SAExC,CAAAH,EAAAI,EAAA,CAAe,KAAA,SAAA,CAA0B8yB,EAAAA,IAAAA,EAAAA,OAAAA,CAAK/yB,MAC5CH,EAAA,aAAY,SAAAyT,GAAA1U,EAAA,YAAA,CAAA,CACT0C,CAAAA,CACQ,GAEEqB,CAAAA,gCACiB,SAAA9C,EAAI0S,GAAW,CACvC8V,SAAAA,EAAiB,QAEpBzpB,EAAA,QAEHkC,MAAA4tC,EAAA,EAAA1uC,UACEH,EAAAmvC,EAAApwC,EAAA,OAAMwE,QAAAA,CAAerF,CAAOiC,CAAAA,CAA8B,EAAQpB,IAAM,EAAA,CAErC,CAAA,CAAA,CAGnC,CAAA,CAGE,CACE,MAAA4wC,GAAaV,IAAc9uC,MAA6ByvC,MAEzBC,GAC1B,IAAAvD,GAEV,IAAA,IAAA,SAEHtsC,GAAA0V,EAAA,SAAA,MACGI,EAAAA,GACC,IAAAJ,EAAA,EAAA,EAAAvV,GAAAA,EACO,OACG2vC,EACN5rC,KAAAA,CAAqD,YAAAgX,EAEnD0tB,QAAAA,EACF,iBAAAztB,EAAEhb,KAAAA,EAGK,KAAA4vC,CAEL1yC,EAAAA,EAAAA,EACa2yC,GAAA90B,EAAAymB,CAAA,EAAAsO,EACR90B,GAAA,MAAAA,EAAA,OAAAw0B,GAAA,EAAAO,KACUr5B,EAAAzK,GAAA,YAAAA,EAAA,UAAA,YAAAyK,EAAA,SAAA,GAAAs5B,GAAAC,EACDvC,IAAAA,GAAAA,MAAAA,EAAAA,SAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,MAAAA,EAAAA,QAAAA,EAAAA,GAGd5C,GADEn1B,IAAqBk1B,EACvB/pC,GAAW4uC,GAAc1vC,OAAAA,GAAAA,IACvBH,EAAK,GAAAirC,CAAA,EAAAA,CAAM,CACX,cAAeD,EC5tCjC,SAAwBqF,IAAc,CACpC,MAAM/jC,EAAS2rB,KACT,CAAEl6B,GAAAA,EAAIV,SAAAA,CAAaiP,EAAAA,EACzB,OAAOtM,EAAC0oB,GAAM,CAAC3qB,GAAAA,EAAQV,SAAAA,CAAAA,CAAqB,CAC9C,CCRA,MAAeizC,GAAA,GAAA,IAAA,IAAA,+BAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,qCAAA,YAAA,GAAA,EAAA,KCAA9tB,GAAA,GAAA,IAAA,IAAA,4BAAA,YAAA,GAAA,EAAA,KCAA+tB,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,yBAAA,YAAA,GAAA,EAAA,KCcf,SAASC,IAAU,CACjB1X,OAAAA,GAAS,KAAM,CAAC,IAAK,UAAU,CAAC,EAE9Bh4B,EAAA,OAAA,CAAMlD,GAAG,UAASoC,UAChBc,EAAA,MAAA,CAAKD,MAAM,iBAAgBb,UACzBc,EAAA,KAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKlG,GACL5D,IAAI,GACJ+J,MAAM,MACN6H,OAAO,MACPlI,MAAO,CACLM,YAAa,MACbqmC,eAAgB,GAClB,CAAA,CACD,EACD5wC,EAAA,MAAA,CAAKqK,IAAKqmC,GAAUnwC,IAAI,SAAS+J,MAAM,KAAA,CAAO,CAAC,CAAA,CAC7C,EACJtK,EAAA,IAAA,CAAAG,SACEH,EAAA,MAAA,CAAAG,SACEH,EAAA,IAAA,CAAAG,SACEH,EAACiE,EAAI,CAACC,GAAG,SAASlD,MAAM,SAAQb,SAAC,QAAA,CAE3B,CAAA,CACL,CAAA,CACA,CAAA,CACJ,EACHH,EAAA,IAAA,CAAGgB,MAAM,OAAMb,SAAC,iDAAA,CAAkD,CAAC,CAAA,CAChE,EACLH,EAAA,MAAA,CAAKjC,GAAG,gBAAeoC,SACrBc,EAAA,MAAA,CAAKD,MAAM,WAAUb,UACnBc,EAAA,UAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKimC,GACL/vC,IAAI,gCACJ2V,QAAQ,MAAA,CACT,EACDlW,EAAA,KAAA,CAAAG,SAAI,iBAAA,CAAmB,EACvBH,EAAA,IAAA,CAAAG,SAAG,uEAAA,CAGA,CAAC,CAAA,CACG,EACTc,EAAA,UAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKomC,GACLlwC,IAAI,uCACJ2V,QAAQ,MAAA,CACT,EACDlW,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,8DAAA,CAA+D,CAAC,CAAA,CAC5D,EACTc,EAAA,UAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKkmC,GACLhwC,IAAI,sCACJ2V,QAAQ,MAAA,CACT,EACDlW,EAAA,KAAA,CAAAG,SAAI,uBAAA,CAAyB,EAC7BH,EAAA,IAAA,CAAAG,SAAG,oEAAA,CAEA,CAAC,CAAA,CACG,EACTc,EAAA,UAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKoY,GACLliB,IAAI,gCACJ2V,QAAQ,MAAA,CACT,EACDlW,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,4FAAA,CAGA,CAAC,CAAA,CACG,EACTc,EAAA,UAAA,CAAAd,UACEH,EAAA,MAAA,CACEqK,IAAKmmC,GACLjwC,IAAI,wEACJ2V,QAAQ,MAAA,CACT,EACDlW,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,mDAAA,CAAoD,CAAC,CAAA,CACjD,CAAC,CAAA,CACP,CAAA,CACF,EACLH,EAAK,KAAA,CAAA,CAAA,EACLiB,EAAA,IAAA,CAAAd,UACEH,EAAA,IAAA,CAAGgE,KAAK,oCAAoCkF,OAAO,SAAQ/I,SAAC,OAEzD,CAAA,EAAE,IAAI,KACN,IACHH,EAAA,IAAA,CACEgE,KAAK,mCACLkF,OAAO,SACPhJ,QAAgB,GAAA,CACdV,EAAE6O,eAAe,EACjB9Q,EAAOmN,YAAc,yBACvB,EAAEvK,SACH,UAEE,CAAA,EAAC,IACF,IACFH,EAAA,IAAA,CACEgE,KAAK,yDACLkF,OAAO,SAAQ/I,SAChB,gBAEE,CAAA,EAEL,GAAA,CAAA,CAAG,CAAC,CAAA,CACA,CAEV,CC5HA,MAAM0wC,GAAc9rC,OAAOpF,MACtBoF,OAAO+rC,gBAAe/rC,OAAO+rC,cAAgBD,IAElD9rC,OAAOpF,MAAQ,SAAUyG,EAAS,CAIhCA,aAAA,QAAAA,GAAA,MAAAA,EAAA,WACAA,EAAuBygB,EAAAA,SAGvB,OAAAzgB,GAAA,WACAA,EAAWA,KAAAA,UAAYA,CAAU,GAEjC,MAAA2f,EAAAgrB,GAAA,CAEMhrB,KAAAA,EACJ5S,UAAa,QACbwkB,QAAS,MACTqZ,SAAc,SACdnxB,SAAU,IACVrI,OAAQ,CACR6wB,EAAAA,EACE4I,EACF,QAAC,IAAA,CACMlrB,EAAA,UAAQ,EAEf,CAAA,EACFA,EAAE,UAAA,GCwBJhhB,OAAOmsC,WAAa3zC,EAKpByP,WAAW,IAAM,aACf,UAAW3M,KAAQ8wC,GACb10B,MAAMC,QAAQy0B,GAAM9wC,CAAI,CAAC,GACrBA,GAAAA,EAAAA,GAAAA,CAAI,GAAE,KAANA,MAAAA,EAAAA,KAAAA,IAEN8wC,GAAAA,EAAAA,IAAM9wC,KAAN8wC,MAAAA,EAAAA,KAAAA,EAGN,EAAG,GAAI,EAEP,SAASC,IAAM,CACP3wC,MAAAA,EAAaC,GAAYnD,CAAM,EAC/B,CAACR,EAAYs0C,CAAa,EAAIn0C,EAAS,EAAK,EAC5C,CAAC+N,EAASK,CAAU,EAAIpO,EAAS,SAAS,EAEhD6gB,GAAgB,IAAM,CACpB,MAAM3V,EAAQ1G,EAAMC,MAAMI,IAAI,OAAO,EACjCqG,IACF1L,SAASqM,gBAAgBT,UAAUujB,IAAK,MAAKzjB,CAAM,EAAC,EAEjDrI,SAAAA,cAAc,2BAA2B,EACzCuxC,aAAa,UAAWlpC,IAAU,OAAS,aAAeA,CAAK,GAEpE,MAAMmpC,EAAW7vC,EAAMC,MAAMI,IAAI,UAAU,EACvCwvC,GACF70C,SAASqM,gBAAgBkB,MAAMjB,YAC7B,cACC,GAAEuoC,CAAS,IACd,CAEJ,EAAG,CAAE,CAAA,EAELj1C,EAAU,IAAM,CACd,MAAM8tB,EAAc1oB,EAAMC,MAAMI,IAAI,aAAa,EAC3C6H,EAAO4nC,oBACVzsC,OAAOqgB,SAAS1L,OAAOirB,MAAM,cAAc,GAAK,CAAG,CAAA,EAAE,GAAG,CAAC,CAC5D,EAEA,GAAI/6B,EAAM,CACRhN,OAAAA,QAAY,aAAA,GAAA,SAAA,MAAAwoB,EAAA,UAAA,GAAA,EAAExb,MAAAA,EAAAA,EAAAA,QAAAA,IAAAA,UAAAA,EAAM6nC,EAAA/vC,EAAA,QAAA,IAAA,cAAA,EAEb4hC,YAAsB,cAAmBle,GAEhD,SAAiB1jB,CACjB4J,EAAqB5J,SAAAA,EACrB,KAAiBA,CAEJ,aAAA2nB,CACX/d,EAAAA,MAAAA,GAAoB,CACd,YAAA8e,EAAEsnB,UAAcroB,EAAY,cAAyBooB,EACzDrnB,KAAAA,CAAAA,CAAAA,EAEeqnB,EAAAA,GAAAA,CACf7nC,SAAAA,EACD,YAAAyf,CAED,CAAA,EAAyB,MAAYe,QAAAA,WAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAaf,KAAYsoB,GAACv0C,CAAA,EAC/Di0C,EAAcO,EAAAA,EAIHtmC,EAAA,SAAA,CACXqmC,IAEAN,KAAAA,CACA/lC,MAAAA,EAAoB9E,KACtB,GAAGhE,EAAA,CACEd,EAAA,QAAA,IAAA,iBAAAc,EAAA,KAAA,EAAA,EACL,MACIA,MAAAA,EACFd,SAAAA,CACM,EAAApE,EAAA,CAAEF,QAAAA,CAAAA,CAAOC,EAASs0C,GAAQv0C,CAAA,EAAEoF,EAAAA,SAAAA,GAAS,SAAA,CACnC9D,GAAAA,CACRizC,MAAAA,GAAqBv0C,EAAAC,CAAA,CACrBiO,MAAoB,CACpB,QAAa,CACP+lC,EAAA,EAAA,EACIQ,EAAAA,WACI,IAEVR,MACA/lC,EAAAA,SAAoB,CACtB,CACC,EAAA,CACE,CAAA,EACLA,IAAAA,EAAAA,KACF/N,EAAA,gBAAA6nB,EAAA,SACF9oB,EAAAwQ,GAAA,CAAAsY,EAAAroB,CAAA,CAAA,EACF,MAAKkpB,EAAAxlB,EAAA,eAEsBpE,EAAA4pB,GAAA,IAAA,EAcQ6rB,MAbD95B,IAElC1b,GAAqB,mBAAWS,EAAW,QAAA,GAAA2sC,GAAA,SAAAtkB,EAAA,QAAA,EAE3C,CAAAA,WAAgCa,EAAAA,CAAAA,EAE1B8rB,YAEFrI,aAIJoI,EAAiB,QAAA,KACkBA,YAAAA,KAAAA,EAA6B7rB,QAAAA,EACzD,OAAAjmB,EAAA6kC,GAAA,CAAA,CAAA,EAEP,MAAAmN,EAAA3iC,GAAA,IAAA,CACAzS,KAAQk4B,WAEN1P,EAAAA,EACD,MAAA,CAAA,qBAAA,KAAApN,CAAA,CAED,EAAA,CAAIoN,CAAYniB,CAAAA,EACPjD,OAAAA,EAAAA,IAAU,OACnB,MAAAiyC,EAAA,SAAA,eAAA,KAAA,EAEMD,IACEC,EAAA,QAAA,mBAAAp7B,EAAApW,EAAA,YAAA,MAAAoW,EAAA,OAAApW,EAAA,SAAA,kBAAA,GAAEuX,EAAaoN,CAAAA,EAAAA,UAAAA,EAAAA,SAAAA,iBAAAA,CAAAA,EACd9oB,EAAC,IAAqB2G,CAClB,SAAA,KAGb3G,UAAgB,OAAA,QAAAmE,EAAA,SAAA,SAAA,CACRwxC,EAAAA,CAAAA,EAAOv1C,SAASwQ,SAAAA,CAAAA,EACZjM,EAAAK,EAAA,CACR2wC,YAAiCxxC,GAAAA,CAGnC,SAAAuxC,GAAA5sB,EACE3kB,SAAAA,CAAWqhB,KAAsBva,CAGrCjL,KAAgB,IACd,UAAuBi3B,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,IAAAA,UAAAA,EAAAA,GAAAA,CACjBjrB,GAAUC,aAA6C,CAChDhB,EAAAA,EAAAA,MAEf,CAAA,IACEjG,GAAA,CAAAnB,KAAA,iBACuCilB,EAAAA,GAAAA,EAAAA,CAAAA,CAASjlB,EAAAA,EAAAA,GAC3C+xC,CACCn6B,KAAK,WACLo6B,QACEp1C,EACEiD,GAAAA,EAAAA,CAEO,CAAA,CAAA,CAAI,CAAA,EAAaiB,EAEvB0vC,GAAAA,CAEJ,SAEGmB,EAAA,SAAA1sB,EAAA,SAAM,CAAAroB,GAAAiD,EAAAkyC,GAAA,CAASC,KAASnyC,iBAC9BA,QAAMA,EAAAw/B,GAAA,EAAA,CAAA,CAAA,EAAMziC,GAAAiD,EAAAkyC,GAAA,CAAWC,KAASnyC,YAAe,QAAAA,EAAAi+B,GAAA,EAAA,CAAA,CAEjDh9B,EAAAA,GAAOjB,EAAAkyC,GAAA,CAAC9sB,KAAAA,aACLroB,QAAAA,EACCiD,GAAAA,EAAAA,CAAM,CAAA,EAAMjD,GAAAiD,EAAAkyC,GAAA,CAAiBC,KAASnyC,KAAoB,QAE7CA,EAAAA,GAAM,EAAA,CAAA,CAAA,EAAMjD,GAAAiD,EAAAkyC,GAAA,CAAYC,KAASnyC,KAAe,QAChDA,EAAAA,GAAM,EAAA,CAAA,CAAA,EAAMjD,GAAAkE,EAAAixC,GAAA,CAAaC,KAASnyC,KAAgB,SAClDA,CAAAA,EAAAA,GAAM,CAAM,MAAA,GAAcA,QAAAA,EAAY+kC,GAAA,EAAA,CAAA,CAAI,EAC1C/kC,EAAAA,GAAAA,CAAY,KAAA,MAAcA,QAAAA,EAAa48B,GAAA,EAAA,CAAA,CAAI,CACzD7/B,CACO,CAAA,EAAMA,GAAAiD,EAAAkyC,GAAA,CAAI/xC,KAAAA,MACR,QAAMH,EAAAg6B,GAAA,EAAA,CAAA,CAAA,EAACmY,EAASnyC,GAAAA,CAAU,KAChCA,yBAAM,QAAMA,EAAA2jC,GAAA,EAAA,CAAA,CAAA,EAAMwO,EAASnyC,GAAAA,CAAS,KAAG,oBAClC,QAEMA,EAAAA,GAAM,EAAA,CAAA,CAAA,EAAMiB,EAAAixC,GAAA,CAAMC,KAASnyC,gBAC1CA,SAAM,CAAAA,EAAAkyC,GAAA,CAAM,MAAA,GAAkClyC,QAAAA,EAAUyiC,GAAA,EAAA,CAAA,CACxDziC,EAAAA,EAAMkyC,GAAA,CAAM,KAAA,IAA6BlyC,QAAAA,EAAkByiC,GAAA,CAC3DxhC,MAAM,EAAA,CAAM,CAAA,CAAed,CAAAA,CACnB,CAAA,EAACud,EAAKw0B,GAAA,CAAA,KAAUlyC,uBAAW,QAChCkyC,EAAKlP,GAAA,EAAA,CAAA,CAAA,EAACjrB,EAAKm6B,GAAA,CAAIC,KAAAA,qBAAgB,QAAMnyC,EAAA2nC,GAAA,EAAA,CAAA,CAAA,CAAA,CAAE,CAAA,EAAE18B,IAAG,WAAAjL,EAAAoyC,GAAA,CAAA,SAEzCpyC,EAAAkyC,GAAA,CAACn6B,KAAK,oBAAuBo6B,QAASnyC,EAACgjC,GAAU,EAAA,CAAA,CAAI,CACrD,CAAA,EAACjrB,GAAK/X,EAAAV,GAAA,CAAA,CAAA,EAAAvC,GAAA,CAAA0D,EAAA,SAAA,sBAAAA,EAAA,SAAA,oBAAA,gBAAAT,EAAA8sB,GAAA,CAAA,CAAA,EAAA9sB,EAAAilB,GAAA,CAAA,CAAA,EAAAjlB,EAAAmpB,GAAA,CAAA,CAAA,EAAAnpB,EAAAnD,GAAA,CAAA,WAAAE,CAAuC,CAAA,EAAKiD,EAAAssB,GAAA,CAElD,QACKxf,EACJ3M,CAAAA,EAAAA,EAAAA,GACC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAM,CCtOtBkyC,GACEryC,EAACsyC,GAAU,CAAAnyC,SACTH,EAACoxC,GAAK,EAAA,CAAC,CACG,EACZ10C,SAASwQ,eAAe,KAAK,CAC/B,EAGAF,WAAW,IAAM,CACX,GAAA,CAEFtB,OAAOrK,KAAKkxC,YAAY,EAAE5mC,QAAiBY,GAAA,CACrCA,EAAI8N,WAAW,SAAS,GAC1Bk4B,aAAaC,WAAWjmC,CAAG,CAC7B,CACD,EACDb,OAAOrK,KAAKoxC,cAAc,EAAE9mC,QAAiBY,GAAA,CACvCA,EAAI8N,WAAW,SAAS,GAC1Bo4B,eAAeD,WAAWjmC,CAAG,CAC/B,CACD,EAGDgmC,aAAaC,WAAW,yBAAyB,OACvC,CAAC,CACf,EAAG,GAAI,EAEPztC,OAAO2tC,UAAY,IAAM,CACdnf,SAAAA,KAAKjrB,UAAUC,OAAO,OAAO,CACxC"}