{"version":3,"file":"main-6d259b05.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { api } from '../utils/api';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const subRef = useRef();\n  const debouncedStartNotifications = useDebouncedCallback(() => {\n    const { masto, streaming, instance } = api();\n    (async () => {\n      // 1. Get the latest notification\n      if (states.notificationsLast) {\n        const notificationsIterator = masto.v1.notifications.list({\n          limit: 1,\n          since_id: states.notificationsLast.id,\n        });\n        const { value: notifications } = await notificationsIterator.next();\n        if (notifications?.length) {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n\n      // 2. Start streaming\n      if (streaming) {\n        let sub = (subRef.current = streaming.user.notification.subscribe());\n        console.log('🎏 Streaming notification', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          console.log('🔔🔔 Notification entry', entry);\n          if (entry.event === 'notification') {\n            console.log('🔔🔔 Notification', entry);\n            saveStatus(entry.payload, instance, {\n              skipThreading: true,\n            });\n          }\n          states.notificationsShowNew = true;\n        }\n      }\n    })();\n  }, 3000);\n  useEffect(() => {\n    // let sub;\n    if (isLoggedIn && visible) {\n      debouncedStartNotifications();\n    }\n    return () => {\n      // sub?.unsubscribe?.();\n      // sub = null;\n      debouncedStartNotifications?.cancel?.();\n      subRef.current?.unsubscribe?.();\n      subRef.current = null;\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        alert('Looks like your browser is blocking popups.');\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  const escRef = useHotkeys('esc', onClose, []);\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div\n          id=\"keyboard-shortcuts-help-container\"\n          class=\"sheet\"\n          tabindex=\"-1\"\n          ref={escRef}\n        >\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Toggle expanded/collapsed thread',\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n              ].map(({ action, keys }) => (\n                <tr key={action}>\n                  <th>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"__VITE_ASSET__c2b3a5f0__\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Version:{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              <span class=\"ib insignificant\">\n                (\n                <a\n                  href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                </a>\n                )\n              </span>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const isSelf = useMemo(\n    () => account.id === store.session.get('currentAccount'),\n    [account?.id],\n  );\n\n  const sameCurrentInstance = useMemo(\n    () => instance === api().instance,\n    [instance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone) {\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './generic-accounts.css';\n\nimport { useEffect, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({ onClose = () => {} }) {\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            setAccounts(value);\n          } else {\n            setAccounts((prev) => [...prev, ...value]);\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n    } else {\n      loadAccounts(true);\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => (\n                <li key={account.id + (account._types || '')}>\n                  {showReactions && account._types?.length > 0 && (\n                    <div class=\"reactions-block\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={\n                            {\n                              reblog: 'rocket',\n                              favourite: 'heart',\n                            }[type]\n                          }\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                  <AccountBlock account={account} />\n                </li>\n              ))}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MenuLink from './menu-link';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div class=\"media-modal-container\">\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          let accentColor;\n          if (blurhash) {\n            const averageColor = getBlurHashAverageColor(blurhash);\n            const labAverageColor = rgb2oklab(averageColor);\n            accentColor = oklab2rgb([\n              0.6,\n              labAverageColor[1],\n              labAverageColor[2],\n            ]);\n          }\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--accent-color': `rgb(${accentColor?.join(',')})`,\n                '--accent-alpha-color': `rgba(${accentColor?.join(',')}, 0.4)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                if (e.target !== e.currentTarget) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nconst SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: pmem(async ({ id }) => {\n      const list = await api().masto.v1.lists.$select(id).fetch();\n      return list.title;\n    }),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: pmem(async ({ id }) => {\n      const account = await api().masto.v1.accounts.$select(id).fetch();\n      return account.username || account.acct || account.displayName;\n    }),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {/* <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select> */}\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              // const key = i + Object.values(shortcut);\n              const key = Object.values(shortcut).join('-');\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            lists={lists}\n            followedHashtags={followedHashtags}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction ShortcutForm({\n  lists,\n  followedHashtags,\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({ notification, instance, isStatic }) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account, i) => (\n              <>\n                <a\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={(e) => {\n              const post = e.target.querySelector('.status');\n              if (post) {\n                // Fire a custom event to open the context menu\n                if (e.metaKey) return;\n                e.preventDefault();\n                post.dispatchEvent(\n                  new MouseEvent('contextmenu', {\n                    clientX: e.clientX,\n                    clientY: e.clientY,\n                  }),\n                );\n              }\n            }}\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsColumnsMode ||\n    settings.shortcutsViewMode === 'multi-column'\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={i + title}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsColumnsMode ||\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n  timelineStart,\n  allowFilters,\n  refresh,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (boostsCarousel) {\n              value = groupBoosts(value);\n            }\n            value = groupContext(value);\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      console.log('✨ Load or check updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop === 0 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        console.log('✨ Load updates', snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n  const debouncedLoadOrCheckUpdates = useDebouncedCallback(\n    loadOrCheckUpdates,\n    3000,\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n          // 1 minute\n          debouncedLoadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n        debouncedLoadOrCheckUpdates.cancel();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!timelineStart && (\n          <div\n            class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n          >\n            {timelineStart}\n          </div>\n        )}\n        {!!items.length ? (\n          <>\n            <ul class=\"timeline\">\n              {items.map((status) => {\n                const { id: statusID, reblog, items, type, _pinned } = status;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                let title = '';\n                if (type === 'boosts') {\n                  title = `${items.length} Boosts`;\n                } else if (type === 'pinned') {\n                  title = 'Pinned posts';\n                }\n                const isCarousel = type === 'boosts' || type === 'pinned';\n                if (items) {\n                  if (isCarousel) {\n                    // Here, we don't hide filtered posts, but we sort them last\n                    items.sort((a, b) => {\n                      if (a._filtered && !b._filtered) {\n                        return 1;\n                      }\n                      if (!a._filtered && b._filtered) {\n                        return -1;\n                      }\n                      return 0;\n                    });\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class=\"timeline-item-carousel\"\n                      >\n                        <StatusCarousel\n                          title={title}\n                          class={`${type}-carousel`}\n                        >\n                          {items.map((item) => {\n                            const { id: statusID, reblog } = item;\n                            const actualStatusID = reblog?.id || statusID;\n                            const url = instance\n                              ? `/${instance}/s/${actualStatusID}`\n                              : `/s/${actualStatusID}`;\n                            return (\n                              <li key={statusID}>\n                                <Link\n                                  class=\"status-carousel-link timeline-item-alt\"\n                                  to={url}\n                                >\n                                  {useItemID ? (\n                                    <Status\n                                      statusID={statusID}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                      allowFilters={allowFilters}\n                                    />\n                                  ) : (\n                                    <Status\n                                      status={item}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                      allowFilters={allowFilters}\n                                    />\n                                  )}\n                                </Link>\n                              </li>\n                            );\n                          })}\n                        </StatusCarousel>\n                      </li>\n                    );\n                  }\n                  const manyItems = items.length > 3;\n                  return items.map((item, i) => {\n                    const { id: statusID, _differentAuthor } = item;\n                    const url = instance\n                      ? `/${instance}/s/${statusID}`\n                      : `/s/${statusID}`;\n                    const isMiddle = i > 0 && i < items.length - 1;\n                    const isSpoiler = item.sensitive && !!item.spoilerText;\n                    const showCompact =\n                      (!_differentAuthor && isSpoiler && i > 0) ||\n                      (manyItems &&\n                        isMiddle &&\n                        (type === 'thread' ||\n                          (type === 'conversation' &&\n                            !_differentAuthor &&\n                            !items[i - 1]._differentAuthor &&\n                            !items[i + 1]._differentAuthor)));\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n                          i === 0\n                            ? 'start'\n                            : i === items.length - 1\n                            ? 'end'\n                            : 'middle'\n                        } ${\n                          _differentAuthor ? 'timeline-item-diff-author' : ''\n                        }`}\n                      >\n                        <Link class=\"status-link timeline-item\" to={url}>\n                          {showCompact ? (\n                            <TimelineStatusCompact\n                              status={item}\n                              instance={instance}\n                            />\n                          ) : useItemID ? (\n                            <Status\n                              statusID={statusID}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          ) : (\n                            <Status\n                              status={item}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          )}\n                        </Link>\n                      </li>\n                    );\n                  });\n                }\n                return (\n                  <li key={`timeline-${statusID + _pinned}`}>\n                    <Link class=\"status-link timeline-item\" to={url}>\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={status}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n              {showMore && uiState === 'loading' && (\n                <>\n                  <li\n                    style={{\n                      height: '20vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                  <li\n                    style={{\n                      height: '25vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                </>\n              )}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <li key={i}>\n                <Status skeleton />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === api().instance,\n    [instance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length && !tagged && !media) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n          saveStatus(status, instance);\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    `${account?.displayName ? account.displayName + ' ' : ''}@${\n      account?.acct ? account.acct : 'Account posts'\n    }`,\n    '/:instance?/a/:id',\n  );\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.$select(id).fetch();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={() => masto.v1.accounts.$select(id).fetch()}\n          authenticated={authenticated}\n          standalone\n        />\n        <div class=\"filter-bar\" ref={filterBarRef}>\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import store from './store';\n\nexport function filteredItem(item, filterContext, currentAccountID) {\n  const { filtered } = item;\n  if (!filtered?.length) return true;\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\n  if (isSelf) return true;\n  const appliedFilters = filtered.filter((f) => {\n    const { filter } = f;\n    const hasContext = filter.context.includes(filterContext);\n    if (!hasContext) return false;\n    if (!filter.expiresAt) return hasContext;\n    return new Date(filter.expiresAt) > new Date();\n  });\n  if (!appliedFilters.length) return true;\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\n  console.log({ isHidden, filtered, appliedFilters, item });\n  if (isHidden) return false;\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\n  if (isWarn) {\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\n    item._filtered = {\n      titles: filterTitles,\n      titlesStr: filterTitles.join(' • '),\n    };\n  }\n  return isWarn;\n}\nexport function filteredItems(items, filterContext) {\n  if (!items?.length) return [];\n  if (!filterContext) return items;\n  const currentAccountID = store.session.get('currentAccount');\n  return items.filter((item) =>\n    filteredItem(item, filterContext, currentAccountID),\n  );\n}\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      allowFilters\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { authenticated: currentAuthenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n      })\n      .next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-account\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}`\n                    : `/t/${hashtags.join('+')}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join('+')}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        allowFilters\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  useTitle('Mentions', '/mentions');\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","function groupNotifications(notifications) {\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n        const fetchFollowRequestsPromise = fetchFollowRequests();\n        const fetchAnnouncementsPromise = fetchAnnouncements();\n\n        if (firstLoad) {\n          const announcements = await fetchAnnouncementsPromise;\n          announcements.sort((a, b) => {\n            // Sort by updatedAt first, then createdAt\n            const aDate = new Date(a.updatedAt || a.createdAt);\n            const bDate = new Date(b.updatedAt || b.createdAt);\n            return bDate - aDate;\n          });\n          setAnnouncements(announcements);\n          const requests = await fetchFollowRequestsPromise;\n          setFollowRequests(requests);\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const loadUpdates = useCallback(() => {\n    console.log('✨ Load updates', {\n      autoRefresh: snapStates.settings.autoRefresh,\n      scrollTop: scrollableRef.current?.scrollTop === 0,\n      inBackground: inBackground(),\n      notificationsShowNew: snapStates.notificationsShowNew,\n      uiState,\n    });\n    if (\n      snapStates.settings.autoRefresh &&\n      scrollableRef.current?.scrollTop === 0 &&\n      window.__IDLE__ &&\n      !inBackground() &&\n      snapStates.notificationsShowNew &&\n      uiState !== 'loading'\n    ) {\n      loadNotifications(true);\n    }\n  }, [\n    snapStates.notificationsShowNew,\n    snapStates.settings.autoRefresh,\n    uiState,\n  ]);\n  useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{total.toLocaleString()}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}>\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => (\n                          <li key={hashtag.name}>\n                            <Link\n                              to={\n                                instance\n                                  ? `/${instance}/t/${hashtag.name}`\n                                  : `/t/${hashtag.name}`\n                              }\n                            >\n                              <Icon icon=\"hashtag\" />\n                              <span>{hashtag.name}</span>\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(!states.prevLocation && history.length === 1);\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      // Select all statuses except those inside collapsed details/summary\n      // Hat-tip to @AmeliaBR@front-end.social\n      // https://front-end.social/@AmeliaBR/109784776146144471\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  const renderStatus = (status) => {\n    const {\n      id: statusID,\n      ancestor,\n      isThread,\n      descendant,\n      thread,\n      replies,\n      repliesCount,\n      weight,\n    } = status;\n    const isHero = statusID === id;\n    // const StatusParent = useCallback(\n    //   (props) =>\n    //     isThread || thread || ancestor ? (\n    //       <Link\n    //         class=\"status-link\"\n    //         to={\n    //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n    //         }\n    //         onClick={() => {\n    //           resetScrollPosition(statusID);\n    //         }}\n    //         {...props}\n    //       />\n    //     ) : (\n    //       <div class=\"status-focus\" tabIndex={0} {...props} />\n    //     ),\n    //   [isThread, thread],\n    // );\n    return (\n      <li\n        key={statusID}\n        ref={isHero ? heroStatusRef : null}\n        class={`${ancestor ? 'ancestor' : ''} ${\n          descendant ? 'descendant' : ''\n        } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n      >\n        {isHero ? (\n          <>\n            <InView\n              threshold={0.1}\n              onChange={onView}\n              class=\"status-focus\"\n              tabIndex={0}\n            >\n              <Status\n                statusID={statusID}\n                instance={instance}\n                withinContext\n                size=\"l\"\n                enableTranslate\n                forceTranslate={translate}\n              />\n            </InView>\n            {uiState !== 'loading' && !authenticated ? (\n              <div class=\"post-status-banner\">\n                <p>\n                  You're not logged in. Interactions (reply, boost, etc) are not\n                  possible.\n                </p>\n                <Link to=\"/login\" class=\"button\">\n                  Log in\n                </Link>\n              </div>\n            ) : (\n              !sameInstance && (\n                <div class=\"post-status-banner\">\n                  <p>\n                    This post is from another instance (<b>{instance}</b>).\n                    Interactions (reply, boost, etc) are not possible.\n                  </p>\n                  <button\n                    type=\"button\"\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          const results = await currentMasto.v2.search.fetch({\n                            q: heroStatus.url,\n                            type: 'statuses',\n                            resolve: true,\n                            limit: 1,\n                          });\n                          if (results.statuses.length) {\n                            const status = results.statuses[0];\n                            location.hash = currentInstance\n                              ? `/${currentInstance}/s/${status.id}`\n                              : `/s/${status.id}`;\n                          } else {\n                            throw new Error('No results');\n                          }\n                        } catch (e) {\n                          setUIState('default');\n                          alert('Error: ' + e);\n                          console.error(e);\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"transfer\" /> Switch to my instance to enable\n                    interactions\n                  </button>\n                </div>\n              )\n            )}\n          </>\n        ) : (\n          // <StatusParent>\n          <Link\n            class=\"status-link\"\n            to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n            onClick={() => {\n              resetScrollPosition(statusID);\n            }}\n          >\n            <Status\n              statusID={statusID}\n              instance={instance}\n              withinContext\n              size={thread || ancestor ? 'm' : 's'}\n              enableTranslate\n              onMediaClick={handleMediaClick}\n              onStatusLinkClick={handleStatusLinkClick}\n            />\n            {ancestor && isThread && repliesCount > 1 && (\n              <div class=\"replies-link\">\n                <Icon icon=\"comment\" />{' '}\n                <span title={repliesCount}>{shortenNumber(repliesCount)}</span>\n              </div>\n            )}{' '}\n            {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n            {/* </StatusParent> */}\n          </Link>\n        )}\n        {descendant && replies?.length > 0 && (\n          <SubComments\n            instance={instance}\n            replies={replies}\n            hasParentThread={thread}\n            level={1}\n            accWeight={weight}\n            openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n          />\n        )}\n        {uiState === 'loading' &&\n          isHero &&\n          !!heroStatus?.repliesCount &&\n          !hasDescendants && (\n            <div class=\"status-loading\">\n              <Loader />\n            </div>\n          )}\n        {uiState === 'error' &&\n          isHero &&\n          !!heroStatus?.repliesCount &&\n          !hasDescendants && (\n            <div class=\"status-error\">\n              Unable to load replies.\n              <br />\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </div>\n          )}\n      </li>\n    );\n  };\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {!!/\\/s\\//i.test(snapStates.prevLocation?.pathname) && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map(renderStatus)}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = false;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const IDLE_TIME = 5_000; // 5 seconds\n  const setIdle = debounce(() => {\n    window.__IDLE__ = true;\n  }, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    setIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","subRef","debouncedStartNotifications","useDebouncedCallback","masto","streaming","instance","api","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","since_id","id","value","next","length","lastReadId","markers","fetch","timeline","notificationsShowNew","sub","user","notification","subscribe","log","entry","_a","_c","_b","checkForUpdates","lastCheckDate","r","info","Date","catch","diff","ComposeButton","handleButton","e","shiftKey","openCompose","alert","showCompose","useHotkeys","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","FormData","theme","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","parseInt","documentElement","setProperty","for","target","source","rel","checked","autoRefresh","boostsCarousel","contentTranslation","onChange","targetLanguages","lang","code","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","style","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","showAccount","__BUILD_TIME__","readOnly","showToast","writeText","datetime","uiState","setUIState","allowNofitications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","Object","el","warn","values","params","mention","favourite","reblog","follow","follow_request","poll","status","key","policyChanged","alertsCount","permission","isLoading","Notification","label","alert2","focusDeck","timer","setTimeout","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","isString","sameCurrentInstance","useMemo","setInfo","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","accountInstance","headerCornerColors","hostname","domain","setHeaderCornerColors","followersIterator","familiarFollowersCache","firstLoad","isSelf","results","newValue","account2","familiar","fetchFollowing","followingIterator","LinkOrDiv","setFamiliarFollowers","accountLink","hasPostingStats","renderFamiliarFollowers","FAMILIAR_FOLLOWERS_LIMIT","setPostingStats","setPostingStatsUIState","useCallback","onRelationshipChange","relationship","following","crossOrigin","ctx","canvas","add","createElement","getContext","pixelDimension","willReadFrequently","g","height","colors","getImageData","b","a","dataLength","color","lightenRGB","rgbColors","external","internal","role","enhanceContent","dir","handleContentLinks","__html","verifiedAt","EmojiText","fetchFollowers","follower","showGenericAccounts","heading","fetchAccounts","followersCount","followingCount","shortenNumber","niceDateTime","postingStats","round","postingStatsUIState","renderPostingStats","RelatedActions","currentInstance","setRelationshipUIState","setRelationship","endorsed","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","privateNote","currentInfo","acctHasInstance","setCurrentInfo","sameInstance","q","setIsSelf","relationships","relationship2","loading","setShowTranslatedBio","showAddRemoveLists","setShowAddRemoveLists","setShowPrivateNoteModal","updateAccount","menuInstanceRef","showTranslatedBio","showPrivateNoteModal","instanceRef","portal","body","currentAuthenticated","draftStatus","niceAccountURL","clipboard","newRelationship","SubMenu","counter","error","direction","duration","Loader","TranslatedBioSheet","PrivateNoteSheet","luminence","alpha","path","host","Math","getHTMLText","text","fieldsText","urlObj","lists","setLists","setListsContainingAccount","c","lists2","listsContainingAccount2","forceTranslate","reloadCount","AddRemoveListsSheet","setShowListAddEditModal","localeCompare","listsContainingAccount","inList","showListAddEditModal","accountIds","result","textareaRef","initialNote","clearTimeout","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","sort","updatedAt","getTime","hasDrafts","abrupt","draft","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","reloadGenericAccounts","AccountBlock","_types","InView","MediaAltModal","setForceTranslate","differentLanguage","localeMatch","find","l","whiteSpace","TranslationBlock","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","contains","blurhash","accentColor","averageColor","getBlurHashAverageColor","labAverageColor","join","currentTarget","description","showMediaAlt","Media","showOriginal","stopPropagation","overflow","position","boundingBoxPadding","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","subtitle","query","split","ShortcutsSettings","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","iterator","tags","imgURL","multiColumnUrl","shortcut","shortcutsArr","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","forEach","setCurrentType","mode","required","defaultValue","tag","spellcheck","shortcutsStr","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","hasCurrentSettings","setImportShortcutStr","opacity","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","share","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","destination","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","isStatic","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","format","slice","type2","status2","Status","TruncatedLink","dispatchEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocorrect","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","from","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","shortcutsViewMode","menuRef","formattedShortcuts","pin","Boolean","handler","closeMenu","updatesButton","viewScroll","Menu2","containerProps","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","onContextMenu","squircle","ControlledMenu","anchorRef","zIndex","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","className","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","allowFilters","refresh","setItems","showNew","setShowNew","loadItems","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","loadOrCheckUpdates","disableIdleCheck","inBackground","__IDLE__","debouncedLoadOrCheckUpdates","visible2","timeDiff","lastHiddenTime","hasUpdate","useInterval","hiddenUI","node","_pinned","title2","isCarousel","StatusCarousel","_filtered","statusID2","actualStatusID2","reblog2","url2","manyItems","_differentAuthor","isMiddle","isSpoiler","showCompact","TimelineStatusCompact","skeleton","scrollBy","visibility","sKey","statusPeekText","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","saveStatus","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","featuredTags","useTitle","cachedAccount","setFeaturedTags","filterBarRef","filtered","TimelineStart","MonthPicker","validity","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","yearFieldRef","checkValidity","year","minYear","minMonth","maxYear","maxMonth","monthFieldRef","valid","toString","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","columnMode","hashtags","hashtagTitle","maxID","fetchHashtags","timelines","any","maxId","followUIState","setFollowUIState","reachLimit","setDownOverflow","finally","FocusableItem","newHashtag","MenuGroup","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","inView","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","groupNotifications","notificationsMap","cleanNotifications","date","toLocaleDateString","virtualType","mappedNotification","mappedAccount","reverse","n","notificationsMap2","cleanNotifications2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","currentDay","todayDate","yesterdayDate","announcement","announcementsListRef","AnnouncementBlock","differentDay","notificationDay","Fragment","contact","getCurrentInstance","endsAt","publishedAt","content","startsAt","published","allDay","read","reactions","publishedAtDate","publishedDateText","updatedAtText","contactAccount","me","reaction","staticUrl","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","link","history","cur","reduce","authorName","authorUrl","imageDescription","language","providerName","providerUrl","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","skipThreading","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","match","noteId","HttpRoute","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","json","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","StatusThread","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","repliesCount","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","parent","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","postSameInstance","allStatusLinks","activeStatusRect","activeStatus","onView","setHeroInView","heroPointer","topmostStatusLink","statusLink","statusLinkRect","activeStatusIndex","prevStatus","nextStatus","details","initialPageState","handleMediaClick","handleStatusLinkClick","renderStatus","descendant","thread","isHero","SubComments","viewMode","openAll","arr","setViewMode","button","buttons","level","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","hasParentThread","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","card","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","ICONS","nonIdleEvents","setIdle","onNonIdle","capture","$app","App","setIsLoggedIn","textSize","decodeURIComponent","clientSecret","access_token","initPreferences","client","allSettled","initStates","initInstance","PrimaryRoutes","Routes","Route","nonRootLocation","element","getPrevLocation","isModalPage","backgroundLocation","timeout","AbortSignal","controller","AbortController","abort","signal","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}