{"version":3,"file":"main-O9K3Tg_5.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/embed-modal.jsx","../../src/utils/relationships.js","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/utils/useScrollFn.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/search.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\r\n\r\nexport default function usePageVisibility(fn = () => {}, deps = []) {\r\n  const savedCallback = useRef(fn);\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [deps]);\r\n\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      const hidden = document.hidden || document.visibilityState === 'hidden';\r\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\r\n      savedCallback.current(!hidden);\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () =>\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, []);\r\n}\r\n","import { memo } from 'preact/compat';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport { api } from '../utils/api';\r\nimport showToast from '../utils/show-toast';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport useInterval from '../utils/useInterval';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\n\r\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\r\nconst POLL_INTERVAL = 15_000; // 15 seconds\r\n\r\nexport default memo(function BackgroundService({ isLoggedIn }) {\r\n  // Notifications service\r\n  // - WebSocket to receive notifications when page is visible\r\n  const [visible, setVisible] = useState(true);\r\n  usePageVisibility(setVisible);\r\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\r\n    if (states.notificationsLast) {\r\n      const notificationsIterator = masto.v1.notifications.list({\r\n        limit: 1,\r\n        sinceId: states.notificationsLast.id,\r\n      });\r\n      const { value: notifications } = await notificationsIterator.next();\r\n      if (notifications?.length) {\r\n        if (skipCheckMarkers) {\r\n          states.notificationsShowNew = true;\r\n        } else {\r\n          let lastReadId;\r\n          try {\r\n            const markers = await masto.v1.markers.fetch({\r\n              timeline: 'notifications',\r\n            });\r\n            lastReadId = markers?.notifications?.lastReadId;\r\n          } catch (e) {}\r\n          if (lastReadId) {\r\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\r\n          } else {\r\n            states.notificationsShowNew = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let sub;\r\n    let pollNotifications;\r\n    if (isLoggedIn && visible) {\r\n      const { masto, streaming, instance } = api();\r\n      (async () => {\r\n        // 1. Get the latest notification\r\n        await checkLatestNotification(masto, instance);\r\n\r\n        let hasStreaming = false;\r\n        // 2. Start streaming\r\n        if (streaming) {\r\n          pollNotifications = setTimeout(() => {\r\n            (async () => {\r\n              try {\r\n                hasStreaming = true;\r\n                sub = streaming.user.notification.subscribe();\r\n                console.log('🎏 Streaming notification', sub);\r\n                for await (const entry of sub) {\r\n                  if (!sub) break;\r\n                  if (!visible) break;\r\n                  console.log('🔔🔔 Notification entry', entry);\r\n                  if (entry.event === 'notification') {\r\n                    console.log('🔔🔔 Notification', entry);\r\n                    saveStatus(entry.payload, instance, {\r\n                      skipThreading: true,\r\n                    });\r\n                  }\r\n                  states.notificationsShowNew = true;\r\n                }\r\n                console.log('💥 Streaming notification loop STOPPED');\r\n              } catch (e) {\r\n                hasStreaming = false;\r\n                console.error(e);\r\n              }\r\n\r\n              if (!hasStreaming) {\r\n                console.log('🎏 Streaming failed, fallback to polling');\r\n                pollNotifications = setInterval(() => {\r\n                  checkLatestNotification(masto, instance, true);\r\n                }, POLL_INTERVAL);\r\n              }\r\n            })();\r\n          }, STREAMING_TIMEOUT);\r\n        }\r\n      })();\r\n    }\r\n    return () => {\r\n      sub?.unsubscribe?.();\r\n      sub = null;\r\n      clearTimeout(pollNotifications);\r\n      clearInterval(pollNotifications);\r\n    };\r\n  }, [visible, isLoggedIn]);\r\n\r\n  // Check for updates service\r\n  const lastCheckDate = useRef();\r\n  const checkForUpdates = () => {\r\n    lastCheckDate.current = Date.now();\r\n    console.log('✨ Check app update');\r\n    fetch('./version.json')\r\n      .then((r) => r.json())\r\n      .then((info) => {\r\n        if (info) states.appVersion = info;\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\r\n  usePageVisibility((visible) => {\r\n    if (visible) {\r\n      if (!lastCheckDate.current) {\r\n        checkForUpdates();\r\n      } else {\r\n        const diff = Date.now() - lastCheckDate.current;\r\n        if (diff > 1000 * 60 * 60) {\r\n          // 1 hour\r\n          checkForUpdates();\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Global keyboard shortcuts \"service\"\r\n  useHotkeys('shift+alt+k', () => {\r\n    const currentCloakMode = states.settings.cloakMode;\r\n    states.settings.cloakMode = !currentCloakMode;\r\n    showToast({\r\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\r\n    });\r\n  });\r\n\r\n  return null;\r\n});\r\n","import { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport openCompose from '../utils/open-compose';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\n\r\nexport default function ComposeButton() {\r\n  function handleButton(e) {\r\n    if (e.shiftKey) {\r\n      const newWin = openCompose();\r\n\r\n      if (!newWin) {\r\n        states.showCompose = true;\r\n      }\r\n    } else {\r\n      states.showCompose = true;\r\n    }\r\n  }\r\n\r\n  useHotkeys('c, shift+c', handleButton, {\r\n    ignoreEventWhen: (e) => {\r\n      const hasModal = !!document.querySelector('#modal-container > *');\r\n      return hasModal;\r\n    },\r\n  });\r\n\r\n  return (\r\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\r\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\r\n    </button>\r\n  );\r\n}\r\n","import './keyboard-shortcuts-help.css';\r\n\r\nimport { memo } from 'preact/compat';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport Modal from './modal';\r\n\r\nexport default memo(function KeyboardShortcutsHelp() {\r\n  const snapStates = useSnapshot(states);\r\n\r\n  function onClose() {\r\n    states.showKeyboardShortcutsHelp = false;\r\n  }\r\n\r\n  useHotkeys(\r\n    '?, shift+?, shift+slash',\r\n    (e) => {\r\n      console.log('help');\r\n      states.showKeyboardShortcutsHelp = true;\r\n    },\r\n    {\r\n      ignoreEventWhen: (e) => {\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return hasModal;\r\n      },\r\n    },\r\n  );\r\n\r\n  return (\r\n    !!snapStates.showKeyboardShortcutsHelp && (\r\n      <Modal class=\"light\" onClose={onClose}>\r\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\r\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n          <header>\r\n            <h2>Keyboard shortcuts</h2>\r\n          </header>\r\n          <main>\r\n            <table>\r\n              {[\r\n                {\r\n                  action: 'Keyboard shortcuts help',\r\n                  keys: <kbd>?</kbd>,\r\n                },\r\n                {\r\n                  action: 'Next post',\r\n                  keys: <kbd>j</kbd>,\r\n                },\r\n                {\r\n                  action: 'Previous post',\r\n                  keys: <kbd>k</kbd>,\r\n                },\r\n                {\r\n                  action: 'Skip carousel to next post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Skip carousel to previous post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Load new posts',\r\n                  keys: <kbd>.</kbd>,\r\n                },\r\n                {\r\n                  action: 'Open post details',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: (\r\n                    <>\r\n                      Expand content warning or\r\n                      <br />\r\n                      toggle expanded/collapsed thread\r\n                    </>\r\n                  ),\r\n                  keys: <kbd>x</kbd>,\r\n                },\r\n                {\r\n                  action: 'Close post or dialogs',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Focus column in multi-column mode',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>1</kbd> to <kbd>9</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Compose new post',\r\n                  keys: <kbd>c</kbd>,\r\n                },\r\n                {\r\n                  action: 'Compose new post (new window)',\r\n                  className: 'insignificant',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Send post',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\r\n                      <kbd>Enter</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Search',\r\n                  keys: <kbd>/</kbd>,\r\n                },\r\n                {\r\n                  action: 'Reply',\r\n                  keys: <kbd>r</kbd>,\r\n                },\r\n                {\r\n                  action: 'Reply (new window)',\r\n                  className: 'insignificant',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Like (favourite)',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>l</kbd> or <kbd>f</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Boost',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  action: 'Bookmark',\r\n                  keys: <kbd>d</kbd>,\r\n                },\r\n                {\r\n                  action: 'Toggle Cloak mode',\r\n                  keys: (\r\n                    <>\r\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\r\n                    </>\r\n                  ),\r\n                },\r\n              ].map(({ action, className, keys }) => (\r\n                <tr key={action}>\r\n                  <th class={className}>{action}</th>\r\n                  <td>{keys}</td>\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          </main>\r\n        </div>\r\n      </Modal>\r\n    )\r\n  );\r\n});\r\n","import './accounts.css';\r\n\r\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\r\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { useReducer } from 'preact/hooks';\r\n\r\nimport Avatar from '../components/avatar';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport NameText from '../components/name-text';\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nfunction Accounts({ onClose }) {\r\n  const { masto } = api();\r\n  // Accounts\r\n  const accounts = store.local.getJSON('accounts');\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const moreThanOneAccount = accounts.length > 1;\r\n\r\n  const [_, reload] = useReducer((x) => x + 1, 0);\r\n  const [accountsListParent] = useAutoAnimate();\r\n\r\n  return (\r\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header class=\"header-grid\">\r\n        <h2>Accounts</h2>\r\n      </header>\r\n      <main>\r\n        <section>\r\n          <ul class=\"accounts-list\" ref={accountsListParent}>\r\n            {accounts.map((account, i) => {\r\n              const isCurrent = account.info.id === currentAccount;\r\n              const isDefault = i === 0; // first account is always default\r\n              return (\r\n                <li key={account.info.id}>\r\n                  <div>\r\n                    {moreThanOneAccount && (\r\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\r\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\r\n                      </span>\r\n                    )}\r\n                    <Avatar\r\n                      url={account.info.avatarStatic}\r\n                      size=\"xxl\"\r\n                      onDblClick={async () => {\r\n                        if (isCurrent) {\r\n                          try {\r\n                            const info = await masto.v1.accounts\r\n                              .$select(account.info.id)\r\n                              .fetch();\r\n                            console.log('fetched account info', info);\r\n                            account.info = info;\r\n                            store.local.setJSON('accounts', accounts);\r\n                            reload();\r\n                          } catch (e) {}\r\n                        }\r\n                      }}\r\n                    />\r\n                    <NameText\r\n                      account={\r\n                        moreThanOneAccount\r\n                          ? {\r\n                              ...account.info,\r\n                              acct: /@/.test(account.info.acct)\r\n                                ? account.info.acct\r\n                                : `${account.info.acct}@${account.instanceURL}`,\r\n                            }\r\n                          : account.info\r\n                      }\r\n                      showAcct\r\n                      onClick={() => {\r\n                        if (isCurrent) {\r\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\r\n                        } else {\r\n                          store.session.set('currentAccount', account.info.id);\r\n                          location.reload();\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div class=\"actions\">\r\n                    {isDefault && moreThanOneAccount && (\r\n                      <>\r\n                        <span class=\"tag\">Default</span>{' '}\r\n                      </>\r\n                    )}\r\n                    <Menu2\r\n                      align=\"end\"\r\n                      menuButton={\r\n                        <button\r\n                          type=\"button\"\r\n                          title=\"More\"\r\n                          class=\"plain more-button\"\r\n                        >\r\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n                        </button>\r\n                      }\r\n                    >\r\n                      <MenuItem\r\n                        onClick={() => {\r\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"user\" />\r\n                        <span>View profile…</span>\r\n                      </MenuItem>\r\n                      <MenuDivider />\r\n                      {moreThanOneAccount && (\r\n                        <MenuItem\r\n                          disabled={isDefault}\r\n                          onClick={() => {\r\n                            // Move account to the top of the list\r\n                            accounts.splice(i, 1);\r\n                            accounts.unshift(account);\r\n                            store.local.setJSON('accounts', accounts);\r\n                            reload();\r\n                          }}\r\n                        >\r\n                          <Icon icon=\"check-circle\" />\r\n                          <span>Set as default</span>\r\n                        </MenuItem>\r\n                      )}\r\n                      <MenuConfirm\r\n                        subMenu\r\n                        confirmLabel={\r\n                          <>\r\n                            <Icon icon=\"exit\" />\r\n                            <span>Log out @{account.info.acct}?</span>\r\n                          </>\r\n                        }\r\n                        disabled={!isCurrent}\r\n                        menuItemClassName=\"danger\"\r\n                        onClick={() => {\r\n                          // const yes = confirm('Log out?');\r\n                          // if (!yes) return;\r\n                          accounts.splice(i, 1);\r\n                          store.local.setJSON('accounts', accounts);\r\n                          // location.reload();\r\n                          location.href = location.pathname || '/';\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"exit\" />\r\n                        <span>Log out…</span>\r\n                      </MenuConfirm>\r\n                    </Menu2>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <p>\r\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\r\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\r\n            </Link>\r\n          </p>\r\n          {moreThanOneAccount && (\r\n            <p>\r\n              <small>\r\n                Note: <i>Default</i> account will always be used for first load.\r\n                Switched accounts will persist during the session.\r\n              </small>\r\n            </p>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accounts;\r\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\r\nimport { api } from './api';\r\nimport { getCurrentAccount } from './store-utils';\r\n\r\n// Subscription is an object with the following structure:\r\n// {\r\n//   data: {\r\n//     alerts: {\r\n//       admin: {\r\n//         report: boolean,\r\n//         signUp: boolean,\r\n//       },\r\n//       favourite: boolean,\r\n//       follow: boolean,\r\n//       mention: boolean,\r\n//       poll: boolean,\r\n//       reblog: boolean,\r\n//       status: boolean,\r\n//       update: boolean,\r\n//     }\r\n//   },\r\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\r\n//   subscription: {\r\n//     endpoint: string,\r\n//     keys: {\r\n//       auth: string,\r\n//       p256dh: string,\r\n//     },\r\n//   },\r\n// }\r\n\r\n// Back-end CRUD\r\n// =============\r\n\r\nfunction createBackendPushSubscription(subscription) {\r\n  const { masto } = api();\r\n  return masto.v1.push.subscription.create(subscription);\r\n}\r\n\r\nfunction fetchBackendPushSubscription() {\r\n  const { masto } = api();\r\n  return masto.v1.push.subscription.fetch();\r\n}\r\n\r\nfunction updateBackendPushSubscription(subscription) {\r\n  const { masto } = api();\r\n  return masto.v1.push.subscription.update(subscription);\r\n}\r\n\r\nfunction removeBackendPushSubscription() {\r\n  const { masto } = api();\r\n  return masto.v1.push.subscription.remove();\r\n}\r\n\r\n// Front-end\r\n// =========\r\n\r\nexport function isPushSupported() {\r\n  return 'serviceWorker' in navigator && 'PushManager' in window;\r\n}\r\n\r\nexport function getRegistration() {\r\n  // return navigator.serviceWorker.ready;\r\n  return navigator.serviceWorker.getRegistration();\r\n}\r\n\r\nasync function getSubscription() {\r\n  const registration = await getRegistration();\r\n  const subscription = registration\r\n    ? await registration.pushManager.getSubscription()\r\n    : undefined;\r\n  return { registration, subscription };\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = `${base64String}${padding}`\r\n    .replace(/-/g, '+')\r\n    .replace(/_/g, '/');\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n\r\n  return outputArray;\r\n}\r\n\r\n// Front-end <-> back-end\r\n// ======================\r\n\r\nexport async function initSubscription() {\r\n  if (!isPushSupported()) return;\r\n  const { subscription } = await getSubscription();\r\n  let backendSubscription = null;\r\n  try {\r\n    backendSubscription = await fetchBackendPushSubscription();\r\n  } catch (err) {\r\n    if (/(not found|unknown)/i.test(err.message)) {\r\n      // No subscription found\r\n    } else {\r\n      // Other error\r\n      throw err;\r\n    }\r\n  }\r\n  console.log('INIT subscription', {\r\n    subscription,\r\n    backendSubscription,\r\n  });\r\n\r\n  // Check if the subscription changed\r\n  if (backendSubscription && subscription) {\r\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\r\n    const { vapidKey } = getCurrentAccount();\r\n    const sameKey = backendSubscription.serverKey === vapidKey;\r\n    if (!sameEndpoint) {\r\n      throw new Error('Backend subscription endpoint changed');\r\n    }\r\n    if (sameKey) {\r\n      // Subscription didn't change\r\n    } else {\r\n      // Subscription changed\r\n      console.error('🔔 Subscription changed', {\r\n        sameEndpoint,\r\n        serverKey: backendSubscription.serverKey,\r\n        vapIdKey: vapidKey,\r\n        endpoint1: backendSubscription.endpoint,\r\n        endpoint2: subscription.endpoint,\r\n        sameKey,\r\n        key1: backendSubscription.serverKey,\r\n        key2: vapidKey,\r\n      });\r\n      throw new Error('Backend subscription key and vapid key changed');\r\n      // Only unsubscribe from backend, not from browser\r\n      // await removeBackendPushSubscription();\r\n      // // Now let's resubscribe\r\n      // // NOTE: I have no idea if this works\r\n      // return await updateSubscription({\r\n      //   data: backendSubscription.data,\r\n      //   policy: backendSubscription.policy,\r\n      // });\r\n    }\r\n  }\r\n\r\n  if (subscription && !backendSubscription) {\r\n    // check if account's vapidKey is same as subscription's applicationServerKey\r\n    const { vapidKey } = getCurrentAccount();\r\n    const { applicationServerKey } = subscription.options;\r\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\r\n    const applicationServerKeyStr = new Uint8Array(\r\n      applicationServerKey,\r\n    ).toString();\r\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\r\n    if (sameKey) {\r\n      // Subscription didn't change\r\n    } else {\r\n      // Subscription changed\r\n      console.error('🔔 Subscription changed', {\r\n        vapidKeyStr,\r\n        applicationServerKeyStr,\r\n        sameKey,\r\n      });\r\n      // Unsubscribe since backend doesn't have a subscription\r\n      await subscription.unsubscribe();\r\n      throw new Error('Subscription key and vapid key changed');\r\n    }\r\n  }\r\n\r\n  // Check if backend subscription returns 404\r\n  // if (subscription && !backendSubscription) {\r\n  //   // Re-subscribe to backend\r\n  //   backendSubscription = await createBackendPushSubscription({\r\n  //     subscription,\r\n  //     data: {},\r\n  //     policy: 'all',\r\n  //   });\r\n  // }\r\n\r\n  return { subscription, backendSubscription };\r\n}\r\n\r\nexport async function updateSubscription({ data, policy }) {\r\n  console.log('🔔 Updating subscription', { data, policy });\r\n  if (!isPushSupported()) return;\r\n  let { registration, subscription } = await getSubscription();\r\n  let backendSubscription = null;\r\n\r\n  if (subscription) {\r\n    try {\r\n      backendSubscription = await updateBackendPushSubscription({\r\n        data,\r\n        policy,\r\n      });\r\n      // TODO: save subscription in user settings\r\n    } catch (error) {\r\n      // Backend doesn't have a subscription for this user\r\n      // Create a new one\r\n      backendSubscription = await createBackendPushSubscription({\r\n        subscription,\r\n        data,\r\n        policy,\r\n      });\r\n      // TODO: save subscription in user settings\r\n    }\r\n  } else {\r\n    // User is not subscribed\r\n    const { vapidKey } = getCurrentAccount();\r\n    if (!vapidKey) throw new Error('No server key found');\r\n    subscription = await registration.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\r\n    });\r\n    backendSubscription = await createBackendPushSubscription({\r\n      subscription,\r\n      data,\r\n      policy,\r\n    });\r\n    // TODO: save subscription in user settings\r\n  }\r\n\r\n  return { subscription, backendSubscription };\r\n}\r\n\r\nexport async function removeSubscription() {\r\n  if (!isPushSupported()) return;\r\n  const { subscription } = await getSubscription();\r\n  if (subscription) {\r\n    await removeBackendPushSubscription();\r\n    await subscription.unsubscribe();\r\n  }\r\n}\r\n","import './settings.css';\r\n\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport logo from '../assets/logo.svg';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport RelativeTime from '../components/relative-time';\r\nimport targetLanguages from '../data/lingva-target-languages';\r\nimport { api } from '../utils/api';\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport localeCode2Text from '../utils/localeCode2Text';\r\nimport {\r\n  initSubscription,\r\n  isPushSupported,\r\n  removeSubscription,\r\n  updateSubscription,\r\n} from '../utils/push-notifications';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nconst DEFAULT_TEXT_SIZE = 16;\r\nconst TEXT_SIZES = [14, 15, 16, 17, 18, 19, 20];\r\nconst {\r\n  PHANPY_WEBSITE: WEBSITE,\r\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\r\n  PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL,\r\n} = import.meta.env;\r\n\r\nfunction Settings({ onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const currentTheme = store.local.get('theme') || 'auto';\r\n  const themeFormRef = useRef();\r\n  const targetLanguage =\r\n    snapStates.settings.contentTranslationTargetLanguage || null;\r\n  const systemTargetLanguage = getTranslateTargetLanguage();\r\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\r\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\r\n\r\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\r\n  const { masto, authenticated, instance } = api();\r\n  // Get preferences every time Settings is opened\r\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\r\n  // useEffect(() => {\r\n  //   const { masto } = api();\r\n  //   (async () => {\r\n  //     try {\r\n  //       const preferences = await masto.v1.preferences.fetch();\r\n  //       setPrefs(preferences);\r\n  //       store.account.set('preferences', preferences);\r\n  //     } catch (e) {\r\n  //       // Silently fail\r\n  //       console.error(e);\r\n  //     }\r\n  //   })();\r\n  // }, []);\r\n\r\n  return (\r\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Settings</h2>\r\n      </header>\r\n      <main>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              <div>\r\n                <label>Appearance</label>\r\n              </div>\r\n              <div>\r\n                <form\r\n                  ref={themeFormRef}\r\n                  onInput={(e) => {\r\n                    console.log(e);\r\n                    e.preventDefault();\r\n                    const formData = new FormData(themeFormRef.current);\r\n                    const theme = formData.get('theme');\r\n                    const html = document.documentElement;\r\n\r\n                    if (theme === 'auto') {\r\n                      html.classList.remove('is-light', 'is-dark');\r\n\r\n                      // Disable manual theme <meta>\r\n                      const $manualMeta = document.querySelector(\r\n                        'meta[data-theme-setting=\"manual\"]',\r\n                      );\r\n                      if ($manualMeta) {\r\n                        $manualMeta.name = '';\r\n                      }\r\n                      // Enable auto theme <meta>s\r\n                      const $autoMetas = document.querySelectorAll(\r\n                        'meta[data-theme-setting=\"auto\"]',\r\n                      );\r\n                      $autoMetas.forEach((m) => {\r\n                        m.name = 'theme-color';\r\n                      });\r\n                    } else {\r\n                      html.classList.toggle('is-light', theme === 'light');\r\n                      html.classList.toggle('is-dark', theme === 'dark');\r\n\r\n                      // Enable manual theme <meta>\r\n                      const $manualMeta = document.querySelector(\r\n                        'meta[data-theme-setting=\"manual\"]',\r\n                      );\r\n                      if ($manualMeta) {\r\n                        $manualMeta.name = 'theme-color';\r\n                        $manualMeta.content =\r\n                          theme === 'light'\r\n                            ? $manualMeta.dataset.themeLightColor\r\n                            : $manualMeta.dataset.themeDarkColor;\r\n                      }\r\n                      // Disable auto theme <meta>s\r\n                      const $autoMetas = document.querySelectorAll(\r\n                        'meta[data-theme-setting=\"auto\"]',\r\n                      );\r\n                      $autoMetas.forEach((m) => {\r\n                        m.name = '';\r\n                      });\r\n                    }\r\n                    document\r\n                      .querySelector('meta[name=\"color-scheme\"]')\r\n                      .setAttribute(\r\n                        'content',\r\n                        theme === 'auto' ? 'dark light' : theme,\r\n                      );\r\n\r\n                    if (theme === 'auto') {\r\n                      store.local.del('theme');\r\n                    } else {\r\n                      store.local.set('theme', theme);\r\n                    }\r\n                  }}\r\n                >\r\n                  <div class=\"radio-group\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"light\"\r\n                        defaultChecked={currentTheme === 'light'}\r\n                      />\r\n                      <span>Light</span>\r\n                    </label>\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"dark\"\r\n                        defaultChecked={currentTheme === 'dark'}\r\n                      />\r\n                      <span>Dark</span>\r\n                    </label>\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"auto\"\r\n                        defaultChecked={\r\n                          currentTheme !== 'light' && currentTheme !== 'dark'\r\n                        }\r\n                      />\r\n                      <span>Auto</span>\r\n                    </label>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <div>\r\n                <label>Text size</label>\r\n              </div>\r\n              <div class=\"range-group\">\r\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\r\n                <input\r\n                  type=\"range\"\r\n                  min={TEXT_SIZES[0]}\r\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\r\n                  step=\"1\"\r\n                  value={currentTextSize}\r\n                  list=\"sizes\"\r\n                  onChange={(e) => {\r\n                    const value = parseInt(e.target.value, 10);\r\n                    const html = document.documentElement;\r\n                    // set CSS variable\r\n                    html.style.setProperty('--text-size', `${value}px`);\r\n                    // save to local storage\r\n                    if (value === DEFAULT_TEXT_SIZE) {\r\n                      store.local.del('textSize');\r\n                    } else {\r\n                      store.local.set('textSize', e.target.value);\r\n                    }\r\n                  }}\r\n                />{' '}\r\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\r\n                  A\r\n                </span>\r\n                <datalist id=\"sizes\">\r\n                  {TEXT_SIZES.map((size) => (\r\n                    <option value={size} />\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        {authenticated && (\r\n          <>\r\n            <h3>Posting</h3>\r\n            <section>\r\n              <ul>\r\n                <li>\r\n                  <div>\r\n                    <label for=\"posting-privacy-field\">\r\n                      Default visibility{' '}\r\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\r\n                    </label>\r\n                  </div>\r\n                  <div>\r\n                    <select\r\n                      id=\"posting-privacy-field\"\r\n                      value={prefs['posting:default:visibility'] || 'public'}\r\n                      onChange={(e) => {\r\n                        const { value } = e.target;\r\n                        (async () => {\r\n                          try {\r\n                            await masto.v1.accounts.updateCredentials({\r\n                              source: {\r\n                                privacy: value,\r\n                              },\r\n                            });\r\n                            setPrefs({\r\n                              ...prefs,\r\n                              'posting:default:visibility': value,\r\n                            });\r\n                            store.account.set('preferences', {\r\n                              ...prefs,\r\n                              'posting:default:visibility': value,\r\n                            });\r\n                          } catch (e) {\r\n                            alert('Failed to update posting privacy');\r\n                            console.error(e);\r\n                          }\r\n                        })();\r\n                      }}\r\n                    >\r\n                      <option value=\"public\">Public</option>\r\n                      <option value=\"unlisted\">Unlisted</option>\r\n                      <option value=\"private\">Followers only</option>\r\n                    </select>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </section>\r\n            <p class=\"section-postnote\">\r\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\r\n              <small>\r\n                Synced to your instance server's settings.{' '}\r\n                <a\r\n                  href={`https://${instance}/`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Go to your instance ({instance}) for more settings.\r\n                </a>\r\n              </small>\r\n            </p>\r\n          </>\r\n        )}\r\n        <h3>Experiments</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.autoRefresh}\r\n                  onChange={(e) => {\r\n                    states.settings.autoRefresh = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Auto refresh timeline posts\r\n              </label>\r\n            </li>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.boostsCarousel}\r\n                  onChange={(e) => {\r\n                    states.settings.boostsCarousel = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Boosts carousel\r\n              </label>\r\n            </li>\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.contentTranslation}\r\n                  onChange={(e) => {\r\n                    const { checked } = e.target;\r\n                    states.settings.contentTranslation = checked;\r\n                    if (!checked) {\r\n                      states.settings.contentTranslationTargetLanguage = null;\r\n                    }\r\n                  }}\r\n                />{' '}\r\n                Post translation\r\n              </label>\r\n              <div\r\n                class={`sub-section ${\r\n                  !snapStates.settings.contentTranslation\r\n                    ? 'more-insignificant'\r\n                    : ''\r\n                }`}\r\n              >\r\n                <div>\r\n                  <label>\r\n                    Translate to{' '}\r\n                    <select\r\n                      value={targetLanguage || ''}\r\n                      disabled={!snapStates.settings.contentTranslation}\r\n                      onChange={(e) => {\r\n                        states.settings.contentTranslationTargetLanguage =\r\n                          e.target.value || null;\r\n                      }}\r\n                    >\r\n                      <option value=\"\">\r\n                        System language ({systemTargetLanguageText})\r\n                      </option>\r\n                      <option disabled>──────────</option>\r\n                      {targetLanguages.map((lang) => (\r\n                        <option value={lang.code}>{lang.name}</option>\r\n                      ))}\r\n                    </select>\r\n                  </label>\r\n                </div>\r\n                <hr />\r\n                <p class=\"checkbox-fieldset\">\r\n                  Hide \"Translate\" button for\r\n                  {snapStates.settings.contentTranslationHideLanguages.length >\r\n                    0 && (\r\n                    <>\r\n                      {' '}\r\n                      (\r\n                      {\r\n                        snapStates.settings.contentTranslationHideLanguages\r\n                          .length\r\n                      }\r\n                      )\r\n                    </>\r\n                  )}\r\n                  :\r\n                  <div class=\"checkbox-fields\">\r\n                    {targetLanguages.map((lang) => (\r\n                      <label>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\r\n                            lang.code,\r\n                          )}\r\n                          onChange={(e) => {\r\n                            const { checked } = e.target;\r\n                            if (checked) {\r\n                              states.settings.contentTranslationHideLanguages.push(\r\n                                lang.code,\r\n                              );\r\n                            } else {\r\n                              states.settings.contentTranslationHideLanguages =\r\n                                snapStates.settings.contentTranslationHideLanguages.filter(\r\n                                  (code) => code !== lang.code,\r\n                                );\r\n                            }\r\n                          }}\r\n                        />{' '}\r\n                        {lang.name}\r\n                      </label>\r\n                    ))}\r\n                  </div>\r\n                </p>\r\n                <p class=\"insignificant\">\r\n                  <small>\r\n                    Note: This feature uses external translation services,\r\n                    powered by{' '}\r\n                    <a\r\n                      href=\"https://github.com/cheeaun/lingva-api\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      Lingva API\r\n                    </a>{' '}\r\n                    &amp;{' '}\r\n                    <a\r\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      Lingva Translate\r\n                    </a>\r\n                    .\r\n                  </small>\r\n                </p>\r\n                <hr />\r\n                <div>\r\n                  <label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={snapStates.settings.contentTranslationAutoInline}\r\n                      disabled={!snapStates.settings.contentTranslation}\r\n                      onChange={(e) => {\r\n                        states.settings.contentTranslationAutoInline =\r\n                          e.target.checked;\r\n                      }}\r\n                    />{' '}\r\n                    Auto inline translation\r\n                  </label>\r\n                  <p class=\"insignificant\">\r\n                    <small>\r\n                      Automatically show translation for posts in timeline. Only\r\n                      works for <b>short</b> posts without content warning,\r\n                      media and poll.\r\n                    </small>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </li>\r\n            {!!IMG_ALT_API_URL && (\r\n              <li>\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={snapStates.settings.mediaAltGenerator}\r\n                    onChange={(e) => {\r\n                      states.settings.mediaAltGenerator = e.target.checked;\r\n                    }}\r\n                  />{' '}\r\n                  Image description generator{' '}\r\n                  <Icon icon=\"sparkles2\" class=\"more-insignificant\" />\r\n                </label>\r\n                <div class=\"sub-section insignificant\">\r\n                  <small>Only for new images while composing new posts.</small>\r\n                </div>\r\n                <div class=\"sub-section insignificant\">\r\n                  <small>\r\n                    Note: This feature uses external AI service, powered by{' '}\r\n                    <a\r\n                      href=\"https://github.com/cheeaun/img-alt-api\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      img-alt-api\r\n                    </a>\r\n                    . May not work well. Only for images and in English.\r\n                  </small>\r\n                </div>\r\n              </li>\r\n            )}\r\n            <li>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={snapStates.settings.cloakMode}\r\n                  onChange={(e) => {\r\n                    states.settings.cloakMode = e.target.checked;\r\n                  }}\r\n                />{' '}\r\n                Cloak mode{' '}\r\n                <span class=\"insignificant\">\r\n                  (<samp>Text</samp> → <samp>████</samp>)\r\n                </span>\r\n              </label>\r\n              <div class=\"sub-section insignificant\">\r\n                <small>\r\n                  Replace text as blocks, useful when taking screenshots, for\r\n                  privacy reasons.\r\n                </small>\r\n              </div>\r\n            </li>\r\n            {authenticated && (\r\n              <li>\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"light\"\r\n                  onClick={() => {\r\n                    states.showDrafts = true;\r\n                    states.showSettings = false;\r\n                  }}\r\n                >\r\n                  Unsent drafts\r\n                </button>\r\n              </li>\r\n            )}\r\n          </ul>\r\n        </section>\r\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\r\n        <h3>About</h3>\r\n        <section>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexWrap: 'wrap',\r\n              gap: 8,\r\n              lineHeight: 1.25,\r\n              alignItems: 'center',\r\n              marginTop: 8,\r\n            }}\r\n          >\r\n            <img\r\n              src={logo}\r\n              alt=\"\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              style={{\r\n                aspectRatio: '1/1',\r\n                verticalAlign: 'middle',\r\n                background: '#b7cdf9',\r\n                borderRadius: 12,\r\n              }}\r\n            />\r\n            <div>\r\n              <b>Phanpy</b>{' '}\r\n              <a\r\n                href=\"https://hachyderm.io/@phanpy\"\r\n                // target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.showAccount = 'phanpy@hachyderm.io';\r\n                }}\r\n              >\r\n                @phanpy\r\n              </a>\r\n              <br />\r\n              <a\r\n                href=\"https://github.com/cheeaun/phanpy\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Built\r\n              </a>{' '}\r\n              by{' '}\r\n              <a\r\n                href=\"https://mastodon.social/@cheeaun\"\r\n                // target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.showAccount = 'cheeaun@mastodon.social';\r\n                }}\r\n              >\r\n                @cheeaun\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <p>\r\n            <a\r\n              href=\"https://github.com/sponsors/cheeaun\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Sponsor\r\n            </a>{' '}\r\n            &middot;{' '}\r\n            <a\r\n              href=\"https://www.buymeacoffee.com/cheeaun\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Donate\r\n            </a>{' '}\r\n            &middot;{' '}\r\n            <a\r\n              href={PRIVACY_POLICY_URL}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Privacy Policy\r\n            </a>\r\n          </p>\r\n          {__BUILD_TIME__ && (\r\n            <p>\r\n              {WEBSITE && (\r\n                <>\r\n                  <span class=\"insignificant\">Site:</span>{' '}\r\n                  {WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')}\r\n                  <br />\r\n                </>\r\n              )}\r\n              <span class=\"insignificant\">Version:</span>{' '}\r\n              <input\r\n                type=\"text\"\r\n                class=\"version-string\"\r\n                readOnly\r\n                size=\"18\" // Manually calculated here\r\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\r\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\r\n                }`}\r\n                onClick={(e) => {\r\n                  e.target.select();\r\n                  // Copy to clipboard\r\n                  try {\r\n                    navigator.clipboard.writeText(e.target.value);\r\n                    showToast('Version string copied');\r\n                  } catch (e) {\r\n                    console.warn(e);\r\n                    showToast('Unable to copy version string');\r\n                  }\r\n                }}\r\n              />{' '}\r\n              {!__FAKE_COMMIT_HASH__ && (\r\n                <span class=\"ib insignificant\">\r\n                  (\r\n                  <a\r\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <RelativeTime datetime={new Date(__BUILD_TIME__)} />\r\n                  </a>\r\n                  )\r\n                </span>\r\n              )}\r\n            </p>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PushNotificationsSection({ onClose }) {\r\n  if (!isPushSupported()) return null;\r\n\r\n  const { instance } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const pushFormRef = useRef();\r\n  const [allowNotifications, setAllowNotifications] = useState(false);\r\n  const [needRelogin, setNeedRelogin] = useState(false);\r\n  const previousPolicyRef = useRef();\r\n  useEffect(() => {\r\n    (async () => {\r\n      setUIState('loading');\r\n      try {\r\n        const { subscription, backendSubscription } = await initSubscription();\r\n        if (\r\n          backendSubscription?.policy &&\r\n          backendSubscription.policy !== 'none'\r\n        ) {\r\n          setAllowNotifications(true);\r\n          const { alerts, policy } = backendSubscription;\r\n          previousPolicyRef.current = policy;\r\n          const { elements } = pushFormRef.current;\r\n          const policyEl = elements.namedItem(policy);\r\n          if (policyEl) policyEl.value = policy;\r\n          // alerts is {}, iterate it\r\n          Object.keys(alerts).forEach((alert) => {\r\n            const el = elements.namedItem(alert);\r\n            if (el?.type === 'checkbox') {\r\n              el.checked = true;\r\n            }\r\n          });\r\n        }\r\n        setUIState('default');\r\n      } catch (err) {\r\n        console.warn(err);\r\n        if (/outside.*authorized/i.test(err.message)) {\r\n          setNeedRelogin(true);\r\n        } else {\r\n          alert(err?.message || err);\r\n        }\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const isLoading = uiState === 'loading';\r\n\r\n  return (\r\n    <form\r\n      ref={pushFormRef}\r\n      onChange={() => {\r\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\r\n        const allowNotifications = !!values['policy-allow'];\r\n        const params = {\r\n          policy: values.policy,\r\n          data: {\r\n            alerts: {\r\n              mention: !!values.mention,\r\n              favourite: !!values.favourite,\r\n              reblog: !!values.reblog,\r\n              follow: !!values.follow,\r\n              follow_request: !!values.followRequest,\r\n              poll: !!values.poll,\r\n              update: !!values.update,\r\n              status: !!values.status,\r\n            },\r\n          },\r\n        };\r\n\r\n        let alertsCount = 0;\r\n        // Remove false values from data.alerts\r\n        // API defaults to false anyway\r\n        Object.keys(params.data.alerts).forEach((key) => {\r\n          if (!params.data.alerts[key]) {\r\n            delete params.data.alerts[key];\r\n          } else {\r\n            alertsCount++;\r\n          }\r\n        });\r\n        const policyChanged = previousPolicyRef.current !== params.policy;\r\n\r\n        console.log('PN Form', {\r\n          values,\r\n          allowNotifications: allowNotifications,\r\n          params,\r\n        });\r\n\r\n        if (allowNotifications && alertsCount > 0) {\r\n          if (policyChanged) {\r\n            console.debug('Policy changed.');\r\n            removeSubscription()\r\n              .then(() => {\r\n                updateSubscription(params);\r\n              })\r\n              .catch((err) => {\r\n                console.warn(err);\r\n                alert('Failed to update subscription. Please try again.');\r\n              });\r\n          } else {\r\n            updateSubscription(params).catch((err) => {\r\n              console.warn(err);\r\n              alert('Failed to update subscription. Please try again.');\r\n            });\r\n          }\r\n        } else {\r\n          removeSubscription().catch((err) => {\r\n            console.warn(err);\r\n            alert('Failed to remove subscription. Please try again.');\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      <h3>Push Notifications (beta)</h3>\r\n      <section>\r\n        <ul>\r\n          <li>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                disabled={isLoading || needRelogin}\r\n                name=\"policy-allow\"\r\n                checked={allowNotifications}\r\n                onChange={async (e) => {\r\n                  const { checked } = e.target;\r\n                  if (checked) {\r\n                    // Request permission\r\n                    const permission = await Notification.requestPermission();\r\n                    if (permission === 'granted') {\r\n                      setAllowNotifications(true);\r\n                    } else {\r\n                      setAllowNotifications(false);\r\n                      if (permission === 'denied') {\r\n                        alert(\r\n                          'Push notifications are blocked. Please enable them in your browser settings.',\r\n                        );\r\n                      }\r\n                    }\r\n                  } else {\r\n                    setAllowNotifications(false);\r\n                  }\r\n                }}\r\n              />{' '}\r\n              Allow from{' '}\r\n              <select\r\n                name=\"policy\"\r\n                disabled={isLoading || needRelogin || !allowNotifications}\r\n              >\r\n                {[\r\n                  {\r\n                    value: 'all',\r\n                    label: 'anyone',\r\n                  },\r\n                  {\r\n                    value: 'followed',\r\n                    label: 'people I follow',\r\n                  },\r\n                  {\r\n                    value: 'follower',\r\n                    label: 'followers',\r\n                  },\r\n                ].map((type) => (\r\n                  <option value={type.value}>{type.label}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n            <div\r\n              class=\"shazam-container no-animation\"\r\n              style={{\r\n                width: '100%',\r\n              }}\r\n              hidden={!allowNotifications}\r\n            >\r\n              <div class=\"shazam-container-inner\">\r\n                <div class=\"sub-section\">\r\n                  <ul>\r\n                    {[\r\n                      {\r\n                        value: 'mention',\r\n                        label: 'Mentions',\r\n                      },\r\n                      {\r\n                        value: 'favourite',\r\n                        label: 'Likes',\r\n                      },\r\n                      {\r\n                        value: 'reblog',\r\n                        label: 'Boosts',\r\n                      },\r\n                      {\r\n                        value: 'follow',\r\n                        label: 'Follows',\r\n                      },\r\n                      {\r\n                        value: 'followRequest',\r\n                        label: 'Follow requests',\r\n                      },\r\n                      {\r\n                        value: 'poll',\r\n                        label: 'Polls',\r\n                      },\r\n                      {\r\n                        value: 'update',\r\n                        label: 'Post edits',\r\n                      },\r\n                      {\r\n                        value: 'status',\r\n                        label: 'New posts',\r\n                      },\r\n                    ].map((alert) => (\r\n                      <li>\r\n                        <label>\r\n                          <input type=\"checkbox\" name={alert.value} />{' '}\r\n                          {alert.label}\r\n                        </label>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {needRelogin && (\r\n              <div class=\"sub-section\">\r\n                <p>\r\n                  Push permission was not granted since your last login. You'll\r\n                  need to{' '}\r\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\r\n                    <b>log in</b> again to grant push permission\r\n                  </Link>\r\n                  .\r\n                </p>\r\n              </div>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </section>\r\n      <p class=\"section-postnote\">\r\n        <small>\r\n          NOTE: Push notifications only work for <b>one account</b>.\r\n        </small>\r\n      </p>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","const focusDeck = () => {\r\n  let timer = setTimeout(() => {\r\n    const columns = document.getElementById('columns');\r\n    if (columns) {\r\n      // Focus first column\r\n      // columns.querySelector('.deck-container')?.focus?.();\r\n    } else {\r\n      const modals = document.querySelectorAll('#modal-container > *');\r\n      if (modals?.length) {\r\n        // Focus last modal\r\n        const modal = modals[modals.length - 1]; // last one\r\n        const modalFocusElement =\r\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\r\n        if (modalFocusElement) {\r\n          modalFocusElement.focus();\r\n          return;\r\n        }\r\n      }\r\n      const backDrop = document.querySelector('.deck-backdrop');\r\n      if (backDrop) return;\r\n      // Focus last deck\r\n      const pages = document.querySelectorAll('.deck-container');\r\n      const page = pages[pages.length - 1]; // last one\r\n      if (page && page.tabIndex === -1) {\r\n        console.log('FOCUS', page);\r\n        page.focus();\r\n      }\r\n    }\r\n  }, 100);\r\n  return () => clearTimeout(timer);\r\n};\r\n\r\nexport default focusDeck;\r\n","import { useEffect, useRef } from 'preact/hooks';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// Hook that runs a callback when the location changes\r\n// Won't run on the first render\r\n\r\nexport default function useLocationChange(fn) {\r\n  if (!fn) return;\r\n  const location = useLocation();\r\n  const currentLocationRef = useRef(location.pathname);\r\n  useEffect(() => {\r\n    // console.log('location', {\r\n    //   current: currentLocationRef.current,\r\n    //   next: location.pathname,\r\n    // });\r\n    if (\r\n      currentLocationRef.current &&\r\n      location.pathname !== currentLocationRef.current\r\n    ) {\r\n      fn?.();\r\n    }\r\n  }, [location.pathname, fn]);\r\n}\r\n","import { useEffect, useRef, useState } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport supports from '../utils/supports';\r\n\r\nimport Icon from './icon';\r\nimport MenuConfirm from './menu-confirm';\r\n\r\nfunction ListAddEdit({ list, onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const editMode = !!list;\r\n  const nameFieldRef = useRef();\r\n  const repliesPolicyFieldRef = useRef();\r\n  const exclusiveFieldRef = useRef();\r\n  useEffect(() => {\r\n    if (editMode) {\r\n      nameFieldRef.current.value = list.title;\r\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\r\n      if (exclusiveFieldRef.current) {\r\n        exclusiveFieldRef.current.checked = list.exclusive;\r\n      }\r\n    }\r\n  }, [editMode]);\r\n  const supportsExclusive = supports('@mastodon/list-exclusive');\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}{' '}\r\n      <header>\r\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\r\n      </header>\r\n      <main>\r\n        <form\r\n          class=\"list-form\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault(); // Get form values\r\n\r\n            const formData = new FormData(e.target);\r\n            const title = formData.get('title');\r\n            const repliesPolicy = formData.get('replies_policy');\r\n            const exclusive = formData.get('exclusive') === 'on';\r\n            console.log({\r\n              title,\r\n              repliesPolicy,\r\n              exclusive,\r\n            });\r\n            setUIState('loading');\r\n\r\n            (async () => {\r\n              try {\r\n                let listResult;\r\n\r\n                if (editMode) {\r\n                  listResult = await masto.v1.lists.$select(list.id).update({\r\n                    title,\r\n                    replies_policy: repliesPolicy,\r\n                    exclusive,\r\n                  });\r\n                } else {\r\n                  listResult = await masto.v1.lists.create({\r\n                    title,\r\n                    replies_policy: repliesPolicy,\r\n                    exclusive,\r\n                  });\r\n                }\r\n\r\n                console.log(listResult);\r\n                setUIState('default');\r\n                onClose?.({\r\n                  state: 'success',\r\n                  list: listResult,\r\n                });\r\n              } catch (e) {\r\n                console.error(e);\r\n                setUIState('error');\r\n                alert(\r\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\r\n                );\r\n              }\r\n            })();\r\n          }}\r\n        >\r\n          <div class=\"list-form-row\">\r\n            <label for=\"list-title\">\r\n              Name{' '}\r\n              <input\r\n                ref={nameFieldRef}\r\n                type=\"text\"\r\n                id=\"list-title\"\r\n                name=\"title\"\r\n                required\r\n                disabled={uiState === 'loading'}\r\n                dir=\"auto\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <div class=\"list-form-row\">\r\n            <select\r\n              ref={repliesPolicyFieldRef}\r\n              name=\"replies_policy\"\r\n              required\r\n              disabled={uiState === 'loading'}\r\n            >\r\n              <option value=\"list\">Show replies to list members</option>\r\n              <option value=\"followed\">Show replies to people I follow</option>\r\n              <option value=\"none\">Don't show replies</option>\r\n            </select>\r\n          </div>\r\n          {supportsExclusive && (\r\n            <div class=\"list-form-row\">\r\n              <label class=\"label-block\">\r\n                <input\r\n                  ref={exclusiveFieldRef}\r\n                  type=\"checkbox\"\r\n                  name=\"exclusive\"\r\n                  disabled={uiState === 'loading'}\r\n                />{' '}\r\n                Hide posts on this list from Home/Following\r\n              </label>\r\n            </div>\r\n          )}\r\n          <div class=\"list-form-footer\">\r\n            <button type=\"submit\" disabled={uiState === 'loading'}>\r\n              {editMode ? 'Save' : 'Create'}\r\n            </button>\r\n            {editMode && (\r\n              <MenuConfirm\r\n                disabled={uiState === 'loading'}\r\n                align=\"end\"\r\n                menuItemClassName=\"danger\"\r\n                confirmLabel=\"Delete this list?\"\r\n                onClick={() => {\r\n                  // const yes = confirm('Delete this list?');\r\n                  // if (!yes) return;\r\n                  setUIState('loading');\r\n\r\n                  (async () => {\r\n                    try {\r\n                      await masto.v1.lists.$select(list.id).remove();\r\n                      setUIState('default');\r\n                      onClose?.({\r\n                        state: 'deleted',\r\n                      });\r\n                    } catch (e) {\r\n                      console.error(e);\r\n                      setUIState('error');\r\n                      alert('Unable to delete list.');\r\n                    }\r\n                  })();\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"light danger\"\r\n                  disabled={uiState === 'loading'}\r\n                >\r\n                  Delete…\r\n                </button>\r\n              </MenuConfirm>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListAddEdit;\r\n","import './account-info.css';\r\n\r\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\r\nimport {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport getHTMLText from '../utils/getHTMLText';\r\nimport handleContentLinks from '../utils/handle-content-links';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport pmem from '../utils/pmem';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport showToast from '../utils/show-toast';\r\nimport states, { hideAllModals } from '../utils/states';\r\nimport store from '../utils/store';\r\nimport { updateAccount } from '../utils/store-utils';\r\n\r\nimport AccountBlock from './account-block';\r\nimport Avatar from './avatar';\r\nimport EmojiText from './emoji-text';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport ListAddEdit from './list-add-edit';\r\nimport Loader from './loader';\r\nimport Menu2 from './menu2';\r\nimport MenuConfirm from './menu-confirm';\r\nimport Modal from './modal';\r\nimport TranslationBlock from './translation-block';\r\n\r\nconst MUTE_DURATIONS = [\r\n  60 * 5, // 5 minutes\r\n  60 * 30, // 30 minutes\r\n  60 * 60, // 1 hour\r\n  60 * 60 * 6, // 6 hours\r\n  60 * 60 * 24, // 1 day\r\n  60 * 60 * 24 * 3, // 3 days\r\n  60 * 60 * 24 * 7, // 1 week\r\n  0, // forever\r\n];\r\nconst MUTE_DURATIONS_LABELS = {\r\n  0: 'Forever',\r\n  300: '5 minutes',\r\n  1_800: '30 minutes',\r\n  3_600: '1 hour',\r\n  21_600: '6 hours',\r\n  86_400: '1 day',\r\n  259_200: '3 days',\r\n  604_800: '1 week',\r\n};\r\n\r\nconst LIMIT = 80;\r\n\r\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\r\n\r\nfunction fetchFamiliarFollowers(currentID, masto) {\r\n  return masto.v1.accounts.familiarFollowers.fetch({\r\n    id: [currentID],\r\n  });\r\n}\r\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\r\n  maxAge: ACCOUNT_INFO_MAX_AGE,\r\n});\r\n\r\nasync function fetchPostingStats(accountID, masto) {\r\n  const fetchStatuses = masto.v1.accounts\r\n    .$select(accountID)\r\n    .statuses.list({\r\n      limit: 20,\r\n    })\r\n    .next();\r\n\r\n  const { value: statuses } = await fetchStatuses;\r\n  console.log('fetched statuses', statuses);\r\n  const stats = {\r\n    total: statuses.length,\r\n    originals: 0,\r\n    replies: 0,\r\n    boosts: 0,\r\n  };\r\n  // Categories statuses by type\r\n  // - Original posts (not replies to others)\r\n  // - Threads (self-replies + 1st original post)\r\n  // - Boosts (reblogs)\r\n  // - Replies (not-self replies)\r\n  statuses.forEach((status) => {\r\n    if (status.reblog) {\r\n      stats.boosts++;\r\n    } else if (\r\n      !!status.inReplyToId &&\r\n      status.inReplyToAccountId !== status.account.id // Not self-reply\r\n    ) {\r\n      stats.replies++;\r\n    } else {\r\n      stats.originals++;\r\n    }\r\n  });\r\n\r\n  // Count days since last post\r\n  if (statuses.length) {\r\n    stats.daysSinceLastPost = Math.ceil(\r\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\r\n        86400000,\r\n    );\r\n  }\r\n\r\n  console.log('posting stats', stats);\r\n  return stats;\r\n}\r\nconst memFetchPostingStats = pmem(fetchPostingStats, {\r\n  maxAge: ACCOUNT_INFO_MAX_AGE,\r\n});\r\n\r\nfunction AccountInfo({\r\n  account,\r\n  fetchAccount = () => {},\r\n  standalone,\r\n  instance,\r\n  authenticated,\r\n}) {\r\n  const { masto } = api({\r\n    instance,\r\n  });\r\n  const { masto: currentMasto, instance: currentInstance } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const isString = typeof account === 'string';\r\n  const [info, setInfo] = useState(isString ? null : account);\r\n\r\n  const sameCurrentInstance = useMemo(\r\n    () => instance === currentInstance,\r\n    [instance, currentInstance],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!isString) {\r\n      setInfo(account);\r\n      return;\r\n    }\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const info = await fetchAccount();\r\n        states.accounts[`${info.id}@${instance}`] = info;\r\n        setInfo(info);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setInfo(null);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [isString, account, fetchAccount]);\r\n\r\n  const {\r\n    acct,\r\n    avatar,\r\n    avatarStatic,\r\n    bot,\r\n    createdAt,\r\n    displayName,\r\n    emojis,\r\n    fields,\r\n    followersCount,\r\n    followingCount,\r\n    group,\r\n    // header,\r\n    // headerStatic,\r\n    id,\r\n    lastStatusAt,\r\n    locked,\r\n    note,\r\n    statusesCount,\r\n    url,\r\n    username,\r\n    memorial,\r\n    moved,\r\n    roles,\r\n  } = info || {};\r\n  let headerIsAvatar = false;\r\n  let { header, headerStatic } = info || {};\r\n  if (!header || /missing\\.png$/.test(header)) {\r\n    if (avatar && !/missing\\.png$/.test(avatar)) {\r\n      header = avatar;\r\n      headerIsAvatar = true;\r\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\r\n        headerStatic = avatarStatic;\r\n      }\r\n    }\r\n  }\r\n\r\n  const isSelf = useMemo(\r\n    () => id === store.session.get('currentAccount'),\r\n    [id],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const infoHasEssentials = !!(\r\n      info?.id &&\r\n      info?.username &&\r\n      info?.acct &&\r\n      info?.avatar &&\r\n      info?.avatarStatic &&\r\n      info?.displayName &&\r\n      info?.url\r\n    );\r\n    if (isSelf && instance && infoHasEssentials) {\r\n      const accounts = store.local.getJSON('accounts');\r\n      let updated = false;\r\n      accounts.forEach((account) => {\r\n        if (account.info.id === info.id && account.instanceURL === instance) {\r\n          account.info = info;\r\n          updated = true;\r\n        }\r\n      });\r\n      if (updated) {\r\n        console.log('Updated account info', info);\r\n        store.local.setJSON('accounts', accounts);\r\n      }\r\n    }\r\n  }, [isSelf, info, instance]);\r\n\r\n  const accountInstance = useMemo(() => {\r\n    if (!url) return null;\r\n    const domain = new URL(url).hostname;\r\n    return domain;\r\n  }, [url]);\r\n\r\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\r\n\r\n  const followersIterator = useRef();\r\n  const familiarFollowersCache = useRef([]);\r\n  async function fetchFollowers(firstLoad) {\r\n    if (firstLoad || !followersIterator.current) {\r\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await followersIterator.current.next();\r\n    if (isSelf) return results;\r\n    if (!sameCurrentInstance) return results;\r\n\r\n    const { value } = results;\r\n    let newValue = [];\r\n    // On first load, fetch familiar followers, merge to top of results' `value`\r\n    // Remove dups on every fetch\r\n    if (firstLoad) {\r\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\r\n        {\r\n          id: [id],\r\n        },\r\n      );\r\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\r\n      newValue = [\r\n        ...familiarFollowersCache.current,\r\n        ...value.filter(\r\n          (account) =>\r\n            !familiarFollowersCache.current.some(\r\n              (familiar) => familiar.id === account.id,\r\n            ),\r\n        ),\r\n      ];\r\n    } else if (value?.length) {\r\n      newValue = value.filter(\r\n        (account) =>\r\n          !familiarFollowersCache.current.some(\r\n            (familiar) => familiar.id === account.id,\r\n          ),\r\n      );\r\n    }\r\n\r\n    return {\r\n      ...results,\r\n      value: newValue,\r\n    };\r\n  }\r\n\r\n  const followingIterator = useRef();\r\n  async function fetchFollowing(firstLoad) {\r\n    if (firstLoad || !followingIterator.current) {\r\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await followingIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  const LinkOrDiv = standalone ? 'div' : Link;\r\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\r\n\r\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\r\n  const [postingStats, setPostingStats] = useState();\r\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\r\n  const hasPostingStats = !!postingStats?.total;\r\n\r\n  const renderFamiliarFollowers = async (currentID) => {\r\n    try {\r\n      const followers = await memFetchFamiliarFollowers(\r\n        currentID,\r\n        currentMasto,\r\n      );\r\n      console.log('fetched familiar followers', followers);\r\n      setFamiliarFollowers(\r\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\r\n      );\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const renderPostingStats = async () => {\r\n    if (!id) return;\r\n    setPostingStatsUIState('loading');\r\n    try {\r\n      const stats = await memFetchPostingStats(id, masto);\r\n      setPostingStats(stats);\r\n      setPostingStatsUIState('default');\r\n    } catch (e) {\r\n      console.error(e);\r\n      setPostingStatsUIState('error');\r\n    }\r\n  };\r\n\r\n  const onRelationshipChange = useCallback(\r\n    ({ relationship, currentID }) => {\r\n      if (!relationship.following) {\r\n        renderFamiliarFollowers(currentID);\r\n        if (!standalone && statusesCount > 0) {\r\n          // Only render posting stats if not standalone and has posts\r\n          renderPostingStats();\r\n        }\r\n      }\r\n    },\r\n    [standalone, id, statusesCount],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      tabIndex=\"-1\"\r\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\r\n      style={{\r\n        '--header-color-1': headerCornerColors[0],\r\n        '--header-color-2': headerCornerColors[1],\r\n        '--header-color-3': headerCornerColors[2],\r\n        '--header-color-4': headerCornerColors[3],\r\n      }}\r\n    >\r\n      {uiState === 'error' && (\r\n        <div class=\"ui-state\">\r\n          <p>Unable to load account.</p>\r\n          <p>\r\n            <a\r\n              href={isString ? account : url}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Go to account page <Icon icon=\"external\" />\r\n            </a>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {uiState === 'loading' ? (\r\n        <>\r\n          <header>\r\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\r\n          </header>\r\n          <main>\r\n            <div class=\"note\">\r\n              <p>███████ ████ ████</p>\r\n              <p>████ ████████ ██████ █████████ ████ ██</p>\r\n            </div>\r\n            <div class=\"account-metadata-box\">\r\n              <div class=\"profile-metadata\">\r\n                <div class=\"profile-field\">\r\n                  <b class=\"more-insignificant\">███</b>\r\n                  <p>██████</p>\r\n                </div>\r\n                <div class=\"profile-field\">\r\n                  <b class=\"more-insignificant\">████</b>\r\n                  <p>███████████</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"stats\">\r\n                <div>\r\n                  <span>██</span> Followers\r\n                </div>\r\n                <div>\r\n                  <span>██</span> Following\r\n                </div>\r\n                <div>\r\n                  <span>██</span> Posts\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"actions\">\r\n              <span />\r\n              <span class=\"buttons\">\r\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\r\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n                </button>\r\n              </span>\r\n            </div>\r\n          </main>\r\n        </>\r\n      ) : (\r\n        info && (\r\n          <>\r\n            {!!moved && (\r\n              <div class=\"account-moved\">\r\n                <p>\r\n                  <b>{displayName}</b> has indicated that their new account is\r\n                  now:\r\n                </p>\r\n                <AccountBlock\r\n                  account={moved}\r\n                  instance={instance}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    states.showAccount = moved;\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n            {!!header && !/missing\\.png$/.test(header) && (\r\n              <img\r\n                src={header}\r\n                alt=\"\"\r\n                class={`header-banner ${\r\n                  headerIsAvatar ? 'header-is-avatar' : ''\r\n                }`}\r\n                onError={(e) => {\r\n                  if (e.target.crossOrigin) {\r\n                    if (e.target.src !== headerStatic) {\r\n                      e.target.src = headerStatic;\r\n                    } else {\r\n                      e.target.removeAttribute('crossorigin');\r\n                      e.target.src = header;\r\n                    }\r\n                  } else if (e.target.src !== headerStatic) {\r\n                    e.target.src = headerStatic;\r\n                  } else {\r\n                    e.target.remove();\r\n                  }\r\n                }}\r\n                crossOrigin=\"anonymous\"\r\n                onLoad={(e) => {\r\n                  e.target.classList.add('loaded');\r\n                  try {\r\n                    // Get color from four corners of image\r\n                    const canvas = document.createElement('canvas');\r\n                    const ctx = canvas.getContext('2d', {\r\n                      willReadFrequently: true,\r\n                    });\r\n                    canvas.width = e.target.width;\r\n                    canvas.height = e.target.height;\r\n                    ctx.drawImage(e.target, 0, 0);\r\n                    // const colors = [\r\n                    //   ctx.getImageData(0, 0, 1, 1).data,\r\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\r\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\r\n                    //   ctx.getImageData(\r\n                    //     e.target.width - 1,\r\n                    //     e.target.height - 1,\r\n                    //     1,\r\n                    //     1,\r\n                    //   ).data,\r\n                    // ];\r\n                    // Get 10x10 pixels from corners, get average color from each\r\n                    const pixelDimension = 10;\r\n                    const colors = [\r\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\r\n                        .data,\r\n                      ctx.getImageData(\r\n                        e.target.width - pixelDimension,\r\n                        0,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                      ctx.getImageData(\r\n                        0,\r\n                        e.target.height - pixelDimension,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                      ctx.getImageData(\r\n                        e.target.width - pixelDimension,\r\n                        e.target.height - pixelDimension,\r\n                        pixelDimension,\r\n                        pixelDimension,\r\n                      ).data,\r\n                    ].map((data) => {\r\n                      let r = 0;\r\n                      let g = 0;\r\n                      let b = 0;\r\n                      let a = 0;\r\n                      for (let i = 0; i < data.length; i += 4) {\r\n                        r += data[i];\r\n                        g += data[i + 1];\r\n                        b += data[i + 2];\r\n                        a += data[i + 3];\r\n                      }\r\n                      const dataLength = data.length / 4;\r\n                      return [\r\n                        r / dataLength,\r\n                        g / dataLength,\r\n                        b / dataLength,\r\n                        a / dataLength,\r\n                      ];\r\n                    });\r\n                    const rgbColors = colors.map((color) => {\r\n                      const [r, g, b, a] = lightenRGB(color);\r\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\r\n                    });\r\n                    setHeaderCornerColors(rgbColors);\r\n                    console.log({ colors, rgbColors });\r\n                  } catch (e) {\r\n                    // Silently fail\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n            <header>\r\n              <AccountBlock\r\n                account={info}\r\n                instance={instance}\r\n                avatarSize=\"xxxl\"\r\n                external={standalone}\r\n                internal={!standalone}\r\n              />\r\n            </header>\r\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\r\n            <main>\r\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\r\n              {!!bot && (\r\n                <span class=\"tag\">\r\n                  <Icon icon=\"bot\" /> Automated\r\n                </span>\r\n              )}\r\n              {!!group && (\r\n                <span class=\"tag\">\r\n                  <Icon icon=\"group\" /> Group\r\n                </span>\r\n              )}\r\n              {roles?.map((role) => (\r\n                <span class=\"tag\">\r\n                  {role.name}\r\n                  {!!accountInstance && (\r\n                    <>\r\n                      {' '}\r\n                      <span class=\"more-insignificant\">{accountInstance}</span>\r\n                    </>\r\n                  )}\r\n                </span>\r\n              ))}\r\n              <div\r\n                class=\"note\"\r\n                dir=\"auto\"\r\n                onClick={handleContentLinks({\r\n                  instance: currentInstance,\r\n                })}\r\n                dangerouslySetInnerHTML={{\r\n                  __html: enhanceContent(note, { emojis }),\r\n                }}\r\n              />\r\n              <div class=\"account-metadata-box\">\r\n                {fields?.length > 0 && (\r\n                  <div class=\"profile-metadata\">\r\n                    {fields.map(({ name, value, verifiedAt }, i) => (\r\n                      <div\r\n                        class={`profile-field ${\r\n                          verifiedAt ? 'profile-verified' : ''\r\n                        }`}\r\n                        key={name + i}\r\n                        dir=\"auto\"\r\n                      >\r\n                        <b>\r\n                          <EmojiText text={name} emojis={emojis} />{' '}\r\n                          {!!verifiedAt && (\r\n                            <Icon icon=\"check-circle\" size=\"s\" />\r\n                          )}\r\n                        </b>\r\n                        <p\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: enhanceContent(value, { emojis }),\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                <div class=\"stats\">\r\n                  <LinkOrDiv\r\n                    tabIndex={0}\r\n                    to={accountLink}\r\n                    onClick={() => {\r\n                      // states.showAccount = false;\r\n                      setTimeout(() => {\r\n                        states.showGenericAccounts = {\r\n                          heading: 'Followers',\r\n                          fetchAccounts: fetchFollowers,\r\n                          instance,\r\n                          excludeRelationshipAttrs: isSelf\r\n                            ? ['followedBy']\r\n                            : [],\r\n                        };\r\n                      }, 0);\r\n                    }}\r\n                  >\r\n                    {!!familiarFollowers.length && (\r\n                      <span class=\"shazam-container-horizontal\">\r\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\r\n                          {familiarFollowers.map((follower) => (\r\n                            <Avatar\r\n                              url={follower.avatarStatic}\r\n                              size=\"s\"\r\n                              alt={`${follower.displayName} @${follower.acct}`}\r\n                              squircle={follower?.bot}\r\n                            />\r\n                          ))}\r\n                        </span>\r\n                      </span>\r\n                    )}\r\n                    <span title={followersCount}>\r\n                      {shortenNumber(followersCount)}\r\n                    </span>{' '}\r\n                    Followers\r\n                  </LinkOrDiv>\r\n                  <LinkOrDiv\r\n                    class=\"insignificant\"\r\n                    tabIndex={0}\r\n                    to={accountLink}\r\n                    onClick={() => {\r\n                      // states.showAccount = false;\r\n                      setTimeout(() => {\r\n                        states.showGenericAccounts = {\r\n                          heading: 'Following',\r\n                          fetchAccounts: fetchFollowing,\r\n                          instance,\r\n                          excludeRelationshipAttrs: isSelf ? ['following'] : [],\r\n                        };\r\n                      }, 0);\r\n                    }}\r\n                  >\r\n                    <span title={followingCount}>\r\n                      {shortenNumber(followingCount)}\r\n                    </span>{' '}\r\n                    Following\r\n                    <br />\r\n                  </LinkOrDiv>\r\n                  <LinkOrDiv\r\n                    class=\"insignificant\"\r\n                    to={accountLink}\r\n                    // onClick={\r\n                    //   standalone\r\n                    //     ? undefined\r\n                    //     : () => {\r\n                    //         hideAllModals();\r\n                    //       }\r\n                    // }\r\n                  >\r\n                    <span title={statusesCount}>\r\n                      {shortenNumber(statusesCount)}\r\n                    </span>{' '}\r\n                    Posts\r\n                  </LinkOrDiv>\r\n                  {!!createdAt && (\r\n                    <div class=\"insignificant\">\r\n                      Joined{' '}\r\n                      <time datetime={createdAt}>\r\n                        {niceDateTime(createdAt, {\r\n                          hideTime: true,\r\n                        })}\r\n                      </time>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              {!!postingStats && (\r\n                <LinkOrDiv\r\n                  to={accountLink}\r\n                  class=\"account-metadata-box\"\r\n                  // onClick={() => {\r\n                  //   states.showAccount = false;\r\n                  // }}\r\n                >\r\n                  <div class=\"shazam-container\">\r\n                    <div class=\"shazam-container-inner\">\r\n                      {hasPostingStats ? (\r\n                        <div\r\n                          class=\"posting-stats\"\r\n                          title={`${Math.round(\r\n                            (postingStats.originals / postingStats.total) * 100,\r\n                          )}% original posts, ${Math.round(\r\n                            (postingStats.replies / postingStats.total) * 100,\r\n                          )}% replies, ${Math.round(\r\n                            (postingStats.boosts / postingStats.total) * 100,\r\n                          )}% boosts`}\r\n                        >\r\n                          <div>\r\n                            {postingStats.daysSinceLastPost < 365\r\n                              ? `Last ${postingStats.total} post${\r\n                                  postingStats.total > 1 ? 's' : ''\r\n                                } in the past \r\n                      ${postingStats.daysSinceLastPost} day${\r\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\r\n                                }`\r\n                              : `\r\n                      Last ${postingStats.total} posts in the past year(s)\r\n                      `}\r\n                          </div>\r\n                          <div\r\n                            class=\"posting-stats-bar\"\r\n                            style={{\r\n                              // [originals | replies | boosts]\r\n                              '--originals-percentage': `${\r\n                                (postingStats.originals / postingStats.total) *\r\n                                100\r\n                              }%`,\r\n                              '--replies-percentage': `${\r\n                                ((postingStats.originals +\r\n                                  postingStats.replies) /\r\n                                  postingStats.total) *\r\n                                100\r\n                              }%`,\r\n                            }}\r\n                          />\r\n                          <div class=\"posting-stats-legends\">\r\n                            <span class=\"ib\">\r\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\r\n                              Original\r\n                            </span>{' '}\r\n                            <span class=\"ib\">\r\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\r\n                              Replies\r\n                            </span>{' '}\r\n                            <span class=\"ib\">\r\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\r\n                              Boosts\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </LinkOrDiv>\r\n              )}\r\n              <div class=\"account-metadata-box\">\r\n                <div\r\n                  class=\"shazam-container no-animation\"\r\n                  hidden={!!postingStats}\r\n                >\r\n                  <div class=\"shazam-container-inner\">\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"posting-stats-button\"\r\n                      disabled={postingStatsUIState === 'loading'}\r\n                      onClick={() => {\r\n                        renderPostingStats();\r\n                      }}\r\n                    >\r\n                      <div\r\n                        class={`posting-stats-bar posting-stats-icon ${\r\n                          postingStatsUIState === 'loading' ? 'loading' : ''\r\n                        }`}\r\n                        style={{\r\n                          '--originals-percentage': '33%',\r\n                          '--replies-percentage': '66%',\r\n                        }}\r\n                      />\r\n                      View post stats{' '}\r\n                      {/* <Loader\r\n                        abrupt\r\n                        hidden={postingStatsUIState !== 'loading'}\r\n                      /> */}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </main>\r\n            <footer>\r\n              <RelatedActions\r\n                info={info}\r\n                instance={instance}\r\n                authenticated={authenticated}\r\n                onRelationshipChange={onRelationshipChange}\r\n              />\r\n            </footer>\r\n          </>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\r\n\r\nfunction RelatedActions({\r\n  info,\r\n  instance,\r\n  authenticated,\r\n  onRelationshipChange = () => {},\r\n}) {\r\n  if (!info) return null;\r\n  const {\r\n    masto: currentMasto,\r\n    instance: currentInstance,\r\n    authenticated: currentAuthenticated,\r\n  } = api();\r\n  const sameInstance = instance === currentInstance;\r\n\r\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\r\n  const [relationship, setRelationship] = useState(null);\r\n\r\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\r\n    info;\r\n  const accountID = useRef(id);\r\n\r\n  const {\r\n    following,\r\n    showingReblogs,\r\n    notifying,\r\n    followedBy,\r\n    blocking,\r\n    blockedBy,\r\n    muting,\r\n    mutingNotifications,\r\n    requested,\r\n    domainBlocking,\r\n    endorsed,\r\n    note: privateNote,\r\n  } = relationship || {};\r\n\r\n  const [currentInfo, setCurrentInfo] = useState(null);\r\n  const [isSelf, setIsSelf] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (info) {\r\n      const currentAccount = store.session.get('currentAccount');\r\n      let currentID;\r\n      (async () => {\r\n        if (sameInstance && authenticated) {\r\n          currentID = id;\r\n        } else if (!sameInstance && currentAuthenticated) {\r\n          // Grab this account from my logged-in instance\r\n          const acctHasInstance = info.acct.includes('@');\r\n          try {\r\n            const results = await currentMasto.v2.search.fetch({\r\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\r\n              type: 'accounts',\r\n              limit: 1,\r\n              resolve: true,\r\n            });\r\n            console.log('🥏 Fetched account from logged-in instance', results);\r\n            if (results.accounts.length) {\r\n              currentID = results.accounts[0].id;\r\n              setCurrentInfo(results.accounts[0]);\r\n            }\r\n          } catch (e) {\r\n            console.error(e);\r\n          }\r\n        }\r\n\r\n        if (!currentID) return;\r\n\r\n        if (currentAccount === currentID) {\r\n          // It's myself!\r\n          setIsSelf(true);\r\n          return;\r\n        }\r\n\r\n        accountID.current = currentID;\r\n\r\n        if (moved) return;\r\n\r\n        setRelationshipUIState('loading');\r\n\r\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\r\n          {\r\n            id: [currentID],\r\n          },\r\n        );\r\n\r\n        try {\r\n          const relationships = await fetchRelationships;\r\n          console.log('fetched relationship', relationships);\r\n          setRelationshipUIState('default');\r\n\r\n          if (relationships.length) {\r\n            const relationship = relationships[0];\r\n            setRelationship(relationship);\r\n            onRelationshipChange({ relationship, currentID });\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n          setRelationshipUIState('error');\r\n        }\r\n      })();\r\n    }\r\n  }, [info, authenticated]);\r\n\r\n  useEffect(() => {\r\n    if (info && isSelf) {\r\n      updateAccount(info);\r\n    }\r\n  }, [info, isSelf]);\r\n\r\n  const loading = relationshipUIState === 'loading';\r\n\r\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\r\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\r\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\r\n  const [lists, setLists] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <div class=\"actions\">\r\n        <span>\r\n          {followedBy ? (\r\n            <span class=\"tag\">Follows you</span>\r\n          ) : !!lastStatusAt ? (\r\n            <small class=\"insignificant\">\r\n              Last post:{' '}\r\n              <span class=\"ib\">\r\n                {niceDateTime(lastStatusAt, {\r\n                  hideTime: true,\r\n                })}\r\n              </span>\r\n            </small>\r\n          ) : (\r\n            <span />\r\n          )}\r\n          {muting && <span class=\"tag danger\">Muted</span>}\r\n          {blocking && <span class=\"tag danger\">Blocked</span>}\r\n        </span>{' '}\r\n        <span class=\"buttons\">\r\n          {!!privateNote && (\r\n            <button\r\n              type=\"button\"\r\n              class=\"private-note-tag\"\r\n              title=\"Private note\"\r\n              onClick={() => {\r\n                setShowPrivateNoteModal(true);\r\n              }}\r\n              dir=\"auto\"\r\n            >\r\n              <span>{privateNote}</span>\r\n            </button>\r\n          )}\r\n          <Menu2\r\n            portal={{\r\n              target: document.body,\r\n            }}\r\n            containerProps={{\r\n              style: {\r\n                // Higher than the backdrop\r\n                zIndex: 1001,\r\n              },\r\n            }}\r\n            align=\"center\"\r\n            position=\"anchor\"\r\n            overflow=\"auto\"\r\n            menuButton={\r\n              <button\r\n                type=\"button\"\r\n                title=\"More\"\r\n                class=\"plain\"\r\n                disabled={loading}\r\n              >\r\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n              </button>\r\n            }\r\n            onMenuChange={(e) => {\r\n              if (following && e.open) {\r\n                // Fetch lists that have this account\r\n                (async () => {\r\n                  try {\r\n                    const lists = await currentMasto.v1.accounts\r\n                      .$select(accountID.current)\r\n                      .lists.list();\r\n                    console.log('fetched account lists', lists);\r\n                    setLists(lists);\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                  }\r\n                })();\r\n              }\r\n            }}\r\n          >\r\n            {currentAuthenticated && !isSelf && (\r\n              <>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    states.showCompose = {\r\n                      draftStatus: {\r\n                        status: `@${currentInfo?.acct || acct} `,\r\n                      },\r\n                    };\r\n                  }}\r\n                >\r\n                  <Icon icon=\"at\" />\r\n                  <span>Mention @{username}</span>\r\n                </MenuItem>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    setShowTranslatedBio(true);\r\n                  }}\r\n                >\r\n                  <Icon icon=\"translate\" />\r\n                  <span>Translate bio</span>\r\n                </MenuItem>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    setShowPrivateNoteModal(true);\r\n                  }}\r\n                >\r\n                  <Icon icon=\"pencil\" />\r\n                  <span>\r\n                    {privateNote ? 'Edit private note' : 'Add private note'}\r\n                  </span>\r\n                </MenuItem>\r\n                {/* Add/remove from lists is only possible if following the account */}\r\n                {following && (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      setShowAddRemoveLists(true);\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"list\" />\r\n                    {lists.length ? (\r\n                      <>\r\n                        <small class=\"menu-grow\">\r\n                          Add/Remove from Lists\r\n                          <br />\r\n                          <span class=\"more-insignificant\">\r\n                            {lists.map((list) => list.title).join(', ')}\r\n                          </span>\r\n                        </small>\r\n                        <small class=\"more-insignificant\">{lists.length}</small>\r\n                      </>\r\n                    ) : (\r\n                      <span>Add/Remove from Lists</span>\r\n                    )}\r\n                  </MenuItem>\r\n                )}\r\n                <MenuDivider />\r\n              </>\r\n            )}\r\n            <MenuItem href={url} target=\"_blank\">\r\n              <Icon icon=\"external\" />\r\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\r\n            </MenuItem>\r\n            <div class=\"menu-horizontal\">\r\n              <MenuItem\r\n                onClick={() => {\r\n                  // Copy url to clipboard\r\n                  try {\r\n                    navigator.clipboard.writeText(url);\r\n                    showToast('Link copied');\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                    showToast('Unable to copy link');\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"link\" />\r\n                <span>Copy</span>\r\n              </MenuItem>\r\n              {navigator?.share &&\r\n                navigator?.canShare?.({\r\n                  url,\r\n                }) && (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      try {\r\n                        navigator.share({\r\n                          url,\r\n                        });\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        alert(\"Sharing doesn't seem to work.\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"share\" />\r\n                    <span>Share…</span>\r\n                  </MenuItem>\r\n                )}\r\n            </div>\r\n            {!!relationship && (\r\n              <>\r\n                <MenuDivider />\r\n                {muting ? (\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      setRelationshipUIState('loading');\r\n                      (async () => {\r\n                        try {\r\n                          const newRelationship = await currentMasto.v1.accounts\r\n                            .$select(currentInfo?.id || id)\r\n                            .unmute();\r\n                          console.log('unmuting', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Unmuted @${username}`);\r\n                          states.reloadGenericAccounts.id = 'mute';\r\n                          states.reloadGenericAccounts.counter++;\r\n                        } catch (e) {\r\n                          console.error(e);\r\n                          setRelationshipUIState('error');\r\n                        }\r\n                      })();\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"unmute\" />\r\n                    <span>Unmute @{username}</span>\r\n                  </MenuItem>\r\n                ) : (\r\n                  <SubMenu\r\n                    openTrigger=\"clickOnly\"\r\n                    direction=\"bottom\"\r\n                    overflow=\"auto\"\r\n                    shift={16}\r\n                    label={\r\n                      <>\r\n                        <Icon icon=\"mute\" />\r\n                        <span class=\"menu-grow\">Mute @{username}…</span>\r\n                        <span\r\n                          style={{\r\n                            textOverflow: 'clip',\r\n                          }}\r\n                        >\r\n                          <Icon icon=\"time\" />\r\n                          <Icon icon=\"chevron-right\" />\r\n                        </span>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <div class=\"menu-wrap\">\r\n                      {MUTE_DURATIONS.map((duration) => (\r\n                        <MenuItem\r\n                          onClick={() => {\r\n                            setRelationshipUIState('loading');\r\n                            (async () => {\r\n                              try {\r\n                                const newRelationship =\r\n                                  await currentMasto.v1.accounts\r\n                                    .$select(currentInfo?.id || id)\r\n                                    .mute({\r\n                                      duration,\r\n                                    });\r\n                                console.log('muting', newRelationship);\r\n                                setRelationship(newRelationship);\r\n                                setRelationshipUIState('default');\r\n                                showToast(\r\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\r\n                                );\r\n                                states.reloadGenericAccounts.id = 'mute';\r\n                                states.reloadGenericAccounts.counter++;\r\n                              } catch (e) {\r\n                                console.error(e);\r\n                                setRelationshipUIState('error');\r\n                                showToast(`Unable to mute @${username}`);\r\n                              }\r\n                            })();\r\n                          }}\r\n                        >\r\n                          {MUTE_DURATIONS_LABELS[duration]}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </div>\r\n                  </SubMenu>\r\n                )}\r\n                <MenuConfirm\r\n                  subMenu\r\n                  confirm={!blocking}\r\n                  confirmLabel={\r\n                    <>\r\n                      <Icon icon=\"block\" />\r\n                      <span>Block @{username}?</span>\r\n                    </>\r\n                  }\r\n                  menuItemClassName=\"danger\"\r\n                  onClick={() => {\r\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\r\n                    //   return;\r\n                    // }\r\n                    setRelationshipUIState('loading');\r\n                    (async () => {\r\n                      try {\r\n                        if (blocking) {\r\n                          const newRelationship = await currentMasto.v1.accounts\r\n                            .$select(currentInfo?.id || id)\r\n                            .unblock();\r\n                          console.log('unblocking', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Unblocked @${username}`);\r\n                        } else {\r\n                          const newRelationship = await currentMasto.v1.accounts\r\n                            .$select(currentInfo?.id || id)\r\n                            .block();\r\n                          console.log('blocking', newRelationship);\r\n                          setRelationship(newRelationship);\r\n                          setRelationshipUIState('default');\r\n                          showToast(`Blocked @${username}`);\r\n                        }\r\n                        states.reloadGenericAccounts.id = 'block';\r\n                        states.reloadGenericAccounts.counter++;\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        setRelationshipUIState('error');\r\n                        if (blocking) {\r\n                          showToast(`Unable to unblock @${username}`);\r\n                        } else {\r\n                          showToast(`Unable to block @${username}`);\r\n                        }\r\n                      }\r\n                    })();\r\n                  }}\r\n                >\r\n                  {blocking ? (\r\n                    <>\r\n                      <Icon icon=\"unblock\" />\r\n                      <span>Unblock @{username}</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Icon icon=\"block\" />\r\n                      <span>Block @{username}…</span>\r\n                    </>\r\n                  )}\r\n                </MenuConfirm>\r\n                {/* <MenuItem>\r\n                <Icon icon=\"flag\" />\r\n                <span>Report @{username}…</span>\r\n              </MenuItem> */}\r\n              </>\r\n            )}\r\n          </Menu2>\r\n          {!relationship && relationshipUIState === 'loading' && (\r\n            <Loader abrupt />\r\n          )}\r\n          {!!relationship && (\r\n            <MenuConfirm\r\n              confirm={following || requested}\r\n              confirmLabel={\r\n                <span>\r\n                  {requested\r\n                    ? 'Withdraw follow request?'\r\n                    : `Unfollow @${info.acct || info.username}?`}\r\n                </span>\r\n              }\r\n              menuItemClassName=\"danger\"\r\n              align=\"end\"\r\n              disabled={loading}\r\n              onClick={() => {\r\n                setRelationshipUIState('loading');\r\n                (async () => {\r\n                  try {\r\n                    let newRelationship;\r\n\r\n                    if (following || requested) {\r\n                      // const yes = confirm(\r\n                      //   requested\r\n                      //     ? 'Withdraw follow request?'\r\n                      //     : `Unfollow @${info.acct || info.username}?`,\r\n                      // );\r\n\r\n                      // if (yes) {\r\n                      newRelationship = await currentMasto.v1.accounts\r\n                        .$select(accountID.current)\r\n                        .unfollow();\r\n                      // }\r\n                    } else {\r\n                      newRelationship = await currentMasto.v1.accounts\r\n                        .$select(accountID.current)\r\n                        .follow();\r\n                    }\r\n\r\n                    if (newRelationship) setRelationship(newRelationship);\r\n                    setRelationshipUIState('default');\r\n                  } catch (e) {\r\n                    alert(e);\r\n                    setRelationshipUIState('error');\r\n                  }\r\n                })();\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class={`${following || requested ? 'light swap' : ''}`}\r\n                data-swap-state={following || requested ? 'danger' : ''}\r\n                disabled={loading}\r\n              >\r\n                {following ? (\r\n                  <>\r\n                    <span>Following</span>\r\n                    <span>Unfollow…</span>\r\n                  </>\r\n                ) : requested ? (\r\n                  <>\r\n                    <span>Requested</span>\r\n                    <span>Withdraw…</span>\r\n                  </>\r\n                ) : locked ? (\r\n                  <>\r\n                    <Icon icon=\"lock\" /> <span>Follow</span>\r\n                  </>\r\n                ) : (\r\n                  'Follow'\r\n                )}\r\n              </button>\r\n            </MenuConfirm>\r\n          )}\r\n        </span>\r\n      </div>\r\n      {!!showTranslatedBio && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            setShowTranslatedBio(false);\r\n          }}\r\n        >\r\n          <TranslatedBioSheet\r\n            note={note}\r\n            fields={fields}\r\n            onClose={() => setShowTranslatedBio(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!showAddRemoveLists && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            setShowAddRemoveLists(false);\r\n          }}\r\n        >\r\n          <AddRemoveListsSheet\r\n            accountID={accountID.current}\r\n            onClose={() => setShowAddRemoveLists(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!showPrivateNoteModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            setShowPrivateNoteModal(false);\r\n          }}\r\n        >\r\n          <PrivateNoteSheet\r\n            account={info}\r\n            note={privateNote}\r\n            onRelationshipChange={(relationship) => {\r\n              setRelationship(relationship);\r\n              // onRelationshipChange({ relationship, currentID: accountID.current });\r\n            }}\r\n            onClose={() => setShowPrivateNoteModal(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// Apply more alpha if high luminence\r\nfunction lightenRGB([r, g, b]) {\r\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n  console.log('luminence', luminence);\r\n  let alpha;\r\n  if (luminence >= 220) {\r\n    alpha = 1;\r\n  } else if (luminence <= 50) {\r\n    alpha = 0.1;\r\n  } else {\r\n    alpha = luminence / 255;\r\n  }\r\n  alpha = Math.min(1, alpha);\r\n  return [r, g, b, alpha];\r\n}\r\n\r\nfunction niceAccountURL(url) {\r\n  if (!url) return;\r\n  const urlObj = new URL(url);\r\n  const { host, pathname } = urlObj;\r\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\r\n  return (\r\n    <>\r\n      <span class=\"more-insignificant\">{host}/</span>\r\n      <wbr />\r\n      <span>{path}</span>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TranslatedBioSheet({ note, fields, onClose }) {\r\n  const fieldsText =\r\n    fields\r\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\r\n      .join('\\n\\n') || '';\r\n\r\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Translated Bio</h2>\r\n      </header>\r\n      <main>\r\n        <p\r\n          style={{\r\n            whiteSpace: 'pre-wrap',\r\n          }}\r\n        >\r\n          {text}\r\n        </p>\r\n        <TranslationBlock forceTranslate text={text} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AddRemoveListsSheet({ accountID, onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [lists, setLists] = useState([]);\r\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const lists = await masto.v1.lists.list();\r\n        lists.sort((a, b) => a.title.localeCompare(b.title));\r\n        const listsContainingAccount = await masto.v1.accounts\r\n          .$select(accountID)\r\n          .lists.list();\r\n        console.log({ lists, listsContainingAccount });\r\n        setLists(lists);\r\n        setListsContainingAccount(listsContainingAccount);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n\r\n  return (\r\n    <div class=\"sheet\" id=\"list-add-remove-container\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Add/Remove from Lists</h2>\r\n      </header>\r\n      <main>\r\n        {lists.length > 0 ? (\r\n          <ul class=\"list-add-remove\">\r\n            {lists.map((list) => {\r\n              const inList = listsContainingAccount.some(\r\n                (l) => l.id === list.id,\r\n              );\r\n              return (\r\n                <li>\r\n                  <button\r\n                    type=\"button\"\r\n                    class={`light ${inList ? 'checked' : ''}`}\r\n                    disabled={uiState === 'loading'}\r\n                    onClick={() => {\r\n                      setUIState('loading');\r\n                      (async () => {\r\n                        try {\r\n                          if (inList) {\r\n                            await masto.v1.lists\r\n                              .$select(list.id)\r\n                              .accounts.remove({\r\n                                accountIds: [accountID],\r\n                              });\r\n                          } else {\r\n                            await masto.v1.lists\r\n                              .$select(list.id)\r\n                              .accounts.create({\r\n                                accountIds: [accountID],\r\n                              });\r\n                          }\r\n                          // setUIState('default');\r\n                          reload();\r\n                        } catch (e) {\r\n                          console.error(e);\r\n                          setUIState('error');\r\n                          alert(\r\n                            inList\r\n                              ? 'Unable to remove from list.'\r\n                              : 'Unable to add to list.',\r\n                          );\r\n                        }\r\n                      })();\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"check-circle\" />\r\n                    <span>{list.title}</span>\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        ) : uiState === 'loading' ? (\r\n          <p class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </p>\r\n        ) : uiState === 'error' ? (\r\n          <p class=\"ui-state\">Unable to load lists.</p>\r\n        ) : (\r\n          <p class=\"ui-state\">No lists.</p>\r\n        )}\r\n        <button\r\n          type=\"button\"\r\n          class=\"plain2\"\r\n          onClick={() => setShowListAddEditModal(true)}\r\n          disabled={uiState !== 'default'}\r\n        >\r\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\r\n        </button>\r\n      </main>\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success') {\r\n                reload();\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PrivateNoteSheet({\r\n  account,\r\n  note: initialNote,\r\n  onRelationshipChange = () => {},\r\n  onClose = () => {},\r\n}) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const textareaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (textareaRef.current && !initialNote) {\r\n      timer = setTimeout(() => {\r\n        textareaRef.current.focus?.();\r\n      }, 100);\r\n    }\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div class=\"sheet\" id=\"private-note-container\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <b>Private note about @{account?.username || account?.acct}</b>\r\n      </header>\r\n      <main>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const note = formData.get('note');\r\n            if (note?.trim() !== initialNote?.trim()) {\r\n              setUIState('loading');\r\n              (async () => {\r\n                try {\r\n                  const newRelationship = await masto.v1.accounts\r\n                    .$select(account?.id)\r\n                    .note.create({\r\n                      comment: note,\r\n                    });\r\n                  console.log('updated relationship', newRelationship);\r\n                  setUIState('default');\r\n                  onRelationshipChange(newRelationship);\r\n                  onClose();\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  setUIState('error');\r\n                  alert(e?.message || 'Unable to update private note.');\r\n                }\r\n              })();\r\n            }\r\n          }}\r\n        >\r\n          <textarea\r\n            ref={textareaRef}\r\n            name=\"note\"\r\n            disabled={uiState === 'loading'}\r\n          >\r\n            {initialNote}\r\n          </textarea>\r\n          <footer>\r\n            <button\r\n              type=\"button\"\r\n              class=\"light\"\r\n              disabled={uiState === 'loading'}\r\n              onClick={() => {\r\n                onClose?.();\r\n              }}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <span>\r\n              <Loader abrupt hidden={uiState !== 'loading'} />\r\n              <button disabled={uiState === 'loading'} type=\"submit\">\r\n                Save &amp; close\r\n              </button>\r\n            </span>\r\n          </footer>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountInfo;\r\n","import { useEffect } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\nimport useLocationChange from '../utils/useLocationChange';\r\n\r\nimport AccountInfo from './account-info';\r\nimport Icon from './icon';\r\n\r\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\r\n  const { masto, instance, authenticated } = api({ instance: propInstance });\r\n  const isString = typeof account === 'string';\r\n\r\n  useEffect(() => {\r\n    if (!isString) {\r\n      states.accounts[`${account.id}@${instance}`] = account;\r\n    }\r\n  }, [account]);\r\n\r\n  useLocationChange(onClose);\r\n\r\n  return (\r\n    <div\r\n      class=\"sheet\"\r\n      // onClick={(e) => {\r\n      //   const accountBlock = e.target.closest('.account-block');\r\n      //   if (accountBlock) {\r\n      //     onClose({\r\n      //       destination: 'account-statuses',\r\n      //     });\r\n      //   }\r\n      // }}\r\n    >\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <AccountInfo\r\n        instance={instance}\r\n        authenticated={authenticated}\r\n        account={account}\r\n        fetchAccount={async () => {\r\n          if (isString) {\r\n            try {\r\n              const info = await masto.v1.accounts.lookup({\r\n                acct: account,\r\n                skip_webfinger: false,\r\n              });\r\n              return info;\r\n            } catch (e) {\r\n              const result = await masto.v2.search.fetch({\r\n                q: account,\r\n                type: 'accounts',\r\n                limit: 1,\r\n                resolve: authenticated,\r\n              });\r\n              if (result.accounts.length) {\r\n                return result.accounts[0];\r\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\r\n                const accountURL = new URL(account);\r\n                const { hostname, pathname } = accountURL;\r\n                const acct =\r\n                  pathname.replace(/^\\//, '').replace(/\\/$/, '') +\r\n                  '@' +\r\n                  hostname;\r\n                const result = await masto.v2.search.fetch({\r\n                  q: acct,\r\n                  type: 'accounts',\r\n                  limit: 1,\r\n                  resolve: authenticated,\r\n                });\r\n                if (result.accounts.length) {\r\n                  return result.accounts[0];\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            return account;\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountSheet;\r\n","import './drafts.css';\r\n\r\nimport { useEffect, useMemo, useReducer, useState } from 'react';\r\n\r\nimport { api } from '../utils/api';\r\nimport db from '../utils/db';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport states from '../utils/states';\r\nimport { getCurrentAccountNS } from '../utils/store-utils';\r\n\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\nimport MenuConfirm from './menu-confirm';\r\n\r\nfunction Drafts({ onClose }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [drafts, setDrafts] = useState([]);\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const keys = await db.drafts.keys();\r\n        if (keys.length) {\r\n          const ns = getCurrentAccountNS();\r\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\r\n          if (ownKeys.length) {\r\n            const drafts = await db.drafts.getMany(ownKeys);\r\n            drafts.sort(\r\n              (a, b) =>\r\n                new Date(b.updatedAt).getTime() -\r\n                new Date(a.updatedAt).getTime(),\r\n            );\r\n            setDrafts(drafts);\r\n          } else {\r\n            setDrafts([]);\r\n          }\r\n        } else {\r\n          setDrafts([]);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const hasDrafts = drafts?.length > 0;\r\n\r\n  return (\r\n    <div class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\r\n        </h2>\r\n        {hasDrafts && (\r\n          <div class=\"insignificant\">\r\n            Looks like you have unsent drafts. Let's continue where you left\r\n            off.\r\n          </div>\r\n        )}\r\n      </header>\r\n      <main>\r\n        {hasDrafts ? (\r\n          <>\r\n            <ul class=\"drafts-list\">\r\n              {drafts.map((draft) => {\r\n                const { updatedAt, key, draftStatus, replyTo } = draft;\r\n                const updatedAtDate = new Date(updatedAt);\r\n                return (\r\n                  <li key={updatedAt}>\r\n                    <div class=\"mini-draft-meta\">\r\n                      <b>\r\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\r\n                        <time>\r\n                          {!!replyTo && (\r\n                            <>\r\n                              @{replyTo.account.acct}\r\n                              <br />\r\n                            </>\r\n                          )}\r\n                          {niceDateTime(updatedAtDate)}\r\n                        </time>\r\n                      </b>\r\n                      <MenuConfirm\r\n                        confirmLabel={<span>Delete this draft?</span>}\r\n                        menuItemClassName=\"danger\"\r\n                        align=\"end\"\r\n                        disabled={uiState === 'loading'}\r\n                        onClick={() => {\r\n                          (async () => {\r\n                            try {\r\n                              // const yes = confirm('Delete this draft?');\r\n                              // if (yes) {\r\n                              await db.drafts.del(key);\r\n                              reload();\r\n                              // }\r\n                            } catch (e) {\r\n                              alert('Error deleting draft! Please try again.');\r\n                            }\r\n                          })();\r\n                        }}\r\n                      >\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"small light\"\r\n                          disabled={uiState === 'loading'}\r\n                        >\r\n                          Delete&hellip;\r\n                        </button>\r\n                      </MenuConfirm>\r\n                    </div>\r\n                    <button\r\n                      type=\"button\"\r\n                      disabled={uiState === 'loading'}\r\n                      class=\"draft-item\"\r\n                      onClick={async () => {\r\n                        // console.log({ draftStatus });\r\n                        let replyToStatus;\r\n                        if (replyTo) {\r\n                          setUIState('loading');\r\n                          try {\r\n                            replyToStatus = await masto.v1.statuses\r\n                              .$select(replyTo.id)\r\n                              .fetch();\r\n                          } catch (e) {\r\n                            console.error(e);\r\n                            alert('Error fetching reply-to status!');\r\n                            setUIState('default');\r\n                            return;\r\n                          }\r\n                          setUIState('default');\r\n                        }\r\n                        window.__COMPOSE__ = {\r\n                          draftStatus,\r\n                          replyToStatus,\r\n                        };\r\n                        states.showCompose = true;\r\n                        states.showDrafts = false;\r\n                      }}\r\n                    >\r\n                      <MiniDraft draft={draft} />\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            {drafts.length > 1 && (\r\n              <p>\r\n                <MenuConfirm\r\n                  confirmLabel={<span>Delete all drafts?</span>}\r\n                  menuItemClassName=\"danger\"\r\n                  disabled={uiState === 'loading'}\r\n                  onClick={() => {\r\n                    (async () => {\r\n                      // const yes = confirm('Delete all drafts?');\r\n                      // if (yes) {\r\n                      setUIState('loading');\r\n                      try {\r\n                        await db.drafts.delMany(\r\n                          drafts.map((draft) => draft.key),\r\n                        );\r\n                        setUIState('default');\r\n                        reload();\r\n                      } catch (e) {\r\n                        console.error(e);\r\n                        alert('Error deleting drafts! Please try again.');\r\n                        setUIState('error');\r\n                      }\r\n                      // }\r\n                    })();\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"light danger\"\r\n                    disabled={uiState === 'loading'}\r\n                  >\r\n                    Delete all&hellip;\r\n                  </button>\r\n                </MenuConfirm>\r\n              </p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <p>No drafts found.</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MiniDraft({ draft }) {\r\n  const { draftStatus, replyTo } = draft;\r\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\r\n  const hasPoll = poll?.options?.length > 0;\r\n  const hasMedia = mediaAttachments?.length > 0;\r\n  const hasPollOrMedia = hasPoll || hasMedia;\r\n  const firstImageMedia = useMemo(() => {\r\n    if (!hasMedia) return;\r\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\r\n    if (!image) return;\r\n    const { file } = image;\r\n    const objectURL = URL.createObjectURL(file);\r\n    return objectURL;\r\n  }, [hasMedia, mediaAttachments]);\r\n  return (\r\n    <>\r\n      <div class=\"mini-draft\">\r\n        {hasPollOrMedia && (\r\n          <div\r\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\r\n            style={\r\n              firstImageMedia\r\n                ? {\r\n                    '--bg-image': `url(${firstImageMedia})`,\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {hasPoll && <Icon icon=\"poll\" />}\r\n            {hasMedia && (\r\n              <span>\r\n                <Icon icon=\"attachment\" />{' '}\r\n                <small>{mediaAttachments?.length}</small>\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div class=\"mini-draft-main\">\r\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\r\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Drafts;\r\n","import './embed-modal.css';\r\n\r\nimport Icon from './icon';\r\n\r\nfunction EmbedModal({ html, url, width, height, onClose = () => {} }) {\r\n  return (\r\n    <div class=\"embed-modal-container\">\r\n      <div class=\"top-controls\">\r\n        <button type=\"button\" class=\"light\" onClick={() => onClose()}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n        {url && (\r\n          <a\r\n            href={url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            class=\"button plain\"\r\n          >\r\n            <span>Open link</span> <Icon icon=\"external\" />\r\n          </a>\r\n        )}\r\n      </div>\r\n      <div\r\n        class=\"embed-content\"\r\n        dangerouslySetInnerHTML={{ __html: html }}\r\n        style={{\r\n          '--width': width + 'px',\r\n          '--height': height + 'px',\r\n          '--aspect-ratio': `${width}/${height}`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmbedModal;\r\n","import { api } from './api';\r\nimport store from './store';\r\n\r\nexport async function fetchRelationships(accounts, relationshipsMap = {}) {\r\n  if (!accounts?.length) return;\r\n  const { masto } = api();\r\n\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const uniqueAccountIds = accounts.reduce((acc, a) => {\r\n    // 1. Ignore duplicate accounts\r\n    // 2. Ignore accounts that are already inside relationshipsMap\r\n    // 3. Ignore currently logged in account\r\n    if (\r\n      !acc.includes(a.id) &&\r\n      !relationshipsMap[a.id] &&\r\n      a.id !== currentAccount\r\n    ) {\r\n      acc.push(a.id);\r\n    }\r\n    return acc;\r\n  }, []);\r\n  if (!uniqueAccountIds.length) return null;\r\n\r\n  try {\r\n    const relationships = await masto.v1.accounts.relationships.fetch({\r\n      id: uniqueAccountIds,\r\n    });\r\n    const newRelationshipsMap = relationships.reduce((acc, r) => {\r\n      acc[r.id] = r;\r\n      return acc;\r\n    }, {});\r\n    return newRelationshipsMap;\r\n  } catch (e) {\r\n    console.error(e);\r\n    // It's okay to fail\r\n    return null;\r\n  }\r\n}\r\n","import './generic-accounts.css';\r\n\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport { fetchRelationships } from '../utils/relationships';\r\nimport states from '../utils/states';\r\nimport useLocationChange from '../utils/useLocationChange';\r\n\r\nimport AccountBlock from './account-block';\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\n\r\nexport default function GenericAccounts({\r\n  instance,\r\n  excludeRelationshipAttrs = [],\r\n  onClose = () => {},\r\n}) {\r\n  const { masto, instance: currentInstance } = api();\r\n  const isCurrentInstance = instance ? instance === currentInstance : true;\r\n  const snapStates = useSnapshot(states);\r\n  ``;\r\n  const [uiState, setUIState] = useState('default');\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  useLocationChange(onClose);\r\n\r\n  if (!snapStates.showGenericAccounts) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    id,\r\n    heading,\r\n    fetchAccounts,\r\n    accounts: staticAccounts,\r\n    showReactions,\r\n  } = snapStates.showGenericAccounts;\r\n\r\n  const [relationshipsMap, setRelationshipsMap] = useState({});\r\n\r\n  const loadRelationships = async (accounts) => {\r\n    if (!accounts?.length) return;\r\n    if (!isCurrentInstance) return;\r\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\r\n    if (relationships) {\r\n      setRelationshipsMap({\r\n        ...relationshipsMap,\r\n        ...relationships,\r\n      });\r\n    }\r\n  };\r\n\r\n  const loadAccounts = (firstLoad) => {\r\n    if (!fetchAccounts) return;\r\n    if (firstLoad) setAccounts([]);\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const { done, value } = await fetchAccounts(firstLoad);\r\n        if (Array.isArray(value)) {\r\n          if (firstLoad) {\r\n            const accounts = [];\r\n            for (let i = 0; i < value.length; i++) {\r\n              const account = value[i];\r\n              const theAccount = accounts.find(\r\n                (a, j) => a.id === account.id && i !== j,\r\n              );\r\n              if (!theAccount) {\r\n                accounts.push({\r\n                  _types: [],\r\n                  ...account,\r\n                });\r\n              } else {\r\n                theAccount._types.push(...account._types);\r\n              }\r\n            }\r\n            setAccounts(accounts);\r\n          } else {\r\n            // setAccounts((prev) => [...prev, ...value]);\r\n            // Merge accounts by id and _types\r\n            setAccounts((prev) => {\r\n              const newAccounts = prev;\r\n              for (const account of value) {\r\n                const theAccount = newAccounts.find((a) => a.id === account.id);\r\n                if (!theAccount) {\r\n                  newAccounts.push(account);\r\n                } else {\r\n                  theAccount._types.push(...account._types);\r\n                }\r\n              }\r\n              return newAccounts;\r\n            });\r\n          }\r\n          setShowMore(!done);\r\n\r\n          loadRelationships(value);\r\n        } else {\r\n          setShowMore(false);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  const firstLoad = useRef(true);\r\n  useEffect(() => {\r\n    if (staticAccounts?.length > 0) {\r\n      setAccounts(staticAccounts);\r\n      loadRelationships(staticAccounts);\r\n    } else {\r\n      loadAccounts(true);\r\n      firstLoad.current = false;\r\n    }\r\n  }, [staticAccounts, fetchAccounts]);\r\n\r\n  useEffect(() => {\r\n    if (firstLoad.current) return;\r\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\r\n    // We only need to reload if the id matches\r\n    if (snapStates.reloadGenericAccounts?.id === id) {\r\n      loadAccounts(true);\r\n    }\r\n  }, [snapStates.reloadGenericAccounts.counter]);\r\n\r\n  return (\r\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\r\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n        <Icon icon=\"x\" />\r\n      </button>\r\n      <header>\r\n        <h2>{heading || 'Accounts'}</h2>\r\n      </header>\r\n      <main>\r\n        {accounts.length > 0 ? (\r\n          <>\r\n            <ul class=\"accounts-list\">\r\n              {accounts.map((account) => {\r\n                const relationship = relationshipsMap[account.id];\r\n                const key = `${account.id}-${account._types?.length || ''}`;\r\n                return (\r\n                  <li key={key}>\r\n                    {showReactions && account._types?.length > 0 && (\r\n                      <div class=\"reactions-block\">\r\n                        {account._types.map((type) => (\r\n                          <Icon\r\n                            icon={\r\n                              {\r\n                                reblog: 'rocket',\r\n                                favourite: 'heart',\r\n                              }[type]\r\n                            }\r\n                            class={`${type}-icon`}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                    <div class=\"account-relationships\">\r\n                      <AccountBlock\r\n                        account={account}\r\n                        showStats\r\n                        relationship={relationship}\r\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\r\n                      />\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            {uiState === 'default' ? (\r\n              showMore ? (\r\n                <InView\r\n                  onChange={(inView) => {\r\n                    if (inView) {\r\n                      loadAccounts();\r\n                    }\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain block\"\r\n                    onClick={() => loadAccounts()}\r\n                  >\r\n                    Show more&hellip;\r\n                  </button>\r\n                </InView>\r\n              ) : (\r\n                <p class=\"ui-state insignificant\">The end.</p>\r\n              )\r\n            ) : (\r\n              uiState === 'loading' && (\r\n                <p class=\"ui-state\">\r\n                  <Loader abrupt />\r\n                </p>\r\n              )\r\n            )}\r\n          </>\r\n        ) : uiState === 'loading' ? (\r\n          <p class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </p>\r\n        ) : uiState === 'error' ? (\r\n          <p class=\"ui-state\">Error loading accounts</p>\r\n        ) : (\r\n          <p class=\"ui-state insignificant\">Nothing to show</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport localeMatch from '../utils/locale-match';\r\nimport { speak, supportsTTS } from '../utils/speech';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport Menu2 from './menu2';\r\nimport TranslationBlock from './translation-block';\r\n\r\nexport default function MediaAltModal({ alt, lang, onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const [forceTranslate, setForceTranslate] = useState(false);\r\n  const targetLanguage = getTranslateTargetLanguage(true);\r\n  const contentTranslationHideLanguages =\r\n    snapStates.settings.contentTranslationHideLanguages || [];\r\n  const differentLanguage =\r\n    !!lang &&\r\n    lang !== targetLanguage &&\r\n    !localeMatch([lang], [targetLanguage]) &&\r\n    !contentTranslationHideLanguages.find(\r\n      (l) => lang === l || localeMatch([lang], [l]),\r\n    );\r\n\r\n  return (\r\n    <div class=\"sheet\" tabindex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header class=\"header-grid\">\r\n        <h2>Media description</h2>\r\n        <div class=\"header-side\">\r\n          <Menu2\r\n            align=\"end\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"plain4\">\r\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuItem\r\n              disabled={forceTranslate}\r\n              onClick={() => {\r\n                setForceTranslate(true);\r\n              }}\r\n            >\r\n              <Icon icon=\"translate\" />\r\n              <span>Translate</span>\r\n            </MenuItem>\r\n            {supportsTTS && (\r\n              <MenuItem\r\n                onClick={() => {\r\n                  speak(alt, lang);\r\n                }}\r\n              >\r\n                <Icon icon=\"speak\" />\r\n                <span>Speak</span>\r\n              </MenuItem>\r\n            )}\r\n          </Menu2>\r\n        </div>\r\n      </header>\r\n      <main lang={lang} dir=\"auto\">\r\n        <p\r\n          style={{\r\n            whiteSpace: 'pre-wrap',\r\n            textWrap: 'pretty',\r\n          }}\r\n        >\r\n          {alt}\r\n        </p>\r\n        {(differentLanguage || forceTranslate) && (\r\n          <TranslationBlock\r\n            forceTranslate={forceTranslate}\r\n            sourceLanguage={lang}\r\n            text={alt}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\r\nfunction clamp(value, min, max) {\r\n  return Math.max(Math.min(value, max), min);\r\n}\r\n\r\nconst gammaToLinear = (c) =>\r\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\r\nconst linearToGamma = (c) =>\r\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\r\n\r\nexport function rgb2oklab([r, g, b]) {\r\n  r = gammaToLinear(r / 255);\r\n  g = gammaToLinear(g / 255);\r\n  b = gammaToLinear(b / 255);\r\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\r\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\r\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\r\n  l = Math.cbrt(l);\r\n  m = Math.cbrt(m);\r\n  s = Math.cbrt(s);\r\n  return [\r\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\r\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\r\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\r\n  ];\r\n}\r\n\r\nexport function oklab2rgb([L, a, b]) {\r\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\r\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\r\n  var s = L + a * -0.0894841775 + b * -1.291485548;\r\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\r\n  l = l ** 3;\r\n  m = m ** 3;\r\n  s = s ** 3;\r\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\r\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\r\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\r\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\r\n  r = 255 * linearToGamma(r);\r\n  g = 255 * linearToGamma(g);\r\n  b = 255 * linearToGamma(b);\r\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\r\n  r = clamp(r, 0, 255);\r\n  g = clamp(g, 0, 255);\r\n  b = clamp(b, 0, 255);\r\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\r\n  r = Math.round(r);\r\n  g = Math.round(g);\r\n  b = Math.round(b);\r\n  return [r, g, b];\r\n}\r\n","import { MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { getBlurHashAverageColor } from 'fast-blurhash';\r\nimport {\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Media from './media';\r\nimport Menu2 from './menu2';\r\nimport MenuLink from './menu-link';\r\n\r\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\r\n\r\nfunction MediaModal({\r\n  mediaAttachments,\r\n  statusID,\r\n  instance,\r\n  lang,\r\n  index = 0,\r\n  onClose = () => {},\r\n}) {\r\n  const [uiState, setUIState] = useState('default');\r\n  const carouselRef = useRef(null);\r\n\r\n  const [currentIndex, setCurrentIndex] = useState(index);\r\n  const carouselFocusItem = useRef(null);\r\n  useLayoutEffect(() => {\r\n    carouselFocusItem.current?.scrollIntoView();\r\n\r\n    // history.pushState({ mediaModal: true }, '');\r\n    // const handlePopState = (e) => {\r\n    //   if (e.state?.mediaModal) {\r\n    //     onClose();\r\n    //   }\r\n    // };\r\n    // window.addEventListener('popstate', handlePopState);\r\n    // return () => {\r\n    //   window.removeEventListener('popstate', handlePopState);\r\n    // };\r\n  }, []);\r\n  const prevStatusID = useRef(statusID);\r\n  useEffect(() => {\r\n    const scrollLeft = index * carouselRef.current.clientWidth;\r\n    const differentStatusID = prevStatusID.current !== statusID;\r\n    if (differentStatusID) prevStatusID.current = statusID;\r\n    carouselRef.current.scrollTo({\r\n      left: scrollLeft,\r\n      behavior: differentStatusID ? 'auto' : 'smooth',\r\n    });\r\n    carouselRef.current.focus();\r\n  }, [index, statusID]);\r\n\r\n  const [showControls, setShowControls] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let handleSwipe = () => {\r\n      onClose();\r\n    };\r\n    if (carouselRef.current) {\r\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\r\n    }\r\n    return () => {\r\n      if (carouselRef.current) {\r\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useHotkeys(\r\n    'esc',\r\n    onClose,\r\n    {\r\n      ignoreEventWhen: (e) => {\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return hasModal;\r\n      },\r\n    },\r\n    [onClose],\r\n  );\r\n\r\n  useEffect(() => {\r\n    let handleScroll = () => {\r\n      const { clientWidth, scrollLeft } = carouselRef.current;\r\n      const index = Math.round(scrollLeft / clientWidth);\r\n      setCurrentIndex(index);\r\n    };\r\n    if (carouselRef.current) {\r\n      carouselRef.current.addEventListener('scroll', handleScroll, {\r\n        passive: true,\r\n      });\r\n    }\r\n    return () => {\r\n      if (carouselRef.current) {\r\n        carouselRef.current.removeEventListener('scroll', handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => {\r\n      carouselRef.current?.focus?.();\r\n    }, 100);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const mediaAccentColors = useMemo(() => {\r\n    return mediaAttachments?.map((media) => {\r\n      const { blurhash } = media;\r\n      if (blurhash) {\r\n        const averageColor = getBlurHashAverageColor(blurhash);\r\n        const labAverageColor = rgb2oklab(averageColor);\r\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\r\n      }\r\n      return null;\r\n    });\r\n  }, [mediaAttachments]);\r\n  const mediaAccentGradient = useMemo(() => {\r\n    const gap = 5;\r\n    const range = 100 / mediaAccentColors.length;\r\n    return (\r\n      mediaAccentColors\r\n        ?.map((color, i) => {\r\n          const start = i * range + gap;\r\n          const end = (i + 1) * range - gap;\r\n          if (color) {\r\n            return `\r\n            rgba(${color?.join(',')}, 0.4) ${start}%,\r\n            rgba(${color?.join(',')}, 0.4) ${end}%\r\n          `;\r\n          }\r\n\r\n          return `\r\n            transparent ${start}%,\r\n            transparent ${end}%\r\n          `;\r\n        })\r\n        ?.join(', ') || 'transparent'\r\n    );\r\n  }, [mediaAccentColors]);\r\n\r\n  let toastRef = useRef(null);\r\n  useEffect(() => {\r\n    return () => {\r\n      toastRef.current?.hideToast?.();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\r\n    >\r\n      <div\r\n        ref={carouselRef}\r\n        tabIndex=\"0\"\r\n        data-swipe-threshold=\"44\"\r\n        class=\"carousel\"\r\n        onClick={(e) => {\r\n          if (\r\n            e.target.classList.contains('carousel-item') ||\r\n            e.target.classList.contains('media') ||\r\n            e.target.classList.contains('media-zoom')\r\n          ) {\r\n            onClose();\r\n          }\r\n        }}\r\n        style={\r\n          mediaAttachments.length > 1\r\n            ? {\r\n                backgroundAttachment: 'local',\r\n                backgroundImage: `linear-gradient(\r\n            to right, ${mediaAccentGradient})`,\r\n              }\r\n            : {}\r\n        }\r\n      >\r\n        {mediaAttachments?.map((media, i) => {\r\n          const accentColor =\r\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\r\n          return (\r\n            <div\r\n              class=\"carousel-item\"\r\n              style={\r\n                accentColor\r\n                  ? {\r\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\r\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\r\n                        ',',\r\n                      )}, 0.4)`,\r\n                    }\r\n                  : {}\r\n              }\r\n              tabindex=\"0\"\r\n              key={media.id}\r\n              ref={i === currentIndex ? carouselFocusItem : null}\r\n              onClick={(e) => {\r\n                // console.log(e);\r\n                // if (e.target !== e.currentTarget) {\r\n                //   setShowControls(!showControls);\r\n                // }\r\n                if (!e.target.classList.contains('media')) {\r\n                  setShowControls(!showControls);\r\n                }\r\n              }}\r\n            >\r\n              {!!media.description && (\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"media-alt\"\r\n                  hidden={!showControls}\r\n                  onClick={() => {\r\n                    states.showMediaAlt = {\r\n                      alt: media.description,\r\n                      lang,\r\n                    };\r\n                  }}\r\n                >\r\n                  <span class=\"alt-badge\">ALT</span>\r\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\r\n                    {media.description}\r\n                  </span>\r\n                </button>\r\n              )}\r\n              <Media media={media} showOriginal lang={lang} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\r\n        <span>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            onClick={() => onClose()}\r\n          >\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n        </span>\r\n        {mediaAttachments?.length > 1 ? (\r\n          <span class=\"carousel-dots\">\r\n            {mediaAttachments?.map((media, i) => (\r\n              <button\r\n                key={media.id}\r\n                type=\"button\"\r\n                disabled={i === currentIndex}\r\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  carouselRef.current.scrollTo({\r\n                    left: carouselRef.current.clientWidth * i,\r\n                    behavior: 'smooth',\r\n                  });\r\n                  carouselRef.current.focus();\r\n                }}\r\n              >\r\n                <Icon icon=\"round\" size=\"s\" />\r\n              </button>\r\n            ))}\r\n          </span>\r\n        ) : (\r\n          <span />\r\n        )}\r\n        <span>\r\n          <Menu2\r\n            overflow=\"auto\"\r\n            align=\"end\"\r\n            position=\"anchor\"\r\n            gap={4}\r\n            menuClassName=\"glass-menu\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"carousel-button\">\r\n                <Icon icon=\"more\" alt=\"More\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuLink\r\n              href={\r\n                mediaAttachments[currentIndex]?.remoteUrl ||\r\n                mediaAttachments[currentIndex]?.url\r\n              }\r\n              class=\"carousel-button\"\r\n              target=\"_blank\"\r\n              title=\"Open original media in new window\"\r\n            >\r\n              <Icon icon=\"popout\" />\r\n              <span>Open original media</span>\r\n            </MenuLink>\r\n            {import.meta.env.DEV && // Only dev for now\r\n              !!states.settings.mediaAltGenerator &&\r\n              !!IMG_ALT_API_URL &&\r\n              !!mediaAttachments[currentIndex]?.url &&\r\n              !mediaAttachments[currentIndex]?.description &&\r\n              mediaAttachments[currentIndex]?.type === 'image' && (\r\n                <>\r\n                  <MenuDivider />\r\n                  <MenuItem\r\n                    disabled={uiState === 'loading'}\r\n                    onClick={() => {\r\n                      setUIState('loading');\r\n                      toastRef.current = showToast({\r\n                        text: 'Attempting to describe image. Please wait...',\r\n                        duration: -1,\r\n                      });\r\n                      (async function () {\r\n                        try {\r\n                          const response = await fetch(\r\n                            `${IMG_ALT_API_URL}?image=${encodeURIComponent(\r\n                              mediaAttachments[currentIndex]?.url,\r\n                            )}`,\r\n                          ).then((r) => r.json());\r\n                          states.showMediaAlt = {\r\n                            alt: response.description,\r\n                          };\r\n                        } catch (e) {\r\n                          console.error(e);\r\n                          showToast('Failed to describe image');\r\n                        } finally {\r\n                          setUIState('default');\r\n                          toastRef.current?.hideToast?.();\r\n                        }\r\n                      })();\r\n                    }}\r\n                  >\r\n                    <Icon icon=\"sparkles2\" />\r\n                    <span>Describe image…</span>\r\n                  </MenuItem>\r\n                </>\r\n              )}\r\n          </Menu2>{' '}\r\n          <Link\r\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\r\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\r\n                ? `?media=${currentIndex + 1}`\r\n                : ''\r\n            }`}\r\n            class=\"button carousel-button media-post-link\"\r\n            // onClick={() => {\r\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\r\n            //   if (\r\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\r\n            //   ) {\r\n            //     onClose();\r\n            //   }\r\n            // }}\r\n          >\r\n            <span class=\"button-label\">View post </span>&raquo;\r\n          </Link>\r\n        </span>\r\n      </div>\r\n      {mediaAttachments?.length > 1 && (\r\n        <div class=\"carousel-controls\" hidden={!showControls}>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            hidden={currentIndex === 0}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              carouselRef.current.focus();\r\n              carouselRef.current.scrollTo({\r\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"arrow-left\" />\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"carousel-button\"\r\n            hidden={currentIndex === mediaAttachments.length - 1}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              carouselRef.current.focus();\r\n              carouselRef.current.scrollTo({\r\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"arrow-right\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MediaModal;\r\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\r\nimport store from '../utils/store';\r\n\r\nconst LIMIT = 200;\r\nconst MAX_FETCH = 10;\r\n\r\nexport async function fetchFollowedTags() {\r\n  const { masto } = api();\r\n  const iterator = masto.v1.followedTags.list({\r\n    limit: LIMIT,\r\n  });\r\n  const tags = [];\r\n  let fetchCount = 0;\r\n  do {\r\n    const { value, done } = await iterator.next();\r\n    if (done || value?.length === 0) break;\r\n    tags.push(...value);\r\n    fetchCount++;\r\n  } while (fetchCount < MAX_FETCH);\r\n  tags.sort((a, b) => a.name.localeCompare(b.name));\r\n  console.log(tags);\r\n\r\n  if (tags.length) {\r\n    setTimeout(() => {\r\n      // Save to local storage, with saved timestamp\r\n      store.account.set('followedTags', {\r\n        tags,\r\n        updatedAt: Date.now(),\r\n      });\r\n    }, 1);\r\n  }\r\n\r\n  return tags;\r\n}\r\n\r\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\r\nexport async function getFollowedTags() {\r\n  try {\r\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\r\n    if (!tags?.length) return await fetchFollowedTags();\r\n    if (Date.now() - updatedAt > MAX_AGE) {\r\n      // Stale-while-revalidate\r\n      fetchFollowedTags();\r\n      return tags;\r\n    }\r\n    return tags;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nconst fauxDiv = document.createElement('div');\r\nexport const extractTagsFromStatus = (content) => {\r\n  if (!content) return [];\r\n  if (content.indexOf('#') === -1) return [];\r\n  fauxDiv.innerHTML = content;\r\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\r\n  if (!hashtagLinks.length) return [];\r\n  return Array.from(hashtagLinks).map((a) =>\r\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\r\n  );\r\n};\r\n","import { useEffect, useState } from 'preact/hooks';\r\n\r\nfunction AsyncText({ children }) {\r\n  if (typeof children === 'string') return children;\r\n  const [text, setText] = useState('');\r\n  useEffect(() => {\r\n    Promise.resolve(children).then(setText);\r\n  }, [children]);\r\n  return text;\r\n}\r\n\r\nexport default AsyncText;\r\n","import './shortcuts-settings.css';\r\n\r\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\r\nimport {\r\n  compressToEncodedURIComponent,\r\n  decompressFromEncodedURIComponent,\r\n} from 'lz-string';\r\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport floatingButtonUrl from '../assets/floating-button.svg';\r\nimport multiColumnUrl from '../assets/multi-column.svg';\r\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\r\n\r\nimport { api } from '../utils/api';\r\nimport { fetchFollowedTags } from '../utils/followed-tags';\r\nimport pmem from '../utils/pmem';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\n\r\nimport AsyncText from './AsyncText';\r\nimport Icon from './icon';\r\nimport MenuConfirm from './menu-confirm';\r\nimport Modal from './modal';\r\n\r\nexport const SHORTCUTS_LIMIT = 9;\r\n\r\nconst TYPES = [\r\n  'following',\r\n  'mentions',\r\n  'notifications',\r\n  'list',\r\n  'public',\r\n  'trending',\r\n  'search',\r\n  'hashtag',\r\n  'bookmarks',\r\n  'favourites',\r\n  // NOTE: Hide for now\r\n  // 'account-statuses', // Need @acct search first\r\n];\r\nconst TYPE_TEXT = {\r\n  following: 'Home / Following',\r\n  notifications: 'Notifications',\r\n  list: 'List',\r\n  public: 'Public (Local / Federated)',\r\n  search: 'Search',\r\n  'account-statuses': 'Account',\r\n  bookmarks: 'Bookmarks',\r\n  favourites: 'Likes',\r\n  hashtag: 'Hashtag',\r\n  trending: 'Trending',\r\n  mentions: 'Mentions',\r\n};\r\nconst TYPE_PARAMS = {\r\n  list: [\r\n    {\r\n      text: 'List ID',\r\n      name: 'id',\r\n    },\r\n  ],\r\n  public: [\r\n    {\r\n      text: 'Local only',\r\n      name: 'local',\r\n      type: 'checkbox',\r\n    },\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n  trending: [\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n  search: [\r\n    {\r\n      text: 'Search term',\r\n      name: 'query',\r\n      type: 'text',\r\n      placeholder: 'Optional, unless for multi-column mode',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n  'account-statuses': [\r\n    {\r\n      text: '@',\r\n      name: 'id',\r\n      type: 'text',\r\n      placeholder: 'cheeaun@mastodon.social',\r\n    },\r\n  ],\r\n  hashtag: [\r\n    {\r\n      text: '#',\r\n      name: 'hashtag',\r\n      type: 'text',\r\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\r\n      pattern: '[^#]+',\r\n    },\r\n    {\r\n      text: 'Media only',\r\n      name: 'media',\r\n      type: 'checkbox',\r\n    },\r\n    {\r\n      text: 'Instance',\r\n      name: 'instance',\r\n      type: 'text',\r\n      placeholder: 'Optional, e.g. mastodon.social',\r\n      notRequired: true,\r\n    },\r\n  ],\r\n};\r\nconst fetchListTitle = pmem(async ({ id }) => {\r\n  const list = await api().masto.v1.lists.$select(id).fetch();\r\n  return list.title;\r\n});\r\nconst fetchAccountTitle = pmem(async ({ id }) => {\r\n  const account = await api().masto.v1.accounts.$select(id).fetch();\r\n  return account.username || account.acct || account.displayName;\r\n});\r\nexport const SHORTCUTS_META = {\r\n  following: {\r\n    id: 'home',\r\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\r\n    path: '/',\r\n    icon: 'home',\r\n  },\r\n  mentions: {\r\n    id: 'mentions',\r\n    title: 'Mentions',\r\n    path: '/mentions',\r\n    icon: 'at',\r\n  },\r\n  notifications: {\r\n    id: 'notifications',\r\n    title: 'Notifications',\r\n    path: '/notifications',\r\n    icon: 'notification',\r\n  },\r\n  list: {\r\n    id: 'list',\r\n    title: fetchListTitle,\r\n    path: ({ id }) => `/l/${id}`,\r\n    icon: 'list',\r\n  },\r\n  public: {\r\n    id: 'public',\r\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\r\n    icon: ({ local }) => (local ? 'building' : 'earth'),\r\n  },\r\n  trending: {\r\n    id: 'trending',\r\n    title: 'Trending',\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ instance }) => `/${instance}/trending`,\r\n    icon: 'chart',\r\n  },\r\n  search: {\r\n    id: 'search',\r\n    title: ({ query }) => (query ? `“${query}”` : 'Search'),\r\n    path: ({ query }) =>\r\n      query\r\n        ? `/search?q=${encodeURIComponent(query)}&type=statuses`\r\n        : '/search',\r\n    icon: 'search',\r\n    excludeViewMode: ({ query }) => (!query ? ['multi-column'] : []),\r\n  },\r\n  'account-statuses': {\r\n    id: 'account-statuses',\r\n    title: fetchAccountTitle,\r\n    path: ({ id }) => `/a/${id}`,\r\n    icon: 'user',\r\n  },\r\n  bookmarks: {\r\n    id: 'bookmarks',\r\n    title: 'Bookmarks',\r\n    path: '/b',\r\n    icon: 'bookmark',\r\n  },\r\n  favourites: {\r\n    id: 'favourites',\r\n    title: 'Likes',\r\n    path: '/f',\r\n    icon: 'heart',\r\n  },\r\n  hashtag: {\r\n    id: 'hashtag',\r\n    title: ({ hashtag }) => hashtag,\r\n    subtitle: ({ instance }) => instance || api().instance,\r\n    path: ({ hashtag, instance, media }) =>\r\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\r\n        media ? '?media=1' : ''\r\n      }`,\r\n    icon: 'hashtag',\r\n  },\r\n};\r\n\r\nfunction ShortcutsSettings({ onClose }) {\r\n  const snapStates = useSnapshot(states);\r\n  const { shortcuts } = snapStates;\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showImportExport, setShowImportExport] = useState(false);\r\n\r\n  const [shortcutsListParent] = useAutoAnimate();\r\n\r\n  return (\r\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\r\n          <sup\r\n            style={{\r\n              fontSize: 12,\r\n              opacity: 0.5,\r\n              textTransform: 'uppercase',\r\n            }}\r\n          >\r\n            beta\r\n          </sup>\r\n        </h2>\r\n      </header>\r\n      <main>\r\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\r\n        <div class=\"shortcuts-view-mode\">\r\n          {[\r\n            {\r\n              value: 'float-button',\r\n              label: 'Floating button',\r\n              imgURL: floatingButtonUrl,\r\n            },\r\n            {\r\n              value: 'tab-menu-bar',\r\n              label: 'Tab/Menu bar',\r\n              imgURL: tabMenuBarUrl,\r\n            },\r\n            {\r\n              value: 'multi-column',\r\n              label: 'Multi-column',\r\n              imgURL: multiColumnUrl,\r\n            },\r\n          ].map(({ value, label, imgURL }) => {\r\n            const checked =\r\n              snapStates.settings.shortcutsViewMode === value ||\r\n              (value === 'float-button' &&\r\n                !snapStates.settings.shortcutsViewMode);\r\n            return (\r\n              <label key={value} class={checked ? 'checked' : ''}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"shortcuts-view-mode\"\r\n                  value={value}\r\n                  checked={checked}\r\n                  onChange={(e) => {\r\n                    states.settings.shortcutsViewMode = e.target.value;\r\n                  }}\r\n                />{' '}\r\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\r\n                <span>{label}</span>\r\n              </label>\r\n            );\r\n          })}\r\n        </div>\r\n        {shortcuts.length > 0 ? (\r\n          <>\r\n            <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\r\n              {shortcuts.filter(Boolean).map((shortcut, i) => {\r\n                // const key = i + Object.values(shortcut);\r\n                const key = Object.values(shortcut).join('-');\r\n                const { type } = shortcut;\r\n                if (!SHORTCUTS_META[type]) return null;\r\n                let { icon, title, subtitle, excludeViewMode } =\r\n                  SHORTCUTS_META[type];\r\n                if (typeof title === 'function') {\r\n                  title = title(shortcut, i);\r\n                }\r\n                if (typeof subtitle === 'function') {\r\n                  subtitle = subtitle(shortcut, i);\r\n                }\r\n                if (typeof icon === 'function') {\r\n                  icon = icon(shortcut, i);\r\n                }\r\n                if (typeof excludeViewMode === 'function') {\r\n                  excludeViewMode = excludeViewMode(shortcut, i);\r\n                }\r\n                const excludedViewMode = excludeViewMode?.includes(\r\n                  snapStates.settings.shortcutsViewMode,\r\n                );\r\n                return (\r\n                  <li key={key}>\r\n                    <Icon icon={icon} />\r\n                    <span class=\"shortcut-text\">\r\n                      <AsyncText>{title}</AsyncText>\r\n                      {subtitle && (\r\n                        <>\r\n                          {' '}\r\n                          <small class=\"ib insignificant\">{subtitle}</small>\r\n                        </>\r\n                      )}\r\n                      {excludedViewMode && (\r\n                        <span class=\"tag\">\r\n                          Not available in current view mode\r\n                        </span>\r\n                      )}\r\n                    </span>\r\n                    <span class=\"shortcut-actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain small\"\r\n                        disabled={i === 0}\r\n                        onClick={() => {\r\n                          const shortcutsArr = Array.from(states.shortcuts);\r\n                          if (i > 0) {\r\n                            const temp = states.shortcuts[i - 1];\r\n                            shortcutsArr[i - 1] = shortcut;\r\n                            shortcutsArr[i] = temp;\r\n                            states.shortcuts = shortcutsArr;\r\n                          }\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"arrow-up\" alt=\"Move up\" />\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain small\"\r\n                        disabled={i === shortcuts.length - 1}\r\n                        onClick={() => {\r\n                          const shortcutsArr = Array.from(states.shortcuts);\r\n                          if (i < states.shortcuts.length - 1) {\r\n                            const temp = states.shortcuts[i + 1];\r\n                            shortcutsArr[i + 1] = shortcut;\r\n                            shortcutsArr[i] = temp;\r\n                            states.shortcuts = shortcutsArr;\r\n                          }\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"arrow-down\" alt=\"Move down\" />\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain small\"\r\n                        onClick={() => {\r\n                          setShowForm({\r\n                            shortcut,\r\n                            shortcutIndex: i,\r\n                          });\r\n                        }}\r\n                      >\r\n                        <Icon icon=\"pencil\" alt=\"Edit\" />\r\n                      </button>\r\n                      {/* <button\r\n                      type=\"button\"\r\n                      class=\"plain small\"\r\n                      onClick={() => {\r\n                        states.shortcuts.splice(i, 1);\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"x\" alt=\"Remove\" />\r\n                    </button> */}\r\n                    </span>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ol>\r\n            {shortcuts.length === 1 &&\r\n              snapStates.settings.shortcutsViewMode !== 'float-button' && (\r\n                <div class=\"ui-state insignificant\">\r\n                  <Icon icon=\"info\" />{' '}\r\n                  <small>\r\n                    Add more than one shortcut/column to make this work.\r\n                  </small>\r\n                </div>\r\n              )}\r\n          </>\r\n        ) : (\r\n          <div class=\"ui-state insignificant\">\r\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\r\n            <p>\r\n              Not sure what to add?\r\n              <br />\r\n              Try adding{' '}\r\n              <a\r\n                href=\"#\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  states.shortcuts = [\r\n                    {\r\n                      type: 'following',\r\n                    },\r\n                    {\r\n                      type: 'notifications',\r\n                    },\r\n                  ];\r\n                }}\r\n              >\r\n                Home / Following and Notifications\r\n              </a>{' '}\r\n              first.\r\n            </p>\r\n          </div>\r\n        )}\r\n        <p class=\"insignificant\">\r\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\r\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\r\n        </p>\r\n        <p\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            class=\"light\"\r\n            onClick={() => setShowImportExport(true)}\r\n          >\r\n            Import/export\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\r\n            onClick={() => setShowForm(true)}\r\n          >\r\n            <Icon icon=\"plus\" />{' '}\r\n            <span>\r\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\r\n                ? 'Add column…'\r\n                : 'Add shortcut…'}\r\n            </span>\r\n          </button>\r\n        </p>\r\n      </main>\r\n      {showForm && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowForm(false);\r\n            }\r\n          }}\r\n        >\r\n          <ShortcutForm\r\n            shortcut={showForm.shortcut}\r\n            shortcutIndex={showForm.shortcutIndex}\r\n            onSubmit={({ result, mode }) => {\r\n              console.log('onSubmit', result);\r\n              if (mode === 'edit') {\r\n                states.shortcuts[showForm.shortcutIndex] = result;\r\n              } else {\r\n                states.shortcuts.push(result);\r\n              }\r\n            }}\r\n            onClose={() => setShowForm(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {showImportExport && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowImportExport(false);\r\n            }\r\n          }}\r\n        >\r\n          <ImportExport\r\n            shortcuts={shortcuts}\r\n            onClose={() => setShowImportExport(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\r\nconst fetchLists = pmem(\r\n  () => {\r\n    const { masto } = api();\r\n    return masto.v1.lists.list();\r\n  },\r\n  {\r\n    maxAge: FETCH_MAX_AGE,\r\n  },\r\n);\r\n\r\nconst FORM_NOTES = {\r\n  search: `For multi-column mode, search term is required, else the column will not be shown.`,\r\n  hashtag: 'Multiple hashtags are supported. Space-separated.',\r\n};\r\n\r\nfunction ShortcutForm({\r\n  onSubmit,\r\n  disabled,\r\n  shortcut,\r\n  shortcutIndex,\r\n  onClose,\r\n}) {\r\n  console.log('shortcut', shortcut);\r\n  const editMode = !!shortcut;\r\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\r\n  const { masto } = api();\r\n\r\n  const [uiState, setUIState] = useState('default');\r\n  const [lists, setLists] = useState([]);\r\n  const [followedHashtags, setFollowedHashtags] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (currentType !== 'list') return;\r\n      try {\r\n        setUIState('loading');\r\n        const lists = await fetchLists();\r\n        lists.sort((a, b) => a.title.localeCompare(b.title));\r\n        setLists(lists);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n\r\n    (async () => {\r\n      if (currentType !== 'hashtag') return;\r\n      try {\r\n        const tags = await fetchFollowedTags();\r\n        setFollowedHashtags(tags);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [currentType]);\r\n\r\n  const formRef = useRef();\r\n  useEffect(() => {\r\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\r\n      // Populate form\r\n      const form = formRef.current;\r\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\r\n        const input = form.querySelector(`[name=\"${name}\"]`);\r\n        if (input && shortcut[name]) {\r\n          if (type === 'checkbox') {\r\n            input.checked = shortcut[name] === 'on' ? true : false;\r\n          } else {\r\n            input.value = shortcut[name];\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [editMode, currentType]);\r\n\r\n  return (\r\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\r\n      </header>\r\n      <main tabindex=\"-1\">\r\n        <form\r\n          ref={formRef}\r\n          onSubmit={(e) => {\r\n            // Construct a nice object from form\r\n            e.preventDefault();\r\n            const data = new FormData(e.target);\r\n            const result = {};\r\n            data.forEach((value, key) => {\r\n              result[key] = value?.trim();\r\n              if (key === 'instance') {\r\n                // Remove protocol and trailing slash\r\n                result[key] = result[key]\r\n                  .replace(/^https?:\\/\\//, '')\r\n                  .replace(/\\/+$/, '');\r\n                // Remove @acct@ or acct@ from instance URL\r\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\r\n              }\r\n            });\r\n            console.log('result', result);\r\n            if (!result.type) return;\r\n            onSubmit({\r\n              result,\r\n              mode: editMode ? 'edit' : 'add',\r\n            });\r\n            // Reset\r\n            e.target.reset();\r\n            setCurrentType(null);\r\n            onClose?.();\r\n          }}\r\n        >\r\n          <p>\r\n            <label>\r\n              <span>Timeline</span>\r\n              <select\r\n                required\r\n                disabled={disabled}\r\n                onChange={(e) => {\r\n                  setCurrentType(e.target.value);\r\n                }}\r\n                defaultValue={editMode ? shortcut.type : undefined}\r\n                name=\"type\"\r\n              >\r\n                <option></option>\r\n                {TYPES.map((type) => (\r\n                  <option value={type}>{TYPE_TEXT[type]}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n          </p>\r\n          {TYPE_PARAMS[currentType]?.map?.(\r\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\r\n              if (currentType === 'list') {\r\n                return (\r\n                  <p>\r\n                    <label>\r\n                      <span>List</span>\r\n                      <select\r\n                        name=\"id\"\r\n                        required={!notRequired}\r\n                        disabled={disabled || uiState === 'loading'}\r\n                        defaultValue={editMode ? shortcut.id : undefined}\r\n                      >\r\n                        {lists.map((list) => (\r\n                          <option value={list.id}>{list.title}</option>\r\n                        ))}\r\n                      </select>\r\n                    </label>\r\n                  </p>\r\n                );\r\n              }\r\n\r\n              return (\r\n                <p>\r\n                  <label>\r\n                    <span>{text}</span>{' '}\r\n                    <input\r\n                      type={type}\r\n                      switch={type === 'checkbox' || undefined}\r\n                      name={name}\r\n                      placeholder={placeholder}\r\n                      required={type === 'text' && !notRequired}\r\n                      disabled={disabled}\r\n                      list={\r\n                        currentType === 'hashtag'\r\n                          ? 'followed-hashtags-datalist'\r\n                          : null\r\n                      }\r\n                      autocorrect=\"off\"\r\n                      autocapitalize=\"off\"\r\n                      spellcheck={false}\r\n                      pattern={pattern}\r\n                    />\r\n                    {currentType === 'hashtag' &&\r\n                      followedHashtags.length > 0 && (\r\n                        <datalist id=\"followed-hashtags-datalist\">\r\n                          {followedHashtags.map((tag) => (\r\n                            <option value={tag.name} />\r\n                          ))}\r\n                        </datalist>\r\n                      )}\r\n                  </label>\r\n                </p>\r\n              );\r\n            },\r\n          )}\r\n          {!!FORM_NOTES[currentType] && (\r\n            <p class=\"form-note insignificant\">\r\n              <Icon icon=\"info\" />\r\n              {FORM_NOTES[currentType]}\r\n            </p>\r\n          )}\r\n          <footer>\r\n            <button\r\n              type=\"submit\"\r\n              class=\"block\"\r\n              disabled={disabled || uiState === 'loading'}\r\n            >\r\n              {editMode ? 'Save' : 'Add'}\r\n            </button>\r\n            {editMode && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"light danger\"\r\n                onClick={() => {\r\n                  states.shortcuts.splice(shortcutIndex, 1);\r\n                  onClose?.();\r\n                }}\r\n              >\r\n                Remove\r\n              </button>\r\n            )}\r\n          </footer>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ImportExport({ shortcuts, onClose }) {\r\n  const shortcutsStr = useMemo(() => {\r\n    if (!shortcuts) return '';\r\n    if (!shortcuts.filter(Boolean).length) return '';\r\n    return compressToEncodedURIComponent(\r\n      JSON.stringify(shortcuts.filter(Boolean)),\r\n    );\r\n  }, [shortcuts]);\r\n  const [importShortcutStr, setImportShortcutStr] = useState('');\r\n  const [importUIState, setImportUIState] = useState('default');\r\n  const parsedImportShortcutStr = useMemo(() => {\r\n    if (!importShortcutStr) {\r\n      setImportUIState('default');\r\n      return null;\r\n    }\r\n    try {\r\n      const parsed = JSON.parse(\r\n        decompressFromEncodedURIComponent(importShortcutStr),\r\n      );\r\n      // Very basic validation, I know\r\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\r\n      setImportUIState('default');\r\n      return parsed;\r\n    } catch (err) {\r\n      // Fallback to JSON string parsing\r\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\r\n      try {\r\n        const parsed = JSON.parse(importShortcutStr);\r\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\r\n        setImportUIState('default');\r\n        return parsed;\r\n      } catch (err) {\r\n        setImportUIState('error');\r\n        return null;\r\n      }\r\n    }\r\n  }, [importShortcutStr]);\r\n  const hasCurrentSettings = states.shortcuts.length > 0;\r\n\r\n  return (\r\n    <div id=\"import-export-container\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>\r\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\r\n        </h2>\r\n      </header>\r\n      <main tabindex=\"-1\">\r\n        <section>\r\n          <h3>\r\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\r\n            <span>Import</span>\r\n          </h3>\r\n          <p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"import\"\r\n              placeholder=\"Paste shortcuts here\"\r\n              class=\"block\"\r\n              onInput={(e) => {\r\n                setImportShortcutStr(e.target.value);\r\n              }}\r\n            />\r\n          </p>\r\n          {!!parsedImportShortcutStr &&\r\n            Array.isArray(parsedImportShortcutStr) && (\r\n              <>\r\n                <p>\r\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\r\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\r\n                  <small class=\"insignificant\">\r\n                    ({importShortcutStr.length} characters)\r\n                  </small>\r\n                </p>\r\n                <ol class=\"import-settings-list\">\r\n                  {parsedImportShortcutStr.map((shortcut) => (\r\n                    <li>\r\n                      <span\r\n                        style={{\r\n                          opacity: shortcuts.some((s) =>\r\n                            // Compare all properties\r\n                            Object.keys(s).every(\r\n                              (key) => s[key] === shortcut[key],\r\n                            ),\r\n                          )\r\n                            ? 1\r\n                            : 0,\r\n                        }}\r\n                      >\r\n                        *\r\n                      </span>\r\n                      <span>\r\n                        {TYPE_TEXT[shortcut.type]}\r\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\r\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\r\n                          ({ text, name, type }) =>\r\n                            shortcut[name] ? (\r\n                              <>\r\n                                <span class=\"tag collapsed insignificant\">\r\n                                  {text}:{' '}\r\n                                  {type === 'checkbox'\r\n                                    ? shortcut[name] === 'on'\r\n                                      ? '✅'\r\n                                      : '❌'\r\n                                    : shortcut[name]}\r\n                                </span>{' '}\r\n                              </>\r\n                            ) : null,\r\n                        )}\r\n                      </span>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n                <p>\r\n                  <small>* Exists in current shortcuts</small>\r\n                  <br />\r\n                  <small>\r\n                    ⚠️ List may not work if it's from a different account.\r\n                  </small>\r\n                </p>\r\n              </>\r\n            )}\r\n          {importUIState === 'error' && (\r\n            <p class=\"error\">\r\n              <small>⚠️ Invalid settings format</small>\r\n            </p>\r\n          )}\r\n          <p>\r\n            {hasCurrentSettings && (\r\n              <>\r\n                <MenuConfirm\r\n                  confirmLabel=\"Append to current shortcuts?\"\r\n                  menuFooter={\r\n                    <div class=\"footer\">\r\n                      Only shortcuts that don’t exist in current shortcuts will\r\n                      be appended.\r\n                    </div>\r\n                  }\r\n                  onClick={() => {\r\n                    // states.shortcuts = [\r\n                    //   ...states.shortcuts,\r\n                    //   ...parsedImportShortcutStr,\r\n                    // ];\r\n                    // Append non-unique shortcuts only\r\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\r\n                      (shortcut) =>\r\n                        !states.shortcuts.some((s) =>\r\n                          // Compare all properties\r\n                          Object.keys(s).every(\r\n                            (key) => s[key] === shortcut[key],\r\n                          ),\r\n                        ),\r\n                    );\r\n                    if (!nonUniqueShortcuts.length) {\r\n                      showToast('No new shortcuts to import');\r\n                      return;\r\n                    }\r\n                    let newShortcuts = [\r\n                      ...states.shortcuts,\r\n                      ...nonUniqueShortcuts,\r\n                    ];\r\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\r\n                    if (exceededLimit) {\r\n                      // If exceeded, trim it\r\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\r\n                    }\r\n                    states.shortcuts = newShortcuts;\r\n                    showToast(\r\n                      exceededLimit\r\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\r\n                        : 'Shortcuts imported',\r\n                    );\r\n                    onClose?.();\r\n                  }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain2\"\r\n                    disabled={!parsedImportShortcutStr}\r\n                  >\r\n                    Import & append…\r\n                  </button>\r\n                </MenuConfirm>{' '}\r\n              </>\r\n            )}\r\n            <MenuConfirm\r\n              confirmLabel={\r\n                hasCurrentSettings\r\n                  ? 'Override current shortcuts?'\r\n                  : 'Import shortcuts?'\r\n              }\r\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\r\n              onClick={() => {\r\n                states.shortcuts = parsedImportShortcutStr;\r\n                showToast('Shortcuts imported');\r\n                onClose?.();\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain2\"\r\n                disabled={!parsedImportShortcutStr}\r\n              >\r\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\r\n              </button>\r\n            </MenuConfirm>\r\n          </p>\r\n        </section>\r\n        <section>\r\n          <h3>\r\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\r\n            <span>Export</span>\r\n          </h3>\r\n          <p>\r\n            <input\r\n              style={{ width: '100%' }}\r\n              type=\"text\"\r\n              value={shortcutsStr}\r\n              readOnly\r\n              onClick={(e) => {\r\n                if (!e.target.value) return;\r\n                e.target.select();\r\n                // Copy url to clipboard\r\n                try {\r\n                  navigator.clipboard.writeText(e.target.value);\r\n                  showToast('Shortcuts copied');\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  showToast('Unable to copy shortcuts');\r\n                }\r\n              }}\r\n            />\r\n          </p>\r\n          <p>\r\n            <button\r\n              type=\"button\"\r\n              class=\"plain2\"\r\n              disabled={!shortcutsStr}\r\n              onClick={() => {\r\n                try {\r\n                  navigator.clipboard.writeText(shortcutsStr);\r\n                  showToast('Shortcut settings copied');\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  showToast('Unable to copy shortcut settings');\r\n                }\r\n              }}\r\n            >\r\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\r\n            </button>{' '}\r\n            {navigator?.share &&\r\n              navigator?.canShare?.({\r\n                text: shortcutsStr,\r\n              }) && (\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"plain2\"\r\n                  disabled={!shortcutsStr}\r\n                  onClick={() => {\r\n                    try {\r\n                      navigator.share({\r\n                        text: shortcutsStr,\r\n                      });\r\n                    } catch (e) {\r\n                      console.error(e);\r\n                      alert(\"Sharing doesn't seem to work.\");\r\n                    }\r\n                  }}\r\n                >\r\n                  <Icon icon=\"share\" /> <span>Share</span>\r\n                </button>\r\n              )}{' '}\r\n            {shortcutsStr.length > 0 && (\r\n              <small class=\"insignificant\">\r\n                {shortcutsStr.length} characters\r\n              </small>\r\n            )}\r\n          </p>\r\n          {!!shortcutsStr && (\r\n            <details>\r\n              <summary class=\"insignificant\">\r\n                <small>Raw Shortcuts JSON</small>\r\n              </summary>\r\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\r\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\r\n              </textarea>\r\n            </details>\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShortcutsSettings;\r\n","import { useLocation, useNavigate } from 'react-router-dom';\r\nimport { subscribe, useSnapshot } from 'valtio';\r\n\r\nimport Accounts from '../pages/accounts';\r\nimport Settings from '../pages/settings';\r\nimport focusDeck from '../utils/focus-deck';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\n\r\nimport AccountSheet from './account-sheet';\r\nimport Compose from './compose';\r\nimport Drafts from './drafts';\r\nimport EmbedModal from './embed-modal';\r\nimport GenericAccounts from './generic-accounts';\r\nimport MediaAltModal from './media-alt-modal';\r\nimport MediaModal from './media-modal';\r\nimport Modal from './modal';\r\nimport ShortcutsSettings from './shortcuts-settings';\r\n\r\nsubscribe(states, (changes) => {\r\n  for (const [action, path, value, prevValue] of changes) {\r\n    // When closing modal, focus on deck\r\n    if (/^show/i.test(path) && !value) {\r\n      focusDeck();\r\n    }\r\n  }\r\n});\r\n\r\nexport default function Modals() {\r\n  const snapStates = useSnapshot(states);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      {!!snapStates.showCompose && (\r\n        <Modal>\r\n          <Compose\r\n            replyToStatus={\r\n              typeof snapStates.showCompose !== 'boolean'\r\n                ? snapStates.showCompose.replyToStatus\r\n                : window.__COMPOSE__?.replyToStatus || null\r\n            }\r\n            editStatus={\r\n              states.showCompose?.editStatus ||\r\n              window.__COMPOSE__?.editStatus ||\r\n              null\r\n            }\r\n            draftStatus={\r\n              states.showCompose?.draftStatus ||\r\n              window.__COMPOSE__?.draftStatus ||\r\n              null\r\n            }\r\n            onClose={(results) => {\r\n              const { newStatus, instance, type } = results || {};\r\n              states.showCompose = false;\r\n              window.__COMPOSE__ = null;\r\n              if (newStatus) {\r\n                states.reloadStatusPage++;\r\n                showToast({\r\n                  text: {\r\n                    post: 'Post published. Check it out.',\r\n                    reply: 'Reply posted. Check it out.',\r\n                    edit: 'Post updated. Check it out.',\r\n                  }[type || 'post'],\r\n                  delay: 1000,\r\n                  duration: 10_000, // 10 seconds\r\n                  onClick: (toast) => {\r\n                    toast.hideToast();\r\n                    states.prevLocation = location;\r\n                    navigate(\r\n                      instance\r\n                        ? `/${instance}/s/${newStatus.id}`\r\n                        : `/s/${newStatus.id}`,\r\n                    );\r\n                  },\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showSettings && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showSettings = false;\r\n          }}\r\n        >\r\n          <Settings\r\n            onClose={() => {\r\n              states.showSettings = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showAccounts && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showAccounts = false;\r\n          }}\r\n        >\r\n          <Accounts\r\n            onClose={() => {\r\n              states.showAccounts = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showAccount && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showAccount = false;\r\n          }}\r\n        >\r\n          <AccountSheet\r\n            account={snapStates.showAccount?.account || snapStates.showAccount}\r\n            instance={snapStates.showAccount?.instance}\r\n            onClose={({ destination } = {}) => {\r\n              states.showAccount = false;\r\n              // states.showGenericAccounts = false;\r\n              // if (destination) {\r\n              //   states.showAccounts = false;\r\n              // }\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showDrafts && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showDrafts = false;\r\n          }}\r\n        >\r\n          <Drafts onClose={() => (states.showDrafts = false)} />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showMediaModal && (\r\n        <Modal\r\n          onClick={(e) => {\r\n            if (\r\n              e.target === e.currentTarget ||\r\n              e.target.classList.contains('media')\r\n            ) {\r\n              states.showMediaModal = false;\r\n            }\r\n          }}\r\n        >\r\n          <MediaModal\r\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\r\n            instance={snapStates.showMediaModal.instance}\r\n            index={snapStates.showMediaModal.index}\r\n            statusID={snapStates.showMediaModal.statusID}\r\n            onClose={() => {\r\n              states.showMediaModal = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showShortcutsSettings && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showShortcutsSettings = false;\r\n          }}\r\n        >\r\n          <ShortcutsSettings\r\n            onClose={() => (states.showShortcutsSettings = false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showGenericAccounts && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={() => {\r\n            states.showGenericAccounts = false;\r\n          }}\r\n        >\r\n          <GenericAccounts\r\n            instance={snapStates.showGenericAccounts.instance}\r\n            excludeRelationshipAttrs={\r\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\r\n            }\r\n            onClose={() => (states.showGenericAccounts = false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showMediaAlt && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClose={(e) => {\r\n            states.showMediaAlt = false;\r\n          }}\r\n        >\r\n          <MediaAltModal\r\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\r\n            lang={snapStates.showMediaAlt?.lang}\r\n            onClose={() => {\r\n              states.showMediaAlt = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {!!snapStates.showEmbedModal && (\r\n        <Modal\r\n          onClose={() => {\r\n            states.showEmbedModal = false;\r\n          }}\r\n        >\r\n          <EmbedModal\r\n            html={snapStates.showEmbedModal.html}\r\n            url={snapStates.showEmbedModal.url}\r\n            width={snapStates.showEmbedModal.width}\r\n            height={snapStates.showEmbedModal.height}\r\n            onClose={() => {\r\n              states.showEmbedModal = false;\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState } from 'preact/hooks';\r\n\r\nimport { api } from '../utils/api';\r\n\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\n\r\nfunction FollowRequestButtons({ accountID, onChange }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [requestState, setRequestState] = useState(null); // accept, reject\r\n  const [relationship, setRelationship] = useState(null);\r\n\r\n  const hasRelationship = relationship !== null;\r\n\r\n  return (\r\n    <p class=\"follow-request-buttons\">\r\n      <button\r\n        type=\"button\"\r\n        disabled={uiState === 'loading' || hasRelationship}\r\n        onClick={() => {\r\n          setUIState('loading');\r\n          setRequestState('accept');\r\n          (async () => {\r\n            try {\r\n              const rel = await masto.v1.followRequests\r\n                .$select(accountID)\r\n                .authorize();\r\n              if (!rel?.followedBy) {\r\n                throw new Error('Follow request not accepted');\r\n              }\r\n              setRelationship(rel);\r\n              onChange();\r\n            } catch (e) {\r\n              console.error(e);\r\n            }\r\n            setUIState('default');\r\n          })();\r\n        }}\r\n      >\r\n        Accept\r\n      </button>{' '}\r\n      <button\r\n        type=\"button\"\r\n        disabled={uiState === 'loading' || hasRelationship}\r\n        class=\"light danger\"\r\n        onClick={() => {\r\n          setUIState('loading');\r\n          setRequestState('reject');\r\n          (async () => {\r\n            try {\r\n              const rel = await masto.v1.followRequests\r\n                .$select(accountID)\r\n                .reject();\r\n              if (rel?.followedBy) {\r\n                throw new Error('Follow request not rejected');\r\n              }\r\n              setRelationship(rel);\r\n              onChange();\r\n            } catch (e) {\r\n              console.error(e);\r\n              setUIState('default');\r\n            }\r\n          })();\r\n        }}\r\n      >\r\n        Reject\r\n      </button>\r\n      <span class=\"follow-request-states\">\r\n        {hasRelationship && requestState ? (\r\n          requestState === 'accept' ? (\r\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\r\n          ) : (\r\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\r\n          )\r\n        ) : (\r\n          <Loader hidden={uiState !== 'loading'} />\r\n        )}\r\n      </span>\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default FollowRequestButtons;\r\n","import { Fragment } from 'preact';\r\nimport { memo } from 'preact/compat';\r\n\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\nimport useTruncated from '../utils/useTruncated';\r\n\r\nimport Avatar from './avatar';\r\nimport FollowRequestButtons from './follow-request-buttons';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport NameText from './name-text';\r\nimport RelativeTime from './relative-time';\r\nimport Status from './status';\r\n\r\nconst NOTIFICATION_ICONS = {\r\n  mention: 'comment',\r\n  status: 'notification',\r\n  reblog: 'rocket',\r\n  follow: 'follow',\r\n  follow_request: 'follow-add',\r\n  favourite: 'heart',\r\n  poll: 'poll',\r\n  update: 'pencil',\r\n  'admin.signup': 'account-edit',\r\n  'admin.report': 'account-warning',\r\n};\r\n\r\n/*\r\nNotification types\r\n==================\r\nmention = Someone mentioned you in their status\r\nstatus = Someone you enabled notifications for has posted a status\r\nreblog = Someone boosted one of your statuses\r\nfollow = Someone followed you\r\nfollow_request = Someone requested to follow you\r\nfavourite = Someone favourited one of your statuses\r\npoll = A poll you have voted in or created has ended\r\nupdate = A status you interacted with has been edited\r\nadmin.sign_up = Someone signed up (optionally sent to admins)\r\nadmin.report = A new report has been filed\r\n*/\r\n\r\nconst contentText = {\r\n  mention: 'mentioned you in their post.',\r\n  status: 'published a post.',\r\n  reblog: 'boosted your post.',\r\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\r\n  reblog_reply: 'boosted your reply.',\r\n  follow: 'followed you.',\r\n  follow_request: 'requested to follow you.',\r\n  favourite: 'liked your post.',\r\n  'favourite+account': (count) => `liked ${count} of your posts.`,\r\n  favourite_reply: 'liked your reply.',\r\n  poll: 'A poll you have voted in or created has ended.',\r\n  'poll-self': 'A poll you have created has ended.',\r\n  'poll-voted': 'A poll you have voted in has ended.',\r\n  update: 'A post you interacted with has been edited.',\r\n  'favourite+reblog': 'boosted & liked your post.',\r\n  'favourite+reblog+account': (count) =>\r\n    `boosted & liked ${count} of your posts.`,\r\n  'favourite+reblog_reply': 'boosted & liked your reply.',\r\n  'admin.sign_up': 'signed up.',\r\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\r\n};\r\n\r\nconst AVATARS_LIMIT = 50;\r\n\r\nfunction Notification({\r\n  notification,\r\n  instance,\r\n  isStatic,\r\n  disableContextMenu,\r\n}) {\r\n  const { id, status, account, report, _accounts, _statuses } = notification;\r\n  let { type } = notification;\r\n\r\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\r\n  const actualStatus = status?.reblog || status;\r\n  const actualStatusID = actualStatus?.id;\r\n\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const isSelf = currentAccount === account?.id;\r\n  const isVoted = status?.poll?.voted;\r\n  const isReplyToOthers =\r\n    !!status?.inReplyToAccountId &&\r\n    status?.inReplyToAccountId !== currentAccount &&\r\n    status?.account?.id === currentAccount;\r\n\r\n  let favsCount = 0;\r\n  let reblogsCount = 0;\r\n  if (type === 'favourite+reblog') {\r\n    for (const account of _accounts) {\r\n      if (account._types?.includes('favourite')) {\r\n        favsCount++;\r\n      }\r\n      if (account._types?.includes('reblog')) {\r\n        reblogsCount++;\r\n      }\r\n    }\r\n    if (!reblogsCount && favsCount) type = 'favourite';\r\n    if (!favsCount && reblogsCount) type = 'reblog';\r\n  }\r\n\r\n  let text;\r\n  if (type === 'poll') {\r\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\r\n  } else if (\r\n    type === 'reblog' ||\r\n    type === 'favourite' ||\r\n    type === 'favourite+reblog'\r\n  ) {\r\n    if (_statuses?.length > 1) {\r\n      text = contentText[`${type}+account`];\r\n    } else if (isReplyToOthers) {\r\n      text = contentText[`${type}_reply`];\r\n    } else {\r\n      text = contentText[type];\r\n    }\r\n  } else if (contentText[type]) {\r\n    text = contentText[type];\r\n  } else {\r\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\r\n    // This surfaces the error to the user, hoping that users will report it\r\n    text = `[Unknown notification type: ${type}]`;\r\n  }\r\n\r\n  if (typeof text === 'function') {\r\n    const count = _statuses?.length || _accounts?.length;\r\n    if (count) {\r\n      text = text(count);\r\n    } else if (type === 'admin.report') {\r\n      const targetAccount = report?.targetAccount;\r\n      if (targetAccount) {\r\n        text = text(<NameText account={targetAccount} showAvatar />);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (type === 'mention' && !status) {\r\n    // Could be deleted\r\n    return null;\r\n  }\r\n\r\n  const formattedCreatedAt =\r\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\r\n\r\n  const genericAccountsHeading =\r\n    {\r\n      'favourite+reblog': 'Boosted/Liked by…',\r\n      favourite: 'Liked by…',\r\n      reblog: 'Boosted by…',\r\n      follow: 'Followed by…',\r\n    }[type] || 'Accounts';\r\n  const handleOpenGenericAccounts = () => {\r\n    states.showGenericAccounts = {\r\n      heading: genericAccountsHeading,\r\n      accounts: _accounts,\r\n      showReactions: type === 'favourite+reblog',\r\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\r\n    };\r\n  };\r\n\r\n  console.debug('RENDER Notification', notification.id);\r\n\r\n  return (\r\n    <div\r\n      class={`notification notification-${type}`}\r\n      data-notification-id={id}\r\n      tabIndex=\"0\"\r\n    >\r\n      <div\r\n        class={`notification-type notification-${type}`}\r\n        title={formattedCreatedAt}\r\n      >\r\n        {type === 'favourite+reblog' ? (\r\n          <>\r\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\r\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\r\n          </>\r\n        ) : (\r\n          <Icon\r\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\r\n            size=\"xl\"\r\n            alt={type}\r\n          />\r\n        )}\r\n      </div>\r\n      <div class=\"notification-content\">\r\n        {type !== 'mention' && (\r\n          <>\r\n            <p>\r\n              {!/poll|update/i.test(type) && (\r\n                <>\r\n                  {_accounts?.length > 1 ? (\r\n                    <>\r\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\r\n                        <span title={_accounts.length}>\r\n                          {shortenNumber(_accounts.length)}\r\n                        </span>{' '}\r\n                        people\r\n                      </b>{' '}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <NameText account={account} showAvatar />{' '}\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n              {text}\r\n              {type === 'mention' && (\r\n                <span class=\"insignificant\">\r\n                  {' '}\r\n                  •{' '}\r\n                  <RelativeTime\r\n                    datetime={notification.createdAt}\r\n                    format=\"micro\"\r\n                  />\r\n                </span>\r\n              )}\r\n            </p>\r\n            {type === 'follow_request' && (\r\n              <FollowRequestButtons accountID={account.id} />\r\n            )}\r\n          </>\r\n        )}\r\n        {_accounts?.length > 1 && (\r\n          <p class=\"avatars-stack\">\r\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\r\n              <Fragment key={account.id}>\r\n                <a\r\n                  key={account.id}\r\n                  href={account.url}\r\n                  rel=\"noopener noreferrer\"\r\n                  class=\"account-avatar-stack\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    states.showAccount = account;\r\n                  }}\r\n                >\r\n                  <Avatar\r\n                    url={account.avatarStatic}\r\n                    size={\r\n                      _accounts.length <= 10\r\n                        ? 'xxl'\r\n                        : _accounts.length < 20\r\n                        ? 'xl'\r\n                        : _accounts.length < 30\r\n                        ? 'l'\r\n                        : _accounts.length < 40\r\n                        ? 'm'\r\n                        : 's' // My god, this person is popular!\r\n                    }\r\n                    key={account.id}\r\n                    alt={`${account.displayName} @${account.acct}`}\r\n                    squircle={account?.bot}\r\n                  />\r\n                  {type === 'favourite+reblog' && (\r\n                    <div class=\"account-sub-icons\">\r\n                      {account._types.map((type) => (\r\n                        <Icon\r\n                          icon={NOTIFICATION_ICONS[type]}\r\n                          size=\"s\"\r\n                          class={`${type}-icon`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </a>{' '}\r\n              </Fragment>\r\n            ))}\r\n            <button\r\n              type=\"button\"\r\n              class=\"small plain\"\r\n              onClick={handleOpenGenericAccounts}\r\n            >\r\n              {_accounts.length > AVATARS_LIMIT &&\r\n                `+${_accounts.length - AVATARS_LIMIT}`}\r\n              <Icon icon=\"chevron-down\" />\r\n            </button>\r\n          </p>\r\n        )}\r\n        {_statuses?.length > 1 && (\r\n          <ul class=\"notification-group-statuses\">\r\n            {_statuses.map((status) => (\r\n              <li key={status.id}>\r\n                <TruncatedLink\r\n                  class={`status-link status-type-${type}`}\r\n                  to={\r\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\r\n                  }\r\n                >\r\n                  <Status\r\n                    status={status}\r\n                    size=\"s\"\r\n                    previewMode\r\n                    allowContextMenu\r\n                  />\r\n                </TruncatedLink>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\r\n          <TruncatedLink\r\n            class={`status-link status-type-${type}`}\r\n            to={\r\n              instance\r\n                ? `/${instance}/s/${actualStatusID}`\r\n                : `/s/${actualStatusID}`\r\n            }\r\n            onContextMenu={\r\n              !disableContextMenu\r\n                ? (e) => {\r\n                    const post = e.target.querySelector('.status');\r\n                    if (post) {\r\n                      // Fire a custom event to open the context menu\r\n                      if (e.metaKey) return;\r\n                      e.preventDefault();\r\n                      post.dispatchEvent(\r\n                        new MouseEvent('contextmenu', {\r\n                          clientX: e.clientX,\r\n                          clientY: e.clientY,\r\n                        }),\r\n                      );\r\n                    }\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            {isStatic ? (\r\n              <Status\r\n                status={actualStatus}\r\n                size=\"s\"\r\n                readOnly\r\n                allowContextMenu\r\n              />\r\n            ) : (\r\n              <Status\r\n                statusID={actualStatusID}\r\n                size=\"s\"\r\n                readOnly\r\n                allowContextMenu\r\n              />\r\n            )}\r\n          </TruncatedLink>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TruncatedLink(props) {\r\n  const ref = useTruncated();\r\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\r\n}\r\n\r\nexport default memo(Notification, (oldProps, newProps) => {\r\n  return oldProps.notification?.id === newProps.notification?.id;\r\n});\r\n","import { memo } from 'preact/compat';\r\nimport { useLayoutEffect, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\nimport {\r\n  getAccountByAccessToken,\r\n  getCurrentAccount,\r\n} from '../utils/store-utils';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Modal from './modal';\r\nimport Notification from './notification';\r\n\r\n{\r\n  if ('serviceWorker' in navigator) {\r\n    console.log('👂👂👂 Listen to message');\r\n    navigator.serviceWorker.addEventListener('message', (event) => {\r\n      console.log('💥💥💥 Message event', event);\r\n      const { type, id, accessToken } = event?.data || {};\r\n      if (type === 'notification') {\r\n        states.routeNotification = {\r\n          id,\r\n          accessToken,\r\n        };\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default memo(function NotificationService() {\r\n  if (!('serviceWorker' in navigator)) return null;\r\n\r\n  const snapStates = useSnapshot(states);\r\n  const { routeNotification } = snapStates;\r\n\r\n  console.log('🛎️ Notification service', routeNotification);\r\n\r\n  const { id, accessToken } = routeNotification || {};\r\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!id || !accessToken) return;\r\n    const { instance: currentInstance } = api();\r\n    const { masto, instance } = api({\r\n      accessToken,\r\n    });\r\n    console.log('API', { accessToken, currentInstance, instance });\r\n    const sameInstance = currentInstance === instance;\r\n    const account = accessToken\r\n      ? getAccountByAccessToken(accessToken)\r\n      : getCurrentAccount();\r\n    (async () => {\r\n      const notification = await masto.v1.notifications.$select(id).fetch();\r\n      if (notification && account) {\r\n        console.log('🛎️ Notification', { id, notification, account });\r\n        const accountInstance = account.instanceURL;\r\n        const { type, status, account: notificationAccount } = notification;\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\r\n        const hasAccount = !!notificationAccount?.id;\r\n        const hasStatus = !!status?.id;\r\n        if (isFollow && sameInstance) {\r\n          // Show account sheet, can handle different instances\r\n          states.showAccount = {\r\n            account: notificationAccount,\r\n            instance: accountInstance,\r\n          };\r\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\r\n          // Show sheet of notification, if\r\n          // - there is a modal open\r\n          // - the notification is from another instance\r\n          // - the notification has both account and status, gives choice for users to go to account or status\r\n          setShowNotificationSheet({\r\n            id,\r\n            account,\r\n            notification,\r\n            sameInstance,\r\n          });\r\n        } else {\r\n          if (hasStatus) {\r\n            // Go to status page\r\n            location.hash = `/${currentInstance}/s/${status.id}`;\r\n          } else if (isFollow) {\r\n            // Go to profile page\r\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\r\n          } else {\r\n            // Go to notifications page\r\n            location.hash = '/notifications';\r\n          }\r\n        }\r\n      } else {\r\n        console.warn('🛎️ Notification not found', id);\r\n      }\r\n    })();\r\n  }, [id, accessToken]);\r\n\r\n  // useLayoutEffect(() => {\r\n  //   // Listen to message from service worker\r\n  //   const handleMessage = (event) => {\r\n  //     console.log('💥💥💥 Message event', event);\r\n  //     const { type, id, accessToken } = event?.data || {};\r\n  //     if (type === 'notification') {\r\n  //       states.routeNotification = {\r\n  //         id,\r\n  //         accessToken,\r\n  //       };\r\n  //     }\r\n  //   };\r\n  //   console.log('👂👂👂 Listen to message');\r\n  //   navigator.serviceWorker.addEventListener('message', handleMessage);\r\n  //   return () => {\r\n  //     console.log('👂👂👂 Remove listen to message');\r\n  //     navigator.serviceWorker.removeEventListener('message', handleMessage);\r\n  //   };\r\n  // }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    if (navigator?.clearAppBadge) {\r\n      navigator.clearAppBadge();\r\n    }\r\n  }, []);\r\n  usePageVisibility((visible) => {\r\n    if (visible && navigator?.clearAppBadge) {\r\n      console.log('🔰 Clear app badge');\r\n      navigator.clearAppBadge();\r\n    }\r\n  });\r\n\r\n  const onClose = () => {\r\n    setShowNotificationSheet(false);\r\n    states.routeNotification = null;\r\n\r\n    // If url is #/notifications?id=123, go to #/notifications\r\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\r\n      location.hash = '/notifications';\r\n    }\r\n  };\r\n\r\n  if (showNotificationSheet) {\r\n    const { id, account, notification, sameInstance } = showNotificationSheet;\r\n    return (\r\n      <Modal\r\n        class=\"light\"\r\n        onClick={(e) => {\r\n          if (e.target === e.currentTarget) {\r\n            onClose();\r\n          }\r\n        }}\r\n      >\r\n        <div class=\"sheet\" tabIndex=\"-1\">\r\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n          <header>\r\n            <b>Notification</b>\r\n          </header>\r\n          <main>\r\n            {!sameInstance && (\r\n              <p>This notification is from your other account.</p>\r\n            )}\r\n            <div\r\n              class=\"notification-peek\"\r\n              // style={{\r\n              //   pointerEvents: sameInstance ? '' : 'none',\r\n              // }}\r\n              onClick={(e) => {\r\n                const { target } = e;\r\n                // If button or links\r\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\r\n                  onClose();\r\n                }\r\n              }}\r\n            >\r\n              <Notification\r\n                instance={account.instanceURL}\r\n                notification={notification}\r\n                isStatic\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                textAlign: 'end',\r\n              }}\r\n            >\r\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\r\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\r\n              </Link>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n","import { forwardRef } from 'preact/compat';\r\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport { api } from '../utils/api';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\n\r\nconst SearchForm = forwardRef((props, ref) => {\r\n  const { instance } = api();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\r\n  const [query, setQuery] = useState(searchParams.get('q') || '');\r\n  const type = searchParams.get('type');\r\n  const formRef = useRef(null);\r\n\r\n  const searchFieldRef = useRef(null);\r\n  useImperativeHandle(ref, () => ({\r\n    setValue: (value) => {\r\n      setQuery(value);\r\n    },\r\n    focus: () => {\r\n      searchFieldRef.current.focus();\r\n    },\r\n    select: () => {\r\n      searchFieldRef.current.select();\r\n    },\r\n    blur: () => {\r\n      searchFieldRef.current.blur();\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <form\r\n      ref={formRef}\r\n      class=\"search-popover-container\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n\r\n        const isSearchPage = /\\/search/.test(location.hash);\r\n        if (isSearchPage) {\r\n          if (query) {\r\n            const params = {\r\n              q: query,\r\n            };\r\n            if (type) params.type = type; // Preserve type\r\n            setSearchParams(params);\r\n          } else {\r\n            setSearchParams({});\r\n          }\r\n        } else {\r\n          if (query) {\r\n            location.hash = `/search?q=${encodeURIComponent(query)}${\r\n              type ? `&type=${type}` : ''\r\n            }`;\r\n          } else {\r\n            location.hash = `/search`;\r\n          }\r\n        }\r\n\r\n        props?.onSubmit?.(e);\r\n      }}\r\n    >\r\n      <input\r\n        ref={searchFieldRef}\r\n        value={query}\r\n        name=\"q\"\r\n        type=\"search\"\r\n        // autofocus\r\n        placeholder=\"Search\"\r\n        dir=\"auto\"\r\n        autocomplete=\"off\"\r\n        autocorrect=\"off\"\r\n        autocapitalize=\"off\"\r\n        spellcheck=\"false\"\r\n        onSearch={(e) => {\r\n          if (!e.target.value) {\r\n            setSearchParams({});\r\n          }\r\n        }}\r\n        onInput={(e) => {\r\n          setQuery(e.target.value);\r\n          setSearchMenuOpen(true);\r\n        }}\r\n        onFocus={() => {\r\n          setSearchMenuOpen(true);\r\n          formRef.current\r\n            ?.querySelector('.search-popover-item')\r\n            ?.classList.add('focus');\r\n        }}\r\n        onBlur={() => {\r\n          setTimeout(() => {\r\n            setSearchMenuOpen(false);\r\n          }, 100);\r\n          formRef.current\r\n            ?.querySelector('.search-popover-item.focus')\r\n            ?.classList.remove('focus');\r\n        }}\r\n        onKeyDown={(e) => {\r\n          const { key } = e;\r\n          switch (key) {\r\n            case 'Escape':\r\n              setSearchMenuOpen(false);\r\n              break;\r\n            case 'Down':\r\n            case 'ArrowDown':\r\n              e.preventDefault();\r\n              if (searchMenuOpen) {\r\n                const focusItem = formRef.current.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  let nextItem = focusItem.nextElementSibling;\r\n                  while (nextItem && nextItem.hidden) {\r\n                    nextItem = nextItem.nextElementSibling;\r\n                  }\r\n                  if (nextItem) {\r\n                    nextItem.classList.add('focus');\r\n                    const siblings = Array.from(\r\n                      nextItem.parentElement.children,\r\n                    ).filter((el) => el !== nextItem);\r\n                    siblings.forEach((el) => {\r\n                      el.classList.remove('focus');\r\n                    });\r\n                  }\r\n                } else {\r\n                  const firstItem = formRef.current.querySelector(\r\n                    '.search-popover-item',\r\n                  );\r\n                  if (firstItem) {\r\n                    firstItem.classList.add('focus');\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'Up':\r\n            case 'ArrowUp':\r\n              e.preventDefault();\r\n              if (searchMenuOpen) {\r\n                const focusItem = document.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  let prevItem = focusItem.previousElementSibling;\r\n                  while (prevItem && prevItem.hidden) {\r\n                    prevItem = prevItem.previousElementSibling;\r\n                  }\r\n                  if (prevItem) {\r\n                    prevItem.classList.add('focus');\r\n                    const siblings = Array.from(\r\n                      prevItem.parentElement.children,\r\n                    ).filter((el) => el !== prevItem);\r\n                    siblings.forEach((el) => {\r\n                      el.classList.remove('focus');\r\n                    });\r\n                  }\r\n                } else {\r\n                  const lastItem = document.querySelector(\r\n                    '.search-popover-item:last-child',\r\n                  );\r\n                  if (lastItem) {\r\n                    lastItem.classList.add('focus');\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'Enter':\r\n              if (searchMenuOpen) {\r\n                const focusItem = document.querySelector(\r\n                  '.search-popover-item.focus',\r\n                );\r\n                if (focusItem) {\r\n                  e.preventDefault();\r\n                  focusItem.click();\r\n                }\r\n                setSearchMenuOpen(false);\r\n                props?.onSubmit?.(e);\r\n              }\r\n              break;\r\n          }\r\n        }}\r\n      />\r\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\r\n        {/* {!!query && (\r\n          <Link\r\n            to={`/search?q=${encodeURIComponent(query)}`}\r\n            class=\"search-popover-item focus\"\r\n            onClick={(e) => {\r\n              props?.onSubmit?.(e);\r\n            }}\r\n          >\r\n            <Icon icon=\"search\" />\r\n            <span>{query}</span>\r\n          </Link>\r\n        )} */}\r\n        {!!query &&\r\n          [\r\n            {\r\n              label: (\r\n                <>\r\n                  {query}{' '}\r\n                  <small class=\"insignificant\">\r\n                    ‒ accounts, hashtags &amp; posts\r\n                  </small>\r\n                </>\r\n              ),\r\n              to: `/search?q=${encodeURIComponent(query)}`,\r\n              top: !type && !/\\s/.test(query),\r\n              hidden: !!type,\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Posts with <q>{query}</q>\r\n                </>\r\n              ),\r\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\r\n              hidden: /^https?:/.test(query),\r\n              top: /\\s/.test(query),\r\n              icon: 'document',\r\n              queryType: 'statuses',\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\r\n                </>\r\n              ),\r\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\r\n              hidden:\r\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\r\n              top: /^#/.test(query),\r\n              type: 'link',\r\n              icon: 'hashtag',\r\n              queryType: 'hashtags',\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Look up <mark>{query}</mark>\r\n                </>\r\n              ),\r\n              to: `/${query}`,\r\n              hidden: !/^https?:/.test(query),\r\n              top: /^https?:/.test(query),\r\n              type: 'link',\r\n            },\r\n            {\r\n              label: (\r\n                <>\r\n                  Accounts with <q>{query}</q>\r\n                </>\r\n              ),\r\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\r\n              icon: 'group',\r\n              queryType: 'accounts',\r\n            },\r\n          ]\r\n            .sort((a, b) => {\r\n              if (type) {\r\n                if (a.queryType === type) return -1;\r\n                if (b.queryType === type) return 1;\r\n              }\r\n              if (a.top && !b.top) return -1;\r\n              if (!a.top && b.top) return 1;\r\n              return 0;\r\n            })\r\n            .filter(({ hidden }) => !hidden)\r\n            .map(({ label, to, icon, type }, i) => (\r\n              <Link\r\n                to={to}\r\n                class={`search-popover-item ${i === 0 ? 'focus' : ''}`}\r\n                // hidden={hidden}\r\n                onClick={(e) => {\r\n                  props?.onSubmit?.(e);\r\n                }}\r\n              >\r\n                <Icon\r\n                  icon={icon || (type === 'link' ? 'arrow-right' : 'search')}\r\n                  class=\"more-insignificant\"\r\n                />\r\n                <span>{label}</span>{' '}\r\n              </Link>\r\n            ))}\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default SearchForm;\r\n","import './search-command.css';\r\n\r\nimport { memo } from 'preact/compat';\r\nimport { useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport SearchForm from './search-form';\r\n\r\nexport default memo(function SearchCommand({ onClose = () => {} }) {\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const searchFormRef = useRef(null);\r\n\r\n  useHotkeys(\r\n    ['Slash', '/'],\r\n    (e) => {\r\n      setShowSearch(true);\r\n      setTimeout(() => {\r\n        searchFormRef.current?.focus?.();\r\n        searchFormRef.current?.select?.();\r\n      }, 0);\r\n    },\r\n    {\r\n      preventDefault: true,\r\n      ignoreEventWhen: (e) => {\r\n        const isSearchPage = /\\/search/.test(location.hash);\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return isSearchPage || hasModal;\r\n      },\r\n    },\r\n  );\r\n\r\n  const closeSearch = () => {\r\n    setShowSearch(false);\r\n    onClose();\r\n  };\r\n\r\n  useHotkeys(\r\n    'esc',\r\n    (e) => {\r\n      searchFormRef.current?.blur?.();\r\n      closeSearch();\r\n    },\r\n    {\r\n      enabled: showSearch,\r\n      enableOnFormTags: true,\r\n      preventDefault: true,\r\n    },\r\n  );\r\n\r\n  return (\r\n    <div\r\n      id=\"search-command-container\"\r\n      hidden={!showSearch}\r\n      onClick={(e) => {\r\n        console.log(e);\r\n        if (e.target === e.currentTarget) {\r\n          closeSearch();\r\n        }\r\n      }}\r\n    >\r\n      <SearchForm\r\n        ref={searchFormRef}\r\n        onSubmit={() => {\r\n          closeSearch();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import './shortcuts.css';\r\n\r\nimport { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { memo } from 'preact/compat';\r\nimport { useMemo, useRef } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\r\nimport { api } from '../utils/api';\r\nimport states from '../utils/states';\r\n\r\nimport AsyncText from './AsyncText';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Menu2 from './menu2';\r\nimport MenuLink from './menu-link';\r\n\r\nfunction Shortcuts() {\r\n  const { instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const { shortcuts, settings } = snapStates;\r\n\r\n  if (!shortcuts.length) {\r\n    return null;\r\n  }\r\n  if (\r\n    settings.shortcutsViewMode === 'multi-column' ||\r\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const menuRef = useRef();\r\n\r\n  const formattedShortcuts = useMemo(\r\n    () =>\r\n      shortcuts\r\n        .map((pin, i) => {\r\n          const { type, ...data } = pin;\r\n          if (!SHORTCUTS_META[type]) return null;\r\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\r\n\r\n          if (typeof id === 'function') {\r\n            id = id(data, i);\r\n          }\r\n          if (typeof path === 'function') {\r\n            path = path(\r\n              {\r\n                ...data,\r\n                instance: data.instance || instance,\r\n              },\r\n              i,\r\n            );\r\n          }\r\n          if (typeof title === 'function') {\r\n            title = title(data, i);\r\n          }\r\n          if (typeof subtitle === 'function') {\r\n            subtitle = subtitle(data, i);\r\n          }\r\n          if (typeof icon === 'function') {\r\n            icon = icon(data, i);\r\n          }\r\n\r\n          return {\r\n            id,\r\n            path,\r\n            title,\r\n            subtitle,\r\n            icon,\r\n          };\r\n        })\r\n        .filter(Boolean),\r\n    [shortcuts],\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\r\n    const index = parseInt(handler.keys[0], 10) - 1;\r\n    if (index < formattedShortcuts.length) {\r\n      const { path } = formattedShortcuts[index];\r\n      if (path) {\r\n        navigate(path);\r\n        menuRef.current?.closeMenu?.();\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"shortcuts\">\r\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\r\n        <nav\r\n          class=\"tab-bar\"\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            states.showShortcutsSettings = true;\r\n          }}\r\n        >\r\n          <ul>\r\n            {formattedShortcuts.map(\r\n              ({ id, path, title, subtitle, icon }, i) => {\r\n                return (\r\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\r\n                    <Link\r\n                      class={subtitle ? 'has-subtitle' : ''}\r\n                      to={path}\r\n                      onClick={(e) => {\r\n                        if (e.target.classList.contains('is-active')) {\r\n                          e.preventDefault();\r\n                          const page = document.getElementById(`${id}-page`);\r\n                          console.log(id, page);\r\n                          if (page) {\r\n                            page.scrollTop = 0;\r\n                            const updatesButton =\r\n                              page.querySelector('.updates-button');\r\n                            if (updatesButton) {\r\n                              updatesButton.click();\r\n                            }\r\n                          }\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Icon icon={icon} size=\"xl\" alt={title} />\r\n                      <span>\r\n                        <AsyncText>{title}</AsyncText>\r\n                        {subtitle && (\r\n                          <>\r\n                            <br />\r\n                            <small>{subtitle}</small>\r\n                          </>\r\n                        )}\r\n                      </span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              },\r\n            )}\r\n          </ul>\r\n        </nav>\r\n      ) : (\r\n        <Menu2\r\n          instanceRef={menuRef}\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          menuClassName=\"glass-menu shortcuts-menu\"\r\n          gap={8}\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button\r\n              type=\"button\"\r\n              id=\"shortcuts-button\"\r\n              class=\"plain\"\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                states.showShortcutsSettings = true;\r\n              }}\r\n              onTransitionStart={(e) => {\r\n                // Close menu if the button disappears\r\n                try {\r\n                  const { target } = e;\r\n                  if (getComputedStyle(target).pointerEvents === 'none') {\r\n                    menuRef.current?.closeMenu?.();\r\n                  }\r\n                } catch (e) {}\r\n              }}\r\n            >\r\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\r\n            </button>\r\n          }\r\n        >\r\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\r\n            return (\r\n              <MenuLink\r\n                to={path}\r\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\r\n                class=\"glass-menu-item\"\r\n              >\r\n                <Icon icon={icon} size=\"l\" />{' '}\r\n                <span class=\"menu-grow\">\r\n                  <span>\r\n                    <AsyncText>{title}</AsyncText>\r\n                  </span>\r\n                  {subtitle && (\r\n                    <>\r\n                      {' '}\r\n                      <small class=\"more-insignificant\">{subtitle}</small>\r\n                    </>\r\n                  )}\r\n                </span>\r\n                <span class=\"menu-shortcut hide-until-focus-visible\">\r\n                  {i + 1}\r\n                </span>\r\n              </MenuLink>\r\n            );\r\n          })}\r\n        </Menu2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Shortcuts);\r\n","import { api } from './api';\r\nimport { extractTagsFromStatus, getFollowedTags } from './followed-tags';\r\nimport pmem from './pmem';\r\nimport { fetchRelationships } from './relationships';\r\nimport states, { saveStatus, statusKey } from './states';\r\nimport store from './store';\r\n\r\nexport function groupBoosts(values) {\r\n  let newValues = [];\r\n  let boostStash = [];\r\n  let serialBoosts = 0;\r\n  for (let i = 0; i < values.length; i++) {\r\n    const item = values[i];\r\n    if (item.reblog && !item.account?.group) {\r\n      boostStash.push(item);\r\n      serialBoosts++;\r\n    } else {\r\n      newValues.push(item);\r\n      if (serialBoosts < 3) {\r\n        serialBoosts = 0;\r\n      }\r\n    }\r\n  }\r\n  // if boostStash is more than quarter of values\r\n  // or if there are 3 or more boosts in a row\r\n  if (\r\n    values.length > 10 &&\r\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\r\n  ) {\r\n    // if boostStash is more than 3 quarter of values\r\n    const boostStashID = boostStash.map((status) => status.id);\r\n    if (boostStash.length > (values.length * 3) / 4) {\r\n      // insert boost array at the end of specialHome list\r\n      newValues = [\r\n        ...newValues,\r\n        { id: boostStashID, items: boostStash, type: 'boosts' },\r\n      ];\r\n    } else {\r\n      // insert boosts array in the middle of specialHome list\r\n      const half = Math.floor(newValues.length / 2);\r\n      newValues = [\r\n        ...newValues.slice(0, half),\r\n        {\r\n          id: boostStashID,\r\n          items: boostStash,\r\n          type: 'boosts',\r\n        },\r\n        ...newValues.slice(half),\r\n      ];\r\n    }\r\n    return newValues;\r\n  } else {\r\n    return values;\r\n  }\r\n}\r\n\r\nexport function dedupeBoosts(items, instance) {\r\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\r\n  const filteredItems = items.filter((item) => {\r\n    if (!item.reblog) return true;\r\n    const statusKey = `${instance}-${item.reblog.id}`;\r\n    const boosterID = boostedStatusIDs[statusKey];\r\n    if (boosterID && boosterID !== item.id) {\r\n      console.warn(\r\n        `🚫 Duplicate boost by ${item.account.displayName}`,\r\n        item,\r\n        item.reblog,\r\n      );\r\n      return false;\r\n    } else {\r\n      boostedStatusIDs[statusKey] = item.id;\r\n    }\r\n    return true;\r\n  });\r\n  // Limit to 50\r\n  const keys = Object.keys(boostedStatusIDs);\r\n  if (keys.length > 50) {\r\n    keys.slice(0, keys.length - 50).forEach((key) => {\r\n      delete boostedStatusIDs[key];\r\n    });\r\n  }\r\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\r\n  return filteredItems;\r\n}\r\n\r\nexport function groupContext(items, instance) {\r\n  const contexts = [];\r\n  let contextIndex = 0;\r\n  items.forEach((item) => {\r\n    for (let i = 0; i < contexts.length; i++) {\r\n      if (contexts[i].find((t) => t.id === item.id)) return;\r\n      if (\r\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\r\n        contexts[i].find((t) => t.inReplyToId === item.id)\r\n      ) {\r\n        contexts[i].push(item);\r\n        return;\r\n      }\r\n    }\r\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\r\n    if (repliedItem) {\r\n      contexts[contextIndex++] = [item, repliedItem];\r\n    }\r\n  });\r\n\r\n  // Check for cross-item contexts\r\n  // Merge contexts into one if they have a common item (same id)\r\n  for (let i = 0; i < contexts.length; i++) {\r\n    for (let j = i + 1; j < contexts.length; j++) {\r\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\r\n      if (commonItem) {\r\n        contexts[i] = [...contexts[i], ...contexts[j]];\r\n        // Remove duplicate items\r\n        contexts[i] = contexts[i].filter(\r\n          (item, index, self) =>\r\n            self.findIndex((t) => t.id === item.id) === index,\r\n        );\r\n        contexts.splice(j, 1);\r\n        j--;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sort items by checking inReplyToId\r\n  contexts.forEach((context) => {\r\n    context.sort((a, b) => {\r\n      if (!a.inReplyToId && !b.inReplyToId) {\r\n        return new Date(a.createdAt) - new Date(b.createdAt);\r\n      }\r\n      if (a.inReplyToId === b.id) return 1;\r\n      if (b.inReplyToId === a.id) return -1;\r\n      if (!a.inReplyToId) return -1;\r\n      if (!b.inReplyToId) return 1;\r\n      return new Date(a.createdAt) - new Date(b.createdAt);\r\n    });\r\n  });\r\n\r\n  // Tag items that has different author than first post's author\r\n  contexts.forEach((context) => {\r\n    const firstItemAccountID = context[0].account.id;\r\n    context.forEach((item) => {\r\n      if (item.account.id !== firstItemAccountID) {\r\n        item._differentAuthor = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  if (contexts.length) console.log('🧵 Contexts', contexts);\r\n\r\n  const newItems = [];\r\n  const appliedContextIndices = [];\r\n  items.forEach((item) => {\r\n    if (item.reblog) {\r\n      newItems.push(item);\r\n      return;\r\n    }\r\n    for (let i = 0; i < contexts.length; i++) {\r\n      if (contexts[i].find((t) => t.id === item.id)) {\r\n        if (appliedContextIndices.includes(i)) return;\r\n        const contextItems = contexts[i];\r\n        contextItems.sort((a, b) => {\r\n          const aDate = new Date(a.createdAt);\r\n          const bDate = new Date(b.createdAt);\r\n          return aDate - bDate;\r\n        });\r\n        const firstItemAccountID = contextItems[0].account.id;\r\n        newItems.push({\r\n          id: contextItems.map((i) => i.id),\r\n          items: contextItems,\r\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\r\n            ? 'thread'\r\n            : 'conversation',\r\n        });\r\n        appliedContextIndices.push(i);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (item.inReplyToId && item.inReplyToAccountId !== item.account.id) {\r\n      const sKey = statusKey(item.id, instance);\r\n      if (!states.statusReply[sKey]) {\r\n        // If it's a reply and not a thread\r\n        queueMicrotask(async () => {\r\n          try {\r\n            const { masto } = api({ instance });\r\n            // const replyToStatus = await masto.v1.statuses\r\n            //   .$select(item.inReplyToId)\r\n            //   .fetch();\r\n            const replyToStatus = await fetchStatus(item.inReplyToId, masto);\r\n            saveStatus(replyToStatus, instance, {\r\n              skipThreading: true,\r\n              skipUnfurling: true,\r\n            });\r\n            states.statusReply[sKey] = {\r\n              id: replyToStatus.id,\r\n              instance,\r\n            };\r\n          } catch (e) {\r\n            // Silently fail\r\n            console.error(e);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    newItems.push(item);\r\n  });\r\n\r\n  return newItems;\r\n}\r\n\r\nconst fetchStatus = pmem((statusID, masto) => {\r\n  return masto.v1.statuses.$select(statusID).fetch();\r\n});\r\n\r\nexport async function assignFollowedTags(items, instance) {\r\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\r\n  if (!followedTags.length) return;\r\n  const { statusFollowedTags } = states;\r\n  console.log('statusFollowedTags', statusFollowedTags);\r\n  const statusWithFollowedTags = [];\r\n  items.forEach((item) => {\r\n    if (item.reblog) return;\r\n    const { id, content, tags = [] } = item;\r\n    const sKey = statusKey(id, instance);\r\n    if (statusFollowedTags[sKey]?.length) return;\r\n    const extractedTags = extractTagsFromStatus(content);\r\n    if (!extractedTags.length && !tags.length) return;\r\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\r\n      if (\r\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\r\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\r\n      ) {\r\n        acc.push(tag.name);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    if (itemFollowedTags.length) {\r\n      // statusFollowedTags[sKey] = itemFollowedTags;\r\n      statusWithFollowedTags.push({\r\n        item,\r\n        sKey,\r\n        followedTags: itemFollowedTags,\r\n      });\r\n    }\r\n  });\r\n\r\n  if (statusWithFollowedTags.length) {\r\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\r\n    const relationships = await fetchRelationships(accounts);\r\n    if (!relationships) return;\r\n\r\n    statusWithFollowedTags.forEach((s) => {\r\n      const { item, sKey, followedTags } = s;\r\n      const r = relationships[item.account.id];\r\n      if (r && !r.following) {\r\n        statusFollowedTags[sKey] = followedTags;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function clearFollowedTagsState() {\r\n  states.statusFollowedTags = {};\r\n}\r\n","import { useLayoutEffect, useState } from 'preact/hooks';\r\n\r\nexport default function useScroll({\r\n  scrollableRef,\r\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\r\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\r\n  scrollThresholdStart = 10,\r\n  scrollThresholdEnd = 10,\r\n  direction = 'vertical',\r\n  distanceFromStartPx: _distanceFromStartPx,\r\n  distanceFromEndPx: _distanceFromEndPx,\r\n} = {}) {\r\n  const [scrollDirection, setScrollDirection] = useState(null);\r\n  const [reachStart, setReachStart] = useState(false);\r\n  const [reachEnd, setReachEnd] = useState(false);\r\n  const [nearReachStart, setNearReachStart] = useState(false);\r\n  const [nearReachEnd, setNearReachEnd] = useState(false);\r\n  const isVertical = direction === 'vertical';\r\n\r\n  useLayoutEffect(() => {\r\n    const scrollableElement = scrollableRef.current;\r\n    if (!scrollableElement) return {};\r\n    let previousScrollStart = isVertical\r\n      ? scrollableElement.scrollTop\r\n      : scrollableElement.scrollLeft;\r\n\r\n    function onScroll() {\r\n      const {\r\n        scrollTop,\r\n        scrollLeft,\r\n        scrollHeight,\r\n        scrollWidth,\r\n        clientHeight,\r\n        clientWidth,\r\n      } = scrollableElement;\r\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\r\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\r\n      const clientDimension = isVertical ? clientHeight : clientWidth;\r\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\r\n      const distanceFromStartPx =\r\n        _distanceFromStartPx ||\r\n        Math.min(\r\n          clientDimension * distanceFromStart,\r\n          scrollDimension,\r\n          scrollStart,\r\n        );\r\n      const distanceFromEndPx =\r\n        _distanceFromEndPx ||\r\n        Math.min(\r\n          clientDimension * distanceFromEnd,\r\n          scrollDimension,\r\n          scrollDimension - scrollStart - clientDimension,\r\n        );\r\n\r\n      if (\r\n        scrollDistance >=\r\n        (previousScrollStart < scrollStart\r\n          ? scrollThresholdEnd\r\n          : scrollThresholdStart)\r\n      ) {\r\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\r\n        previousScrollStart = scrollStart;\r\n      }\r\n\r\n      setReachStart(scrollStart <= 0);\r\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\r\n      setNearReachStart(scrollStart <= distanceFromStartPx);\r\n      setNearReachEnd(\r\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\r\n      );\r\n    }\r\n\r\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\r\n\r\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\r\n  }, [\r\n    distanceFromStart,\r\n    distanceFromEnd,\r\n    scrollThresholdStart,\r\n    scrollThresholdEnd,\r\n  ]);\r\n\r\n  return {\r\n    scrollDirection,\r\n    reachStart,\r\n    reachEnd,\r\n    nearReachStart,\r\n    nearReachEnd,\r\n    init: () => {\r\n      if (scrollableRef.current) {\r\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\r\n      }\r\n    },\r\n  };\r\n}\r\n","import { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\r\nimport { useThrottledCallback } from 'use-debounce';\r\n\r\nexport default function useScrollFn(\r\n  {\r\n    scrollableRef,\r\n    distanceFromStart = 1, // ratio of clientHeight/clientWidth\r\n    distanceFromEnd = 1, // ratio of clientHeight/clientWidth\r\n    scrollThresholdStart = 10,\r\n    scrollThresholdEnd = 10,\r\n    direction = 'vertical',\r\n    distanceFromStartPx: _distanceFromStartPx,\r\n    distanceFromEndPx: _distanceFromEndPx,\r\n    init,\r\n  } = {},\r\n  callback,\r\n  deps,\r\n) {\r\n  if (!callback) return;\r\n  // const [scrollDirection, setScrollDirection] = useState(null);\r\n  // const [reachStart, setReachStart] = useState(false);\r\n  // const [reachEnd, setReachEnd] = useState(false);\r\n  // const [nearReachStart, setNearReachStart] = useState(false);\r\n  // const [nearReachEnd, setNearReachEnd] = useState(false);\r\n  const isVertical = direction === 'vertical';\r\n  const previousScrollStart = useRef(null);\r\n  const scrollDirection = useRef(null);\r\n\r\n  const onScroll = useThrottledCallback(() => {\r\n    // let scrollDirection = null;\r\n    let reachStart = false;\r\n    let reachEnd = false;\r\n    let nearReachStart = false;\r\n    let nearReachEnd = false;\r\n\r\n    const scrollableElement = scrollableRef.current;\r\n    const {\r\n      scrollTop,\r\n      scrollLeft,\r\n      scrollHeight,\r\n      scrollWidth,\r\n      clientHeight,\r\n      clientWidth,\r\n    } = scrollableElement;\r\n    const scrollStart = isVertical ? scrollTop : scrollLeft;\r\n    const scrollDimension = isVertical ? scrollHeight : scrollWidth;\r\n    const clientDimension = isVertical ? clientHeight : clientWidth;\r\n    const scrollDistance = Math.abs(scrollStart - previousScrollStart.current);\r\n    const distanceFromStartPx =\r\n      _distanceFromStartPx ||\r\n      Math.min(\r\n        clientDimension * distanceFromStart,\r\n        scrollDimension,\r\n        scrollStart,\r\n      );\r\n    const distanceFromEndPx =\r\n      _distanceFromEndPx ||\r\n      Math.min(\r\n        clientDimension * distanceFromEnd,\r\n        scrollDimension,\r\n        scrollDimension - scrollStart - clientDimension,\r\n      );\r\n\r\n    if (\r\n      scrollDistance >=\r\n      (previousScrollStart.current < scrollStart\r\n        ? scrollThresholdEnd\r\n        : scrollThresholdStart)\r\n    ) {\r\n      // setScrollDirection(\r\n      //   previousScrollStart.current < scrollStart ? 'end' : 'start',\r\n      // );\r\n      scrollDirection.current =\r\n        previousScrollStart.current < scrollStart ? 'end' : 'start';\r\n      previousScrollStart.current = scrollStart;\r\n    }\r\n\r\n    // setReachStart(scrollStart <= 0);\r\n    // setReachEnd(scrollStart + clientDimension >= scrollDimension);\r\n    // setNearReachStart(scrollStart <= distanceFromStartPx);\r\n    // setNearReachEnd(\r\n    //   scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\r\n    // );\r\n    reachStart = scrollStart <= 0;\r\n    reachEnd = scrollStart + clientDimension >= scrollDimension;\r\n    nearReachStart = scrollStart <= distanceFromStartPx;\r\n    nearReachEnd =\r\n      scrollStart + clientDimension >= scrollDimension - distanceFromEndPx;\r\n\r\n    callback({\r\n      scrollDirection: scrollDirection.current,\r\n      reachStart,\r\n      reachEnd,\r\n      nearReachStart,\r\n      nearReachEnd,\r\n    });\r\n  }, 500);\r\n\r\n  useLayoutEffect(() => {\r\n    const scrollableElement = scrollableRef.current;\r\n    if (!scrollableElement) return {};\r\n    previousScrollStart.current =\r\n      scrollableElement[isVertical ? 'scrollTop' : 'scrollLeft'];\r\n\r\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\r\n\r\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\r\n  }, [\r\n    distanceFromStart,\r\n    distanceFromEnd,\r\n    scrollThresholdStart,\r\n    scrollThresholdEnd,\r\n    ...deps,\r\n  ]);\r\n\r\n  // useEffect(() => {\r\n  //   callback({\r\n  //     scrollDirection,\r\n  //     reachStart,\r\n  //     reachEnd,\r\n  //     nearReachStart,\r\n  //     nearReachEnd,\r\n  //   });\r\n  // }, [\r\n  //   scrollDirection,\r\n  //   reachStart,\r\n  //   reachEnd,\r\n  //   nearReachStart,\r\n  //   nearReachEnd,\r\n  //   ...deps,\r\n  // ]);\r\n\r\n  useEffect(() => {\r\n    if (init && scrollableRef.current) {\r\n      queueMicrotask(() => {\r\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\r\n      });\r\n    }\r\n  }, [init]);\r\n\r\n  // return {\r\n  //   scrollDirection,\r\n  //   reachStart,\r\n  //   reachEnd,\r\n  //   nearReachStart,\r\n  //   nearReachEnd,\r\n  //   init: () => {\r\n  //     if (scrollableRef.current) {\r\n  //       scrollableRef.current.dispatchEvent(new Event('scroll'));\r\n  //     }\r\n  //   },\r\n  // };\r\n}\r\n","import './media-post.css';\r\n\r\nimport { memo } from 'preact/compat';\r\nimport { useContext, useMemo } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport FilterContext from '../utils/filter-context';\r\nimport { isFiltered } from '../utils/filters';\r\nimport states, { statusKey } from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nimport Media from './media';\r\n\r\nfunction MediaPost({\r\n  class: className,\r\n  statusID,\r\n  status,\r\n  instance,\r\n  parent,\r\n  // allowFilters,\r\n  onMediaClick,\r\n}) {\r\n  let sKey = statusKey(statusID, instance);\r\n  const snapStates = useSnapshot(states);\r\n  if (!status) {\r\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\r\n    sKey = statusKey(status?.id, instance);\r\n  }\r\n  if (!status) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    account: {\r\n      acct,\r\n      avatar,\r\n      avatarStatic,\r\n      id: accountId,\r\n      url: accountURL,\r\n      displayName,\r\n      username,\r\n      emojis: accountEmojis,\r\n      bot,\r\n      group,\r\n    },\r\n    id,\r\n    repliesCount,\r\n    reblogged,\r\n    reblogsCount,\r\n    favourited,\r\n    favouritesCount,\r\n    bookmarked,\r\n    poll,\r\n    muted,\r\n    sensitive,\r\n    spoilerText,\r\n    visibility, // public, unlisted, private, direct\r\n    language,\r\n    editedAt,\r\n    filtered,\r\n    card,\r\n    createdAt,\r\n    inReplyToId,\r\n    inReplyToAccountId,\r\n    content,\r\n    mentions,\r\n    mediaAttachments,\r\n    reblog,\r\n    uri,\r\n    url,\r\n    emojis,\r\n    // Non-API props\r\n    _deleted,\r\n    _pinned,\r\n    // _filtered,\r\n  } = status;\r\n\r\n  if (!mediaAttachments?.length) {\r\n    return null;\r\n  }\r\n\r\n  const debugHover = (e) => {\r\n    if (e.shiftKey) {\r\n      console.log({\r\n        ...status,\r\n      });\r\n    }\r\n  };\r\n\r\n  const currentAccount = useMemo(() => {\r\n    return store.session.get('currentAccount');\r\n  }, []);\r\n  const isSelf = useMemo(() => {\r\n    return currentAccount && currentAccount === accountId;\r\n  }, [accountId, currentAccount]);\r\n\r\n  const filterContext = useContext(FilterContext);\r\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\r\n\r\n  if (filterInfo?.action === 'hide') {\r\n    return null;\r\n  }\r\n\r\n  console.debug('RENDER Media post', id, status?.account.displayName);\r\n\r\n  const hasSpoiler = sensitive;\r\n  const readingExpandMedia = useMemo(() => {\r\n    // default | show_all | hide_all\r\n    const prefs = store.account.get('preferences') || {};\r\n    return prefs['reading:expand:media'] || 'default';\r\n  }, []);\r\n  const showSpoilerMedia = readingExpandMedia === 'show_all';\r\n\r\n  const Parent = parent || 'div';\r\n\r\n  return mediaAttachments.map((media, i) => {\r\n    const mediaKey = `${sKey}-${media.id}`;\r\n    const filterTitleStr = filterInfo?.titlesStr;\r\n    return (\r\n      <Parent\r\n        data-state-post-id={sKey}\r\n        onMouseEnter={debugHover}\r\n        key={mediaKey}\r\n        data-spoiler-text={\r\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\r\n        }\r\n        data-filtered-text={\r\n          filterInfo\r\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\r\n            : undefined\r\n        }\r\n        class={`\r\n          media-post\r\n          ${filterInfo ? 'filtered' : ''}\r\n          ${hasSpoiler ? 'has-spoiler' : ''}\r\n          ${showSpoilerMedia ? 'show-media' : ''}\r\n        `}\r\n      >\r\n        <Media\r\n          class={className}\r\n          media={media}\r\n          lang={language}\r\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\r\n          onClick={\r\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\r\n          }\r\n        />\r\n      </Parent>\r\n    );\r\n  });\r\n}\r\n\r\nexport default memo(MediaPost);\r\n","import './nav-menu.css';\r\n\r\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { memo } from 'preact/compat';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useLongPress } from 'use-long-press';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport { api } from '../utils/api';\r\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\r\nimport states from '../utils/states';\r\nimport store from '../utils/store';\r\n\r\nimport Avatar from './avatar';\r\nimport Icon from './icon';\r\nimport MenuLink from './menu-link';\r\n\r\nfunction NavMenu(props) {\r\n  const snapStates = useSnapshot(states);\r\n  const { masto, instance, authenticated } = api();\r\n\r\n  const [currentAccount, setCurrentAccount] = useState();\r\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const accounts = store.local.getJSON('accounts') || [];\r\n    const acc = accounts.find(\r\n      (account) => account.info.id === store.session.get('currentAccount'),\r\n    );\r\n    if (acc) setCurrentAccount(acc);\r\n    setMoreThanOneAccount(accounts.length > 1);\r\n  }, []);\r\n\r\n  // Home = Following\r\n  // But when in multi-column mode, Home becomes columns of anything\r\n  // User may choose pin or not to pin Following\r\n  // If user doesn't pin Following, we show it in the menu\r\n  const showFollowing =\r\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\r\n      (!snapStates.settings.shortcutsViewMode &&\r\n        snapStates.settings.shortcutsColumnsMode)) &&\r\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\r\n\r\n  const bindLongPress = useLongPress(\r\n    () => {\r\n      states.showAccounts = true;\r\n    },\r\n    {\r\n      threshold: 600,\r\n      detect: 'touch',\r\n      cancelOnMovement: true,\r\n    },\r\n  );\r\n\r\n  const buttonRef = useRef();\r\n  const [menuState, setMenuState] = useState(undefined);\r\n\r\n  const boundingBoxPadding = safeBoundingBoxPadding([\r\n    0,\r\n    0,\r\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\r\n    0,\r\n  ]);\r\n\r\n  const mutesIterator = useRef();\r\n  async function fetchMutes(firstLoad) {\r\n    if (firstLoad || !mutesIterator.current) {\r\n      mutesIterator.current = masto.v1.mutes.list({\r\n        limit: 80,\r\n      });\r\n    }\r\n    const results = await mutesIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  const blocksIterator = useRef();\r\n  async function fetchBlocks(firstLoad) {\r\n    if (firstLoad || !blocksIterator.current) {\r\n      blocksIterator.current = masto.v1.blocks.list({\r\n        limit: 80,\r\n      });\r\n    }\r\n    const results = await blocksIterator.current.next();\r\n    return results;\r\n  }\r\n\r\n  const buttonClickTS = useRef();\r\n  return (\r\n    <>\r\n      <button\r\n        ref={buttonRef}\r\n        type=\"button\"\r\n        class={`button plain nav-menu-button ${\r\n          moreThanOneAccount ? 'with-avatar' : ''\r\n        } ${open ? 'active' : ''}`}\r\n        style={{ position: 'relative' }}\r\n        onClick={() => {\r\n          buttonClickTS.current = Date.now();\r\n          setMenuState((state) => (!state ? 'open' : undefined));\r\n        }}\r\n        onContextMenu={(e) => {\r\n          e.preventDefault();\r\n          states.showAccounts = true;\r\n        }}\r\n        {...bindLongPress()}\r\n      >\r\n        {moreThanOneAccount && (\r\n          <Avatar\r\n            url={\r\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\r\n            }\r\n            size=\"l\"\r\n            squircle={currentAccount?.info?.bot}\r\n          />\r\n        )}\r\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\r\n      </button>\r\n      <ControlledMenu\r\n        menuClassName=\"nav-menu\"\r\n        state={menuState}\r\n        anchorRef={buttonRef}\r\n        onClose={() => {\r\n          setMenuState(undefined);\r\n        }}\r\n        containerProps={{\r\n          style: {\r\n            zIndex: 10,\r\n          },\r\n          onClick: () => {\r\n            if (Date.now() - buttonClickTS.current < 300) {\r\n              return;\r\n            }\r\n            setMenuState(undefined);\r\n          },\r\n        }}\r\n        portal={{\r\n          target: document.body,\r\n        }}\r\n        {...props}\r\n        overflow=\"auto\"\r\n        viewScroll=\"close\"\r\n        position=\"anchor\"\r\n        align=\"center\"\r\n        boundingBoxPadding={boundingBoxPadding}\r\n        unmountOnClose\r\n      >\r\n        {!!snapStates.appVersion?.commitHash &&\r\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\r\n            <div class=\"top-menu\">\r\n              <MenuItem\r\n                onClick={() => {\r\n                  const yes = confirm('Reload page now to update?');\r\n                  if (yes) {\r\n                    (async () => {\r\n                      try {\r\n                        location.reload();\r\n                      } catch (e) {}\r\n                    })();\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\r\n                <span>New update available…</span>\r\n              </MenuItem>\r\n              <MenuDivider />\r\n            </div>\r\n          )}\r\n        <section>\r\n          <MenuLink to=\"/\">\r\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\r\n          </MenuLink>\r\n          {authenticated && (\r\n            <>\r\n              {showFollowing && (\r\n                <MenuLink to=\"/following\">\r\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\r\n                </MenuLink>\r\n              )}\r\n              <MenuLink to=\"/mentions\">\r\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/notifications\">\r\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\r\n                {snapStates.notificationsShowNew && (\r\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\r\n                    {' '}\r\n                    &bull;\r\n                  </sup>\r\n                )}\r\n              </MenuLink>\r\n              <MenuDivider />\r\n              <MenuLink to=\"/l\">\r\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/ft\">\r\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/b\">\r\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\r\n              </MenuLink>\r\n              <MenuLink to=\"/f\">\r\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\r\n              </MenuLink>\r\n            </>\r\n          )}\r\n          <MenuDivider />\r\n          <MenuLink to={`/search`}>\r\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/p/l`}>\r\n            <Icon icon=\"building\" size=\"l\" /> <span>Local</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/p`}>\r\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\r\n          </MenuLink>\r\n          <MenuLink to={`/${instance}/trending`}>\r\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\r\n          </MenuLink>\r\n        </section>\r\n        <section>\r\n          {authenticated ? (\r\n            <>\r\n              <MenuDivider />\r\n              {currentAccount?.info?.id && (\r\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\r\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\r\n                </MenuLink>\r\n              )}\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showAccounts = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showGenericAccounts = {\r\n                    id: 'mute',\r\n                    heading: 'Muted users',\r\n                    fetchAccounts: fetchMutes,\r\n                    excludeRelationshipAttrs: ['muting'],\r\n                  };\r\n                }}\r\n              >\r\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showGenericAccounts = {\r\n                    id: 'block',\r\n                    heading: 'Blocked users',\r\n                    fetchAccounts: fetchBlocks,\r\n                    excludeRelationshipAttrs: ['blocking'],\r\n                  };\r\n                }}\r\n              >\r\n                <Icon icon=\"block\" size=\"l\" />\r\n                Blocked users&hellip;\r\n              </MenuItem>\r\n              <MenuDivider className=\"divider-grow\" />\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showKeyboardShortcutsHelp = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\r\n                <span>Keyboard shortcuts</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showShortcutsSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\r\n                <span>Shortcuts / Columns&hellip;</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\r\n              </MenuItem>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <MenuDivider />\r\n              <MenuLink to=\"/login\">\r\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\r\n              </MenuLink>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  states.showSettings = true;\r\n                }}\r\n              >\r\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\r\n              </MenuItem>\r\n            </>\r\n          )}\r\n        </section>\r\n      </ControlledMenu>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(NavMenu);\r\n","import { memo } from 'preact/compat';\r\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport FilterContext from '../utils/filter-context';\r\nimport { filteredItems, isFiltered } from '../utils/filters';\r\nimport states, { statusKey } from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\r\nimport useInterval from '../utils/useInterval';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\nimport useScroll from '../utils/useScroll';\r\nimport useScrollFn from '../utils/useScrollFn';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport MediaPost from './media-post';\r\nimport NavMenu from './nav-menu';\r\nimport Status from './status';\r\n\r\nconst scrollIntoViewOptions = {\r\n  block: 'nearest',\r\n  inline: 'center',\r\n  behavior: 'smooth',\r\n};\r\n\r\nfunction Timeline({\r\n  title,\r\n  titleComponent,\r\n  id,\r\n  instance,\r\n  emptyText,\r\n  errorText,\r\n  useItemID, // use statusID instead of status object, assuming it's already in states\r\n  boostsCarousel,\r\n  fetchItems = () => {},\r\n  checkForUpdates = () => {},\r\n  checkForUpdatesInterval = 15_000, // 15 seconds\r\n  headerStart,\r\n  headerEnd,\r\n  timelineStart,\r\n  // allowFilters,\r\n  refresh,\r\n  view,\r\n  filterContext,\r\n  showFollowedTags,\r\n  showReplyParent,\r\n}) {\r\n  const snapStates = useSnapshot(states);\r\n  const [items, setItems] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [showMore, setShowMore] = useState(false);\r\n  const [showNew, setShowNew] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const scrollableRef = useRef();\r\n\r\n  console.debug('RENDER Timeline', id, refresh);\r\n\r\n  const allowGrouping = view !== 'media';\r\n  const loadItems = useDebouncedCallback(\r\n    (firstLoad) => {\r\n      setShowNew(false);\r\n      if (uiState === 'loading') return;\r\n      setUIState('loading');\r\n      (async () => {\r\n        try {\r\n          let { done, value } = await fetchItems(firstLoad);\r\n          if (Array.isArray(value)) {\r\n            // Avoid grouping for pinned posts\r\n            const [pinnedPosts, otherPosts] = value.reduce(\r\n              (acc, item) => {\r\n                if (item._pinned) {\r\n                  acc[0].push(item);\r\n                } else {\r\n                  acc[1].push(item);\r\n                }\r\n                return acc;\r\n              },\r\n              [[], []],\r\n            );\r\n            value = otherPosts;\r\n            if (allowGrouping) {\r\n              if (boostsCarousel) {\r\n                value = groupBoosts(value);\r\n              }\r\n              value = groupContext(value, instance);\r\n            }\r\n            if (pinnedPosts.length) {\r\n              value = pinnedPosts.concat(value);\r\n            }\r\n            console.log(value);\r\n            if (firstLoad) {\r\n              setItems(value);\r\n            } else {\r\n              setItems((items) => [...items, ...value]);\r\n            }\r\n            if (!value.length) done = true;\r\n            setShowMore(!done);\r\n          } else {\r\n            setShowMore(false);\r\n          }\r\n          setUIState('default');\r\n        } catch (e) {\r\n          console.error(e);\r\n          setUIState('error');\r\n        } finally {\r\n          loadItems.cancel();\r\n        }\r\n      })();\r\n    },\r\n    1500,\r\n    {\r\n      leading: true,\r\n      trailing: false,\r\n    },\r\n  );\r\n\r\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\r\n\r\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\r\n    // focus on next status after active item\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    const activeItemRect = activeItem?.getBoundingClientRect();\r\n    const allItems = Array.from(\r\n      scrollableRef.current.querySelectorAll(itemsSelector),\r\n    );\r\n    if (\r\n      activeItem &&\r\n      activeItemRect.top < scrollableRef.current.clientHeight &&\r\n      activeItemRect.bottom > 0\r\n    ) {\r\n      const activeItemIndex = allItems.indexOf(activeItem);\r\n      let nextItem = allItems[activeItemIndex + 1];\r\n      if (handler.shift) {\r\n        // get next status that's not .timeline-item-alt\r\n        nextItem = allItems.find(\r\n          (item, index) =>\r\n            index > activeItemIndex &&\r\n            !item.classList.contains('timeline-item-alt'),\r\n        );\r\n      }\r\n      if (nextItem) {\r\n        nextItem.focus();\r\n        nextItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostItem = allItems.find((item) => {\r\n        const itemRect = item.getBoundingClientRect();\r\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostItem) {\r\n        topmostItem.focus();\r\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\r\n    // focus on previous status after active item\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    const activeItemRect = activeItem?.getBoundingClientRect();\r\n    const allItems = Array.from(\r\n      scrollableRef.current.querySelectorAll(itemsSelector),\r\n    );\r\n    if (\r\n      activeItem &&\r\n      activeItemRect.top < scrollableRef.current.clientHeight &&\r\n      activeItemRect.bottom > 0\r\n    ) {\r\n      const activeItemIndex = allItems.indexOf(activeItem);\r\n      let prevItem = allItems[activeItemIndex - 1];\r\n      if (handler.shift) {\r\n        // get prev status that's not .timeline-item-alt\r\n        prevItem = allItems.findLast(\r\n          (item, index) =>\r\n            index < activeItemIndex &&\r\n            !item.classList.contains('timeline-item-alt'),\r\n        );\r\n      }\r\n      if (prevItem) {\r\n        prevItem.focus();\r\n        prevItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostItem = allItems.find((item) => {\r\n        const itemRect = item.getBoundingClientRect();\r\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostItem) {\r\n        topmostItem.focus();\r\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  const oRef = useHotkeys(['enter', 'o'], () => {\r\n    // open active status\r\n    const activeItem = document.activeElement.closest(itemsSelector);\r\n    if (activeItem) {\r\n      activeItem.click();\r\n    }\r\n  });\r\n\r\n  const showNewPostsIndicator =\r\n    items.length > 0 && uiState !== 'loading' && showNew;\r\n  const handleLoadNewPosts = useCallback(() => {\r\n    loadItems(true);\r\n    scrollableRef.current?.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  }, [loadItems]);\r\n  const dotRef = useHotkeys('.', () => {\r\n    if (showNewPostsIndicator) {\r\n      handleLoadNewPosts();\r\n    }\r\n  });\r\n\r\n  // const {\r\n  //   scrollDirection,\r\n  //   nearReachStart,\r\n  //   nearReachEnd,\r\n  //   reachStart,\r\n  //   reachEnd,\r\n  // } = useScroll({\r\n  //   scrollableRef,\r\n  //   distanceFromEnd: 2,\r\n  //   scrollThresholdStart: 44,\r\n  // });\r\n  const headerRef = useRef();\r\n  // const [hiddenUI, setHiddenUI] = useState(false);\r\n  const [nearReachStart, setNearReachStart] = useState(false);\r\n  useScrollFn(\r\n    {\r\n      scrollableRef,\r\n      distanceFromEnd: 2,\r\n      scrollThresholdStart: 44,\r\n    },\r\n    ({\r\n      scrollDirection,\r\n      nearReachStart,\r\n      // nearReachEnd,\r\n      reachStart,\r\n      // reachEnd,\r\n    }) => {\r\n      // setHiddenUI(scrollDirection === 'end' && !nearReachEnd);\r\n      if (headerRef.current) {\r\n        const hiddenUI = scrollDirection === 'end' && !nearReachStart;\r\n        headerRef.current.hidden = hiddenUI;\r\n      }\r\n      setNearReachStart(nearReachStart);\r\n      if (reachStart) {\r\n        loadItems(true);\r\n      }\r\n      // else if (nearReachEnd || (reachEnd && showMore)) {\r\n      //   loadItems();\r\n      // }\r\n    },\r\n    [],\r\n  );\r\n\r\n  useEffect(() => {\r\n    scrollableRef.current?.scrollTo({ top: 0 });\r\n    loadItems(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    loadItems(true);\r\n  }, [refresh]);\r\n\r\n  // useEffect(() => {\r\n  //   if (reachStart) {\r\n  //     loadItems(true);\r\n  //   }\r\n  // }, [reachStart]);\r\n\r\n  // useEffect(() => {\r\n  //   if (nearReachEnd || (reachEnd && showMore)) {\r\n  //     loadItems();\r\n  //   }\r\n  // }, [nearReachEnd, showMore]);\r\n\r\n  const prevView = useRef(view);\r\n  useEffect(() => {\r\n    if (prevView.current !== view) {\r\n      prevView.current = view;\r\n      setItems([]);\r\n    }\r\n  }, [view]);\r\n\r\n  const loadOrCheckUpdates = useCallback(\r\n    async ({ disableIdleCheck = false } = {}) => {\r\n      const noPointers = scrollableRef.current\r\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\r\n        : false;\r\n      console.log('✨ Load or check updates', id, {\r\n        autoRefresh: snapStates.settings.autoRefresh,\r\n        scrollTop: scrollableRef.current.scrollTop,\r\n        disableIdleCheck,\r\n        idle: window.__IDLE__,\r\n        inBackground: inBackground(),\r\n        noPointers,\r\n      });\r\n      if (\r\n        snapStates.settings.autoRefresh &&\r\n        scrollableRef.current.scrollTop < 16 &&\r\n        (disableIdleCheck || window.__IDLE__) &&\r\n        !inBackground() &&\r\n        !noPointers\r\n      ) {\r\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\r\n        loadItems(true);\r\n      } else {\r\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\r\n        const hasUpdate = await checkForUpdates();\r\n        if (hasUpdate) {\r\n          console.log('✨ Has new updates', id);\r\n          setShowNew(true);\r\n        }\r\n      }\r\n    },\r\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\r\n  );\r\n\r\n  const lastHiddenTime = useRef();\r\n  usePageVisibility(\r\n    (visible) => {\r\n      if (visible) {\r\n        const timeDiff = Date.now() - lastHiddenTime.current;\r\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\r\n          // 3 seconds\r\n          loadOrCheckUpdates({\r\n            disableIdleCheck: true,\r\n          });\r\n        }\r\n      } else {\r\n        lastHiddenTime.current = Date.now();\r\n      }\r\n      setVisible(visible);\r\n    },\r\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\r\n  );\r\n\r\n  // checkForUpdates interval\r\n  useInterval(\r\n    loadOrCheckUpdates,\r\n    visible && !showNew\r\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\r\n      : null,\r\n  );\r\n\r\n  // const hiddenUI = scrollDirection === 'end' && !nearReachStart;\r\n\r\n  return (\r\n    <FilterContext.Provider value={filterContext}>\r\n      <div\r\n        id={`${id}-page`}\r\n        class=\"deck-container\"\r\n        ref={(node) => {\r\n          scrollableRef.current = node;\r\n          jRef.current = node;\r\n          kRef.current = node;\r\n          oRef.current = node;\r\n        }}\r\n        tabIndex=\"-1\"\r\n      >\r\n        <div class=\"timeline-deck deck\">\r\n          <header\r\n            ref={headerRef}\r\n            // hidden={hiddenUI}\r\n            onClick={(e) => {\r\n              if (!e.target.closest('a, button')) {\r\n                scrollableRef.current?.scrollTo({\r\n                  top: 0,\r\n                  behavior: 'smooth',\r\n                });\r\n              }\r\n            }}\r\n            onDblClick={(e) => {\r\n              if (!e.target.closest('a, button')) {\r\n                loadItems(true);\r\n              }\r\n            }}\r\n            class={uiState === 'loading' ? 'loading' : ''}\r\n          >\r\n            <div class=\"header-grid\">\r\n              <div class=\"header-side\">\r\n                <NavMenu />\r\n                {headerStart !== null && headerStart !== undefined ? (\r\n                  headerStart\r\n                ) : (\r\n                  <Link to=\"/\" class=\"button plain home-button\">\r\n                    <Icon icon=\"home\" size=\"l\" />\r\n                  </Link>\r\n                )}\r\n              </div>\r\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\r\n              <div class=\"header-side\">\r\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\r\n                {!!headerEnd && headerEnd}\r\n              </div>\r\n            </div>\r\n            {showNewPostsIndicator && (\r\n              <button\r\n                class=\"updates-button shiny-pill\"\r\n                type=\"button\"\r\n                onClick={handleLoadNewPosts}\r\n              >\r\n                <Icon icon=\"arrow-up\" /> New posts\r\n              </button>\r\n            )}\r\n          </header>\r\n          {!!timelineStart && (\r\n            <div\r\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\r\n            >\r\n              {timelineStart}\r\n            </div>\r\n          )}\r\n          {!!items.length ? (\r\n            <>\r\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\r\n                {items.map((status) => (\r\n                  <TimelineItem\r\n                    status={status}\r\n                    instance={instance}\r\n                    useItemID={useItemID}\r\n                    // allowFilters={allowFilters}\r\n                    filterContext={filterContext}\r\n                    key={status.id + status?._pinned + view}\r\n                    view={view}\r\n                    showFollowedTags={showFollowedTags}\r\n                    showReplyParent={showReplyParent}\r\n                  />\r\n                ))}\r\n                {showMore &&\r\n                  uiState === 'loading' &&\r\n                  (view === 'media' ? null : (\r\n                    <>\r\n                      <li\r\n                        style={{\r\n                          height: '20vh',\r\n                        }}\r\n                      >\r\n                        <Status skeleton />\r\n                      </li>\r\n                      <li\r\n                        style={{\r\n                          height: '25vh',\r\n                        }}\r\n                      >\r\n                        <Status skeleton />\r\n                      </li>\r\n                    </>\r\n                  ))}\r\n              </ul>\r\n              {uiState === 'default' &&\r\n                (showMore ? (\r\n                  <InView\r\n                    root={scrollableRef.current}\r\n                    rootMargin={`0px 0px ${screen.height * 1.5}px 0px`}\r\n                    onChange={(inView) => {\r\n                      if (inView) {\r\n                        loadItems();\r\n                      }\r\n                    }}\r\n                  >\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"plain block\"\r\n                      onClick={() => loadItems()}\r\n                      style={{ marginBlockEnd: '6em' }}\r\n                    >\r\n                      Show more&hellip;\r\n                    </button>\r\n                  </InView>\r\n                ) : (\r\n                  <p class=\"ui-state insignificant\">The end.</p>\r\n                ))}\r\n            </>\r\n          ) : uiState === 'loading' ? (\r\n            <ul class=\"timeline\">\r\n              {Array.from({ length: 5 }).map((_, i) =>\r\n                view === 'media' ? (\r\n                  <div\r\n                    style={{\r\n                      height: '50vh',\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <li key={i}>\r\n                    <Status skeleton />\r\n                  </li>\r\n                ),\r\n              )}\r\n            </ul>\r\n          ) : (\r\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\r\n          )}\r\n          {uiState === 'error' && (\r\n            <p class=\"ui-state\">\r\n              {errorText}\r\n              <br />\r\n              <br />\r\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\r\n                Try again\r\n              </button>\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </FilterContext.Provider>\r\n  );\r\n}\r\n\r\nconst TimelineItem = memo(\r\n  ({\r\n    status,\r\n    instance,\r\n    useItemID,\r\n    // allowFilters,\r\n    filterContext,\r\n    view,\r\n    showFollowedTags,\r\n    showReplyParent,\r\n  }) => {\r\n    console.debug('RENDER TimelineItem', status.id);\r\n    const { id: statusID, reblog, items, type, _pinned } = status;\r\n    if (_pinned) useItemID = false;\r\n    const actualStatusID = reblog?.id || statusID;\r\n    const url = instance\r\n      ? `/${instance}/s/${actualStatusID}`\r\n      : `/s/${actualStatusID}`;\r\n    let title = '';\r\n    if (type === 'boosts') {\r\n      title = `${items.length} Boosts`;\r\n    } else if (type === 'pinned') {\r\n      title = 'Pinned posts';\r\n    }\r\n    const isCarousel = type === 'boosts' || type === 'pinned';\r\n    if (items) {\r\n      const fItems = filteredItems(items, filterContext);\r\n      if (isCarousel) {\r\n        // Here, we don't hide filtered posts, but we sort them last\r\n        fItems.sort((a, b) => {\r\n          // if (a._filtered && !b._filtered) {\r\n          //   return 1;\r\n          // }\r\n          // if (!a._filtered && b._filtered) {\r\n          //   return -1;\r\n          // }\r\n          const aFiltered = isFiltered(a.filtered, filterContext);\r\n          const bFiltered = isFiltered(b.filtered, filterContext);\r\n          if (aFiltered && !bFiltered) {\r\n            return 1;\r\n          }\r\n          if (!aFiltered && bFiltered) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        });\r\n        return (\r\n          <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\r\n            <StatusCarousel title={title} class={`${type}-carousel`}>\r\n              {fItems.map((item) => {\r\n                const { id: statusID, reblog, _pinned } = item;\r\n                const actualStatusID = reblog?.id || statusID;\r\n                const url = instance\r\n                  ? `/${instance}/s/${actualStatusID}`\r\n                  : `/s/${actualStatusID}`;\r\n                if (_pinned) useItemID = false;\r\n                return (\r\n                  <li key={statusID}>\r\n                    <Link\r\n                      class=\"status-carousel-link timeline-item-alt\"\r\n                      to={url}\r\n                    >\r\n                      {useItemID ? (\r\n                        <Status\r\n                          statusID={statusID}\r\n                          instance={instance}\r\n                          size=\"s\"\r\n                          contentTextWeight\r\n                          enableCommentHint\r\n                          // allowFilters={allowFilters}\r\n                        />\r\n                      ) : (\r\n                        <Status\r\n                          status={item}\r\n                          instance={instance}\r\n                          size=\"s\"\r\n                          contentTextWeight\r\n                          enableCommentHint\r\n                          // allowFilters={allowFilters}\r\n                        />\r\n                      )}\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              })}\r\n            </StatusCarousel>\r\n          </li>\r\n        );\r\n      }\r\n      const manyItems = fItems.length > 3;\r\n      return fItems.map((item, i) => {\r\n        const { id: statusID, _differentAuthor } = item;\r\n        const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\r\n        const isMiddle = i > 0 && i < fItems.length - 1;\r\n        const isSpoiler = item.sensitive && !!item.spoilerText;\r\n        const showCompact =\r\n          (!_differentAuthor && isSpoiler && i > 0) ||\r\n          (manyItems &&\r\n            isMiddle &&\r\n            (type === 'thread' ||\r\n              (type === 'conversation' &&\r\n                !_differentAuthor &&\r\n                !fItems[i - 1]._differentAuthor &&\r\n                !fItems[i + 1]._differentAuthor)));\r\n        const isStart = i === 0;\r\n        const isEnd = i === fItems.length - 1;\r\n        return (\r\n          <li\r\n            key={`timeline-${statusID}`}\r\n            class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\r\n              isStart ? 'start' : isEnd ? 'end' : 'middle'\r\n            } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\r\n          >\r\n            <Link class=\"status-link timeline-item\" to={url}>\r\n              {showCompact ? (\r\n                <TimelineStatusCompact status={item} instance={instance} />\r\n              ) : useItemID ? (\r\n                <Status\r\n                  statusID={statusID}\r\n                  instance={instance}\r\n                  enableCommentHint={isEnd}\r\n                  showFollowedTags={showFollowedTags}\r\n                  // allowFilters={allowFilters}\r\n                />\r\n              ) : (\r\n                <Status\r\n                  status={item}\r\n                  instance={instance}\r\n                  enableCommentHint={isEnd}\r\n                  showFollowedTags={showFollowedTags}\r\n                  // allowFilters={allowFilters}\r\n                />\r\n              )}\r\n            </Link>\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n\r\n    const itemKey = `timeline-${statusID + _pinned}`;\r\n\r\n    if (view === 'media') {\r\n      return useItemID ? (\r\n        <MediaPost\r\n          class=\"timeline-item\"\r\n          parent=\"li\"\r\n          key={itemKey}\r\n          statusID={statusID}\r\n          instance={instance}\r\n          // allowFilters={allowFilters}\r\n        />\r\n      ) : (\r\n        <MediaPost\r\n          class=\"timeline-item\"\r\n          parent=\"li\"\r\n          key={itemKey}\r\n          status={status}\r\n          instance={instance}\r\n          // allowFilters={allowFilters}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <li key={itemKey}>\r\n        <Link class=\"status-link timeline-item\" to={url}>\r\n          {useItemID ? (\r\n            <Status\r\n              statusID={statusID}\r\n              instance={instance}\r\n              enableCommentHint\r\n              showFollowedTags={showFollowedTags}\r\n              showReplyParent={showReplyParent}\r\n              // allowFilters={allowFilters}\r\n            />\r\n          ) : (\r\n            <Status\r\n              status={status}\r\n              instance={instance}\r\n              enableCommentHint\r\n              showFollowedTags={showFollowedTags}\r\n              showReplyParent={showReplyParent}\r\n              // allowFilters={allowFilters}\r\n            />\r\n          )}\r\n        </Link>\r\n      </li>\r\n    );\r\n  },\r\n  (oldProps, newProps) => {\r\n    const oldID = (oldProps.status?.id || '').toString();\r\n    const newID = (newProps.status?.id || '').toString();\r\n    return (\r\n      oldID === newID &&\r\n      oldProps.instance === newProps.instance &&\r\n      oldProps.view === newProps.view\r\n    );\r\n  },\r\n);\r\n\r\nfunction StatusCarousel({ title, class: className, children }) {\r\n  const carouselRef = useRef();\r\n  // const { reachStart, reachEnd, init } = useScroll({\r\n  //   scrollableRef: carouselRef,\r\n  //   direction: 'horizontal',\r\n  // });\r\n  const startButtonRef = useRef();\r\n  const endButtonRef = useRef();\r\n  // useScrollFn(\r\n  //   {\r\n  //     scrollableRef: carouselRef,\r\n  //     direction: 'horizontal',\r\n  //     init: true,\r\n  //   },\r\n  //   ({ reachStart, reachEnd }) => {\r\n  //     if (startButtonRef.current) startButtonRef.current.disabled = reachStart;\r\n  //     if (endButtonRef.current) endButtonRef.current.disabled = reachEnd;\r\n  //   },\r\n  //   [],\r\n  // );\r\n  // useEffect(() => {\r\n  //   init?.();\r\n  // }, []);\r\n\r\n  const [render, setRender] = useState(false);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setRender(true);\r\n    }, 1);\r\n  }, []);\r\n\r\n  return (\r\n    <div class={`status-carousel ${className}`}>\r\n      <header>\r\n        <h3>{title}</h3>\r\n        <span>\r\n          <button\r\n            ref={startButtonRef}\r\n            type=\"button\"\r\n            class=\"small plain2\"\r\n            // disabled={reachStart}\r\n            onClick={() => {\r\n              carouselRef.current?.scrollBy({\r\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"chevron-left\" />\r\n          </button>{' '}\r\n          <button\r\n            ref={endButtonRef}\r\n            type=\"button\"\r\n            class=\"small plain2\"\r\n            // disabled={reachEnd}\r\n            onClick={() => {\r\n              carouselRef.current?.scrollBy({\r\n                left: Math.min(320, carouselRef.current?.offsetWidth),\r\n                behavior: 'smooth',\r\n              });\r\n            }}\r\n          >\r\n            <Icon icon=\"chevron-right\" />\r\n          </button>\r\n        </span>\r\n      </header>\r\n      <ul ref={carouselRef}>\r\n        <InView\r\n          class=\"status-carousel-beacon\"\r\n          onChange={(inView) => {\r\n            if (startButtonRef.current)\r\n              startButtonRef.current.disabled = inView;\r\n          }}\r\n        />\r\n        {children[0]}\r\n        {render && children.slice(1)}\r\n        <InView\r\n          class=\"status-carousel-beacon\"\r\n          onChange={(inView) => {\r\n            if (endButtonRef.current) endButtonRef.current.disabled = inView;\r\n          }}\r\n        />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TimelineStatusCompact({ status, instance }) {\r\n  const snapStates = useSnapshot(states);\r\n  const { id, visibility, language } = status;\r\n  const statusPeekText = statusPeek(status);\r\n  const sKey = statusKey(id, instance);\r\n  return (\r\n    <article\r\n      class={`status compact-thread ${\r\n        visibility === 'direct' ? 'visibility-direct' : ''\r\n      }`}\r\n      tabindex=\"-1\"\r\n    >\r\n      {!!snapStates.statusThreadNumber[sKey] ? (\r\n        <div class=\"status-thread-badge\">\r\n          <Icon icon=\"thread\" size=\"s\" />\r\n          {snapStates.statusThreadNumber[sKey]\r\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\r\n            : ''}\r\n        </div>\r\n      ) : (\r\n        <div class=\"status-thread-badge\">\r\n          <Icon icon=\"thread\" size=\"s\" />\r\n        </div>\r\n      )}\r\n      <div\r\n        class=\"content-compact\"\r\n        title={statusPeekText}\r\n        lang={language}\r\n        dir=\"auto\"\r\n      >\r\n        {statusPeekText}\r\n        {status.sensitive && status.spoilerText && (\r\n          <>\r\n            {' '}\r\n            <span class=\"spoiler-badge\">\r\n              <Icon icon=\"eye-close\" size=\"s\" />\r\n            </span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nfunction inBackground() {\r\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\r\n}\r\n\r\nexport default Timeline;\r\n","import { MenuItem } from '@szhsin/react-menu';\r\nimport {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useParams, useSearchParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountInfo from '../components/account-info';\r\nimport EmojiText from '../components/emoji-text';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Menu2 from '../components/menu2';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport pmem from '../utils/pmem';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\nconst MIN_YEAR = 1983;\r\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\r\n\r\nconst supportsInputMonth = (() => {\r\n  try {\r\n    const input = document.createElement('input');\r\n    input.setAttribute('type', 'month');\r\n    return input.type === 'month';\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n})();\r\n\r\nasync function _isSearchEnabled(instance) {\r\n  const { masto } = api({ instance });\r\n  const results = await masto.v2.search.fetch({\r\n    q: 'from:me',\r\n    type: 'statuses',\r\n    limit: 1,\r\n  });\r\n  return !!results?.statuses?.length;\r\n}\r\nconst isSearchEnabled = pmem(_isSearchEnabled);\r\n\r\nfunction AccountStatuses() {\r\n  const snapStates = useSnapshot(states);\r\n  const { id, ...params } = useParams();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const month = searchParams.get('month');\r\n  const excludeReplies = !searchParams.get('replies');\r\n  const excludeBoosts = !!searchParams.get('boosts');\r\n  const tagged = searchParams.get('tagged');\r\n  const media = !!searchParams.get('media');\r\n  const { masto, instance, authenticated } = api({ instance: params.instance });\r\n  const { masto: currentMasto, instance: currentInstance } = api();\r\n  const accountStatusesIterator = useRef();\r\n\r\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\r\n  const [account, setAccount] = useState();\r\n  const searchOffsetRef = useRef(0);\r\n  useEffect(() => {\r\n    searchOffsetRef.current = 0;\r\n  }, allSearchParams);\r\n\r\n  const sameCurrentInstance = useMemo(\r\n    () => instance === currentInstance,\r\n    [instance, currentInstance],\r\n  );\r\n  const [searchEnabled, setSearchEnabled] = useState(false);\r\n  useEffect(() => {\r\n    // Only enable for current logged-in instance\r\n    // Most remote instances don't allow unauthenticated searches\r\n    if (!sameCurrentInstance) return;\r\n    if (!account?.acct) return;\r\n    (async () => {\r\n      const enabled = await isSearchEnabled(instance);\r\n      console.log({ enabled });\r\n      setSearchEnabled(enabled);\r\n    })();\r\n  }, [instance, sameCurrentInstance, account?.acct]);\r\n\r\n  async function fetchAccountStatuses(firstLoad) {\r\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\r\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\r\n    if (isValidMonth && isValidYear) {\r\n      if (!account) {\r\n        return {\r\n          value: [],\r\n          done: true,\r\n        };\r\n      }\r\n      const [_year, _month] = month.split('-');\r\n      const monthIndex = parseInt(_month, 10) - 1;\r\n      // YYYY-MM (no day)\r\n      // Search options:\r\n      // - from:account\r\n      // - after:YYYY-MM-DD (non-inclusive)\r\n      // - before:YYYY-MM-DD (non-inclusive)\r\n\r\n      // Last day of previous month\r\n      const after = new Date(_year, monthIndex, 0);\r\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\r\n        .toString()\r\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\r\n      // First day of next month\r\n      const before = new Date(_year, monthIndex + 1, 1);\r\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\r\n        .toString()\r\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\r\n      console.log({\r\n        month,\r\n        _year,\r\n        _month,\r\n        monthIndex,\r\n        after,\r\n        before,\r\n        afterStr,\r\n        beforeStr,\r\n      });\r\n\r\n      let limit;\r\n      if (firstLoad) {\r\n        limit = LIMIT + 1;\r\n        searchOffsetRef.current = 0;\r\n      } else {\r\n        limit = LIMIT + searchOffsetRef.current + 1;\r\n        searchOffsetRef.current += LIMIT;\r\n      }\r\n\r\n      const searchResults = await masto.v2.search.fetch({\r\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\r\n        type: 'statuses',\r\n        limit,\r\n        offset: searchOffsetRef.current,\r\n      });\r\n      if (searchResults?.statuses?.length) {\r\n        const value = searchResults.statuses.slice(0, LIMIT);\r\n        value.forEach((item) => {\r\n          saveStatus(item, instance);\r\n        });\r\n        const done = searchResults.statuses.length <= LIMIT;\r\n        return { value, done };\r\n      } else {\r\n        return { value: [], done: true };\r\n      }\r\n    }\r\n\r\n    const results = [];\r\n    if (firstLoad) {\r\n      const { value } = await masto.v1.accounts\r\n        .$select(id)\r\n        .statuses.list({\r\n          pinned: true,\r\n        })\r\n        .next();\r\n      if (value?.length && !tagged && !media) {\r\n        const pinnedStatuses = value.map((status) => {\r\n          saveStatus(status, instance);\r\n          return {\r\n            ...status,\r\n            _pinned: true,\r\n          };\r\n        });\r\n        if (pinnedStatuses.length >= 3) {\r\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\r\n          results.push({\r\n            id: pinnedStatusesIds,\r\n            items: pinnedStatuses,\r\n            type: 'pinned',\r\n          });\r\n        } else {\r\n          results.push(...pinnedStatuses);\r\n        }\r\n      }\r\n    }\r\n    if (firstLoad || !accountStatusesIterator.current) {\r\n      accountStatusesIterator.current = masto.v1.accounts\r\n        .$select(id)\r\n        .statuses.list({\r\n          limit: LIMIT,\r\n          exclude_replies: excludeReplies,\r\n          exclude_reblogs: excludeBoosts,\r\n          only_media: media,\r\n          tagged,\r\n        });\r\n    }\r\n    const { value, done } = await accountStatusesIterator.current.next();\r\n    if (value?.length) {\r\n      results.push(...value);\r\n\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      value: results,\r\n      done,\r\n    };\r\n  }\r\n\r\n  const [featuredTags, setFeaturedTags] = useState([]);\r\n  useTitle(\r\n    account?.acct\r\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\r\n          account.acct\r\n        }${\r\n          !excludeReplies\r\n            ? ' (+ Replies)'\r\n            : excludeBoosts\r\n            ? ' (- Boosts)'\r\n            : tagged\r\n            ? ` (#${tagged})`\r\n            : media\r\n            ? ' (Media)'\r\n            : month\r\n            ? ` (${new Date(month).toLocaleString('default', {\r\n                month: 'long',\r\n                year: 'numeric',\r\n              })})`\r\n            : ''\r\n        }`\r\n      : 'Account posts',\r\n    '/:instance?/a/:id',\r\n  );\r\n\r\n  const fetchAccountPromiseRef = useRef();\r\n  const fetchAccount = useCallback(() => {\r\n    const fetchPromise =\r\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\r\n    fetchAccountPromiseRef.current = fetchPromise;\r\n    return fetchPromise;\r\n  }, [id, masto]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const acc = await fetchAccount();\r\n        console.log(acc);\r\n        setAccount(acc);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        const featuredTags = await masto.v1.accounts\r\n          .$select(id)\r\n          .featuredTags.list();\r\n        console.log({ featuredTags });\r\n        setFeaturedTags(featuredTags);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [id]);\r\n\r\n  const { displayName, acct, emojis } = account || {};\r\n\r\n  const accountInfoMemo = useMemo(() => {\r\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\r\n    return (\r\n      <AccountInfo\r\n        instance={instance}\r\n        account={cachedAccount || id}\r\n        fetchAccount={fetchAccount}\r\n        authenticated={authenticated}\r\n        standalone\r\n      />\r\n    );\r\n  }, [id, instance, authenticated, fetchAccount]);\r\n\r\n  const filterBarRef = useRef();\r\n  const TimelineStart = useMemo(() => {\r\n    const filtered =\r\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\r\n\r\n    return (\r\n      <>\r\n        {accountInfoMemo}\r\n        <div\r\n          class=\"filter-bar\"\r\n          ref={filterBarRef}\r\n          style={{\r\n            position: 'relative',\r\n          }}\r\n        >\r\n          {filtered ? (\r\n            <Link\r\n              to={`/${instance}/a/${id}`}\r\n              class=\"insignificant filter-clear\"\r\n              title=\"Clear filters\"\r\n              key=\"clear-filters\"\r\n            >\r\n              <Icon icon=\"x\" size=\"l\" />\r\n            </Link>\r\n          ) : (\r\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\r\n          )}\r\n          <Link\r\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\r\n            onClick={() => {\r\n              if (excludeReplies) {\r\n                showToast('Showing post with replies');\r\n              }\r\n            }}\r\n            class={excludeReplies ? '' : 'is-active'}\r\n          >\r\n            + Replies\r\n          </Link>\r\n          <Link\r\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\r\n            onClick={() => {\r\n              if (!excludeBoosts) {\r\n                showToast('Showing posts without boosts');\r\n              }\r\n            }}\r\n            class={!excludeBoosts ? '' : 'is-active'}\r\n          >\r\n            - Boosts\r\n          </Link>\r\n          <Link\r\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\r\n            onClick={() => {\r\n              if (!media) {\r\n                showToast('Showing posts with media');\r\n              }\r\n            }}\r\n            class={media ? 'is-active' : ''}\r\n          >\r\n            Media\r\n          </Link>\r\n          {featuredTags.map((tag) => (\r\n            <Link\r\n              key={tag.id}\r\n              to={`/${instance}/a/${id}${\r\n                tagged === tag.name\r\n                  ? ''\r\n                  : `?tagged=${encodeURIComponent(tag.name)}`\r\n              }`}\r\n              onClick={() => {\r\n                if (tagged !== tag.name) {\r\n                  showToast(`Showing posts tagged with #${tag.name}`);\r\n                }\r\n              }}\r\n              class={tagged === tag.name ? 'is-active' : ''}\r\n            >\r\n              <span>\r\n                <span class=\"more-insignificant\">#</span>\r\n                {tag.name}\r\n              </span>\r\n              {\r\n                // The count differs based on instance 😅\r\n              }\r\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\r\n            </Link>\r\n          ))}\r\n          {searchEnabled &&\r\n            (supportsInputMonth ? (\r\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\r\n                <Icon icon=\"month\" size=\"l\" />\r\n                <input\r\n                  type=\"month\"\r\n                  disabled={!account?.acct}\r\n                  value={month || ''}\r\n                  min={MIN_YEAR_MONTH}\r\n                  max={new Date().toISOString().slice(0, 7)}\r\n                  onInput={(e) => {\r\n                    const { value, validity } = e.currentTarget;\r\n                    if (!validity.valid) return;\r\n                    setSearchParams(\r\n                      value\r\n                        ? {\r\n                            month: value,\r\n                          }\r\n                        : {},\r\n                    );\r\n                    const [year, month] = value.split('-');\r\n                    const monthIndex = parseInt(month, 10) - 1;\r\n                    const date = new Date(year, monthIndex);\r\n                    showToast(\r\n                      `Showing posts in ${date.toLocaleString('default', {\r\n                        month: 'long',\r\n                        year: 'numeric',\r\n                      })}`,\r\n                    );\r\n                  }}\r\n                />\r\n              </label>\r\n            ) : (\r\n              // Fallback to <select> for month and <input type=\"number\"> for year\r\n              <MonthPicker\r\n                class={`filter-field ${month ? 'is-active' : ''}`}\r\n                disabled={!account?.acct}\r\n                value={month || ''}\r\n                min={MIN_YEAR_MONTH}\r\n                max={new Date().toISOString().slice(0, 7)}\r\n                onInput={(e) => {\r\n                  const { value, validity } = e;\r\n                  if (!validity.valid) return;\r\n                  setSearchParams(\r\n                    value\r\n                      ? {\r\n                          month: value,\r\n                        }\r\n                      : {},\r\n                  );\r\n                }}\r\n              />\r\n            ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }, [\r\n    id,\r\n    instance,\r\n    authenticated,\r\n    featuredTags,\r\n    searchEnabled,\r\n    ...allSearchParams,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // Focus on .is-active\r\n    const active = filterBarRef.current?.querySelector('.is-active');\r\n    if (active) {\r\n      console.log('active', active, active.offsetLeft);\r\n      filterBarRef.current.scrollTo({\r\n        behavior: 'smooth',\r\n        left:\r\n          active.offsetLeft -\r\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\r\n      });\r\n    }\r\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\r\n\r\n  const accountInstance = useMemo(() => {\r\n    if (!account?.url) return null;\r\n    const domain = new URL(account.url).hostname;\r\n    return domain;\r\n  }, [account]);\r\n  const sameInstance = instance === accountInstance;\r\n  const allowSwitch = !!account && !sameInstance;\r\n\r\n  return (\r\n    <Timeline\r\n      key={id}\r\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\r\n      titleComponent={\r\n        <h1\r\n          class=\"header-double-lines header-account\"\r\n          // onClick={() => {\r\n          //   states.showAccount = {\r\n          //     account,\r\n          //     instance,\r\n          //   };\r\n          // }}\r\n        >\r\n          <b>\r\n            <EmojiText text={displayName} emojis={emojis} />\r\n          </b>\r\n          <div>\r\n            <span>@{acct}</span>\r\n          </div>\r\n        </h1>\r\n      }\r\n      id=\"account-statuses\"\r\n      instance={instance}\r\n      emptyText=\"Nothing to see here yet.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchAccountStatuses}\r\n      useItemID\r\n      view={media ? 'media' : undefined}\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      timelineStart={TimelineStart}\r\n      refresh={[\r\n        excludeReplies,\r\n        excludeBoosts,\r\n        tagged,\r\n        media,\r\n        month + account?.acct,\r\n      ].toString()}\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem\r\n            disabled={!allowSwitch}\r\n            onClick={() => {\r\n              (async () => {\r\n                try {\r\n                  const { masto } = api({\r\n                    instance: accountInstance,\r\n                  });\r\n                  const acc = await masto.v1.accounts.lookup({\r\n                    acct: account.acct,\r\n                  });\r\n                  const { id } = acc;\r\n                  location.hash = `/${accountInstance}/a/${id}`;\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  alert('Unable to fetch account info');\r\n                }\r\n              })();\r\n            }}\r\n          >\r\n            <Icon icon=\"transfer\" />{' '}\r\n            <small class=\"menu-double-lines\">\r\n              Switch to account's instance (<b>{accountInstance}</b>)\r\n            </small>\r\n          </MenuItem>\r\n          {!sameCurrentInstance && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                (async () => {\r\n                  try {\r\n                    const acc = await currentMasto.v1.accounts.lookup({\r\n                      acct: account.acct + '@' + instance,\r\n                    });\r\n                    const { id } = acc;\r\n                    location.hash = `/${currentInstance}/a/${id}`;\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                    alert('Unable to fetch account info');\r\n                  }\r\n                })();\r\n              }}\r\n            >\r\n              <Icon icon=\"transfer\" />{' '}\r\n              <small class=\"menu-double-lines\">\r\n                Switch to my instance (<b>{currentInstance}</b>)\r\n              </small>\r\n            </MenuItem>\r\n          )}\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction MonthPicker(props) {\r\n  const {\r\n    class: className,\r\n    disabled,\r\n    value,\r\n    min,\r\n    max,\r\n    onInput = () => {},\r\n  } = props;\r\n  const [_year, _month] = value?.split('-') || [];\r\n  const monthFieldRef = useRef();\r\n  const yearFieldRef = useRef();\r\n\r\n  const checkValidity = (month, year) => {\r\n    const [minYear, minMonth] = min?.split('-') || [];\r\n    const [maxYear, maxMonth] = max?.split('-') || [];\r\n    if (year < minYear) return false;\r\n    if (year > maxYear) return false;\r\n    if (year === minYear && month < minMonth) return false;\r\n    if (year === maxYear && month > maxMonth) return false;\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <div class={className}>\r\n      <Icon icon=\"month\" size=\"l\" />\r\n      <select\r\n        ref={monthFieldRef}\r\n        disabled={disabled}\r\n        value={_month || ''}\r\n        onInput={(e) => {\r\n          const { value: month } = e.currentTarget;\r\n          const year = yearFieldRef.current.value;\r\n          if (!checkValidity(month, year))\r\n            return {\r\n              value: '',\r\n              validity: {\r\n                valid: false,\r\n              },\r\n            };\r\n          onInput({\r\n            value: month ? `${year}-${month}` : '',\r\n            validity: {\r\n              valid: true,\r\n            },\r\n          });\r\n        }}\r\n      >\r\n        <option value=\"\">Month</option>\r\n        <option disabled>-----</option>\r\n        {Array.from({ length: 12 }, (_, i) => (\r\n          <option\r\n            value={\r\n              // Month is 1-indexed\r\n              (i + 1).toString().padStart(2, '0')\r\n            }\r\n            key={i}\r\n          >\r\n            {new Date(0, i).toLocaleString('default', {\r\n              month: 'long',\r\n            })}\r\n          </option>\r\n        ))}\r\n      </select>{' '}\r\n      <input\r\n        ref={yearFieldRef}\r\n        type=\"number\"\r\n        disabled={disabled}\r\n        value={_year || new Date().getFullYear()}\r\n        min={min?.slice(0, 4) || MIN_YEAR}\r\n        max={max?.slice(0, 4) || new Date().getFullYear()}\r\n        onInput={(e) => {\r\n          const { value: year, validity } = e.currentTarget;\r\n          const month = monthFieldRef.current.value;\r\n          if (!validity.valid || !checkValidity(month, year))\r\n            return {\r\n              value: '',\r\n              validity: {\r\n                valid: false,\r\n              },\r\n            };\r\n          onInput({\r\n            value: year ? `${year}-${month}` : '',\r\n            validity: {\r\n              valid: true,\r\n            },\r\n          });\r\n        }}\r\n        style={{\r\n          width: '4.5em',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountStatuses;\r\n","import { useRef } from 'preact/hooks';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Bookmarks() {\r\n  useTitle('Bookmarks', '/b');\r\n  const { masto, instance } = api();\r\n  const bookmarksIterator = useRef();\r\n  async function fetchBookmarks(firstLoad) {\r\n    if (firstLoad || !bookmarksIterator.current) {\r\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\r\n    }\r\n    return await bookmarksIterator.current.next();\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Bookmarks\"\r\n      id=\"bookmarks\"\r\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\r\n      errorText=\"Unable to load bookmarks\"\r\n      instance={instance}\r\n      fetchItems={fetchBookmarks}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Bookmarks;\r\n","import { useRef } from 'preact/hooks';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Favourites() {\r\n  useTitle('Likes', '/f');\r\n  const { masto, instance } = api();\r\n  const favouritesIterator = useRef();\r\n  async function fetchFavourites(firstLoad) {\r\n    if (firstLoad || !favouritesIterator.current) {\r\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\r\n    }\r\n    return await favouritesIterator.current.next();\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Likes\"\r\n      id=\"favourites\"\r\n      emptyText=\"No likes yet. Go like something!\"\r\n      errorText=\"Unable to load likes\"\r\n      instance={instance}\r\n      fetchItems={fetchFavourites}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Favourites;\r\n","import { useEffect, useState } from 'preact/hooks';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport { api } from '../utils/api';\r\nimport { fetchFollowedTags } from '../utils/followed-tags';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction FollowedHashtags() {\r\n  const { masto, instance } = api();\r\n  useTitle(`Followed Hashtags`, `/ft`);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const [followedHashtags, setFollowedHashtags] = useState([]);\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const tags = await fetchFollowedTags();\r\n        setFollowedHashtags(tags);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\r\n      <div class=\"timeline-deck deck\">\r\n        <header>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Followed Hashtags</h1>\r\n            <div class=\"header-side\" />\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {followedHashtags.length > 0 ? (\r\n            <>\r\n              <ul class=\"link-list\">\r\n                {followedHashtags.map((tag) => (\r\n                  <li>\r\n                    <Link\r\n                      to={\r\n                        instance\r\n                          ? `/${instance}/t/${tag.name}`\r\n                          : `/t/${tag.name}`\r\n                      }\r\n                    >\r\n                      <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              {followedHashtags.length > 1 && (\r\n                <footer class=\"ui-state\">\r\n                  <small class=\"insignificant\">\r\n                    {followedHashtags.length} hashtag\r\n                    {followedHashtags.length === 1 ? '' : 's'}\r\n                  </small>\r\n                </footer>\r\n              )}\r\n            </>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader abrupt />\r\n            </p>\r\n          ) : uiState === 'error' ? (\r\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\r\n          ) : (\r\n            <p class=\"ui-state\">No hashtags followed yet.</p>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FollowedHashtags;\r\n","import { useEffect, useRef } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states from '../utils/states';\r\nimport { getStatus, saveStatus } from '../utils/states';\r\nimport {\r\n  assignFollowedTags,\r\n  clearFollowedTagsState,\r\n  dedupeBoosts,\r\n} from '../utils/timeline-utils';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Following({ title, path, id, ...props }) {\r\n  useTitle(title || 'Following', path || '/following');\r\n  const { masto, streaming, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const homeIterator = useRef();\r\n  const latestItem = useRef();\r\n\r\n  console.debug('RENDER Following', title, id);\r\n\r\n  async function fetchHome(firstLoad) {\r\n    if (firstLoad || !homeIterator.current) {\r\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\r\n    }\r\n    const results = await homeIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      let latestItemChanged = false;\r\n      if (firstLoad) {\r\n        if (value[0].id !== latestItem.current) {\r\n          latestItemChanged = true;\r\n        }\r\n        latestItem.current = value[0].id;\r\n        console.log('First load', latestItem.current);\r\n      }\r\n\r\n      // value = filteredItems(value, 'home');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n      value = dedupeBoosts(value, instance);\r\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\r\n      assignFollowedTags(value, instance);\r\n\r\n      // ENFORCE sort by datetime (Latest first)\r\n      value.sort((a, b) => {\r\n        const aDate = new Date(a.createdAt);\r\n        const bDate = new Date(b.createdAt);\r\n        return bDate - aDate;\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines.home\r\n        .list({\r\n          limit: 5,\r\n          since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      console.log('checkForUpdates', latestItem.current, value);\r\n      if (value?.length) {\r\n        latestItem.current = value[0].id;\r\n        value = dedupeBoosts(value, instance);\r\n        value = filteredItems(value, 'home');\r\n        if (value.some((item) => !item.reblog)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let sub;\r\n    (async () => {\r\n      if (streaming) {\r\n        sub = streaming.user.subscribe();\r\n        console.log('🎏 Streaming user', sub);\r\n        for await (const entry of sub) {\r\n          if (!sub) break;\r\n          if (entry.event === 'status.update') {\r\n            const status = entry.payload;\r\n            console.log(`🔄 Status ${status.id} updated`);\r\n            saveStatus(status, instance);\r\n          } else if (entry.event === 'delete') {\r\n            const statusID = entry.payload;\r\n            console.log(`❌ Status ${statusID} deleted`);\r\n            // delete states.statuses[statusID];\r\n            const s = getStatus(statusID, instance);\r\n            if (s) s._deleted = true;\r\n          }\r\n        }\r\n        console.log('💥 Streaming user loop STOPPED');\r\n      }\r\n    })();\r\n    return () => {\r\n      sub?.unsubscribe?.();\r\n      sub = null;\r\n    };\r\n  }, [streaming]);\r\n\r\n  return (\r\n    <Timeline\r\n      title={title || 'Following'}\r\n      id={id || 'following'}\r\n      emptyText=\"Nothing to see here.\"\r\n      errorText=\"Unable to load posts.\"\r\n      instance={instance}\r\n      fetchItems={fetchHome}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      {...props}\r\n      // allowFilters\r\n      filterContext=\"home\"\r\n      showFollowedTags\r\n      showReplyParent\r\n    />\r\n  );\r\n}\r\n\r\nexport default Following;\r\n","import {\r\n  FocusableItem,\r\n  MenuDivider,\r\n  MenuGroup,\r\n  MenuHeader,\r\n  MenuItem,\r\n} from '@szhsin/react-menu';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\r\n\r\nimport Icon from '../components/icon';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport showToast from '../utils/show-toast';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\n// Limit is 4 per \"mode\"\r\n// https://github.com/mastodon/mastodon/issues/15194\r\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\r\nconst TAGS_LIMIT_PER_MODE = 4;\r\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\r\n\r\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\r\n  // const navigate = useNavigate();\r\n  let { hashtag, ...params } = columnMode ? {} : useParams();\r\n  if (props.hashtag) hashtag = props.hashtag;\r\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\r\n  hashtags.sort();\r\n  hashtag = hashtags[0];\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const media = mediaView || !!searchParams.get('media');\r\n  const linkParams = media ? '?media=1' : '';\r\n\r\n  const { masto, instance, authenticated } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const {\r\n    masto: currentMasto,\r\n    instance: currentInstance,\r\n    authenticated: currentAuthenticated,\r\n  } = api();\r\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\r\n  const hashtagPostTitle = media ? ` (Media only)` : '';\r\n  const title = instance\r\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\r\n    : `${hashtagTitle}${hashtagPostTitle}`;\r\n  useTitle(title, `/:instance?/t/:hashtag`);\r\n  const latestItem = useRef();\r\n\r\n  // const hashtagsIterator = useRef();\r\n  const maxID = useRef(undefined);\r\n  async function fetchHashtags(firstLoad) {\r\n    // if (firstLoad || !hashtagsIterator.current) {\r\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\r\n    //     limit: LIMIT,\r\n    //     any: hashtags.slice(1),\r\n    //   });\r\n    // }\r\n    // const results = await hashtagsIterator.current.next();\r\n\r\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\r\n    const results = await masto.v1.timelines.tag\r\n      .$select(hashtag)\r\n      .list({\r\n        limit: LIMIT,\r\n        any: hashtags.slice(1),\r\n        maxId: firstLoad ? undefined : maxID.current,\r\n        onlyMedia: media,\r\n      })\r\n      .next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      // value = filteredItems(value, 'public');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance, {\r\n          skipThreading: media, // If media view, no need to form threads\r\n        });\r\n      });\r\n\r\n      maxID.current = value[value.length - 1].id;\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines.tag\r\n        .$select(hashtag)\r\n        .list({\r\n          limit: 1,\r\n          any: hashtags.slice(1),\r\n          since_id: latestItem.current,\r\n          onlyMedia: media,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      value = filteredItems(value, 'public');\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const [followUIState, setFollowUIState] = useState('default');\r\n  const [info, setInfo] = useState();\r\n  // Get hashtag info\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const info = await masto.v1.tags.$select(hashtag).fetch();\r\n        console.log(info);\r\n        setInfo(info);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [hashtag]);\r\n\r\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance + hashtagTitle}\r\n      title={title}\r\n      titleComponent={\r\n        !!instance && (\r\n          <h1 class=\"header-double-lines\">\r\n            <b>{hashtagTitle}</b>\r\n            <div>{instance}</div>\r\n          </h1>\r\n        )\r\n      }\r\n      id=\"hashtag\"\r\n      instance={instance}\r\n      emptyText=\"No one has posted anything with this tag yet.\"\r\n      errorText=\"Unable to load posts with this tag\"\r\n      fetchItems={fetchHashtags}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      view={media ? 'media' : undefined}\r\n      refresh={media}\r\n      // allowFilters\r\n      filterContext=\"public\"\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          setDownOverflow\r\n          overflow=\"auto\"\r\n          // viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          {!!info && hashtags.length === 1 && (\r\n            <>\r\n              <MenuConfirm\r\n                subMenu\r\n                confirm={info.following}\r\n                confirmLabel={`Unfollow #${hashtag}?`}\r\n                disabled={followUIState === 'loading' || !authenticated}\r\n                onClick={() => {\r\n                  setFollowUIState('loading');\r\n                  if (info.following) {\r\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\r\n                    // if (!yes) {\r\n                    //   setFollowUIState('default');\r\n                    //   return;\r\n                    // }\r\n                    masto.v1.tags\r\n                      .$select(hashtag)\r\n                      .unfollow()\r\n                      .then(() => {\r\n                        setInfo({ ...info, following: false });\r\n                        showToast(`Unfollowed #${hashtag}`);\r\n                      })\r\n                      .catch((e) => {\r\n                        alert(e);\r\n                        console.error(e);\r\n                      })\r\n                      .finally(() => {\r\n                        setFollowUIState('default');\r\n                      });\r\n                  } else {\r\n                    masto.v1.tags\r\n                      .$select(hashtag)\r\n                      .follow()\r\n                      .then(() => {\r\n                        setInfo({ ...info, following: true });\r\n                        showToast(`Followed #${hashtag}`);\r\n                      })\r\n                      .catch((e) => {\r\n                        alert(e);\r\n                        console.error(e);\r\n                      })\r\n                      .finally(() => {\r\n                        setFollowUIState('default');\r\n                      });\r\n                  }\r\n                }}\r\n              >\r\n                {info.following ? (\r\n                  <>\r\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Icon icon=\"plus\" /> <span>Follow</span>\r\n                  </>\r\n                )}\r\n              </MenuConfirm>\r\n              <MenuDivider />\r\n            </>\r\n          )}\r\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\r\n          <MenuItem\r\n            type=\"checkbox\"\r\n            checked={!!media}\r\n            onClick={() => {\r\n              if (media) {\r\n                searchParams.delete('media');\r\n              } else {\r\n                searchParams.set('media', '1');\r\n              }\r\n              setSearchParams(searchParams);\r\n            }}\r\n          >\r\n            <Icon icon=\"check-circle\" />{' '}\r\n            <span class=\"menu-grow\">Media only</span>\r\n          </MenuItem>\r\n          <MenuDivider />\r\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\r\n            {({ ref }) => (\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  const newHashtag = e.target[0].value?.trim?.();\r\n                  // Use includes but need to be case insensitive\r\n                  if (\r\n                    newHashtag &&\r\n                    !hashtags.some(\r\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\r\n                    )\r\n                  ) {\r\n                    hashtags.push(newHashtag);\r\n                    hashtags.sort();\r\n                    // navigate(\r\n                    //   instance\r\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\r\n                    //     : `/t/${hashtags.join('+')}`,\r\n                    // );\r\n                    location.hash = instance\r\n                      ? `/${instance}/t/${hashtags.join('+')}`\r\n                      : `/t/${hashtags.join('+')}${linkParams}`;\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"hashtag\" />\r\n                <input\r\n                  ref={ref}\r\n                  type=\"text\"\r\n                  placeholder={\r\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\r\n                  }\r\n                  required\r\n                  autocorrect=\"off\"\r\n                  autocapitalize=\"off\"\r\n                  spellcheck={false}\r\n                  // no spaces, no hashtags\r\n                  pattern=\"[^#][^\\s#]+[^#]\"\r\n                  disabled={reachLimit}\r\n                />\r\n              </form>\r\n            )}\r\n          </FocusableItem>\r\n          <MenuGroup takeOverflow>\r\n            {hashtags.map((t, i) => (\r\n              <MenuItem\r\n                key={t}\r\n                disabled={hashtags.length === 1}\r\n                onClick={(e) => {\r\n                  hashtags.splice(i, 1);\r\n                  hashtags.sort();\r\n                  // navigate(\r\n                  //   instance\r\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\r\n                  //     : `/t/${hashtags.join('+')}`,\r\n                  // );\r\n                  location.hash = instance\r\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\r\n                    : `/t/${hashtags.join('+')}${linkParams}`;\r\n                }}\r\n              >\r\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\r\n                <span>\r\n                  <span class=\"more-insignificant\">#</span>\r\n                  {t}\r\n                </span>\r\n              </MenuItem>\r\n            ))}\r\n          </MenuGroup>\r\n          <MenuDivider />\r\n          <MenuItem\r\n            disabled={!currentAuthenticated}\r\n            onClick={() => {\r\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\r\n                alert(\r\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\r\n                );\r\n                return;\r\n              }\r\n              const shortcut = {\r\n                type: 'hashtag',\r\n                hashtag: hashtags.join(' '),\r\n                instance,\r\n                media: media ? 'on' : undefined,\r\n              };\r\n              // Check if already exists\r\n              const exists = states.shortcuts.some(\r\n                (s) =>\r\n                  s.type === shortcut.type &&\r\n                  s.hashtag\r\n                    .split(/[\\s+]+/)\r\n                    .sort()\r\n                    .join(' ') ===\r\n                    shortcut.hashtag\r\n                      .split(/[\\s+]+/)\r\n                      .sort()\r\n                      .join(' ') &&\r\n                  (s.instance ? s.instance === shortcut.instance : true) &&\r\n                  (s.media ? !!s.media === !!shortcut.media : true),\r\n              );\r\n              if (exists) {\r\n                alert('This shortcut already exists');\r\n              } else {\r\n                states.shortcuts.push(shortcut);\r\n                showToast(`Hashtag shortcut added`);\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\r\n          </MenuItem>\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\r\n                location.hash = `/${newInstance}/t/${hashtags.join(\r\n                  '+',\r\n                )}${linkParams}`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n          {currentInstance !== instance && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                location.hash = `/${currentInstance}/t/${hashtags.join(\r\n                  '+',\r\n                )}${linkParams}`;\r\n              }}\r\n            >\r\n              <Icon icon=\"bus\" />{' '}\r\n              <small class=\"menu-double-lines\">\r\n                Go to my instance (<b>{currentInstance}</b>)\r\n              </small>\r\n            </MenuItem>\r\n          )}\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Hashtags;\r\n","import './lists.css';\r\n\r\nimport { Menu, MenuItem } from '@szhsin/react-menu';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport ListAddEdit from '../components/list-add-edit';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport Modal from '../components/modal';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction List(props) {\r\n  const snapStates = useSnapshot(states);\r\n  const { masto, instance } = api();\r\n  const id = props?.id || useParams()?.id;\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n\r\n  const listIterator = useRef();\r\n  async function fetchList(firstLoad) {\r\n    if (firstLoad || !listIterator.current) {\r\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await listIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      // value = filteredItems(value, 'home');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines.list.$select(id).list({\r\n        limit: 1,\r\n        since_id: latestItem.current,\r\n      });\r\n      let { value } = results;\r\n      value = filteredItems(value, 'home');\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const [list, setList] = useState({ title: 'List' });\r\n  // const [title, setTitle] = useState(`List`);\r\n  useTitle(list.title, `/l/:id`);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const list = await masto.v1.lists.$select(id).fetch();\r\n        setList(list);\r\n        // setTitle(list.title);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [id]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Timeline\r\n        key={id}\r\n        title={list.title}\r\n        id=\"list\"\r\n        emptyText=\"Nothing yet.\"\r\n        errorText=\"Unable to load posts.\"\r\n        instance={instance}\r\n        fetchItems={fetchList}\r\n        checkForUpdates={checkForUpdates}\r\n        useItemID\r\n        boostsCarousel={snapStates.settings.boostsCarousel}\r\n        // allowFilters\r\n        filterContext=\"home\"\r\n        showReplyParent\r\n        // refresh={reloadCount}\r\n        headerStart={\r\n          <Link to=\"/l\" class=\"button plain\">\r\n            <Icon icon=\"list\" size=\"l\" />\r\n          </Link>\r\n        }\r\n        headerEnd={\r\n          <Menu2\r\n            portal\r\n            setDownOverflow\r\n            overflow=\"auto\"\r\n            viewScroll=\"close\"\r\n            position=\"anchor\"\r\n            menuButton={\r\n              <button type=\"button\" class=\"plain\">\r\n                <Icon icon=\"more\" size=\"l\" />\r\n              </button>\r\n            }\r\n          >\r\n            <MenuItem\r\n              onClick={() =>\r\n                setShowListAddEditModal({\r\n                  list,\r\n                })\r\n              }\r\n            >\r\n              <Icon icon=\"pencil\" size=\"l\" />\r\n              <span>Edit</span>\r\n            </MenuItem>\r\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\r\n              <Icon icon=\"group\" size=\"l\" />\r\n              <span>Manage members</span>\r\n            </MenuItem>\r\n          </Menu2>\r\n        }\r\n      />\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success' && result.list) {\r\n                setList(result.list);\r\n                // reload();\r\n              } else if (result.state === 'deleted') {\r\n                // navigate('/l');\r\n                location.hash = '/l';\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {showManageMembersModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowManageMembersModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListManageMembers\r\n            listID={id}\r\n            onClose={() => setShowManageMembersModal(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst MEMBERS_LIMIT = 40;\r\nfunction ListManageMembers({ listID, onClose }) {\r\n  // Show list of members with [Remove] button\r\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\r\n  // Show [Add] button after removing a member\r\n  const { masto, instance } = api();\r\n  const [members, setMembers] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [showMore, setShowMore] = useState(false);\r\n\r\n  const membersIterator = useRef();\r\n\r\n  async function fetchMembers(firstLoad) {\r\n    setShowMore(false);\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        if (firstLoad || !membersIterator.current) {\r\n          membersIterator.current = masto.v1.lists\r\n            .$select(listID)\r\n            .accounts.list({\r\n              limit: MEMBERS_LIMIT,\r\n            });\r\n        }\r\n        const results = await membersIterator.current.next();\r\n        let { done, value } = results;\r\n        if (value?.length) {\r\n          if (firstLoad) {\r\n            setMembers(value);\r\n          } else {\r\n            setMembers(members.concat(value));\r\n          }\r\n          setShowMore(!done);\r\n        } else {\r\n          setShowMore(false);\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMembers(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div class=\"sheet\" id=\"list-manage-members-container\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Manage members</h2>\r\n      </header>\r\n      <main>\r\n        <ul>\r\n          {members.map((member) => (\r\n            <li key={member.id}>\r\n              <AccountBlock account={member} instance={instance} />\r\n              <RemoveAddButton account={member} listID={listID} />\r\n            </li>\r\n          ))}\r\n          {showMore && uiState === 'default' && (\r\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\r\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\r\n                Show more&hellip;\r\n              </button>\r\n            </InView>\r\n          )}\r\n        </ul>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RemoveAddButton({ account, listID }) {\r\n  const { masto } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const [removed, setRemoved] = useState(false);\r\n\r\n  return (\r\n    <MenuConfirm\r\n      confirm={!removed}\r\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\r\n      align=\"end\"\r\n      menuItemClassName=\"danger\"\r\n      onClick={() => {\r\n        if (removed) {\r\n          setUIState('loading');\r\n          (async () => {\r\n            try {\r\n              await masto.v1.lists.$select(listID).accounts.create({\r\n                accountIds: [account.id],\r\n              });\r\n              setUIState('default');\r\n              setRemoved(false);\r\n            } catch (e) {\r\n              setUIState('error');\r\n            }\r\n          })();\r\n        } else {\r\n          // const yes = confirm(`Remove ${account.username} from this list?`);\r\n          // if (!yes) return;\r\n          setUIState('loading');\r\n\r\n          (async () => {\r\n            try {\r\n              await masto.v1.lists.$select(listID).accounts.remove({\r\n                accountIds: [account.id],\r\n              });\r\n              setUIState('default');\r\n              setRemoved(true);\r\n            } catch (e) {\r\n              setUIState('error');\r\n            }\r\n          })();\r\n        }\r\n      }}\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        class={`light ${removed ? '' : 'danger'}`}\r\n        disabled={uiState === 'loading'}\r\n      >\r\n        {removed ? 'Add' : 'Remove…'}\r\n      </button>\r\n    </MenuConfirm>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import { useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport Link from '../components/link';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\nconst emptySearchParams = new URLSearchParams();\r\n\r\nfunction Mentions({ columnMode, ...props }) {\r\n  const { masto, instance } = api();\r\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\r\n  const [stateType, setStateType] = useState(null);\r\n  const type = props?.type || searchParams.get('type') || stateType;\r\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\r\n\r\n  const mentionsIterator = useRef();\r\n  const latestItem = useRef();\r\n\r\n  async function fetchMentions(firstLoad) {\r\n    if (firstLoad || !mentionsIterator.current) {\r\n      mentionsIterator.current = masto.v1.notifications.list({\r\n        limit: LIMIT,\r\n        types: ['mention'],\r\n      });\r\n    }\r\n    const results = await mentionsIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n        console.log('First load', latestItem.current);\r\n      }\r\n\r\n      value.forEach(({ status: item }) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value: value?.map((item) => item.status),\r\n    };\r\n  }\r\n\r\n  const conversationsIterator = useRef();\r\n  const latestConversationItem = useRef();\r\n  async function fetchConversations(firstLoad) {\r\n    if (firstLoad || !conversationsIterator.current) {\r\n      conversationsIterator.current = masto.v1.conversations.list({\r\n        limit: LIMIT,\r\n      });\r\n    }\r\n    const results = await conversationsIterator.current.next();\r\n    let { value } = results;\r\n    value = value?.filter((item) => item.lastStatus);\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestConversationItem.current = value[0].lastStatus.id;\r\n        console.log('First load', latestConversationItem.current);\r\n      }\r\n\r\n      value.forEach(({ lastStatus: item }) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    console.log('results', results);\r\n    return {\r\n      ...results,\r\n      value: value?.map((item) => item.lastStatus),\r\n    };\r\n  }\r\n\r\n  function fetchItems(...args) {\r\n    if (type === 'private') {\r\n      return fetchConversations(...args);\r\n    }\r\n    return fetchMentions(...args);\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    if (type === 'private') {\r\n      try {\r\n        const results = await masto.v1.conversations\r\n          .list({\r\n            limit: 1,\r\n            since_id: latestConversationItem.current,\r\n          })\r\n          .next();\r\n        let { value } = results;\r\n        console.log(\r\n          'checkForUpdates PRIVATE',\r\n          latestConversationItem.current,\r\n          value,\r\n        );\r\n        if (value?.length) {\r\n          latestConversationItem.current = value[0].lastStatus.id;\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    } else {\r\n      try {\r\n        const results = await masto.v1.notifications\r\n          .list({\r\n            limit: 1,\r\n            types: ['mention'],\r\n            since_id: latestItem.current,\r\n          })\r\n          .next();\r\n        let { value } = results;\r\n        console.log('checkForUpdates ALL', latestItem.current, value);\r\n        if (value?.length) {\r\n          latestItem.current = value[0].id;\r\n          return true;\r\n        }\r\n        return false;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const TimelineStart = useMemo(() => {\r\n    return (\r\n      <div class=\"filter-bar centered\">\r\n        <Link\r\n          to=\"/mentions\"\r\n          class={!type ? 'is-active' : ''}\r\n          onClick={(e) => {\r\n            if (columnMode) {\r\n              e.preventDefault();\r\n              setStateType(null);\r\n            }\r\n          }}\r\n        >\r\n          All\r\n        </Link>\r\n        <Link\r\n          to=\"/mentions?type=private\"\r\n          class={type === 'private' ? 'is-active' : ''}\r\n          onClick={(e) => {\r\n            if (columnMode) {\r\n              e.preventDefault();\r\n              setStateType('private');\r\n            }\r\n          }}\r\n        >\r\n          Private\r\n        </Link>\r\n      </div>\r\n    );\r\n  }, [type]);\r\n\r\n  return (\r\n    <Timeline\r\n      title=\"Mentions\"\r\n      id=\"mentions\"\r\n      emptyText=\"No one mentioned you :(\"\r\n      errorText=\"Unable to load mentions.\"\r\n      instance={instance}\r\n      fetchItems={fetchItems}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      timelineStart={TimelineStart}\r\n      refresh={type}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Mentions;\r\n","// This is like very lame \"type-checking\" lol\r\nconst notificationTypeKeys = {\r\n  mention: ['account', 'status'],\r\n  status: ['account', 'status'],\r\n  reblog: ['account', 'status'],\r\n  follow: ['account'],\r\n  follow_request: ['account'],\r\n  favourite: ['account', 'status'],\r\n  poll: ['status'],\r\n  update: ['status'],\r\n};\r\nfunction fixNotifications(notifications) {\r\n  return notifications.filter((notification) => {\r\n    const { type, id, createdAt } = notification;\r\n    if (!type) {\r\n      console.warn('Notification missing type', notification);\r\n      return false;\r\n    }\r\n    if (!id || !createdAt) {\r\n      console.warn('Notification missing id or createdAt', notification);\r\n      // Continue processing this despite missing id or createdAt\r\n    }\r\n    const keys = notificationTypeKeys[type];\r\n    if (keys?.length) {\r\n      return keys.every((key) => !!notification[key]);\r\n    }\r\n    return true; // skip other types\r\n  });\r\n}\r\n\r\nfunction groupNotifications(notifications) {\r\n  // Filter out invalid notifications\r\n  notifications = fixNotifications(notifications);\r\n\r\n  // Create new flat list of notifications\r\n  // Combine sibling notifications based on type and status id\r\n  // Concat all notification.account into an array of _accounts\r\n  const notificationsMap = {};\r\n  const cleanNotifications = [];\r\n  for (let i = 0, j = 0; i < notifications.length; i++) {\r\n    const notification = notifications[i];\r\n    const { id, status, account, type, createdAt } = notification;\r\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\r\n    let virtualType = type;\r\n    if (type === 'favourite' || type === 'reblog') {\r\n      virtualType = 'favourite+reblog';\r\n    }\r\n    const key = `${status?.id}-${virtualType}-${date}`;\r\n    const mappedNotification = notificationsMap[key];\r\n    if (virtualType === 'follow_request') {\r\n      cleanNotifications[j++] = notification;\r\n    } else if (mappedNotification?.account) {\r\n      const mappedAccount = mappedNotification._accounts.find(\r\n        (a) => a.id === account.id,\r\n      );\r\n      if (mappedAccount) {\r\n        mappedAccount._types.push(type);\r\n        mappedAccount._types.sort().reverse();\r\n        mappedNotification.id += `-${id}`;\r\n      } else {\r\n        account._types = [type];\r\n        mappedNotification._accounts.push(account);\r\n        mappedNotification.id += `-${id}`;\r\n      }\r\n    } else {\r\n      account._types = [type];\r\n      let n = (notificationsMap[key] = {\r\n        ...notification,\r\n        type: virtualType,\r\n        _accounts: [account],\r\n      });\r\n      cleanNotifications[j++] = n;\r\n    }\r\n  }\r\n\r\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\r\n  // This means one acount has favourited and reblogged the multiple statuses\r\n  // The grouped notification\r\n  // - type: \"favourite+reblog+account\"\r\n  // - _statuses: [status, status, ...]\r\n  const notificationsMap2 = {};\r\n  const cleanNotifications2 = [];\r\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\r\n    const notification = cleanNotifications[i];\r\n    const { id, account, _accounts, type, createdAt } = notification;\r\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\r\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\r\n      const key = `${account?.id}-${type}-${date}`;\r\n      const mappedNotification = notificationsMap2[key];\r\n      if (mappedNotification) {\r\n        mappedNotification._statuses.push(notification.status);\r\n        mappedNotification.id += `-${id}`;\r\n      } else {\r\n        let n = (notificationsMap2[key] = {\r\n          ...notification,\r\n          type,\r\n          _statuses: [notification.status],\r\n        });\r\n        cleanNotifications2[j++] = n;\r\n      }\r\n    } else {\r\n      cleanNotifications2[j++] = notification;\r\n    }\r\n  }\r\n\r\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\r\n\r\n  // return cleanNotifications;\r\n  return cleanNotifications2;\r\n}\r\n\r\nexport default groupNotifications;\r\n","import './notifications.css';\r\n\r\nimport { Fragment } from 'preact';\r\nimport { memo } from 'preact/compat';\r\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\nimport { subscribeKey } from 'valtio/utils';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport FollowRequestButtons from '../components/follow-request-buttons';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport Notification from '../components/notification';\r\nimport { api } from '../utils/api';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport groupNotifications from '../utils/group-notifications';\r\nimport handleContentLinks from '../utils/handle-content-links';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport { getRegistration } from '../utils/push-notifications';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport { getCurrentInstance } from '../utils/store-utils';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\nimport useScroll from '../utils/useScroll';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 30; // 30 is the maximum limit :(\r\nconst emptySearchParams = new URLSearchParams();\r\n\r\nfunction Notifications({ columnMode }) {\r\n  useTitle('Notifications', '/notifications');\r\n  const { masto, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\r\n  const notificationID = searchParams.get('id');\r\n  const notificationAccessToken = searchParams.get('access_token');\r\n  const [showMore, setShowMore] = useState(false);\r\n  const [onlyMentions, setOnlyMentions] = useState(false);\r\n  const scrollableRef = useRef();\r\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\r\n    useScroll({\r\n      scrollableRef,\r\n    });\r\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\r\n  const [followRequests, setFollowRequests] = useState([]);\r\n  const [announcements, setAnnouncements] = useState([]);\r\n\r\n  console.debug('RENDER Notifications');\r\n\r\n  const notificationsIterator = useRef();\r\n  async function fetchNotifications(firstLoad) {\r\n    if (firstLoad || !notificationsIterator.current) {\r\n      // Reset iterator\r\n      notificationsIterator.current = masto.v1.notifications.list({\r\n        limit: LIMIT,\r\n        excludeTypes: ['follow_request'],\r\n      });\r\n    }\r\n    const allNotifications = await notificationsIterator.current.next();\r\n    const notifications = allNotifications.value;\r\n\r\n    if (notifications?.length) {\r\n      notifications.forEach((notification) => {\r\n        saveStatus(notification.status, instance, {\r\n          skipThreading: true,\r\n        });\r\n      });\r\n\r\n      const groupedNotifications = groupNotifications(notifications);\r\n\r\n      if (firstLoad) {\r\n        states.notificationsLast = notifications[0];\r\n        states.notifications = groupedNotifications;\r\n\r\n        // Update last read marker\r\n        masto.v1.markers\r\n          .create({\r\n            notifications: {\r\n              lastReadId: notifications[0].id,\r\n            },\r\n          })\r\n          .catch(() => {});\r\n      } else {\r\n        states.notifications.push(...groupedNotifications);\r\n      }\r\n    }\r\n\r\n    states.notificationsShowNew = false;\r\n    states.notificationsLastFetchTime = Date.now();\r\n    return allNotifications;\r\n  }\r\n\r\n  async function fetchFollowRequests() {\r\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\r\n    try {\r\n      return await masto.v1.followRequests.list({\r\n        limit: 80,\r\n      });\r\n    } catch (e) {\r\n      // Silently fail\r\n      return [];\r\n    }\r\n  }\r\n\r\n  const loadFollowRequests = () => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const requests = await fetchFollowRequests();\r\n        setFollowRequests(requests);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  async function fetchAnnouncements() {\r\n    try {\r\n      return await masto.v1.announcements.list();\r\n    } catch (e) {\r\n      // Silently fail\r\n      return [];\r\n    }\r\n  }\r\n\r\n  const loadNotifications = (firstLoad) => {\r\n    setShowNew(false);\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\r\n\r\n        if (firstLoad) {\r\n          fetchAnnouncements()\r\n            .then((announcements) => {\r\n              announcements.sort((a, b) => {\r\n                // Sort by updatedAt first, then createdAt\r\n                const aDate = new Date(a.updatedAt || a.createdAt);\r\n                const bDate = new Date(b.updatedAt || b.createdAt);\r\n                return bDate - aDate;\r\n              });\r\n              setAnnouncements(announcements);\r\n            })\r\n            .catch(() => {});\r\n\r\n          fetchFollowRequests()\r\n            .then((requests) => {\r\n              setFollowRequests(requests);\r\n            })\r\n            .catch(() => {});\r\n        }\r\n\r\n        const { done } = await fetchNotificationsPromise;\r\n        setShowMore(!done);\r\n\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadNotifications(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (reachStart) {\r\n      loadNotifications(true);\r\n    }\r\n  }, [reachStart]);\r\n\r\n  // useEffect(() => {\r\n  //   if (nearReachEnd && showMore) {\r\n  //     loadNotifications();\r\n  //   }\r\n  // }, [nearReachEnd, showMore]);\r\n\r\n  const [showNew, setShowNew] = useState(false);\r\n\r\n  const loadUpdates = useCallback(\r\n    ({ disableIdleCheck = false } = {}) => {\r\n      if (uiState === 'loading') {\r\n        return;\r\n      }\r\n      console.log('✨ Load updates', {\r\n        autoRefresh: snapStates.settings.autoRefresh,\r\n        scrollTop: scrollableRef.current?.scrollTop,\r\n        inBackground: inBackground(),\r\n        disableIdleCheck,\r\n      });\r\n      if (\r\n        snapStates.settings.autoRefresh &&\r\n        scrollableRef.current?.scrollTop < 16 &&\r\n        (disableIdleCheck || window.__IDLE__) &&\r\n        !inBackground()\r\n      ) {\r\n        loadNotifications(true);\r\n      }\r\n    },\r\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\r\n  );\r\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\r\n\r\n  const lastHiddenTime = useRef();\r\n  usePageVisibility((visible) => {\r\n    let unsub;\r\n    if (visible) {\r\n      const timeDiff = Date.now() - lastHiddenTime.current;\r\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\r\n        // 3 seconds\r\n        loadUpdates({\r\n          disableIdleCheck: true,\r\n        });\r\n      } else {\r\n        lastHiddenTime.current = Date.now();\r\n      }\r\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\r\n        if (v) {\r\n          loadUpdates();\r\n        }\r\n        setShowNew(v);\r\n      });\r\n    }\r\n    return () => {\r\n      unsub?.();\r\n    };\r\n  });\r\n\r\n  const todayDate = new Date();\r\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\r\n  let currentDay = new Date();\r\n  const showTodayEmpty = !snapStates.notifications.some(\r\n    (notification) =>\r\n      new Date(notification.createdAt).toDateString() ===\r\n      todayDate.toDateString(),\r\n  );\r\n\r\n  const announcementsListRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (notificationID) {\r\n      states.routeNotification = {\r\n        id: notificationID,\r\n        accessToken: atob(notificationAccessToken),\r\n      };\r\n    }\r\n  }, [notificationID, notificationAccessToken]);\r\n\r\n  // useEffect(() => {\r\n  //   if (uiState === 'default') {\r\n  //     (async () => {\r\n  //       try {\r\n  //         const registration = await getRegistration();\r\n  //         if (registration?.getNotifications) {\r\n  //           const notifications = await registration.getNotifications();\r\n  //           console.log('🔔 Push notifications', notifications);\r\n  //           // Close all notifications?\r\n  //           // notifications.forEach((notification) => {\r\n  //           //   notification.close();\r\n  //           // });\r\n  //         }\r\n  //       } catch (e) {}\r\n  //     })();\r\n  //   }\r\n  // }, [uiState]);\r\n\r\n  return (\r\n    <div\r\n      id=\"notifications-page\"\r\n      class=\"deck-container\"\r\n      ref={scrollableRef}\r\n      tabIndex=\"-1\"\r\n    >\r\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\r\n        <header\r\n          hidden={hiddenUI}\r\n          onClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\r\n            }\r\n          }}\r\n          onDblClick={(e) => {\r\n            if (!e.target.closest('a, button')) {\r\n              loadNotifications(true);\r\n            }\r\n          }}\r\n          class={uiState === 'loading' ? 'loading' : ''}\r\n        >\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Notifications</h1>\r\n            <div class=\"header-side\">\r\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\r\n            </div>\r\n          </div>\r\n          {showNew && uiState !== 'loading' && (\r\n            <button\r\n              class=\"updates-button shiny-pill\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                loadNotifications(true);\r\n                scrollableRef.current?.scrollTo({\r\n                  top: 0,\r\n                  behavior: 'smooth',\r\n                });\r\n              }}\r\n            >\r\n              <Icon icon=\"arrow-up\" /> New notifications\r\n            </button>\r\n          )}\r\n        </header>\r\n        {announcements.length > 0 && (\r\n          <div class=\"shazam-container\">\r\n            <div class=\"shazam-container-inner\">\r\n              <details class=\"announcements\">\r\n                <summary>\r\n                  <span>\r\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\r\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\r\n                    <small class=\"insignificant\">{instance}</small>\r\n                  </span>\r\n                  {announcements.length > 1 && (\r\n                    <span class=\"announcements-nav-buttons\">\r\n                      {announcements.map((announcement, index) => (\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"plain2 small\"\r\n                          onClick={() => {\r\n                            announcementsListRef.current?.children[\r\n                              index\r\n                            ].scrollIntoView({\r\n                              behavior: 'smooth',\r\n                              block: 'nearest',\r\n                            });\r\n                          }}\r\n                        >\r\n                          {index + 1}\r\n                        </button>\r\n                      ))}\r\n                    </span>\r\n                  )}\r\n                </summary>\r\n                <ul\r\n                  class={`announcements-list-${\r\n                    announcements.length > 1 ? 'multiple' : 'single'\r\n                  }`}\r\n                  ref={announcementsListRef}\r\n                >\r\n                  {announcements.map((announcement) => (\r\n                    <li>\r\n                      <AnnouncementBlock announcement={announcement} />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {followRequests.length > 0 && (\r\n          <div class=\"follow-requests\">\r\n            <h2 class=\"timeline-header\">Follow requests</h2>\r\n            {followRequests.length > 5 ? (\r\n              <details>\r\n                <summary>{followRequests.length} follow requests</summary>\r\n                <ul>\r\n                  {followRequests.map((account) => (\r\n                    <li key={account.id}>\r\n                      <AccountBlock account={account} />\r\n                      <FollowRequestButtons\r\n                        accountID={account.id}\r\n                        onChange={() => {\r\n                          // loadFollowRequests();\r\n                          // loadNotifications(true);\r\n                        }}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </details>\r\n            ) : (\r\n              <ul>\r\n                {followRequests.map((account) => (\r\n                  <li key={account.id}>\r\n                    <AccountBlock account={account} />\r\n                    <FollowRequestButtons\r\n                      accountID={account.id}\r\n                      onChange={() => {\r\n                        // loadFollowRequests();\r\n                        // loadNotifications(true);\r\n                      }}\r\n                    />\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div id=\"mentions-option\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={onlyMentions}\r\n              onChange={(e) => {\r\n                setOnlyMentions(e.target.checked);\r\n              }}\r\n            />{' '}\r\n            Only mentions\r\n          </label>\r\n        </div>\r\n        <h2 class=\"timeline-header\">Today</h2>\r\n        {showTodayEmpty && !!snapStates.notifications.length && (\r\n          <p class=\"ui-state insignificant\">\r\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\r\n          </p>\r\n        )}\r\n        {snapStates.notifications.length ? (\r\n          <>\r\n            {snapStates.notifications\r\n              // This is leaked from Notifications popover\r\n              .filter((n) => n.type !== 'follow_request')\r\n              .map((notification) => {\r\n                if (onlyMentions && notification.type !== 'mention') {\r\n                  return null;\r\n                }\r\n                const notificationDay = new Date(notification.createdAt);\r\n                const differentDay =\r\n                  notificationDay.toDateString() !== currentDay.toDateString();\r\n                if (differentDay) {\r\n                  currentDay = notificationDay;\r\n                }\r\n                // if notificationDay is yesterday, show \"Yesterday\"\r\n                // if notificationDay is before yesterday, show date\r\n                const heading =\r\n                  notificationDay.toDateString() ===\r\n                  yesterdayDate.toDateString()\r\n                    ? 'Yesterday'\r\n                    : niceDateTime(currentDay, {\r\n                        hideTime: true,\r\n                      });\r\n                return (\r\n                  <Fragment key={notification.id}>\r\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\r\n                    <Notification\r\n                      instance={instance}\r\n                      notification={notification}\r\n                      key={notification.id}\r\n                    />\r\n                  </Fragment>\r\n                );\r\n              })}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {uiState === 'loading' && (\r\n              <>\r\n                <ul class=\"timeline flat\">\r\n                  {Array.from({ length: 5 }).map((_, i) => (\r\n                    <li class=\"notification skeleton\">\r\n                      <div class=\"notification-type\">\r\n                        <Icon icon=\"notification\" size=\"xl\" />\r\n                      </div>\r\n                      <div class=\"notification-content\">\r\n                        <p>███████████ ████</p>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </>\r\n            )}\r\n            {uiState === 'error' && (\r\n              <p class=\"ui-state\">\r\n                Unable to load notifications\r\n                <br />\r\n                <br />\r\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\r\n                  Try again\r\n                </button>\r\n              </p>\r\n            )}\r\n          </>\r\n        )}\r\n        {showMore && (\r\n          <InView\r\n            onChange={(inView) => {\r\n              if (inView) {\r\n                loadNotifications();\r\n              }\r\n            }}\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              class=\"plain block\"\r\n              disabled={uiState === 'loading'}\r\n              onClick={() => loadNotifications()}\r\n              style={{ marginBlockEnd: '6em' }}\r\n            >\r\n              {uiState === 'loading' ? (\r\n                <Loader abrupt />\r\n              ) : (\r\n                <>Show more&hellip;</>\r\n              )}\r\n            </button>\r\n          </InView>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction inBackground() {\r\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\r\n}\r\n\r\nfunction AnnouncementBlock({ announcement }) {\r\n  const { instance } = api();\r\n  const { contact } = getCurrentInstance();\r\n  const contactAccount = contact?.account;\r\n  const {\r\n    id,\r\n    content,\r\n    startsAt,\r\n    endsAt,\r\n    published,\r\n    allDay,\r\n    publishedAt,\r\n    updatedAt,\r\n    read,\r\n    mentions,\r\n    statuses,\r\n    tags,\r\n    emojis,\r\n    reactions,\r\n  } = announcement;\r\n\r\n  const publishedAtDate = new Date(publishedAt);\r\n  const publishedDateText = niceDateTime(publishedAtDate);\r\n  const updatedAtDate = new Date(updatedAt);\r\n  const updatedAtText = niceDateTime(updatedAtDate);\r\n\r\n  return (\r\n    <div class=\"announcement-block\">\r\n      <AccountBlock account={contactAccount} />\r\n      <div\r\n        class=\"announcement-content\"\r\n        onClick={handleContentLinks({ mentions, instance })}\r\n        dangerouslySetInnerHTML={{\r\n          __html: enhanceContent(content, {\r\n            emojis,\r\n          }),\r\n        }}\r\n      />\r\n      <p class=\"insignificant\">\r\n        <time datetime={publishedAtDate.toISOString()}>\r\n          {niceDateTime(publishedAtDate)}\r\n        </time>\r\n        {updatedAt && updatedAtText !== publishedDateText && (\r\n          <>\r\n            {' '}\r\n            &bull;{' '}\r\n            <span class=\"ib\">\r\n              Updated{' '}\r\n              <time datetime={updatedAtDate.toISOString()}>\r\n                {niceDateTime(updatedAtDate)}\r\n              </time>\r\n            </span>\r\n          </>\r\n        )}\r\n      </p>\r\n      <div class=\"announcement-reactions\" hidden>\r\n        {reactions.map((reaction) => {\r\n          const { name, count, me, staticUrl, url } = reaction;\r\n          return (\r\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\r\n              {url || staticUrl ? (\r\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\r\n              ) : (\r\n                <span>{name}</span>\r\n              )}{' '}\r\n              <span class=\"count\">{shortenNumber(count)}</span>\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Notifications);\r\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\r\nimport { useRef } from 'preact/hooks';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Icon from '../components/icon';\r\nimport Menu2 from '../components/menu2';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { filteredItems } from '../utils/filters';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nfunction Public({ local, columnMode, ...props }) {\r\n  const snapStates = useSnapshot(states);\r\n  const isLocal = !!local;\r\n  const params = columnMode ? {} : useParams();\r\n  const { masto, instance } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const { masto: currentMasto, instance: currentInstance } = api();\r\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\r\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n\r\n  const publicIterator = useRef();\r\n  async function fetchPublic(firstLoad) {\r\n    if (firstLoad || !publicIterator.current) {\r\n      publicIterator.current = masto.v1.timelines.public.list({\r\n        limit: LIMIT,\r\n        local: isLocal,\r\n      });\r\n    }\r\n    const results = await publicIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      // value = filteredItems(value, 'public');\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.timelines.public\r\n        .list({\r\n          limit: 1,\r\n          local: isLocal,\r\n          since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      value = filteredItems(value, 'public');\r\n      if (value?.length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance + isLocal}\r\n      title={title}\r\n      titleComponent={\r\n        <h1 class=\"header-double-lines\">\r\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\r\n          <div>{instance}</div>\r\n        </h1>\r\n      }\r\n      id=\"public\"\r\n      instance={instance}\r\n      emptyText=\"No one has posted anything yet.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchPublic}\r\n      checkForUpdates={checkForUpdates}\r\n      useItemID\r\n      headerStart={<></>}\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      // allowFilters\r\n      filterContext=\"public\"\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\r\n            {isLocal ? (\r\n              <>\r\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\r\n              </>\r\n            )}\r\n          </MenuItem>\r\n          <MenuDivider />\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\r\n                location.hash = isLocal\r\n                  ? `/${newInstance}/p/l`\r\n                  : `/${newInstance}/p`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n          {currentInstance !== instance && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                location.hash = isLocal\r\n                  ? `/${currentInstance}/p/l`\r\n                  : `/${currentInstance}/p`;\r\n              }}\r\n            >\r\n              <Icon icon=\"bus\" />{' '}\r\n              <small class=\"menu-double-lines\">\r\n                Go to my instance (<b>{currentInstance}</b>)\r\n              </small>\r\n            </MenuItem>\r\n          )}\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Public;\r\n","import './search.css';\r\n\r\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\r\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { useParams, useSearchParams } from 'react-router-dom';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport NavMenu from '../components/nav-menu';\r\nimport SearchForm from '../components/search-form';\r\nimport Status from '../components/status';\r\nimport { api } from '../utils/api';\r\nimport { fetchRelationships } from '../utils/relationships';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport usePageVisibility from '../utils/usePageVisibility';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst SHORT_LIMIT = 5;\r\nconst LIMIT = 40;\r\nconst emptySearchParams = new URLSearchParams();\r\n\r\nfunction Search({ columnMode, ...props }) {\r\n  const params = columnMode ? {} : useParams();\r\n  const { masto, instance, authenticated } = api({\r\n    instance: params.instance,\r\n  });\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\r\n  const searchFormRef = useRef();\r\n  const q = props?.query || searchParams.get('q');\r\n  const type = columnMode\r\n    ? 'statuses'\r\n    : props?.type || searchParams.get('type');\r\n  useTitle(\r\n    q\r\n      ? `Search: ${q}${\r\n          type\r\n            ? ` (${\r\n                {\r\n                  statuses: 'Posts',\r\n                  accounts: 'Accounts',\r\n                  hashtags: 'Hashtags',\r\n                }[type]\r\n              })`\r\n            : ''\r\n        }`\r\n      : 'Search',\r\n    `/search`,\r\n  );\r\n\r\n  const [showMore, setShowMore] = useState(false);\r\n  const offsetRef = useRef(0);\r\n  useEffect(() => {\r\n    offsetRef.current = 0;\r\n  }, [q, type]);\r\n\r\n  const scrollableRef = useRef();\r\n  useLayoutEffect(() => {\r\n    scrollableRef.current?.scrollTo?.(0, 0);\r\n  }, [q, type]);\r\n\r\n  const [statusResults, setStatusResults] = useState([]);\r\n  const [accountResults, setAccountResults] = useState([]);\r\n  const [hashtagResults, setHashtagResults] = useState([]);\r\n  useEffect(() => {\r\n    setStatusResults([]);\r\n    setAccountResults([]);\r\n    setHashtagResults([]);\r\n  }, [q]);\r\n  const setTypeResultsFunc = {\r\n    statuses: setStatusResults,\r\n    accounts: setAccountResults,\r\n    hashtags: setHashtagResults,\r\n  };\r\n\r\n  const [relationshipsMap, setRelationshipsMap] = useState({});\r\n  const loadRelationships = async (accounts) => {\r\n    if (!accounts?.length) return;\r\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\r\n    if (relationships) {\r\n      setRelationshipsMap({\r\n        ...relationshipsMap,\r\n        ...relationships,\r\n      });\r\n    }\r\n  };\r\n\r\n  function loadResults(firstLoad) {\r\n    if (firstLoad) {\r\n      offsetRef.current = 0;\r\n    }\r\n\r\n    if (!firstLoad && !authenticated) {\r\n      // Search results pagination is only available to authenticated users\r\n      return;\r\n    }\r\n\r\n    setUIState('loading');\r\n    if (firstLoad && !type) {\r\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\r\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\r\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\r\n    }\r\n\r\n    (async () => {\r\n      const params = {\r\n        q,\r\n        resolve: authenticated,\r\n        limit: SHORT_LIMIT,\r\n      };\r\n      if (type) {\r\n        params.limit = LIMIT;\r\n        params.type = type;\r\n        if (authenticated) params.offset = offsetRef.current;\r\n      }\r\n\r\n      try {\r\n        const results = await masto.v2.search.fetch(params);\r\n        console.log(results);\r\n        if (type) {\r\n          if (firstLoad) {\r\n            setTypeResultsFunc[type](results[type]);\r\n            const length = results[type]?.length;\r\n            offsetRef.current = LIMIT;\r\n            setShowMore(!!length);\r\n          } else {\r\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\r\n            const length = results[type]?.length;\r\n            offsetRef.current = offsetRef.current + LIMIT;\r\n            setShowMore(!!length);\r\n          }\r\n        } else {\r\n          setStatusResults(results.statuses || []);\r\n          setAccountResults(results.accounts || []);\r\n          setHashtagResults(results.hashtags || []);\r\n          offsetRef.current = 0;\r\n          setShowMore(false);\r\n        }\r\n        loadRelationships(results.accounts);\r\n\r\n        setUIState('default');\r\n      } catch (err) {\r\n        console.error(err);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  const lastHiddenTime = useRef();\r\n  usePageVisibility((visible) => {\r\n    const reachStart = scrollableRef.current?.scrollTop === 0;\r\n    if (visible && reachStart) {\r\n      const timeDiff = Date.now() - lastHiddenTime.current;\r\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\r\n        // 3 seconds\r\n        loadResults(true);\r\n      } else {\r\n        lastHiddenTime.current = Date.now();\r\n      }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    searchFormRef.current?.setValue?.(q || '');\r\n    if (q) {\r\n      loadResults(true);\r\n    } else {\r\n      searchFormRef.current?.focus?.();\r\n    }\r\n  }, [q, type, instance]);\r\n\r\n  useHotkeys(\r\n    ['/', 'Slash'],\r\n    (e) => {\r\n      searchFormRef.current?.focus?.();\r\n    },\r\n    {\r\n      preventDefault: true,\r\n    },\r\n  );\r\n\r\n  const [filterBarParent] = useAutoAnimate();\r\n\r\n  return (\r\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\r\n      <div class=\"timeline-deck deck\">\r\n        <header class={uiState === 'loading' ? 'loading' : ''}>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n            </div>\r\n            <SearchForm ref={searchFormRef} />\r\n            <div class=\"header-side\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain\"\r\n                onClick={() => {\r\n                  loadResults(true);\r\n                }}\r\n                disabled={uiState === 'loading'}\r\n              >\r\n                <Icon icon=\"search\" size=\"l\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {!!q && !columnMode && (\r\n            <div\r\n              ref={filterBarParent}\r\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\r\n            >\r\n              {!!type && (\r\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\r\n                  ‹ All\r\n                </Link>\r\n              )}\r\n              {[\r\n                {\r\n                  label: 'Accounts',\r\n                  type: 'accounts',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\r\n                },\r\n                {\r\n                  label: 'Hashtags',\r\n                  type: 'hashtags',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\r\n                },\r\n                {\r\n                  label: 'Posts',\r\n                  type: 'statuses',\r\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\r\n                },\r\n              ]\r\n                .sort((a, b) => {\r\n                  if (a.type === type) return -1;\r\n                  if (b.type === type) return 1;\r\n                  return 0;\r\n                })\r\n                .map((link) => (\r\n                  <Link to={link.to} key={link.type}>\r\n                    {link.label}\r\n                  </Link>\r\n                ))}\r\n            </div>\r\n          )}\r\n          {!!q ? (\r\n            <>\r\n              {(!type || type === 'accounts') && (\r\n                <>\r\n                  {type !== 'accounts' && (\r\n                    <h2 class=\"timeline-header\">\r\n                      Accounts{' '}\r\n                      <Link\r\n                        to={`/search?q=${encodeURIComponent(q)}&type=accounts`}\r\n                      >\r\n                        <Icon icon=\"arrow-right\" size=\"l\" />\r\n                      </Link>\r\n                    </h2>\r\n                  )}\r\n                  {accountResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"timeline flat accounts-list\">\r\n                        {accountResults.map((account) => (\r\n                          <li key={account.id}>\r\n                            <AccountBlock\r\n                              account={account}\r\n                              instance={instance}\r\n                              showStats\r\n                              relationship={relationshipsMap[account.id]}\r\n                            />\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                      {type !== 'accounts' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${encodeURIComponent(\r\n                              q,\r\n                            )}&type=accounts`}\r\n                          >\r\n                            See more accounts <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No accounts found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {(!type || type === 'hashtags') && (\r\n                <>\r\n                  {type !== 'hashtags' && (\r\n                    <h2 class=\"timeline-header\">\r\n                      Hashtags{' '}\r\n                      <Link\r\n                        to={`/search?q=${encodeURIComponent(q)}&type=hashtags`}\r\n                      >\r\n                        <Icon icon=\"arrow-right\" size=\"l\" />\r\n                      </Link>\r\n                    </h2>\r\n                  )}\r\n                  {hashtagResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"link-list hashtag-list\">\r\n                        {hashtagResults.map((hashtag) => {\r\n                          const { name, history } = hashtag;\r\n                          const total = history?.reduce?.(\r\n                            (acc, cur) => acc + +cur.uses,\r\n                            0,\r\n                          );\r\n                          return (\r\n                            <li key={`${name}-${total}`}>\r\n                              <Link\r\n                                to={\r\n                                  instance\r\n                                    ? `/${instance}/t/${name}`\r\n                                    : `/t/${name}`\r\n                                }\r\n                              >\r\n                                <Icon icon=\"hashtag\" />\r\n                                <span>{name}</span>\r\n                                {!!total && (\r\n                                  <span class=\"count\">\r\n                                    {shortenNumber(total)}\r\n                                  </span>\r\n                                )}\r\n                              </Link>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>\r\n                      {type !== 'hashtags' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${encodeURIComponent(\r\n                              q,\r\n                            )}&type=hashtags`}\r\n                          >\r\n                            See more hashtags <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No hashtags found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {(!type || type === 'statuses') && (\r\n                <>\r\n                  {type !== 'statuses' && (\r\n                    <h2 class=\"timeline-header\">\r\n                      Posts{' '}\r\n                      <Link\r\n                        to={`/search?q=${encodeURIComponent(q)}&type=statuses`}\r\n                      >\r\n                        <Icon icon=\"arrow-right\" size=\"l\" />\r\n                      </Link>\r\n                    </h2>\r\n                  )}\r\n                  {statusResults.length > 0 ? (\r\n                    <>\r\n                      <ul class=\"timeline\">\r\n                        {statusResults.map((status) => (\r\n                          <li key={status.id}>\r\n                            <Link\r\n                              class=\"status-link\"\r\n                              to={\r\n                                instance\r\n                                  ? `/${instance}/s/${status.id}`\r\n                                  : `/s/${status.id}`\r\n                              }\r\n                            >\r\n                              <Status status={status} />\r\n                            </Link>\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                      {type !== 'statuses' && (\r\n                        <div class=\"ui-state\">\r\n                          <Link\r\n                            class=\"plain button\"\r\n                            to={`/search?q=${encodeURIComponent(\r\n                              q,\r\n                            )}&type=statuses`}\r\n                          >\r\n                            See more posts <Icon icon=\"arrow-right\" />\r\n                          </Link>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    !type &&\r\n                    (uiState === 'loading' ? (\r\n                      <p class=\"ui-state\">\r\n                        <Loader abrupt />\r\n                      </p>\r\n                    ) : (\r\n                      <p class=\"ui-state\">No posts found.</p>\r\n                    ))\r\n                  )}\r\n                </>\r\n              )}\r\n              {!!type &&\r\n                (uiState === 'default' ? (\r\n                  showMore ? (\r\n                    <InView\r\n                      onChange={(inView) => {\r\n                        if (inView) {\r\n                          loadResults();\r\n                        }\r\n                      }}\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"plain block\"\r\n                        onClick={() => loadResults()}\r\n                        style={{ marginBlockEnd: '6em' }}\r\n                      >\r\n                        Show more&hellip;\r\n                      </button>\r\n                    </InView>\r\n                  ) : (\r\n                    <p class=\"ui-state insignificant\">The end.</p>\r\n                  )\r\n                ) : (\r\n                  uiState === 'loading' && (\r\n                    <p class=\"ui-state\">\r\n                      <Loader abrupt />\r\n                    </p>\r\n                  )\r\n                ))}\r\n            </>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader abrupt />\r\n            </p>\r\n          ) : (\r\n            <p class=\"ui-state\">\r\n              Enter your search term or paste a URL above to get started.\r\n            </p>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import './trending.css';\r\n\r\nimport { MenuItem } from '@szhsin/react-menu';\r\nimport { getBlurHashAverageColor } from 'fast-blurhash';\r\nimport { useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Menu2 from '../components/menu2';\r\nimport RelativeTime from '../components/relative-time';\r\nimport Timeline from '../components/timeline';\r\nimport { api } from '../utils/api';\r\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\r\nimport { filteredItems } from '../utils/filters';\r\nimport pmem from '../utils/pmem';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states from '../utils/states';\r\nimport { saveStatus } from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst LIMIT = 20;\r\n\r\nconst fetchLinks = pmem(\r\n  (masto) => {\r\n    return masto.v1.trends.links.list().next();\r\n  },\r\n  {\r\n    // News last much longer\r\n    maxAge: 10 * 60 * 1000, // 10 minutes\r\n  },\r\n);\r\n\r\nfunction Trending({ columnMode, ...props }) {\r\n  const snapStates = useSnapshot(states);\r\n  const params = columnMode ? {} : useParams();\r\n  const { masto, instance } = api({\r\n    instance: props?.instance || params.instance,\r\n  });\r\n  const { masto: currentMasto, instance: currentInstance } = api();\r\n  const title = `Trending (${instance})`;\r\n  useTitle(title, `/:instance?/trending`);\r\n  // const navigate = useNavigate();\r\n  const latestItem = useRef();\r\n\r\n  const [hashtags, setHashtags] = useState([]);\r\n  const [links, setLinks] = useState([]);\r\n  const trendIterator = useRef();\r\n  async function fetchTrend(firstLoad) {\r\n    if (firstLoad || !trendIterator.current) {\r\n      trendIterator.current = masto.v1.trends.statuses.list({\r\n        limit: LIMIT,\r\n      });\r\n\r\n      // Get hashtags\r\n      try {\r\n        const iterator = masto.v1.trends.tags.list();\r\n        const { value: tags } = await iterator.next();\r\n        console.log('tags', tags);\r\n        if (tags?.length) {\r\n          setHashtags(tags);\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n      // Get links\r\n      try {\r\n        const { value } = await fetchLinks(masto);\r\n        // 4 types available: link, photo, video, rich\r\n        // Only want links for now\r\n        const links = value?.filter?.((link) => link.type === 'link');\r\n        console.log('links', links);\r\n        if (links?.length) {\r\n          setLinks(links);\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    const results = await trendIterator.current.next();\r\n    let { value } = results;\r\n    if (value?.length) {\r\n      if (firstLoad) {\r\n        latestItem.current = value[0].id;\r\n      }\r\n\r\n      // value = filteredItems(value, 'public'); // Might not work here\r\n      value.forEach((item) => {\r\n        saveStatus(item, instance);\r\n      });\r\n    }\r\n    return {\r\n      ...results,\r\n      value,\r\n    };\r\n  }\r\n\r\n  async function checkForUpdates() {\r\n    try {\r\n      const results = await masto.v1.trends.statuses\r\n        .list({\r\n          limit: 1,\r\n          // NOT SUPPORTED\r\n          // since_id: latestItem.current,\r\n        })\r\n        .next();\r\n      let { value } = results;\r\n      value = filteredItems(value, 'public');\r\n      if (value?.length && value[0].id !== latestItem.current) {\r\n        latestItem.current = value[0].id;\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const TimelineStart = useMemo(() => {\r\n    return (\r\n      <>\r\n        {!!hashtags.length && (\r\n          <div class=\"filter-bar expandable\">\r\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\r\n            {hashtags.map((tag, i) => {\r\n              const { name, history } = tag;\r\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\r\n              return (\r\n                <Link to={`/${instance}/t/${name}`} key={name}>\r\n                  <span>\r\n                    <span class=\"more-insignificant\">#</span>\r\n                    {name}\r\n                  </span>\r\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\r\n                </Link>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n        {!!links.length && (\r\n          <div class=\"links-bar\">\r\n            <header>\r\n              <h3>Trending News</h3>\r\n            </header>\r\n            {links.map((link) => {\r\n              const {\r\n                authorName,\r\n                authorUrl,\r\n                blurhash,\r\n                description,\r\n                height,\r\n                image,\r\n                imageDescription,\r\n                language,\r\n                providerName,\r\n                providerUrl,\r\n                publishedAt,\r\n                title,\r\n                url,\r\n                width,\r\n              } = link;\r\n              const domain = new URL(url).hostname\r\n                .replace(/^www\\./, '')\r\n                .replace(/\\/$/, '');\r\n              let accentColor;\r\n              if (blurhash) {\r\n                const averageColor = getBlurHashAverageColor(blurhash);\r\n                const labAverageColor = rgb2oklab(averageColor);\r\n                accentColor = oklab2rgb([\r\n                  0.6,\r\n                  labAverageColor[1],\r\n                  labAverageColor[2],\r\n                ]);\r\n              }\r\n\r\n              return (\r\n                <a\r\n                  key={url}\r\n                  href={url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  style={\r\n                    accentColor\r\n                      ? {\r\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\r\n                          '--accent-alpha-color': `rgba(${accentColor.join(\r\n                            ',',\r\n                          )}, 0.4)`,\r\n                        }\r\n                      : {}\r\n                  }\r\n                >\r\n                  <article>\r\n                    <figure>\r\n                      <img\r\n                        src={image}\r\n                        alt={imageDescription}\r\n                        width={width}\r\n                        height={height}\r\n                        loading=\"lazy\"\r\n                      />\r\n                    </figure>\r\n                    <div class=\"article-body\">\r\n                      <header>\r\n                        <div class=\"article-meta\">\r\n                          <span class=\"domain\">{domain}</span>{' '}\r\n                          {!!publishedAt && <>&middot; </>}\r\n                          {!!publishedAt && (\r\n                            <>\r\n                              <RelativeTime\r\n                                datetime={publishedAt}\r\n                                format=\"micro\"\r\n                              />\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                        {!!title && (\r\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\r\n                            {title}\r\n                          </h1>\r\n                        )}\r\n                      </header>\r\n                      {!!description && (\r\n                        <p class=\"description\" lang={language} dir=\"auto\">\r\n                          {description}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </article>\r\n                </a>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }, [hashtags, links]);\r\n\r\n  return (\r\n    <Timeline\r\n      key={instance}\r\n      title={title}\r\n      titleComponent={\r\n        <h1 class=\"header-double-lines\">\r\n          <b>Trending</b>\r\n          <div>{instance}</div>\r\n        </h1>\r\n      }\r\n      id=\"trending\"\r\n      instance={instance}\r\n      emptyText=\"No trending posts.\"\r\n      errorText=\"Unable to load posts\"\r\n      fetchItems={fetchTrend}\r\n      checkForUpdates={checkForUpdates}\r\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\r\n      useItemID\r\n      headerStart={<></>}\r\n      boostsCarousel={snapStates.settings.boostsCarousel}\r\n      // allowFilters\r\n      filterContext=\"public\"\r\n      timelineStart={TimelineStart}\r\n      headerEnd={\r\n        <Menu2\r\n          portal\r\n          // setDownOverflow\r\n          overflow=\"auto\"\r\n          viewScroll=\"close\"\r\n          position=\"anchor\"\r\n          menuButton={\r\n            <button type=\"button\" class=\"plain\">\r\n              <Icon icon=\"more\" size=\"l\" />\r\n            </button>\r\n          }\r\n        >\r\n          <MenuItem\r\n            onClick={() => {\r\n              let newInstance = prompt(\r\n                'Enter a new instance e.g. \"mastodon.social\"',\r\n              );\r\n              if (!/\\./.test(newInstance)) {\r\n                if (newInstance) alert('Invalid instance');\r\n                return;\r\n              }\r\n              if (newInstance) {\r\n                newInstance = newInstance.toLowerCase().trim();\r\n                // navigate(`/${newInstance}/trending`);\r\n                location.hash = `/${newInstance}/trending`;\r\n              }\r\n            }}\r\n          >\r\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\r\n          </MenuItem>\r\n          {currentInstance !== instance && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                location.hash = `/${currentInstance}/trending`;\r\n              }}\r\n            >\r\n              <Icon icon=\"bus\" />{' '}\r\n              <small class=\"menu-double-lines\">\r\n                Go to my instance (<b>{currentInstance}</b>)\r\n              </small>\r\n            </MenuItem>\r\n          )}\r\n        </Menu2>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Trending;\r\n","import { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Bookmarks from '../pages/bookmarks';\r\nimport Favourites from '../pages/favourites';\r\nimport Following from '../pages/following';\r\nimport Hashtag from '../pages/hashtag';\r\nimport List from '../pages/list';\r\nimport Mentions from '../pages/mentions';\r\nimport Notifications from '../pages/notifications';\r\nimport Public from '../pages/public';\r\nimport Search from '../pages/search';\r\nimport Trending from '../pages/trending';\r\nimport states from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Columns() {\r\n  useTitle('Home', '/');\r\n  const snapStates = useSnapshot(states);\r\n  const { shortcuts } = snapStates;\r\n\r\n  console.debug('RENDER Columns', shortcuts);\r\n\r\n  const components = shortcuts.map((shortcut) => {\r\n    if (!shortcut) return null;\r\n    const { type, ...params } = shortcut;\r\n    const Component = {\r\n      following: Following,\r\n      notifications: Notifications,\r\n      list: List,\r\n      public: Public,\r\n      bookmarks: Bookmarks,\r\n      favourites: Favourites,\r\n      hashtag: Hashtag,\r\n      mentions: Mentions,\r\n      trending: Trending,\r\n      search: Search,\r\n    }[type];\r\n    if (!Component) return null;\r\n    // Don't show Search column with no query, for now\r\n    if (type === 'search' && !params.query) return null;\r\n    return (\r\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\r\n    );\r\n  });\r\n\r\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\r\n    try {\r\n      const index = parseInt(handler.keys[0], 10) - 1;\r\n      document.querySelectorAll('#columns > *')[index].focus();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id=\"columns\"\r\n      onContextMenu={(e) => {\r\n        // If right-click on header, but not links or buttons\r\n        if (\r\n          e.target.closest('.deck > header') &&\r\n          !e.target.closest('a') &&\r\n          !e.target.closest('button')\r\n        ) {\r\n          e.preventDefault();\r\n          states.showShortcutsSettings = true;\r\n        }\r\n      }}\r\n    >\r\n      {components}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Columns;\r\n","import './notifications-menu.css';\r\n\r\nimport { ControlledMenu } from '@szhsin/react-menu';\r\nimport { memo } from 'preact/compat';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Columns from '../components/columns';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport Notification from '../components/notification';\r\nimport { api } from '../utils/api';\r\nimport db from '../utils/db';\r\nimport groupNotifications from '../utils/group-notifications';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport { getCurrentAccountNS } from '../utils/store-utils';\r\n\r\nimport Following from './following';\r\n\r\nfunction Home() {\r\n  const snapStates = useSnapshot(states);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const keys = await db.drafts.keys();\r\n      if (keys.length) {\r\n        const ns = getCurrentAccountNS();\r\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\r\n        if (ownKeys.length) {\r\n          states.showDrafts = true;\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\r\n        (!snapStates.settings.shortcutsViewMode &&\r\n          snapStates.settings.shortcutsColumnsMode)) &&\r\n      !!snapStates.shortcuts?.length ? (\r\n        <Columns />\r\n      ) : (\r\n        <Following\r\n          title=\"Home\"\r\n          path=\"/\"\r\n          id=\"home\"\r\n          headerStart={false}\r\n          headerEnd={<NotificationsLink />}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction NotificationsLink() {\r\n  const snapStates = useSnapshot(states);\r\n  const notificationLinkRef = useRef();\r\n  const [menuState, setMenuState] = useState(undefined);\r\n  return (\r\n    <>\r\n      <Link\r\n        ref={notificationLinkRef}\r\n        to=\"/notifications\"\r\n        class={`button plain notifications-button ${\r\n          snapStates.notificationsShowNew ? 'has-badge' : ''\r\n        } ${menuState || ''}`}\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\r\n            e.preventDefault();\r\n            setMenuState((state) => (!state ? 'open' : undefined));\r\n          }\r\n        }}\r\n      >\r\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\r\n      </Link>\r\n      <NotificationsMenu\r\n        state={menuState}\r\n        anchorRef={notificationLinkRef}\r\n        onClose={() => setMenuState(undefined)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst NOTIFICATIONS_LIMIT = 30;\r\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\r\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\r\n  const { masto, instance } = api();\r\n  const snapStates = useSnapshot(states);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const notificationsIterator = masto.v1.notifications.list({\r\n    limit: NOTIFICATIONS_LIMIT,\r\n  });\r\n\r\n  async function fetchNotifications() {\r\n    const allNotifications = await notificationsIterator.next();\r\n    const notifications = allNotifications.value;\r\n\r\n    if (notifications?.length) {\r\n      notifications.forEach((notification) => {\r\n        saveStatus(notification.status, instance, {\r\n          skipThreading: true,\r\n        });\r\n      });\r\n\r\n      const groupedNotifications = groupNotifications(notifications);\r\n\r\n      states.notificationsLast = notifications[0];\r\n      states.notifications = groupedNotifications;\r\n\r\n      // Update last read marker\r\n      masto.v1.markers\r\n        .create({\r\n          notifications: {\r\n            lastReadId: notifications[0].id,\r\n          },\r\n        })\r\n        .catch(() => {});\r\n    }\r\n\r\n    states.notificationsShowNew = false;\r\n    states.notificationsLastFetchTime = Date.now();\r\n    return allNotifications;\r\n  }\r\n\r\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\r\n  function fetchFollowRequests() {\r\n    return masto.v1.followRequests.list({\r\n      limit: 1,\r\n    });\r\n  }\r\n\r\n  function loadNotifications() {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        await fetchNotifications();\r\n        const followRequests = await fetchFollowRequests();\r\n        setHasFollowRequests(!!followRequests?.length);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (state === 'open') loadNotifications();\r\n  }, [state]);\r\n\r\n  return (\r\n    <ControlledMenu\r\n      menuClassName=\"notifications-menu\"\r\n      state={state}\r\n      anchorRef={anchorRef}\r\n      onClose={onClose}\r\n      portal={{\r\n        target: document.body,\r\n      }}\r\n      overflow=\"auto\"\r\n      viewScroll=\"close\"\r\n      position=\"anchor\"\r\n      align=\"center\"\r\n      boundingBoxPadding=\"8 8 8 8\"\r\n    >\r\n      <header>\r\n        <h2>Notifications</h2>\r\n      </header>\r\n      <main>\r\n        {snapStates.notifications.length ? (\r\n          <>\r\n            {snapStates.notifications\r\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\r\n              .map((notification) => (\r\n                <Notification\r\n                  key={notification.id}\r\n                  instance={instance}\r\n                  notification={notification}\r\n                  disableContextMenu\r\n                />\r\n              ))}\r\n          </>\r\n        ) : uiState === 'loading' ? (\r\n          <div class=\"ui-state\">\r\n            <Loader abrupt />\r\n          </div>\r\n        ) : (\r\n          uiState === 'error' && (\r\n            <div class=\"ui-state\">\r\n              <p>Unable to fetch notifications.</p>\r\n              <p>\r\n                <button type=\"button\" onClick={loadNotifications}>\r\n                  Try again\r\n                </button>\r\n              </p>\r\n            </div>\r\n          )\r\n        )}\r\n      </main>\r\n      <footer>\r\n        <Link to=\"/mentions\" class=\"button plain\">\r\n          <Icon icon=\"at\" /> <span>Mentions</span>\r\n        </Link>\r\n        <Link to=\"/notifications\" class=\"button plain2\">\r\n          {hasFollowRequests ? (\r\n            <>\r\n              <span class=\"tag collapsed\">New</span>{' '}\r\n              <span>Follow Requests</span>\r\n            </>\r\n          ) : (\r\n            <b>See all</b>\r\n          )}{' '}\r\n          <Icon icon=\"arrow-right\" />\r\n        </Link>\r\n      </footer>\r\n    </ControlledMenu>\r\n  );\r\n}\r\n\r\nexport default memo(Home);\r\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\r\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\r\n\r\nconst statusPostRegexes = [\r\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\r\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\r\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\r\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\r\n];\r\n\r\nexport function getInstanceStatusObject(url) {\r\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\r\n  const { hostname, pathname } = new URL(url);\r\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\r\n  for (const regex of statusPostRegexes) {\r\n    const [, id] = pathname.match(regex) || [];\r\n    console.log(pathname, regex, id);\r\n    if (id) {\r\n      return {\r\n        instance: hostname,\r\n        id,\r\n      };\r\n    }\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction getInstanceStatusURL(url) {\r\n  const { instance, id } = getInstanceStatusObject(url);\r\n  if (instance && id) {\r\n    return `/${instance}/s/${id}`;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default getInstanceStatusURL;\r\n","import { useLayoutEffect, useState } from 'preact/hooks';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport { api } from '../utils/api';\r\nimport getInstanceStatusURL, {\r\n  getInstanceStatusObject,\r\n} from '../utils/get-instance-status-url';\r\n\r\nexport default function HttpRoute() {\r\n  const location = useLocation();\r\n  const url = location.pathname.replace(/^\\//, '');\r\n  const statusObject = getInstanceStatusObject(url);\r\n  // const statusURL = getInstanceStatusURL(url);\r\n  const statusURL = statusObject?.instance\r\n    ? `/${statusObject.instance}/s/${statusObject.id}`\r\n    : null;\r\n  const [uiState, setUIState] = useState('loading');\r\n\r\n  useLayoutEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      // Check if status returns 200\r\n      try {\r\n        const { instance, id } = statusObject;\r\n        const { masto } = api({ instance });\r\n        const status = await masto.v1.statuses.$select(id).fetch();\r\n        if (status) {\r\n          window.location.hash = statusURL + '?view=full';\r\n          return;\r\n        }\r\n      } catch (e) {}\r\n\r\n      // Fallback to search\r\n      {\r\n        const { masto: currentMasto, instance: currentInstance } = api();\r\n        const result = await currentMasto.v2.search.fetch({\r\n          q: url,\r\n          limit: 1,\r\n          resolve: true,\r\n        });\r\n        if (result.statuses.length) {\r\n          const status = result.statuses[0];\r\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\r\n        } else if (result.accounts.length) {\r\n          const account = result.accounts[0];\r\n          window.location.hash = `/${currentInstance}/a/${account.id}`;\r\n        } else if (statusURL) {\r\n          // Fallback to original URL, which will probably show error\r\n          window.location.hash = statusURL + '?view=full';\r\n        } else {\r\n          setUIState('error');\r\n        }\r\n      }\r\n    })();\r\n  }, [statusURL]);\r\n\r\n  return (\r\n    <div class=\"ui-state\" tabIndex=\"-1\">\r\n      {uiState === 'loading' ? (\r\n        <>\r\n          <Loader abrupt />\r\n          <h2>Resolving…</h2>\r\n          <p>\r\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {url}\r\n            </a>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2>Unable to resolve URL</h2>\r\n          <p>\r\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {url}\r\n            </a>\r\n          </p>\r\n        </>\r\n      )}\r\n      <hr />\r\n      <p>\r\n        <Link to=\"/\">Go home</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import './lists.css';\r\n\r\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\r\n\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport ListAddEdit from '../components/list-add-edit';\r\nimport Loader from '../components/loader';\r\nimport Modal from '../components/modal';\r\nimport NavMenu from '../components/nav-menu';\r\nimport { api } from '../utils/api';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nfunction Lists() {\r\n  const { masto } = api();\r\n  useTitle(`Lists`, `/l`);\r\n  const [uiState, setUIState] = useState('default');\r\n\r\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\r\n  const [lists, setLists] = useState([]);\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const lists = await masto.v1.lists.list();\r\n        lists.sort((a, b) => a.title.localeCompare(b.title));\r\n        console.log(lists);\r\n        setLists(lists);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, [reloadCount]);\r\n\r\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\r\n\r\n  return (\r\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\r\n      <div class=\"timeline-deck deck\">\r\n        <header>\r\n          <div class=\"header-grid\">\r\n            <div class=\"header-side\">\r\n              <NavMenu />\r\n              <Link to=\"/\" class=\"button plain\">\r\n                <Icon icon=\"home\" size=\"l\" />\r\n              </Link>\r\n            </div>\r\n            <h1>Lists</h1>\r\n            <div class=\"header-side\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain\"\r\n                onClick={() => setShowListAddEditModal(true)}\r\n              >\r\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          {lists.length > 0 ? (\r\n            <>\r\n              <ul class=\"link-list\">\r\n                {lists.map((list) => (\r\n                  <li>\r\n                    <Link to={`/l/${list.id}`}>\r\n                      <span>\r\n                        <Icon icon=\"list\" /> <span>{list.title}</span>\r\n                      </span>\r\n                      {/* <button\r\n                      type=\"button\"\r\n                      class=\"plain\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        setShowListAddEditModal({\r\n                          list,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"pencil\" />\r\n                    </button> */}\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              {lists.length > 1 && (\r\n                <footer class=\"ui-state\">\r\n                  <small class=\"insignificant\">\r\n                    {lists.length} list\r\n                    {lists.length === 1 ? '' : 's'}\r\n                  </small>\r\n                </footer>\r\n              )}\r\n            </>\r\n          ) : uiState === 'loading' ? (\r\n            <p class=\"ui-state\">\r\n              <Loader />\r\n            </p>\r\n          ) : uiState === 'error' ? (\r\n            <p class=\"ui-state\">Unable to load lists.</p>\r\n          ) : (\r\n            <p class=\"ui-state\">No lists yet.</p>\r\n          )}\r\n        </main>\r\n      </div>\r\n      {showListAddEditModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowListAddEditModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <ListAddEdit\r\n            list={showListAddEditModal?.list}\r\n            onClose={(result) => {\r\n              if (result.state === 'success') {\r\n                reload();\r\n              }\r\n              setShowListAddEditModal(false);\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lists;\r\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { PHANPY_CLIENT_NAME: CLIENT_NAME, PHANPY_WEBSITE: WEBSITE } = import.meta\r\n  .env;\r\n\r\nconst SCOPES = 'read write follow push';\r\n\r\nexport async function registerApplication({ instanceURL }) {\r\n  const registrationParams = new URLSearchParams({\r\n    client_name: CLIENT_NAME,\r\n    redirect_uris: location.origin + location.pathname,\r\n    scopes: SCOPES,\r\n    website: WEBSITE,\r\n  });\r\n  const registrationResponse = await fetch(\r\n    `https://${instanceURL}/api/v1/apps`,\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: registrationParams.toString(),\r\n    },\r\n  );\r\n  const registrationJSON = await registrationResponse.json();\r\n  console.log({ registrationJSON });\r\n  return registrationJSON;\r\n}\r\n\r\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\r\n  const authorizationParams = new URLSearchParams({\r\n    client_id,\r\n    scope: SCOPES,\r\n    redirect_uri: location.origin + location.pathname,\r\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\r\n    response_type: 'code',\r\n  });\r\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\r\n  return authorizationURL;\r\n}\r\n\r\nexport async function getAccessToken({\r\n  instanceURL,\r\n  client_id,\r\n  client_secret,\r\n  code,\r\n}) {\r\n  const params = new URLSearchParams({\r\n    client_id,\r\n    client_secret,\r\n    redirect_uri: location.origin + location.pathname,\r\n    grant_type: 'authorization_code',\r\n    code,\r\n    scope: SCOPES,\r\n  });\r\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: params.toString(),\r\n  });\r\n  const tokenJSON = await tokenResponse.json();\r\n  console.log({ tokenJSON });\r\n  return tokenJSON;\r\n}\r\n","import './login.css';\r\n\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport logo from '../assets/logo.svg';\r\n\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport instancesListURL from '../data/instances.json?url';\r\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\r\nimport store from '../utils/store';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst { PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE } = import.meta.env;\r\n\r\nfunction Login() {\r\n  useTitle('Log in');\r\n  const instanceURLRef = useRef();\r\n  const cachedInstanceURL = store.local.get('instanceURL');\r\n  const [uiState, setUIState] = useState('default');\r\n  const [searchParams] = useSearchParams();\r\n  const instance = searchParams.get('instance');\r\n  const submit = searchParams.get('submit');\r\n  const [instanceText, setInstanceText] = useState(\r\n    instance || cachedInstanceURL?.toLowerCase() || '',\r\n  );\r\n\r\n  const [instancesList, setInstancesList] = useState([]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await fetch(instancesListURL);\r\n        const data = await res.json();\r\n        setInstancesList(data);\r\n      } catch (e) {\r\n        // Silently fail\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (cachedInstanceURL) {\r\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\r\n  //   }\r\n  // }, []);\r\n\r\n  const submitInstance = (instanceURL) => {\r\n    if (!instanceURL) return;\r\n    store.local.set('instanceURL', instanceURL);\r\n\r\n    (async () => {\r\n      setUIState('loading');\r\n      try {\r\n        const { client_id, client_secret, vapid_key } =\r\n          await registerApplication({\r\n            instanceURL,\r\n          });\r\n\r\n        if (client_id && client_secret) {\r\n          store.session.set('clientID', client_id);\r\n          store.session.set('clientSecret', client_secret);\r\n          store.session.set('vapidKey', vapid_key);\r\n\r\n          location.href = await getAuthorizationURL({\r\n            instanceURL,\r\n            client_id,\r\n          });\r\n        } else {\r\n          alert('Failed to register application');\r\n        }\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  };\r\n\r\n  const cleanInstanceText = instanceText\r\n    ? instanceText\r\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\r\n        .replace(/\\/+$/, '') // Remove trailing slash\r\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\r\n        .trim()\r\n    : null;\r\n  const instanceTextLooksLikeDomain =\r\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\r\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\r\n\r\n  const instancesSuggestions = cleanInstanceText\r\n    ? instancesList\r\n        .filter((instance) => instance.includes(instanceText))\r\n        .sort((a, b) => {\r\n          // Move text that starts with instanceText to the start\r\n          const aStartsWith = a\r\n            .toLowerCase()\r\n            .startsWith(instanceText.toLowerCase());\r\n          const bStartsWith = b\r\n            .toLowerCase()\r\n            .startsWith(instanceText.toLowerCase());\r\n          if (aStartsWith && !bStartsWith) return -1;\r\n          if (!aStartsWith && bStartsWith) return 1;\r\n          return 0;\r\n        })\r\n        .slice(0, 10)\r\n    : [];\r\n\r\n  const selectedInstanceText = instanceTextLooksLikeDomain\r\n    ? cleanInstanceText\r\n    : instancesSuggestions?.length\r\n    ? instancesSuggestions[0]\r\n    : instanceText\r\n    ? instancesList.find((instance) => instance.includes(instanceText))\r\n    : null;\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    // const { elements } = e.target;\r\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\r\n    // // Remove protocol from instance URL\r\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\r\n    // // Remove @acct@ or acct@ from instance URL\r\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\r\n    // if (!/\\./.test(instanceURL)) {\r\n    //   instanceURL = instancesList.find((instance) =>\r\n    //     instance.includes(instanceURL),\r\n    //   );\r\n    // }\r\n    // submitInstance(instanceURL);\r\n    submitInstance(selectedInstanceText);\r\n  };\r\n\r\n  if (submit) {\r\n    useEffect(() => {\r\n      submitInstance(instance || selectedInstanceText);\r\n    }, []);\r\n  }\r\n\r\n  return (\r\n    <main id=\"login\" style={{ textAlign: 'center' }}>\r\n      <form onSubmit={onSubmit}>\r\n        <h1>\r\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\r\n          <br />\r\n          Log in\r\n        </h1>\r\n        <label>\r\n          <p>Instance</p>\r\n          <input\r\n            value={instanceText}\r\n            required\r\n            type=\"text\"\r\n            class=\"large\"\r\n            id=\"instanceURL\"\r\n            ref={instanceURLRef}\r\n            disabled={uiState === 'loading'}\r\n            // list=\"instances-list\"\r\n            autocorrect=\"off\"\r\n            autocapitalize=\"off\"\r\n            autocomplete=\"off\"\r\n            spellcheck={false}\r\n            placeholder=\"instance domain\"\r\n            onInput={(e) => {\r\n              setInstanceText(e.target.value);\r\n            }}\r\n          />\r\n          {instancesSuggestions?.length > 0 ? (\r\n            <ul id=\"instances-suggestions\">\r\n              {instancesSuggestions.map((instance, i) => (\r\n                <li>\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"plain5\"\r\n                    onClick={() => {\r\n                      submitInstance(instance);\r\n                    }}\r\n                  >\r\n                    {instance}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\r\n          )}\r\n          {/* <datalist id=\"instances-list\">\r\n            {instancesList.map((instance) => (\r\n              <option value={instance} />\r\n            ))}\r\n          </datalist> */}\r\n        </label>\r\n        {uiState === 'error' && (\r\n          <p class=\"error\">\r\n            Failed to log in. Please try again or another instance.\r\n          </p>\r\n        )}\r\n        <div>\r\n          <button\r\n            disabled={\r\n              uiState === 'loading' || !instanceText || !selectedInstanceText\r\n            }\r\n          >\r\n            {selectedInstanceText\r\n              ? `Continue with ${selectedInstanceText}`\r\n              : 'Continue'}\r\n          </button>{' '}\r\n        </div>\r\n        <Loader hidden={uiState !== 'loading'} />\r\n        <hr />\r\n        {!DEFAULT_INSTANCE && (\r\n          <p>\r\n            <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\r\n              Don't have an account? Create one!\r\n            </a>\r\n          </p>\r\n        )}\r\n        <p>\r\n          <Link to=\"/\">Go home</Link>\r\n        </p>\r\n      </form>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import './status.css';\r\n\r\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\r\nimport debounce from 'just-debounce-it';\r\nimport pRetry from 'p-retry';\r\nimport { memo } from 'preact/compat';\r\nimport {\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { matchPath, useSearchParams } from 'react-router-dom';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Avatar from '../components/avatar';\r\nimport Icon from '../components/icon';\r\nimport Link from '../components/link';\r\nimport Loader from '../components/loader';\r\nimport MediaModal from '../components/media-modal';\r\nimport Menu2 from '../components/menu2';\r\nimport NameText from '../components/name-text';\r\nimport RelativeTime from '../components/relative-time';\r\nimport Status from '../components/status';\r\nimport { api } from '../utils/api';\r\nimport htmlContentLength from '../utils/html-content-length';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states, {\r\n  getStatus,\r\n  saveStatus,\r\n  statusKey,\r\n  threadifyStatus,\r\n} from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport { getCurrentAccount } from '../utils/store-utils';\r\nimport useScroll from '../utils/useScroll';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\r\n\r\nconst LIMIT = 40;\r\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\r\nconst MAX_WEIGHT = 5;\r\n\r\nlet cachedRepliesToggle = {};\r\nlet cachedStatusesMap = {};\r\nlet scrollPositions = {};\r\nfunction resetScrollPosition(id) {\r\n  delete cachedStatusesMap[id];\r\n  delete scrollPositions[id];\r\n}\r\n\r\nconst scrollIntoViewOptions = {\r\n  block: 'nearest',\r\n  inline: 'center',\r\n  behavior: 'smooth',\r\n};\r\n\r\n// Select all statuses except those inside collapsed details/summary\r\n// Hat-tip to @AmeliaBR@front-end.social\r\n// https://front-end.social/@AmeliaBR/109784776146144471\r\nconst STATUSES_SELECTOR =\r\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\r\n\r\nconst STATUS_URL_REGEX = /\\/s\\//i;\r\n\r\nfunction StatusPage(params) {\r\n  const { id } = params;\r\n  const { masto, instance } = api({ instance: params.instance });\r\n  const snapStates = useSnapshot(states);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const mediaParam = searchParams.get('media');\r\n  const mediaOnlyParam = searchParams.get('media-only');\r\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\r\n  let showMedia = mediaIndex > 0;\r\n  const mediaStatusID = searchParams.get('mediaStatusID');\r\n  const mediaStatus = getStatus(mediaStatusID, instance);\r\n  if (mediaStatusID && !mediaStatus) {\r\n    showMedia = false;\r\n  }\r\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\r\n\r\n  const sKey = statusKey(id, instance);\r\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\r\n  useEffect(() => {\r\n    if (states.statuses[sKey]) {\r\n      setHeroStatus(states.statuses[sKey]);\r\n    }\r\n  }, [sKey]);\r\n\r\n  const closeLink = useMemo(() => {\r\n    const { prevLocation } = states;\r\n    const pathname =\r\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\r\n    const matchStatusPath =\r\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\r\n    if (!pathname || matchStatusPath) {\r\n      return '/';\r\n    }\r\n    return pathname;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!heroStatus && showMedia) {\r\n      (async () => {\r\n        try {\r\n          const status = await masto.v1.statuses.$select(id).fetch();\r\n          saveStatus(status, instance);\r\n          setHeroStatus(status);\r\n        } catch (err) {\r\n          console.error(err);\r\n          alert('Unable to load post.');\r\n          location.hash = closeLink;\r\n        }\r\n      })();\r\n    }\r\n  }, [showMedia]);\r\n\r\n  const mediaAttachments = mediaStatusID\r\n    ? mediaStatus?.mediaAttachments\r\n    : heroStatus?.mediaAttachments;\r\n\r\n  const handleMediaClose = useCallback(() => {\r\n    if (\r\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\r\n      snapStates.prevLocation\r\n    ) {\r\n      history.back();\r\n    } else {\r\n      if (showMediaOnly) {\r\n        location.hash = closeLink;\r\n      } else {\r\n        searchParams.delete('media');\r\n        searchParams.delete('mediaStatusID');\r\n        setSearchParams(searchParams);\r\n      }\r\n    }\r\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\r\n\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => {\r\n      // carouselRef.current?.focus?.();\r\n      const $carousel = document.querySelector('.carousel');\r\n      if ($carousel) {\r\n        $carousel.focus();\r\n      }\r\n    }, 100);\r\n    return () => clearTimeout(timer);\r\n  }, [showMediaOnly]);\r\n\r\n  return (\r\n    <div class=\"deck-backdrop\">\r\n      {showMedia ? (\r\n        mediaAttachments?.length ? (\r\n          <MediaModal\r\n            mediaAttachments={mediaAttachments}\r\n            statusID={mediaStatusID || id}\r\n            instance={instance}\r\n            lang={heroStatus?.language}\r\n            index={mediaIndex - 1}\r\n            onClose={handleMediaClose}\r\n          />\r\n        ) : (\r\n          <div class=\"media-modal-container loading\">\r\n            <Loader abrupt />\r\n          </div>\r\n        )\r\n      ) : (\r\n        <Link to={closeLink} />\r\n      )}\r\n      {!showMediaOnly && (\r\n        <StatusThread\r\n          id={id}\r\n          instance={params.instance}\r\n          closeLink={closeLink}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StatusParent(props) {\r\n  const { linkable, to, onClick, ...restProps } = props;\r\n  return linkable ? (\r\n    <Link class=\"status-link\" to={to} onClick={onClick} {...restProps} />\r\n  ) : (\r\n    <div class=\"status-focus\" tabIndex={0} {...restProps} />\r\n  );\r\n}\r\n\r\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const mediaParam = searchParams.get('media');\r\n  const mediaStatusID = searchParams.get('mediaStatusID');\r\n  const showMedia = parseInt(mediaParam, 10) > 0;\r\n  const firstLoad = useRef(\r\n    !states.prevLocation &&\r\n      (history.length === 1 ||\r\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\r\n  );\r\n  const [viewMode, setViewMode] = useState(\r\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\r\n  );\r\n  const translate = !!parseInt(searchParams.get('translate'));\r\n  const { masto, instance } = api({ instance: propInstance });\r\n  const {\r\n    masto: currentMasto,\r\n    instance: currentInstance,\r\n    authenticated,\r\n  } = api();\r\n  const sameInstance = instance === currentInstance;\r\n  const snapStates = useSnapshot(states);\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [uiState, setUIState] = useState('default');\r\n  const heroStatusRef = useRef();\r\n  const sKey = statusKey(id, instance);\r\n  const totalDescendants = useRef(0);\r\n\r\n  const scrollableRef = useRef();\r\n  useEffect(() => {\r\n    scrollableRef.current?.focus();\r\n  }, []);\r\n  useEffect(() => {\r\n    const onScroll = debounce(() => {\r\n      // console.log('onScroll');\r\n      if (!scrollableRef.current) return;\r\n      const { scrollTop } = scrollableRef.current;\r\n      if (uiState !== 'loading') {\r\n        scrollPositions[id] = scrollTop;\r\n      }\r\n    }, 50);\r\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\r\n      passive: true,\r\n    });\r\n    onScroll();\r\n    return () => {\r\n      onScroll.cancel();\r\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [id, uiState !== 'loading']);\r\n\r\n  const scrollOffsets = useRef();\r\n  const lastInitContextTS = useRef();\r\n  const initContext = ({ reloadHero } = {}) => {\r\n    console.debug('initContext', id);\r\n    setUIState('loading');\r\n    let heroTimer;\r\n\r\n    const cachedStatuses = cachedStatusesMap[id];\r\n    if (cachedStatuses) {\r\n      // Case 1: It's cached, let's restore them to make it snappy\r\n      const reallyCachedStatuses = cachedStatuses.filter(\r\n        (s) => states.statuses[sKey],\r\n        // Some are not cached in the global state, so we need to filter them out\r\n      );\r\n      setStatuses(reallyCachedStatuses);\r\n    } else {\r\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\r\n      // if (heroIndex !== -1) {\r\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\r\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\r\n      //   setStatuses(slicedStatuses);\r\n      // } else {\r\n      // Case 3: Not cached and not in statuses, let's start from scratch\r\n      setStatuses([{ id }]);\r\n      // }\r\n    }\r\n\r\n    (async () => {\r\n      const heroFetch = () =>\r\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\r\n          retries: 4,\r\n        });\r\n      const contextFetch = pRetry(\r\n        () => masto.v1.statuses.$select(id).context.fetch(),\r\n        {\r\n          retries: 8,\r\n        },\r\n      );\r\n\r\n      const hasStatus = !!snapStates.statuses[sKey];\r\n      let heroStatus = snapStates.statuses[sKey];\r\n      if (hasStatus && !reloadHero) {\r\n        console.debug('Hero status is cached');\r\n      } else {\r\n        try {\r\n          heroStatus = await heroFetch();\r\n          saveStatus(heroStatus, instance);\r\n          // Give time for context to appear\r\n          await new Promise((resolve) => {\r\n            setTimeout(resolve, 100);\r\n          });\r\n        } catch (e) {\r\n          console.error(e);\r\n          setUIState('error');\r\n          return;\r\n        }\r\n      }\r\n\r\n      try {\r\n        const context = await contextFetch;\r\n        const { ancestors, descendants } = context;\r\n\r\n        totalDescendants.current = descendants?.length || 0;\r\n\r\n        const missingStatuses = new Set();\r\n        ancestors.forEach((status) => {\r\n          saveStatus(status, instance, {\r\n            skipThreading: true,\r\n          });\r\n          if (\r\n            status.inReplyToId &&\r\n            !ancestors.find((s) => s.id === status.inReplyToId)\r\n          ) {\r\n            missingStatuses.add(status.inReplyToId);\r\n          }\r\n        });\r\n        const ancestorsIsThread = ancestors.every(\r\n          (s) => s.account.id === heroStatus.account.id,\r\n        );\r\n        const nestedDescendants = [];\r\n        descendants.forEach((status) => {\r\n          saveStatus(status, instance, {\r\n            skipThreading: true,\r\n          });\r\n\r\n          if (\r\n            status.inReplyToId &&\r\n            !descendants.find((s) => s.id === status.inReplyToId) &&\r\n            status.inReplyToId !== heroStatus.id\r\n          ) {\r\n            missingStatuses.add(status.inReplyToId);\r\n          }\r\n\r\n          if (status.inReplyToAccountId === status.account.id) {\r\n            // If replying to self, it's part of the thread, level 1\r\n            nestedDescendants.push(status);\r\n          } else if (status.inReplyToId === heroStatus.id) {\r\n            // If replying to the hero status, it's a reply, level 1\r\n            nestedDescendants.push(status);\r\n          } else if (\r\n            !status.inReplyToAccountId &&\r\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\r\n            status.account.id === heroStatus.account.id\r\n          ) {\r\n            // If replying to hero's own statuses, it's part of the thread, level 1\r\n            nestedDescendants.push(status);\r\n          } else {\r\n            // If replying to someone else, it's a reply to a reply, level 2\r\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\r\n            if (parent) {\r\n              if (!parent.__replies) {\r\n                parent.__replies = [];\r\n              }\r\n              parent.__replies.push(status);\r\n            } else {\r\n              // If no parent, something is wrong\r\n              console.warn('No parent found for', status);\r\n            }\r\n          }\r\n        });\r\n\r\n        console.log({ ancestors, descendants, nestedDescendants });\r\n        if (missingStatuses.size) {\r\n          console.error('Missing statuses', [...missingStatuses]);\r\n        }\r\n\r\n        function expandReplies(_replies) {\r\n          return _replies?.map((_r) => ({\r\n            id: _r.id,\r\n            account: _r.account,\r\n            repliesCount: _r.repliesCount,\r\n            content: _r.content,\r\n            weight: calcStatusWeight(_r),\r\n            replies: expandReplies(_r.__replies),\r\n          }));\r\n        }\r\n\r\n        const allStatuses = [\r\n          ...ancestors.map((s) => ({\r\n            id: s.id,\r\n            ancestor: true,\r\n            isThread: ancestorsIsThread,\r\n            accountID: s.account.id,\r\n            account: s.account,\r\n            repliesCount: s.repliesCount,\r\n            weight: calcStatusWeight(s),\r\n          })),\r\n          {\r\n            id,\r\n            accountID: heroStatus.account.id,\r\n            weight: calcStatusWeight(heroStatus),\r\n          },\r\n          ...nestedDescendants.map((s) => ({\r\n            id: s.id,\r\n            account: s.account,\r\n            accountID: s.account.id,\r\n            descendant: true,\r\n            thread: s.account.id === heroStatus.account.id,\r\n            weight: calcStatusWeight(s),\r\n            replies: expandReplies(s.__replies),\r\n          })),\r\n        ];\r\n\r\n        setUIState('default');\r\n        scrollOffsets.current = {\r\n          offsetTop: heroStatusRef.current?.offsetTop,\r\n          scrollTop: scrollableRef.current?.scrollTop,\r\n        };\r\n\r\n        // Set limit to hero's index\r\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\r\n        if (heroLimit >= limit) {\r\n          setLimit(heroLimit + 1);\r\n        }\r\n\r\n        console.log({ allStatuses });\r\n        setStatuses(allStatuses);\r\n        cachedStatusesMap[id] = allStatuses;\r\n\r\n        // Let's threadify this one\r\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\r\n        // By right, at this point, all descendant statuses should be cached\r\n        threadifyStatus(heroStatus, instance);\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n\r\n    lastInitContextTS.current = Date.now();\r\n\r\n    return () => {\r\n      clearTimeout(heroTimer);\r\n    };\r\n  };\r\n\r\n  useEffect(initContext, [id, masto]);\r\n\r\n  const [showRefresh, setShowRefresh] = useState(false);\r\n  useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      const now = Date.now();\r\n      if (\r\n        lastInitContextTS.current &&\r\n        now - lastInitContextTS.current >= 60_000\r\n      ) {\r\n        setShowRefresh(true);\r\n      }\r\n    }, 60_000); // 1 minute\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!statuses.length) return;\r\n    console.debug('STATUSES', statuses);\r\n    const scrollPosition = scrollPositions[id];\r\n    console.debug('scrollPosition', scrollPosition);\r\n    if (!!scrollPosition) {\r\n      console.debug('Case 1', {\r\n        id,\r\n        scrollPosition,\r\n      });\r\n      scrollableRef.current.scrollTop = scrollPosition;\r\n    } else if (scrollOffsets.current) {\r\n      const newScrollOffsets = {\r\n        offsetTop: heroStatusRef.current?.offsetTop,\r\n        scrollTop: scrollableRef.current?.scrollTop,\r\n      };\r\n      const newScrollTop =\r\n        newScrollOffsets.offsetTop -\r\n        scrollOffsets.current.offsetTop +\r\n        newScrollOffsets.scrollTop;\r\n      console.debug('Case 2', {\r\n        scrollOffsets: scrollOffsets.current,\r\n        newScrollOffsets,\r\n        newScrollTop,\r\n        statuses: [...statuses],\r\n      });\r\n      scrollableRef.current.scrollTop = newScrollTop;\r\n    } else if (statuses.length === 1) {\r\n      console.debug('Case 3', {\r\n        id,\r\n      });\r\n      scrollableRef.current.scrollTop = 0;\r\n    }\r\n\r\n    // RESET\r\n    scrollOffsets.current = null;\r\n  }, [statuses]);\r\n\r\n  useEffect(() => {\r\n    if (snapStates.reloadStatusPage <= 0) return;\r\n    // Delete the cache for the context\r\n    (async () => {\r\n      try {\r\n        const { instanceURL } = getCurrentAccount();\r\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\r\n        console.log('Clear cache', contextURL);\r\n        const apiCache = await caches.open('api');\r\n        await apiCache.delete(contextURL, { ignoreVary: true });\r\n\r\n        return initContext({\r\n          reloadHero: true,\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, [snapStates.reloadStatusPage]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // RESET\r\n      scrollPositions = {};\r\n      states.reloadStatusPage = 0;\r\n      cachedStatusesMap = {};\r\n      cachedRepliesToggle = {};\r\n      statusWeightCache.clear();\r\n    };\r\n  }, []);\r\n\r\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\r\n  const heroDisplayName = useMemo(() => {\r\n    // Remove shortcodes from display name\r\n    if (!heroStatus) return '';\r\n    const { account } = heroStatus;\r\n    const div = document.createElement('div');\r\n    div.innerHTML = account.displayName;\r\n    return div.innerText.trim();\r\n  }, [heroStatus]);\r\n  const heroContentText = useMemo(() => {\r\n    if (!heroStatus) return '';\r\n    let text = statusPeek(heroStatus);\r\n    if (text.length > 64) {\r\n      // \"The title should ideally be less than 64 characters in length\"\r\n      // https://www.w3.org/Provider/Style/TITLE.html\r\n      text = text.slice(0, 64) + '…';\r\n    }\r\n    return text;\r\n  }, [heroStatus]);\r\n  useTitle(\r\n    heroDisplayName && heroContentText\r\n      ? `${heroDisplayName}: \"${heroContentText}\"`\r\n      : 'Status',\r\n    '/:instance?/s/:id',\r\n  );\r\n\r\n  const postInstance = useMemo(() => {\r\n    if (!heroStatus) return;\r\n    const { url } = heroStatus;\r\n    if (!url) return;\r\n    return new URL(url).hostname;\r\n  }, [heroStatus]);\r\n  const postSameInstance = useMemo(() => {\r\n    if (!postInstance) return;\r\n    return postInstance === instance;\r\n  }, [postInstance, instance]);\r\n\r\n  const [limit, setLimit] = useState(LIMIT);\r\n  const showMore = useMemo(() => {\r\n    // return number of statuses to show\r\n    return statuses.length - limit;\r\n  }, [statuses.length, limit]);\r\n\r\n  const hasDescendants = statuses.some((s) => s.descendant);\r\n  const ancestors = statuses.filter((s) => s.ancestor);\r\n\r\n  const [heroInView, setHeroInView] = useState(true);\r\n  const heroPointer = useMemo(() => {\r\n    // get top offset of heroStatus\r\n    if (!heroStatusRef.current || heroInView) return null;\r\n    const { top } = heroStatusRef.current.getBoundingClientRect();\r\n    return top > 0 ? 'down' : 'up';\r\n  }, [heroInView]);\r\n\r\n  useHotkeys(\r\n    'esc',\r\n    () => {\r\n      location.hash = closeLink;\r\n    },\r\n    {\r\n      // If media is open, esc to close media first\r\n      // Else close the status page\r\n      enabled: !showMedia,\r\n      ignoreEventWhen: (e) => {\r\n        const hasModal = !!document.querySelector('#modal-container > *');\r\n        return hasModal;\r\n      },\r\n    },\r\n  );\r\n  // For backspace, will always close both media and status page\r\n  useHotkeys('backspace', () => {\r\n    location.hash = closeLink;\r\n  });\r\n\r\n  useHotkeys('j', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\r\n    const allStatusLinks = Array.from(\r\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\r\n    );\r\n    console.log({ allStatusLinks });\r\n    if (\r\n      activeStatus &&\r\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\r\n      activeStatusRect.bottom > 0\r\n    ) {\r\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\r\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\r\n      if (nextStatus) {\r\n        nextStatus.focus();\r\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\r\n        const statusLinkRect = statusLink.getBoundingClientRect();\r\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostStatusLink) {\r\n        topmostStatusLink.focus();\r\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  useHotkeys('k', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\r\n    const allStatusLinks = Array.from(\r\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\r\n    );\r\n    if (\r\n      activeStatus &&\r\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\r\n      activeStatusRect.bottom > 0\r\n    ) {\r\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\r\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\r\n      if (prevStatus) {\r\n        prevStatus.focus();\r\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    } else {\r\n      // If active status is not in viewport, get the topmost status-link in viewport\r\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\r\n        const statusLinkRect = statusLink.getBoundingClientRect();\r\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\r\n      });\r\n      if (topmostStatusLink) {\r\n        topmostStatusLink.focus();\r\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\r\n      }\r\n    }\r\n  });\r\n\r\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\r\n  // IDEA: x is for expand\r\n  useHotkeys('x', () => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    if (activeStatus) {\r\n      const details = activeStatus.nextElementSibling;\r\n      if (details && details.tagName.toLowerCase() === 'details') {\r\n        details.open = !details.open;\r\n      }\r\n    }\r\n  });\r\n\r\n  const [reachTopPost, setReachTopPost] = useState(false);\r\n  // const { nearReachStart } = useScroll({\r\n  //   scrollableRef,\r\n  //   distanceFromStartPx: 16,\r\n  // });\r\n\r\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\r\n\r\n  const handleMediaClick = useCallback(\r\n    (e, i, media, status) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setSearchParams({\r\n        media: i + 1,\r\n        mediaStatusID: status.id,\r\n      });\r\n    },\r\n    [id],\r\n  );\r\n\r\n  const handleStatusLinkClick = useCallback((e, status) => {\r\n    resetScrollPosition(status.id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (mediaStatusID && showMedia) {\r\n      timer = setTimeout(() => {\r\n        const status = scrollableRef.current?.querySelector(\r\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\r\n        );\r\n        if (status) {\r\n          status.scrollIntoView(scrollIntoViewOptions);\r\n        }\r\n      }, 400); // After CSS transition\r\n    }\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [mediaStatusID, showMedia]);\r\n\r\n  const renderStatus = useCallback(\r\n    (status, i) => {\r\n      const {\r\n        id: statusID,\r\n        ancestor,\r\n        isThread,\r\n        descendant,\r\n        thread,\r\n        replies,\r\n        repliesCount,\r\n        weight,\r\n      } = status;\r\n      const isHero = statusID === id;\r\n      const isLinkable = isThread || ancestor;\r\n\r\n      return (\r\n        <li\r\n          key={statusID}\r\n          ref={isHero ? heroStatusRef : null}\r\n          class={`${ancestor ? 'ancestor' : ''} ${\r\n            descendant ? 'descendant' : ''\r\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\r\n        >\r\n          {isHero ? (\r\n            <>\r\n              <InView\r\n                threshold={0.1}\r\n                onChange={(inView) => {\r\n                  queueMicrotask(() => {\r\n                    requestAnimationFrame(() => {\r\n                      setHeroInView(inView);\r\n                    });\r\n                  });\r\n                }}\r\n                class=\"status-focus\"\r\n                tabIndex={0}\r\n              >\r\n                <Status\r\n                  statusID={statusID}\r\n                  instance={instance}\r\n                  withinContext\r\n                  size=\"l\"\r\n                  enableTranslate\r\n                  forceTranslate={translate}\r\n                />\r\n              </InView>\r\n              {uiState !== 'loading' && !authenticated ? (\r\n                <div class=\"post-status-banner\">\r\n                  <p>\r\n                    You're not logged in. Interactions (reply, boost, etc) are\r\n                    not possible.\r\n                  </p>\r\n                  <Link to=\"/login\" class=\"button\">\r\n                    Log in\r\n                  </Link>\r\n                </div>\r\n              ) : (\r\n                !sameInstance && (\r\n                  <div class=\"post-status-banner\">\r\n                    <p>\r\n                      This post is from another instance (<b>{instance}</b>).\r\n                      Interactions (reply, boost, etc) are not possible.\r\n                    </p>\r\n                    <button\r\n                      type=\"button\"\r\n                      disabled={uiState === 'loading'}\r\n                      onClick={() => {\r\n                        setUIState('loading');\r\n                        (async () => {\r\n                          try {\r\n                            const results = await currentMasto.v2.search.fetch({\r\n                              q: heroStatus.url,\r\n                              type: 'statuses',\r\n                              resolve: true,\r\n                              limit: 1,\r\n                            });\r\n                            if (results.statuses.length) {\r\n                              const status = results.statuses[0];\r\n                              location.hash = currentInstance\r\n                                ? `/${currentInstance}/s/${status.id}`\r\n                                : `/s/${status.id}`;\r\n                            } else {\r\n                              throw new Error('No results');\r\n                            }\r\n                          } catch (e) {\r\n                            setUIState('default');\r\n                            alert('Error: ' + e);\r\n                            console.error(e);\r\n                          }\r\n                        })();\r\n                      }}\r\n                    >\r\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\r\n                      interactions\r\n                    </button>\r\n                  </div>\r\n                )\r\n              )}\r\n            </>\r\n          ) : (\r\n            <StatusParent\r\n              linkable={isLinkable}\r\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\r\n              onClick={() => {\r\n                resetScrollPosition(statusID);\r\n              }}\r\n            >\r\n              {/* <Link\r\n              class=\"status-link\"\r\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\r\n              onClick={() => {\r\n                resetScrollPosition(statusID);\r\n              }}\r\n            > */}\r\n              {i === 0 && ancestor ? (\r\n                <InView\r\n                  threshold={0.5}\r\n                  onChange={(inView) => {\r\n                    queueMicrotask(() => {\r\n                      requestAnimationFrame(() => {\r\n                        setReachTopPost(inView);\r\n                      });\r\n                    });\r\n                  }}\r\n                >\r\n                  <Status\r\n                    statusID={statusID}\r\n                    instance={instance}\r\n                    withinContext\r\n                    size={thread || ancestor ? 'm' : 's'}\r\n                    enableTranslate\r\n                    onMediaClick={handleMediaClick}\r\n                    onStatusLinkClick={handleStatusLinkClick}\r\n                  />\r\n                </InView>\r\n              ) : (\r\n                <Status\r\n                  statusID={statusID}\r\n                  instance={instance}\r\n                  withinContext\r\n                  size={thread || ancestor ? 'm' : 's'}\r\n                  enableTranslate\r\n                  onMediaClick={handleMediaClick}\r\n                  onStatusLinkClick={handleStatusLinkClick}\r\n                  showActionsBar={!!descendant}\r\n                />\r\n              )}\r\n              {ancestor && repliesCount > 1 && (\r\n                <div class=\"replies-link\">\r\n                  <Icon icon=\"comment2\" />{' '}\r\n                  <span title={repliesCount}>\r\n                    {shortenNumber(repliesCount)}\r\n                  </span>\r\n                </div>\r\n              )}{' '}\r\n              {/* {replies?.length > LIMIT && (\r\n                        <div class=\"replies-link\">\r\n                          <Icon icon=\"comment\" />{' '}\r\n                          <span title={replies.length}>\r\n                            {shortenNumber(replies.length)}\r\n                          </span>\r\n                        </div>\r\n                      )} */}\r\n            </StatusParent>\r\n            // </Link>\r\n          )}\r\n          {descendant && replies?.length > 0 && (\r\n            <SubComments\r\n              instance={instance}\r\n              replies={replies}\r\n              hasParentThread={thread}\r\n              level={1}\r\n              accWeight={weight}\r\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\r\n              parentLink={{\r\n                to: instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`,\r\n                onClick: () => resetScrollPosition(statusID),\r\n              }}\r\n            />\r\n          )}\r\n          {uiState === 'loading' &&\r\n            isHero &&\r\n            !!heroStatus?.repliesCount &&\r\n            !hasDescendants && (\r\n              <div class=\"status-loading\">\r\n                <Loader />\r\n              </div>\r\n            )}\r\n          {uiState === 'error' &&\r\n            isHero &&\r\n            !!heroStatus?.repliesCount &&\r\n            !hasDescendants && (\r\n              <div class=\"status-error\">\r\n                Unable to load replies.\r\n                <br />\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"plain\"\r\n                  onClick={() => {\r\n                    states.reloadStatusPage++;\r\n                  }}\r\n                >\r\n                  Try again\r\n                </button>\r\n              </div>\r\n            )}\r\n        </li>\r\n      );\r\n    },\r\n    [\r\n      id,\r\n      instance,\r\n      uiState,\r\n      authenticated,\r\n      sameInstance,\r\n      translate,\r\n      handleMediaClick,\r\n      handleStatusLinkClick,\r\n      hasDescendants,\r\n    ],\r\n  );\r\n\r\n  const prevLocationIsStatusPage = useMemo(() => {\r\n    // Navigation API\r\n    if ('navigation' in window && navigation?.entries) {\r\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\r\n      if (prevEntry?.url) {\r\n        return STATUS_URL_REGEX.test(prevEntry.url);\r\n      }\r\n    }\r\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\r\n  }, [sKey]);\r\n\r\n  const moreStatusesKeys = useMemo(() => {\r\n    if (!showMore) return [];\r\n    const ids = [];\r\n    function getIDs(status) {\r\n      ids.push(status.id);\r\n      if (status.replies) {\r\n        status.replies.forEach(getIDs);\r\n      }\r\n    }\r\n    statuses.slice(limit).forEach(getIDs);\r\n    return ids.map((id) => statusKey(id, instance));\r\n  }, [showMore, statuses, limit, instance]);\r\n\r\n  const statusesList = useMemo(\r\n    () => statuses.slice(0, limit).map(renderStatus),\r\n    [statuses, limit, renderStatus],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      tabIndex=\"-1\"\r\n      ref={scrollableRef}\r\n      class={`status-deck deck contained ${\r\n        statuses.length > 1 ? 'padded-bottom' : ''\r\n      } ${\r\n        initialPageState.current === 'status' && !firstLoad.current\r\n          ? 'slide-in'\r\n          : ''\r\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\r\n      onAnimationEnd={(e) => {\r\n        // Fix the bounce effect when switching viewMode\r\n        // `slide-in` animation kicks in when switching viewMode\r\n        if (initialPageState.current === 'status') {\r\n          // e.target.classList.remove('slide-in');\r\n          initialPageState.current = null;\r\n        }\r\n      }}\r\n    >\r\n      <header\r\n        class={`${uiState === 'loading' ? 'loading' : ''}`}\r\n        onDblClick={(e) => {\r\n          // reload statuses\r\n          states.reloadStatusPage++;\r\n        }}\r\n      >\r\n        {/* <div>\r\n            <Link class=\"button plain deck-close\" href={closeLink}>\r\n              <Icon icon=\"chevron-left\" size=\"xl\" />\r\n            </Link>\r\n          </div> */}\r\n        <div class=\"header-grid header-grid-2\">\r\n          <h1>\r\n            {prevLocationIsStatusPage && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain deck-back\"\r\n                onClick={() => {\r\n                  history.back();\r\n                }}\r\n              >\r\n                <Icon icon=\"chevron-left\" size=\"xl\" />\r\n              </button>\r\n            )}\r\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\r\n              <>\r\n                <span class=\"hero-heading\">\r\n                  <NameText\r\n                    account={heroStatus.account}\r\n                    instance={instance}\r\n                    showAvatar\r\n                    short\r\n                  />{' '}\r\n                  <span class=\"insignificant\">\r\n                    &bull;{' '}\r\n                    <RelativeTime\r\n                      datetime={heroStatus.createdAt}\r\n                      format=\"micro\"\r\n                    />\r\n                  </span>\r\n                </span>{' '}\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"ancestors-indicator light small\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    heroStatusRef.current.scrollIntoView({\r\n                      behavior: 'smooth',\r\n                      block: 'start',\r\n                    });\r\n                  }}\r\n                  title=\"Go to main post\"\r\n                >\r\n                  <Icon\r\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\r\n                  />\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                Post{' '}\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"ancestors-indicator light small\"\r\n                  onClick={(e) => {\r\n                    // Scroll to top\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    scrollableRef.current.scrollTo({\r\n                      top: 0,\r\n                      behavior: 'smooth',\r\n                    });\r\n                  }}\r\n                  hidden={!ancestors.length || reachTopPost}\r\n                  title={`${ancestors.length} posts above ‒ Go to top`}\r\n                >\r\n                  <Icon icon=\"arrow-up\" />\r\n                  {ancestors\r\n                    .filter(\r\n                      (a, i, arr) =>\r\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\r\n                    )\r\n                    .slice(0, 3)\r\n                    .map((ancestor) => (\r\n                      <Avatar\r\n                        key={ancestor.account.id}\r\n                        url={ancestor.account.avatar}\r\n                        alt={ancestor.account.displayName}\r\n                      />\r\n                    ))}\r\n                  {/* <Icon icon=\"comment\" />{' '} */}\r\n                  {ancestors.length > 3 && (\r\n                    <>\r\n                      {' '}\r\n                      <span class=\"insignificant\">\r\n                        {shortenNumber(ancestors.length)}\r\n                      </span>\r\n                    </>\r\n                  )}\r\n                </button>\r\n              </>\r\n            )}\r\n          </h1>\r\n          <div class=\"header-side\">\r\n            <button\r\n              type=\"button\"\r\n              class=\"plain4 button-switch-view\"\r\n              style={{\r\n                display: viewMode === 'full' ? '' : 'none',\r\n              }}\r\n              onClick={() => {\r\n                setViewMode(null);\r\n                searchParams.delete('media');\r\n                searchParams.delete('media-only');\r\n                searchParams.delete('view');\r\n                setSearchParams(searchParams);\r\n              }}\r\n              title=\"Switch to Side Peek view\"\r\n            >\r\n              <Icon icon=\"layout4\" size=\"l\" />\r\n            </button>\r\n            {showRefresh && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain button-refresh\"\r\n                onClick={() => {\r\n                  states.reloadStatusPage++;\r\n                  setShowRefresh(false);\r\n                }}\r\n              >\r\n                <Icon icon=\"refresh\" size=\"l\" />\r\n              </button>\r\n            )}\r\n            <Menu2\r\n              align=\"end\"\r\n              portal={{\r\n                // Need this, else the menu click will cause scroll jump\r\n                target: scrollableRef.current,\r\n              }}\r\n              menuButton={\r\n                <button type=\"button\" class=\"button plain4\">\r\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\r\n                </button>\r\n              }\r\n            >\r\n              <MenuItem\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  states.reloadStatusPage++;\r\n                }}\r\n              >\r\n                <Icon icon=\"refresh\" />\r\n                <span>Refresh</span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                className=\"menu-switch-view\"\r\n                onClick={() => {\r\n                  setViewMode(viewMode === 'full' ? null : 'full');\r\n                  searchParams.delete('media');\r\n                  searchParams.delete('media-only');\r\n                  if (viewMode === 'full') {\r\n                    searchParams.delete('view');\r\n                  } else {\r\n                    searchParams.set('view', 'full');\r\n                  }\r\n                  setSearchParams(searchParams);\r\n                }}\r\n              >\r\n                <Icon\r\n                  icon={\r\n                    {\r\n                      '': 'layout5',\r\n                      full: 'layout4',\r\n                    }[viewMode || '']\r\n                  }\r\n                />\r\n                <span>\r\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\r\n                </span>\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  // Click all buttons with class .spoiler but not .spoiling\r\n                  const buttons = Array.from(\r\n                    scrollableRef.current.querySelectorAll(\r\n                      '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\r\n                    ),\r\n                  );\r\n                  buttons.forEach((button) => {\r\n                    button.click();\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\r\n              </MenuItem>\r\n              <MenuDivider />\r\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\r\n              <MenuItem\r\n                disabled={!postInstance || postSameInstance}\r\n                onClick={() => {\r\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\r\n                  if (statusURL) {\r\n                    location.hash = statusURL;\r\n                  } else {\r\n                    alert('Unable to switch');\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"transfer\" />\r\n                <small class=\"menu-double-lines\">\r\n                  Switch to post's instance\r\n                  {postInstance ? (\r\n                    <>\r\n                      {' '}\r\n                      (<b>{postInstance}</b>)\r\n                    </>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </small>\r\n              </MenuItem>\r\n            </Menu2>\r\n            <Link class=\"button plain deck-close\" to={closeLink}>\r\n              <Icon icon=\"x\" size=\"xl\" />\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      {!!statuses.length && heroStatus ? (\r\n        <ul\r\n          class={`timeline flat contextual grow ${\r\n            uiState === 'loading' ? 'loading' : ''\r\n          }`}\r\n        >\r\n          {statusesList}\r\n          {showMore > 0 && (\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                class=\"plain block show-more\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => setLimit((l) => l + LIMIT)}\r\n                style={{ marginBlockEnd: '6em' }}\r\n                data-state-post-ids={moreStatusesKeys.join(' ')}\r\n              >\r\n                <div class=\"ib avatars-bunch\">\r\n                  {/* show avatars for first 5 statuses */}\r\n                  {statuses.slice(limit, limit + 5).map((status) => (\r\n                    <Avatar\r\n                      key={status.id}\r\n                      url={status.account.avatarStatic}\r\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\r\n                    />\r\n                  ))}\r\n                </div>{' '}\r\n                <div class=\"ib\">\r\n                  Show more&hellip;{' '}\r\n                  <span class=\"tag\">\r\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\r\n                  </span>\r\n                </div>\r\n              </button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      ) : (\r\n        <>\r\n          {uiState === 'loading' && (\r\n            <ul class=\"timeline flat contextual grow loading\">\r\n              <li>\r\n                <Status skeleton size=\"l\" />\r\n              </li>\r\n            </ul>\r\n          )}\r\n          {uiState === 'error' && (\r\n            <p class=\"ui-state\">\r\n              Unable to load post\r\n              <br />\r\n              <br />\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  states.reloadStatusPage++;\r\n                }}\r\n              >\r\n                Try again\r\n              </button>\r\n            </p>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SubComments({\r\n  replies,\r\n  instance,\r\n  hasParentThread,\r\n  level,\r\n  accWeight,\r\n  openAll,\r\n  parentLink,\r\n}) {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  // Total comments count, including sub-replies\r\n  const diveDeep = (replies) => {\r\n    return replies.reduce((acc, reply) => {\r\n      const { repliesCount, replies } = reply;\r\n      const count = replies?.length || repliesCount;\r\n      return acc + count + diveDeep(replies || []);\r\n    }, 0);\r\n  };\r\n  const totalComments = replies.length + diveDeep(replies);\r\n  const sameCount = replies.length === totalComments;\r\n\r\n  // Get the first 3 accounts, unique by id\r\n  const accounts = replies\r\n    .map((r) => r.account)\r\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\r\n    .slice(0, 3);\r\n\r\n  const totalWeight = useMemo(() => {\r\n    return replies?.reduce((acc, reply) => {\r\n      return acc + reply?.weight;\r\n    }, accWeight);\r\n  }, [accWeight, replies?.length]);\r\n\r\n  let open = false;\r\n  if (openAll) {\r\n    open = true;\r\n  } else if (totalWeight <= MAX_WEIGHT) {\r\n    open = true;\r\n  } else if (!hasParentThread && totalComments === 1) {\r\n    const shortReply = calcStatusWeight(replies[0]) < 2;\r\n    if (shortReply) open = true;\r\n  }\r\n  const openBefore = cachedRepliesToggle[replies[0].id];\r\n\r\n  const handleMediaClick = useCallback((e, i, media, status) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setSearchParams({\r\n      media: i + 1,\r\n      mediaStatusID: status.id,\r\n    });\r\n  }, []);\r\n\r\n  const detailsRef = useRef();\r\n  useLayoutEffect(() => {\r\n    function handleScroll(e) {\r\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\r\n    }\r\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\r\n      passive: true,\r\n    });\r\n    return () => {\r\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <details\r\n      ref={detailsRef}\r\n      class=\"replies\"\r\n      open={openBefore || open}\r\n      onToggle={(e) => {\r\n        const { open } = e.target;\r\n        // use first reply as ID\r\n        cachedRepliesToggle[replies[0].id] = open;\r\n      }}\r\n      style={{\r\n        '--comments-level': level,\r\n      }}\r\n      data-comments-level={level}\r\n      data-comments-level-overflow={level > 4}\r\n    >\r\n      <summary class=\"replies-summary\" hidden={open}>\r\n        <span class=\"avatars\">\r\n          {accounts.map((a) => (\r\n            <Avatar\r\n              key={a.id}\r\n              url={a.avatarStatic}\r\n              title={`${a.displayName} @${a.username}`}\r\n              squircle={a?.bot}\r\n            />\r\n          ))}\r\n        </span>\r\n        <span class=\"replies-counts\">\r\n          <b>\r\n            <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\r\n            repl\r\n            {replies.length === 1 ? 'y' : 'ies'}\r\n          </b>\r\n          {!sameCount && totalComments > 1 && (\r\n            <>\r\n              {' '}\r\n              &middot;{' '}\r\n              <span>\r\n                <span title={totalComments}>\r\n                  {shortenNumber(totalComments)}\r\n                </span>{' '}\r\n                comment\r\n                {totalComments === 1 ? '' : 's'}\r\n              </span>\r\n            </>\r\n          )}\r\n        </span>\r\n        <Icon icon=\"chevron-down\" class=\"replies-summary-chevron\" />\r\n        {!!parentLink && (\r\n          <Link\r\n            class=\"replies-parent-link\"\r\n            to={parentLink.to}\r\n            onClick={parentLink.onClick}\r\n            title=\"View post with its replies\"\r\n          >\r\n            &raquo;\r\n          </Link>\r\n        )}\r\n      </summary>\r\n      <ul>\r\n        {replies.map((r) => (\r\n          <li key={r.id}>\r\n            {/* <Link\r\n              class=\"status-link\"\r\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\r\n              onClick={() => {\r\n                resetScrollPosition(r.id);\r\n              }}\r\n            > */}\r\n            <div class=\"status-focus\" tabIndex={0}>\r\n              <Status\r\n                statusID={r.id}\r\n                instance={instance}\r\n                withinContext\r\n                size=\"s\"\r\n                enableTranslate\r\n                onMediaClick={handleMediaClick}\r\n                showActionsBar\r\n              />\r\n              {!r.replies?.length && r.repliesCount > 0 && (\r\n                <div class=\"replies-link\">\r\n                  <Icon icon=\"comment2\" />{' '}\r\n                  <span title={r.repliesCount}>\r\n                    {shortenNumber(r.repliesCount)}\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {/* </Link> */}\r\n            {r.replies?.length && (\r\n              <SubComments\r\n                instance={instance}\r\n                replies={r.replies}\r\n                level={level + 1}\r\n                accWeight={!open ? r.weight : totalWeight}\r\n                openAll={openAll}\r\n                parentLink={{\r\n                  to: instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`,\r\n                  onClick: () => {\r\n                    resetScrollPosition(r.id);\r\n                  },\r\n                }}\r\n              />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </details>\r\n  );\r\n}\r\n\r\nconst MEDIA_VIRTUAL_LENGTH = 140;\r\nconst POLL_VIRTUAL_LENGTH = 35;\r\nconst CARD_VIRTUAL_LENGTH = 70;\r\nconst WEIGHT_SEGMENT = 140;\r\nconst statusWeightCache = new Map();\r\nfunction calcStatusWeight(status) {\r\n  const cachedWeight = statusWeightCache.get(status.id);\r\n  if (cachedWeight) return cachedWeight;\r\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\r\n  const length = htmlContentLength(spoilerText + content);\r\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\r\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\r\n  const cardLength =\r\n    card && (mediaAttachments?.length || poll?.options?.length)\r\n      ? 0\r\n      : CARD_VIRTUAL_LENGTH;\r\n  const totalLength = length + mediaLength + pollLength + cardLength;\r\n  const weight = totalLength / WEIGHT_SEGMENT;\r\n  statusWeightCache.set(status.id, weight);\r\n  return weight;\r\n}\r\n\r\nexport default memo(StatusPage);\r\n","import { useParams } from 'react-router-dom';\r\n\r\nimport Status from './status';\r\n\r\nexport default function StatusRoute() {\r\n  const params = useParams();\r\n  const { id, instance } = params;\r\n  return <Status id={id} instance={instance} />;\r\n}\r\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\r\n\r\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\r\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\r\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\r\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\r\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\r\nimport logoText from '../assets/logo-text.svg';\r\nimport logo from '../assets/logo.svg';\r\n\r\nimport Link from '../components/link';\r\nimport states from '../utils/states';\r\nimport useTitle from '../utils/useTitle';\r\n\r\nconst {\r\n  PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE,\r\n  PHANPY_WEBSITE: WEBSITE,\r\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\r\n  PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL: DEFAULT_INSTANCE_REGISTRATION_URL,\r\n} = import.meta.env;\r\nconst appSite = WEBSITE\r\n  ? WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')\r\n  : null;\r\nconst appVersion = __BUILD_TIME__\r\n  ? `${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\r\n      __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\r\n    }`\r\n  : null;\r\n\r\nfunction Welcome() {\r\n  useTitle(null, ['/', '/welcome']);\r\n  return (\r\n    <main id=\"welcome\">\r\n      <div class=\"hero-container\">\r\n        <div class=\"hero-content\">\r\n          <h1>\r\n            <img\r\n              src={logo}\r\n              alt=\"\"\r\n              width=\"160\"\r\n              height=\"160\"\r\n              style={{\r\n                aspectRatio: '1/1',\r\n                marginBlockEnd: -16,\r\n              }}\r\n            />\r\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\r\n          </h1>\r\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\r\n          <p>\r\n            <Link\r\n              to={\r\n                DEFAULT_INSTANCE\r\n                  ? `/login?instance=${DEFAULT_INSTANCE}&submit=1`\r\n                  : '/login'\r\n              }\r\n              class=\"button\"\r\n            >\r\n              {DEFAULT_INSTANCE ? 'Log in' : 'Log in with Mastodon'}\r\n            </Link>\r\n          </p>\r\n          {DEFAULT_INSTANCE && DEFAULT_INSTANCE_REGISTRATION_URL && (\r\n            <p>\r\n              <a href={DEFAULT_INSTANCE_REGISTRATION_URL} class=\"button plain5\">\r\n                Sign up\r\n              </a>\r\n            </p>\r\n          )}\r\n          {!DEFAULT_INSTANCE && (\r\n            <p class=\"insignificant\">\r\n              <small>\r\n                Connect your existing Mastodon/Fediverse account.\r\n                <br />\r\n                Your credentials are not stored on this server.\r\n              </small>\r\n            </p>\r\n          )}\r\n        </div>\r\n        {(appSite || appVersion) && (\r\n          <p class=\"app-site-version\">\r\n            <small>\r\n              {appSite} {appVersion}\r\n            </small>\r\n          </p>\r\n        )}\r\n        <p>\r\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\r\n            Built\r\n          </a>{' '}\r\n          by{' '}\r\n          <a\r\n            href=\"https://mastodon.social/@cheeaun\"\r\n            target=\"_blank\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              states.showAccount = 'cheeaun@mastodon.social';\r\n            }}\r\n          >\r\n            @cheeaun\r\n          </a>\r\n          .{' '}\r\n          <a href={PRIVACY_POLICY_URL} target=\"_blank\">\r\n            Privacy Policy\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n      <div id=\"why-container\">\r\n        <div class=\"sections\">\r\n          <section>\r\n            <img\r\n              src={boostsCarouselUrl}\r\n              alt=\"Screenshot of Boosts Carousel\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Boosts Carousel</h4>\r\n            <p>\r\n              Visually separate original posts and re-shared posts (boosted\r\n              posts).\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={nestedCommentsThreadUrl}\r\n              alt=\"Screenshot of nested comments thread\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Nested comments thread</h4>\r\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={groupedNotificationsUrl}\r\n              alt=\"Screenshot of grouped notifications\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Grouped notifications</h4>\r\n            <p>\r\n              Similar notifications are grouped and collapsed to reduce clutter.\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={multiColumnUrl}\r\n              alt=\"Screenshot of multi-column UI\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Single or multi-column</h4>\r\n            <p>\r\n              By default, single column for zen-mode seekers. Configurable\r\n              multi-column for power users.\r\n            </p>\r\n          </section>\r\n          <section>\r\n            <img\r\n              src={multiHashtagTimelineUrl}\r\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\r\n              loading=\"lazy\"\r\n            />\r\n            <h4>Multi-hashtag timeline</h4>\r\n            <p>Up to 5 hashtags combined into a single timeline.</p>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n","// Replace alert() with toastify-js\r\nimport Toastify from 'toastify-js';\r\n\r\nconst nativeAlert = window.alert;\r\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\r\n\r\nwindow.alert = function (message) {\r\n  console.debug(\r\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\r\n  );\r\n  // If Error object, show the message\r\n  if (message instanceof Error && message?.message) {\r\n    message = message.message;\r\n  }\r\n  // If not string, stringify it\r\n  if (typeof message !== 'string') {\r\n    message = JSON.stringify(message);\r\n  }\r\n\r\n  const toast = Toastify({\r\n    text: message,\r\n    className: 'alert',\r\n    gravity: 'top',\r\n    position: 'center',\r\n    duration: 10_000,\r\n    offset: {\r\n      y: 48,\r\n    },\r\n    onClick: () => {\r\n      toast.hideToast();\r\n    },\r\n  });\r\n  toast.showToast();\r\n};\r\n","import './app.css';\r\n\r\nimport debounce from 'just-debounce-it';\r\nimport {\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\r\nimport 'swiped-events';\r\nimport { subscribe } from 'valtio';\r\n\r\nimport BackgroundService from './components/background-service';\r\nimport ComposeButton from './components/compose-button';\r\nimport { ICONS } from './components/ICONS';\r\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\r\nimport Loader from './components/loader';\r\nimport Modals from './components/modals';\r\nimport NotificationService from './components/notification-service';\r\nimport SearchCommand from './components/search-command';\r\nimport Shortcuts from './components/shortcuts';\r\nimport NotFound from './pages/404';\r\nimport AccountStatuses from './pages/account-statuses';\r\nimport Bookmarks from './pages/bookmarks';\r\nimport Favourites from './pages/favourites';\r\nimport FollowedHashtags from './pages/followed-hashtags';\r\nimport Following from './pages/following';\r\nimport Hashtag from './pages/hashtag';\r\nimport Home from './pages/home';\r\nimport HttpRoute from './pages/http-route';\r\nimport List from './pages/list';\r\nimport Lists from './pages/lists';\r\nimport Login from './pages/login';\r\nimport Mentions from './pages/mentions';\r\nimport Notifications from './pages/notifications';\r\nimport Public from './pages/public';\r\nimport Search from './pages/search';\r\nimport StatusRoute from './pages/status-route';\r\nimport Trending from './pages/trending';\r\nimport Welcome from './pages/welcome';\r\nimport {\r\n  api,\r\n  initAccount,\r\n  initClient,\r\n  initInstance,\r\n  initPreferences,\r\n} from './utils/api';\r\nimport { getAccessToken } from './utils/auth';\r\nimport focusDeck from './utils/focus-deck';\r\nimport states, { initStates, statusKey } from './utils/states';\r\nimport store from './utils/store';\r\nimport { getCurrentAccount } from './utils/store-utils';\r\nimport './utils/toast-alert';\r\n\r\nwindow.__STATES__ = states;\r\nwindow.__STATES_STATS__ = () => {\r\n  const keys = [\r\n    'statuses',\r\n    'accounts',\r\n    'spoilers',\r\n    'unfurledLinks',\r\n    'statusQuotes',\r\n  ];\r\n  const counts = {};\r\n  keys.forEach((key) => {\r\n    counts[key] = Object.keys(states[key]).length;\r\n  });\r\n  console.warn('STATE stats', counts);\r\n\r\n  const { statuses } = states;\r\n  const unmountedPosts = [];\r\n  for (const key in statuses) {\r\n    const $post = document.querySelector(\r\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\r\n    );\r\n    if (!$post) {\r\n      unmountedPosts.push(key);\r\n    }\r\n  }\r\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\r\n};\r\n\r\n// Experimental \"garbage collection\" for states\r\n// Every 15 minutes\r\n// Only posts for now\r\nsetInterval(() => {\r\n  if (!window.__IDLE__) return;\r\n  const { statuses, unfurledLinks, notifications } = states;\r\n  let keysCount = 0;\r\n  const { instance } = api();\r\n  for (const key in statuses) {\r\n    if (!window.__IDLE__) break;\r\n    try {\r\n      const $post = document.querySelector(\r\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\r\n      );\r\n      const postInNotifications = notifications.some(\r\n        (n) => key === statusKey(n.status?.id, instance),\r\n      );\r\n      if (!$post && !postInNotifications) {\r\n        delete states.statuses[key];\r\n        delete states.statusQuotes[key];\r\n        for (const link in unfurledLinks) {\r\n          const unfurled = unfurledLinks[link];\r\n          const sKey = statusKey(unfurled.id, unfurled.instance);\r\n          if (sKey === key) {\r\n            delete states.unfurledLinks[link];\r\n            break;\r\n          }\r\n        }\r\n        keysCount++;\r\n      }\r\n    } catch (e) {}\r\n  }\r\n  if (keysCount) {\r\n    console.info(`GC: Removed ${keysCount} keys`);\r\n  }\r\n}, 15 * 60 * 1000);\r\n\r\n// Preload icons\r\n// There's probably a better way to do this\r\n// Related: https://github.com/vitejs/vite/issues/10600\r\nsetTimeout(() => {\r\n  for (const icon in ICONS) {\r\n    queueMicrotask(() => {\r\n      if (Array.isArray(ICONS[icon])) {\r\n        ICONS[icon][0]?.();\r\n      } else {\r\n        ICONS[icon]?.();\r\n      }\r\n    });\r\n  }\r\n}, 5000);\r\n\r\n(() => {\r\n  window.__IDLE__ = true;\r\n  const nonIdleEvents = [\r\n    'mousemove',\r\n    'mousedown',\r\n    'resize',\r\n    'keydown',\r\n    'touchstart',\r\n    'pointerdown',\r\n    'pointermove',\r\n    'wheel',\r\n  ];\r\n  const setIdle = () => {\r\n    window.__IDLE__ = true;\r\n  };\r\n  const IDLE_TIME = 3_000; // 3 seconds\r\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\r\n  const onNonIdle = () => {\r\n    window.__IDLE__ = false;\r\n    debouncedSetIdle();\r\n  };\r\n  nonIdleEvents.forEach((event) => {\r\n    window.addEventListener(event, onNonIdle, {\r\n      passive: true,\r\n      capture: true,\r\n    });\r\n  });\r\n  window.addEventListener('blur', setIdle, {\r\n    passive: true,\r\n  });\r\n  // When cursor leaves the window, set idle\r\n  document.documentElement.addEventListener(\r\n    'mouseleave',\r\n    (e) => {\r\n      if (!e.relatedTarget && !e.toElement) {\r\n        setIdle();\r\n      }\r\n    },\r\n    {\r\n      passive: true,\r\n    },\r\n  );\r\n  // document.addEventListener(\r\n  //   'visibilitychange',\r\n  //   () => {\r\n  //     if (document.visibilityState === 'visible') {\r\n  //       onNonIdle();\r\n  //     }\r\n  //   },\r\n  //   {\r\n  //     passive: true,\r\n  //   },\r\n  // );\r\n})();\r\n\r\n// Possible fix for iOS PWA theme-color bug\r\n// It changes when loading web pages in \"webview\"\r\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\r\nif (isIOS) {\r\n  document.addEventListener('visibilitychange', () => {\r\n    if (document.visibilityState === 'visible') {\r\n      const theme = store.local.get('theme');\r\n      let $meta;\r\n      if (theme) {\r\n        // Get current meta\r\n        $meta = document.querySelector(\r\n          `meta[name=\"theme-color\"][data-theme-setting=\"manual\"]`,\r\n        );\r\n        if ($meta) {\r\n          const color = $meta.content;\r\n          const tempColor =\r\n            theme === 'light'\r\n              ? $meta.dataset.themeLightColorTemp\r\n              : $meta.dataset.themeDarkColorTemp;\r\n          $meta.content = tempColor || '';\r\n          setTimeout(() => {\r\n            $meta.content = color;\r\n          }, 10);\r\n        }\r\n      } else {\r\n        // Get current color scheme\r\n        const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\r\n          .matches\r\n          ? 'dark'\r\n          : 'light';\r\n        // Get current theme-color\r\n        $meta = document.querySelector(\r\n          `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\r\n        );\r\n        if ($meta) {\r\n          const color = $meta.dataset.content;\r\n          const tempColor = $meta.dataset.contentTemp;\r\n          $meta.content = tempColor || '';\r\n          setTimeout(() => {\r\n            $meta.content = color;\r\n          }, 10);\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n{\r\n  const theme = store.local.get('theme');\r\n  // If there's a theme, it's NOT auto\r\n  if (theme) {\r\n    // dark | light\r\n    document.documentElement.classList.add(`is-${theme}`);\r\n    document\r\n      .querySelector('meta[name=\"color-scheme\"]')\r\n      .setAttribute('content', theme || 'dark light');\r\n\r\n    // Enable manual theme <meta>\r\n    const $manualMeta = document.querySelector(\r\n      'meta[data-theme-setting=\"manual\"]',\r\n    );\r\n    if ($manualMeta) {\r\n      $manualMeta.name = 'theme-color';\r\n      $manualMeta.content =\r\n        theme === 'light'\r\n          ? $manualMeta.dataset.themeLightColor\r\n          : $manualMeta.dataset.themeDarkColor;\r\n    }\r\n    // Disable auto theme <meta>s\r\n    const $autoMetas = document.querySelectorAll(\r\n      'meta[data-theme-setting=\"auto\"]',\r\n    );\r\n    $autoMetas.forEach((m) => {\r\n      m.name = '';\r\n    });\r\n  }\r\n  const textSize = store.local.get('textSize');\r\n  if (textSize) {\r\n    document.documentElement.style.setProperty('--text-size', `${textSize}px`);\r\n  }\r\n}\r\n\r\nsubscribe(states, (changes) => {\r\n  for (const [action, path, value, prevValue] of changes) {\r\n    // Change #app dataset based on settings.shortcutsViewMode\r\n    if (path.join('.') === 'settings.shortcutsViewMode') {\r\n      const $app = document.getElementById('app');\r\n      if ($app) {\r\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\r\n      }\r\n    }\r\n\r\n    // Add/Remove cloak class to body\r\n    if (path.join('.') === 'settings.cloakMode') {\r\n      const $body = document.body;\r\n      $body.classList.toggle('cloak', value);\r\n    }\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [uiState, setUIState] = useState('loading');\r\n\r\n  useEffect(() => {\r\n    const instanceURL = store.local.get('instanceURL');\r\n    const code = decodeURIComponent(\r\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\r\n    );\r\n\r\n    if (code) {\r\n      console.log({ code });\r\n      // Clear the code from the URL\r\n      window.history.replaceState(\r\n        {},\r\n        document.title,\r\n        window.location.pathname || '/',\r\n      );\r\n\r\n      const clientID = store.session.get('clientID');\r\n      const clientSecret = store.session.get('clientSecret');\r\n      const vapidKey = store.session.get('vapidKey');\r\n\r\n      (async () => {\r\n        setUIState('loading');\r\n        const { access_token: accessToken } = await getAccessToken({\r\n          instanceURL,\r\n          client_id: clientID,\r\n          client_secret: clientSecret,\r\n          code,\r\n        });\r\n\r\n        const client = initClient({ instance: instanceURL, accessToken });\r\n        await Promise.allSettled([\r\n          initInstance(client, instanceURL),\r\n          initAccount(client, instanceURL, accessToken, vapidKey),\r\n        ]);\r\n        initStates();\r\n        initPreferences(client);\r\n\r\n        setIsLoggedIn(true);\r\n        setUIState('default');\r\n      })();\r\n    } else {\r\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\r\n      const account = getCurrentAccount();\r\n      if (account) {\r\n        store.session.set('currentAccount', account.info.id);\r\n        const { client } = api({ account });\r\n        const { instance } = client;\r\n        // console.log('masto', masto);\r\n        initStates();\r\n        initPreferences(client);\r\n        setUIState('loading');\r\n        (async () => {\r\n          try {\r\n            await initInstance(client, instance);\r\n          } catch (e) {\r\n          } finally {\r\n            setIsLoggedIn(true);\r\n            setUIState('default');\r\n          }\r\n        })();\r\n      } else {\r\n        setUIState('default');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  let location = useLocation();\r\n  states.currentLocation = location.pathname;\r\n  // useLayoutEffect(() => {\r\n  //   states.currentLocation = location.pathname;\r\n  // }, [location.pathname]);\r\n\r\n  useEffect(focusDeck, [location, isLoggedIn]);\r\n\r\n  if (/\\/https?:/.test(location.pathname)) {\r\n    return <HttpRoute />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\r\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\r\n      {uiState === 'default' && (\r\n        <Routes>\r\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\r\n        </Routes>\r\n      )}\r\n      {isLoggedIn && <ComposeButton />}\r\n      {isLoggedIn && <Shortcuts />}\r\n      <Modals />\r\n      {isLoggedIn && <NotificationService />}\r\n      <BackgroundService isLoggedIn={isLoggedIn} />\r\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\r\n      <KeyboardShortcutsHelp />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\r\n  const location = useLocation();\r\n  const nonRootLocation = useMemo(() => {\r\n    const { pathname } = location;\r\n    return !/^\\/(login|welcome)/.test(pathname);\r\n  }, [location]);\r\n\r\n  return (\r\n    <Routes location={nonRootLocation || location}>\r\n      <Route\r\n        path=\"/\"\r\n        element={\r\n          isLoggedIn ? (\r\n            <Home />\r\n          ) : loading ? (\r\n            <Loader id=\"loader-root\" />\r\n          ) : (\r\n            <Welcome />\r\n          )\r\n        }\r\n      />\r\n      <Route path=\"/login\" element={<Login />} />\r\n      <Route path=\"/welcome\" element={<Welcome />} />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nfunction getPrevLocation() {\r\n  return states.prevLocation || null;\r\n}\r\nfunction SecondaryRoutes({ isLoggedIn }) {\r\n  // const snapStates = useSnapshot(states);\r\n  const location = useLocation();\r\n  // const prevLocation = snapStates.prevLocation;\r\n  const backgroundLocation = useRef(getPrevLocation());\r\n\r\n  const isModalPage = useMemo(() => {\r\n    return (\r\n      matchPath('/:instance/s/:id', location.pathname) ||\r\n      matchPath('/s/:id', location.pathname)\r\n    );\r\n  }, [location.pathname, matchPath]);\r\n  if (isModalPage) {\r\n    if (!backgroundLocation.current)\r\n      backgroundLocation.current = getPrevLocation();\r\n  } else {\r\n    backgroundLocation.current = null;\r\n  }\r\n  console.debug({\r\n    backgroundLocation: backgroundLocation.current,\r\n    location,\r\n  });\r\n\r\n  return (\r\n    <Routes location={backgroundLocation.current || location}>\r\n      {isLoggedIn && (\r\n        <>\r\n          <Route path=\"/notifications\" element={<Notifications />} />\r\n          <Route path=\"/mentions\" element={<Mentions />} />\r\n          <Route path=\"/following\" element={<Following />} />\r\n          <Route path=\"/b\" element={<Bookmarks />} />\r\n          <Route path=\"/f\" element={<Favourites />} />\r\n          <Route path=\"/l\">\r\n            <Route index element={<Lists />} />\r\n            <Route path=\":id\" element={<List />} />\r\n          </Route>\r\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\r\n        </>\r\n      )}\r\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\r\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\r\n      <Route path=\"/:instance?/p\">\r\n        <Route index element={<Public />} />\r\n        <Route path=\"l\" element={<Public local />} />\r\n      </Route>\r\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\r\n      <Route path=\"/:instance?/search\" element={<Search />} />\r\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport { App };\r\n","import './index.css';\r\n\r\nimport './cloak-mode.css';\r\n\r\nimport { render } from 'preact';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './app';\r\n\r\nif (import.meta.env.DEV) {\r\n  import('preact/debug');\r\n}\r\n\r\n// AbortSignal.timeout polyfill\r\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\r\n// Incorrect implementation, but should be good enough for now\r\nif ('AbortSignal' in window) {\r\n  AbortSignal.timeout =\r\n    AbortSignal.timeout ||\r\n    ((duration) => {\r\n      const controller = new AbortController();\r\n      setTimeout(() => controller.abort(), duration);\r\n      return controller.signal;\r\n    });\r\n}\r\n\r\nrender(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('app'),\r\n);\r\n\r\n// Storage cleanup\r\nsetTimeout(() => {\r\n  try {\r\n    // Clean up iconify localStorage\r\n    Object.keys(localStorage).forEach((key) => {\r\n      if (key.startsWith('iconify')) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    });\r\n    Object.keys(sessionStorage).forEach((key) => {\r\n      if (key.startsWith('iconify')) {\r\n        sessionStorage.removeItem(key);\r\n      }\r\n    });\r\n\r\n    // Clean up old settings key\r\n    localStorage.removeItem('settings:boostsCarousel');\r\n  } catch (e) {}\r\n}, 5000);\r\n\r\nwindow.__CLOAK__ = () => {\r\n  document.body.classList.toggle('cloak');\r\n};\r\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","r","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","Modal","class","tabindex","action","keys","_jsxs","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","ref","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","define_import_meta_env_default","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","uiState","setUIState","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","checked","exclusive","supportsExclusive","supports","onSubmit","preventDefault","formData","FormData","target","listResult","replies_policy","alert","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","status","stats","boosts","memFetchPostingStats","fetchAccount","standalone","authenticated","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","forEach","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","AccountBlock","src","canvas","add","pixelDimension","createElement","ctx","g","b","width","height","drawImage","colors","getImageData","a","dataLength","color","lightenRGB","rgbColors","avatarSize","external","role","accountInstance","handleContentLinks","enhanceContent","verifiedAt","__html","EmojiText","name","follower","heading","fetchAccounts","excludeRelationshipAttrs","shortenNumber","followersCount","fetchFollowing","followingCount","niceDateTime","FAMILIAR_FOLLOWERS_LIMIT","currentAuthenticated","relationship","privateNote","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentInfo","setIsSelf","q","fetchRelationships","relationships","setRelationshipUIState","relationship2","updateAccount","setRelationship","loading","relationshipUIState","showTranslatedBio","setShowPrivateNoteModal","lists","setLists","showAddRemoveLists","showPrivateNoteModal","dir","lists2","setShowTranslatedBio","setShowAddRemoveLists","niceAccountURL","showToast","clipboard","newRelationship","duration","counter","Loader","TranslatedBioSheet","AddRemoveListsSheet","PrivateNoteSheet","luminence","alpha","host","path","fieldsText","Math","text","urlObj","c","listsContainingAccount2","style","showListAddEditModal","setShowListAddEditModal","setListsContainingAccount","inList","listsContainingAccount","l","accountIds","result","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","accountURL","URL","hostname","Drafts","drafts","setDrafts","reloadCount","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","sort","updatedAt","getTime","hasDrafts","abrupt","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","poll","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","EmbedModal","html","rel","dangerouslySetInnerHTML","relationshipsMap","uniqueAccountIds","reduce","acc","includes","GenericAccounts","isCurrentInstance","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","setRelationshipsMap","loadRelationships","loadAccounts","done","Array","isArray","theAccount","find","j","_types","prev","newAccounts","reloadGenericAccounts","_b","reblog","favourite","showStats","InView","MediaAltModal","lang","forceTranslate","setForceTranslate","targetLanguage","getTranslateTargetLanguage","contentTranslationHideLanguages","settings","differentLanguage","localeMatch","supportsTTS","speak","whiteSpace","textWrap","TranslationBlock","sourceLanguage","clamp","min","max","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","localeCompare","MAX_AGE","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","fetchListTitle","fetchAccountTitle","SHORTCUTS_META","index","subtitle","query","encodeURIComponent","excludeViewMode","split","join","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","fontSize","opacity","textTransform","label","imgURL","multiColumnUrl","shortcutsViewMode","onChange","Boolean","shortcut","Object","values","excludedViewMode","shortcutsArr","from","temp","shortcutIndex","display","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FETCH_MAX_AGE","fetchLists","FORM_NOTES","setFollowedHashtags","currentType","form","formRef","input","setCurrentType","required","defaultValue","switch","autocorrect","followedHashtags","tag","shortcutsStr","compressToEncodedURIComponent","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","onInput","nonUniqueShortcuts","every","exceededLimit","newShortcuts","share","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","Settings","showAccounts","showAccount","destination","showDrafts","showMediaModal","classList","contains","MediaModal","statusID","showShortcutsSettings","showMediaAlt","showEmbedModal","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","mention","follow","follow_request","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","Notification","isStatic","disableContextMenu","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","datetime","format","Fragment","type2","status2","Status","previewMode","TruncatedLink","onContextMenu","dispatchEvent","clientX","clientY","readOnly","props","useTruncated","oldProps","newProps","event","accessToken","NotificationService","routeNotification","useLayoutEffect","sameInstance","notificationAccount","hasAccount","hash","warn","id2","setShowNotificationSheet","showNotificationSheet","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","params","autocomplete","autocapitalize","spellcheck","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","el","firstItem","prevItem","previousElementSibling","lastItem","click","top","queryType","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","formattedShortcuts","pin","handler","parseInt","closeMenu","updatesButton","instanceRef","overflow","viewScroll","menuClassName","gap","position","MenuLink","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","statusKey2","groupContext","contextIndex","contexts","t","repliedItem","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","sKey","queueMicrotask","fetchStatus","saveStatus","skipThreading","statusReply","assignFollowedTags","statusFollowedTags","statusWithFollowedTags","itemFollowedTags","extractedTags","clearFollowedTagsState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","scrollLeft","onScroll","scrollHeight","scrollWidth","clientHeight","clientWidth","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","addEventListener","passive","removeEventListener","init","Event","useScrollFn","callback","useThrottledCallback","MediaPost","parent","onMediaClick","accountId","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","hasSpoiler","readingExpandMedia","prefs","filterTitleStr","titlesStr","showSpoilerMedia","Media","NavMenu","setCurrentAccount","setMoreThanOneAccount","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","buttonClickTS","open","now","state","squircle","ControlledMenu","anchorRef","containerProps","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","scrollIntoViewOptions","block","inline","behavior","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","showReplyParent","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","handleLoadNewPosts","useCallback","dotRef","showNewPostsIndicator","headerRef","nearReachStart2","hiddenUI","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","TimelineItem","inView","bFiltered","isCarousel","fItems","aFiltered","reblog2","_pinned2","actualStatusID2","statusID2","url2","StatusCarousel","manyItems","isMiddle","isSpoiler","showCompact","_differentAuthor","isStart","isEnd","TimelineStatusCompact","itemKey","enableCommentHint","endButtonRef","render","setRender","newID","oldID","carouselRef","startButtonRef","statusPeekText","statusPeek","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","month2","date","year","validity","valid","active","allowSwitch","left","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","Following","homeIterator","latestItem","latestItemChanged","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","catch","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","some","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","announcements2","loadUpdates","autoRefresh","unsub","v","subscribeKey","yesterdayDate","todayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","contactAccount","startsAt","allDay","publishedAt","endsAt","published","read","reactions","publishedAtDate","publishedDateText","updatedAtText","staticUrl","me","reaction","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","SHORT_LIMIT","Search","offsetRef","scrollTo","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","link","history","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","cur","description","authorName","authorUrl","blurhash","imageDescription","providerName","providerUrl","accentColor","averageColor","labAverageColor","title2","Columns","components","Hashtag","Component","error","Home","NotificationsLink","notificationLinkRef","stopPropagation","matchMedia","matches","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","StatusParent","linkable","restProps","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","lastInitContextTS","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","setLimit","showRefresh","setShowRefresh","interval","scrollPosition","newScrollOffsets","setInterval","newScrollTop","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","postSameInstance","activeStatus","activeStatusRect","activeStatusIndex","nextStatus","statusLink","heroInView","heroPointer","statusLinkRect","topmostStatusLink","allStatusLinks","prevStatus","details","reachTopPost","initialPageState","handleMediaClick","renderStatus","descendant","thread","isHero","requestAnimationFrame","setHeroInView","setReachTopPost","isLinkable","SubComments","handleStatusLinkClick","withinContext","showActionsBar","prevEntry","moreStatusesKeys","level","accWeight","openAll","ids","viewMode","prevLocationIsStatusPage","arr","setViewMode","button","buttons","statusesList","diveDeep","replies2","replies3","totalComments","totalWeight","hasParentThread","calcStatusWeight","openBefore","parentLink","detailsRef","handleScroll","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","cachedWeight","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","WEIGHT_SEGMENT","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","documentElement","isIOS","theme","$meta","tempColor","colorScheme","$manualMeta","themeDarkColor","$autoMetas","textSize","setProperty","$app","$body","setIsLoggedIn","code","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","Welcome","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__","toggle"],"mappings":"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"}