{"version":3,"mappings":"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","names":["getAccount","id","accounts","store","local","getJSON","find","a","info","getAccountByAccessToken","accessToken","getAccountByInstance","instance","instanceURL","getCurrentAccount","window","__IGNORE_GET_ACCOUNT_ERROR__","currentAccount","account","getCurrentAccountNS","saveAccount","acc","updateAccount","accountInfo","displayName","currentInstance","getCurrentInstance","instances","e","location","getInstanceConfiguration","configuration","maxMediaAttachments","maxTootChars","pleroma","pollLimits","statuses","polls","maxCharactersPerOption","maxExpiration","getCurrentInstanceConfiguration","get","key","localStorage","getItem","console","JSON","value","set","setJSON","warn","session","sessionStorage","setItem","data","del","DEFAULT_INSTANCE","apis","accountApis","__ACCOUNT_APIS__","currentAccountApi","initClient","test","replace","toLowerCase","url","client","masto","createRestAPIClient","timeout","initInstance","uri","streamingApi","urls","domain","streaming","streamClient","createStreamingAPIClient","implementation","initAccount","vapidKey","mastoAccount","initPreferences","preferences","accountID","authenticated","_b","_c","instanceAccount","_e","_showToast","showToast","props","text","onClick","delay","rest","toast","Toastify","className","destination","gravity","position","setTimeout","isMastodonLinkMaybe","pathname","hash","URL","_moize","moize","mem","fn","opts","maxSize","isDeepEqual","pmem","isPromise","rateLimit","interval","queue","isRunning","executeNext","length","shift","args","callFn","apply","push","throttle","pThrottle","limit","denylistDomains","failedUnfurls","_unfurlMastodonLink","snapStates","snapshot","states","RegExp","unfurledLinks","Promise","resolve","debug","remoteInstanceFetch","theURL","urlAfterHash","urlObj","hostname","statusRegex","path","statusMatch","masto2","status","mastoSearchFetch","q","type","results","then","handleFulfill","result","selfURL","instance2","saveStatus","reject","handleCatch","finalPromise","unfurlMastodonLink","proxy","appVersion","prevLocation","currentLocation","statusThreadNumber","home","homeNew","homeLast","homeLastFetchTime","notifications","notificationsLast","notificationsNew","notificationsShowNew","notificationsLastFetchTime","reloadStatusPage","reloadGenericAccounts","counter","spoilers","spoilersMedia","scrollPositions","statusQuotes","statusFollowedTags","routeNotification","showCompose","showSettings","showAccount","showAccounts","showDrafts","showMediaModal","showShortcutsSettings","showKeyboardShortcutsHelp","showGenericAccounts","showMediaAlt","showEmbedModal","shortcuts","settings","autoRefresh","shortcutsViewMode","shortcutsColumnsMode","boostsCarousel","contentTranslation","contentTranslationTargetLanguage","contentTranslationHideLanguages","contentTranslationAutoInline","mediaAltGenerator","cloakMode","states$1","initStates","subscribeKey","v","subscribe","changes","prevValue","statusKey","getStatus","statusID","skipThreading","skipUnfurling","override","oldStatus","deepEqual","_pinned","threadifyStatus","unfurlStatus","_threadifyStatus","propInstance","api","traverse","index","fetchIndex","inReplyToAccountId","inReplyToId","prevStatus","r","fetchStatus","fauxDiv","content","document","sKey","i","splice","useInterval","deps","immediate","savedCallback","useRef","useEffect","current","setInterval","tick","clearInterval","openCompose","width","screenWidth","height","screenHeight","screen","left","Math","max","top","min","winUID","uid","random","newWin","open","__COMPOSE__","alert","SIZES","s","m","l","xl","xxl","ICONS","x","__vitePreload","heart","bookmark","check-circle","x-circle","transfer","rocket","arrow-left","arrow-right","arrow-up","arrow-down","earth","lock","unlock","eye-close","eye-open","message","comment","comment2","notification","follow","follow-add","poll","pencil","quill","at","attachment","upload","gear","more","external","popout","popin","plus","chevron-left","chevron-right","chevron-down","reply","thread","group","bot","menu","list","search","hashtag","shortcut","user","following","pin","bus","link","history","share","sparkles","sparkles2","exit","translate","play","trash","mute","unmute","block","unblock","flag","time","refresh","emoji2","filter","chart","react","layout4","layout5","announce","round","arrow-up-circle","arrow-down-circle","clipboard","account-edit","account-warning","keyboard","cloud","month","media","speak","building","ICONDATA","SVGICon","size","body","rotate","flip","_jsx","viewBox","dangerouslySetInnerHTML","__html","style","transform","isShallowEqual","Object","keys","Icon","icon","alt","title","class","iconSize","iconBlock","Array","iconData","setIconData","useState","currentIcon","iconB","useCloseWatcher","watcher","CloseWatcher","addEventListener","destroy","useCloseWatcher$1","$modalContainer","getElementById","Modal","children","onClose","modalRef","timer","focusElement","querySelector","focus","clearTimeout","supportsCloseWatcher","escRef","useHotkeys","enabled","keydown","keyup","ref","node","target","currentTarget","tabIndex","onFocus","createPortal","Loader","abrupt","hidden","xxxl","alphaCache","canvas","OffscreenCanvas","createElement","ctx","getContext","willReadFrequently","Avatar","squircle","avatarRef","isMissing","src","loading","decoding","crossOrigin","undefined","onError","onLoad","dataset","loaded","queueMicrotask","drawImage","allPixels","getImageData","hasAlpha","pixel","classList","add","clearRect","Link","forwardRef","routerLocation","useLocation","trim","to","restProps","includes","parsedHash","origin","searchParams","searchParamsStr","from","entries","map","encodeURIComponent","join","isActive","decodeURIComponent","href","parentNode","closest","stopPropagation","root","documentElement","getComputedStyle","defaultBoundingBoxPadding","safeAreaInsets","getSafeAreaInsets","safeAreaInsetTop","getPropertyValue","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","parseInt","requestAnimationFrame","safeBoundingBoxPadding","paddings","CSS","supports","passive","Menu2","containerProps","instanceRef","_instanceRef","useWindowSize","Menu","boundingBoxPadding","repositionFlag","unmountOnClose","closeMenu","MenuConfirm","subMenu","confirm","confirmLabel","menuItemClassName","menuFooter","MenuItem","cloneElement","Parent","SubMenu","menuRef","_jsxs","openTrigger","direction","overflow","gap","menuClassName","menuButton","label","itemProps","onPointerMove","pointerType","openMenu","onPointerLeave","EmojiText","emojis","indexOf","regex","shortcode","elements","split","word","emoji","staticUrl","srcset","nameCollator","Intl","Collator","sensitivity","NameText","showAvatar","showAcct","short","acct","avatar","avatarStatic","username","_","acct1","acct2","match","trimmedUsername","trimmedDisplayName","shortenedDisplayName","shortenedAlphaNumericDisplayName","compare","preventDefault","_Fragment","memo","dayjs","extend","dayjsTwitter","localizedFormat","relativeTime","dtf","DateTimeFormat","RelativeTime","datetime","format","date","dateStr","now","diff","year","twitter","toDate","fromNow","toISOString","_localeMatch","localeMatch","locales","resolvedOptions","locale","navigator","languages","localeTargetLanguages","translationTargetLanguages","code","getTranslateTargetLanguage","fromSettings","localeCode2Text","DisplayNames","of","emojifyText","forEach","whitelistLinkClasses","_enhanceContent","postEnhanceDOM","enhancedContent","dom","innerHTML","hasLink","hasCodeBlock","querySelectorAll","setAttribute","c","remove","textContent","links","usernames","innerText","hasChildren","some","u","d","slice","textNodes","extractTextNodes","html","nodeValue","replaceWith","childNodes","p","pre","br","nextParagraphs","currentBlock","nextElementSibling","next","tagName","codeText","replaceAll","rejectFilter","prevIndex","hashtagStuffedParagraphs","hashtagCount","nodeType","Node","TEXT_NODE","linkText","startsWith","enhanceContent","defaultRejectFilter","defaultRejectFilterMap","fromEntries","nodeName","rejectFilterMap","assign","reduce","cur","walk","createTreeWalker","NodeFilter","SHOW_TEXT","acceptNode","FILTER_REJECT","FILTER_ACCEPT","nextNode","div","getHTMLText","handleContentLinks","mentions","previewMode","statusURL","metaKey","ctrlKey","shiftKey","altKey","which","prevText","previousSibling","textBeforeLinkIsAt","endsWith","textStartsWithAt","contains","targetText","getAttribute","mention","textBeforeLinkIsHash","tag","_DateTimeFormat","dateYear","hideTime","formatOpts","currentYear","Date","getFullYear","day","hour","minute","niceDateTime","dtfOpts","NumberFormat","shortenNumber","notation","AccountBlock","skeleton","avatarSize","useAvatarStatic","internal","showActivity","showStats","accountInstance","hideDisplayName","relationship","excludeRelationshipAttrs","statusesCount","lastStatusAt","fields","note","followersCount","verifiedField","f","verifiedAt","excludedRelationship","hasRelationship","followedBy","requested","supportsCache","feature","version","range","features","satisfies","includePrerelease","loose","define_import_meta_env_default","draftsStore","createStore","drafts","val","getMany","delMany","clear","db","visibilityIconsMap","public","unlisted","private","direct","Poll","lang","readOnly","votePoll","uiState","setUIState","expired","expiresAt","multiple","options","ownVotes","voted","votersCount","votesCount","expiresAtDate","pollVotesCount","roundPrecision","showResults","setShowResults","optionsHaveVoteCounts","every","o","dir","option","optionVotesCount","percentage","toFixed","isLeading","disabled","onSubmit","form","formData","FormData","choices","name","marginLeft","FilterContext","createContext","_isFiltered","filtered","filterContext","appliedFilters","hasContext","context","isHidden","filterAction","action","filterTitles","titles","titlesStr","isFiltered","filteredItem","item","currentAccountID","isSelf","filterState","filteredItems","items","htmlContentLength","el","supportsTTS","speechSynthesis","speaking","cancel","utterance","SpeechSynthesisUtterance","statusPeek","spoilerText","mediaAttachments","image","gifv","video","audio","unknown","useTruncated","onResize","useThrottledCallback","scrollHeight","truncated","_height","maxHeight","computedHeight","toggle","useResizeObserver","box","isSafari","userAgent","dataAltLabel","AltBadge","MEDIA_CAPTION_LIMIT","isMediaCaptionLong","caption","Media","showOriginal","autoAnimate","showCaption","altIndex","blurhash","description","meta","previewRemoteUrl","previewUrl","remoteUrl","original","small","mediaURL","remoteMediaURL","orientation","rgbAverageColor","getBlurHashAverageColor","videoRef","focalPosition","y","mediaRef","onUpdate","useCallback","scale","make3dTransformValue","removeProperty","setProperty","touchAction","pinchZoomEnabled","setPinchZoomEnabled","quickPinchZoomProps","draggableUnZoomed","inertiaFriction","doubleTapZoomOutOnMaxScale","useMemo","isVideoMaybe","isImage","parentRef","imageSmallerThanParent","setImageSmallerThanParent","useLayoutEffect","offsetWidth","offsetHeight","smaller","maxAspectHeight","innerHeight","averageColorStyle","mediaStyles","aspectRatio","longDesc","showInlineDesc","Figure","Fragment","display","fetch","mode","backgroundImage","backgroundSize","QuickPinchZoom","objectPosition","shortDuration","duration","isGIF","loopable","formattedDuration","formatDuration","hoverAnimate","autoGIFAnimate","showProgress","videoHTML","pause","onMouseEnter","onMouseLeave","onBlur","poster","preload","playsinline","loop","muted","onTimeUpdate","container","currentTime","controls","autoplay","MenuLink","FocusableItem","detail","SHOW_COMMENT_COUNT_LIMIT","INLINE_TRANSLATE_LIMIT","fetchAccount","v1","$select","memFetchAccount","visibilityText","isIOS","ontouchstart","REACTIONS_LIMIT","getPollText","getPostText","Status","contentTextWeight","enableCommentHint","withinContext","enableTranslate","forceTranslate","_forceTranslate","onMediaClick","quoted","onStatusLinkClick","showFollowedTags","sameInstance","useSnapshot","accountId","accountURL","accountEmojis","repliesCount","reblogged","reblogsCount","favourited","favouritesCount","bookmarked","sensitive","visibility","language","editedAt","card","createdAt","reblog","tags","_deleted","useContext","filterInfo","debugHover","FilteredStatus","editedAtDate","inReplyToAccountRef","createdAtDate","setInReplyToAccount","inReplyToAccount","account2","catch","mentionSelf","readingExpandSpoilers","showSpoiler","readingExpandMedia","prefs","showSpoilerMedia","setForceTranslate","targetLanguage","contentLength","inlineTranslate","isSizeLarge","showEdited","setShowEdited","spoilerContentRef","statusRef","contentRef","mediaContainerRef","readMoreText","textWeight","editedDateText","_a","mediaNoDesc","replyToStatus","boostStatus","unauthInteractionErrorMessage","confirmText","yes","newStatus","favouriteStatus","differentLanguage","fetchBoostedLikedByAccounts","firstLoad","favouriteIterator","reblogResults","reblogIterator","favouriteResults","_types","done","MenuHeader","StatusMenuItems","createdDateText","MenuDivider","fetchAccounts","showReactions","replyStatus","postText","nicePostURL","editStatus","cachedStatus","setIsContextMenuOpen","contextMenuProps","setContextMenuProps","showContextMenu","bindLongPressContext","useLongPress","clientX","clientY","isContextMenuOpen","hotkeysEnabled","fRef","rRef","dRef","confirmBoostStatus","bRef","activeStatus","spoilerButton","spoilerMediaButton","canBoost","xRef","showMultipleMediaCaptions","displayedMediaAttachments","attachments","indices","showCommentHint","isThread","showCommentCount","nodeRef","containsQuestion","contextMenuRef","portal","QuoteStatuses","newPoll","pollResponse","TranslationBlock","mini","captionChildren","StatusButton","checked","bookmarkStatus","count","EditedAtModal","selfReferential","providerName","providerUrl","authorName","authorUrl","imageDescription","embedUrl","publishedAt","hasText","isLandscape","cardStatusURL","handleClick","hasIframeHTML","setCardStatusURL","blurhashImage","decodeBlurHash","w","putImageData","toDataURL","videoID","fetchStatusHistory","editHistory","setEditHistory","editHistory2","setIconAlt","buttonTitle","iconAlt","host","minutes","restPath","seconds","toString","filterTitleStr","statusPeekText","bindLongPressPeek","isReblog","actualStatusID","isFollowedTags","setShowPeek","threshold","captureEvent","ssKey","showPeek","statusPeekRef","quotes","uniqueQuotes","arr","q2","level","oldProps","newProps","restOldProps","shallowEqual","restNewProps"],"sources":["../../src/utils/store-utils.js","../../src/utils/store.js","../../src/utils/api.js","../../src/utils/show-toast.js","../../src/utils/isMastodonLinkMaybe.jsx","../../src/utils/mem.js","../../src/utils/pmem.js","../../src/utils/ratelimit.js","../../src/utils/unfurl-link.jsx","../../src/utils/states.js","../../src/utils/useInterval.js","../../src/utils/open-compose.js","../../src/components/icon.jsx","../../src/utils/useCloseWatcher.js","../../src/components/modal.jsx","../../src/components/loader.jsx","../../src/components/avatar.jsx","../../src/components/link.jsx","../../src/utils/safe-bounding-box-padding.js","../../src/components/menu2.jsx","../../src/components/menu-confirm.jsx","../../src/components/emoji-text.jsx","../../src/components/name-text.jsx","../../src/components/relative-time.jsx","../../src/utils/locale-match.jsx","../../src/utils/get-translate-target-language.jsx","../../src/utils/localeCode2Text.jsx","../../src/utils/emojify-text.js","../../src/utils/enhance-content.js","../../src/utils/getHTMLText.jsx","../../src/utils/handle-content-links.js","../../src/utils/nice-date-time.js","../../src/utils/shorten-number.jsx","../../src/components/account-block.jsx","../../src/utils/supports.js","../../src/components/translation-block.jsx","../../src/utils/db.js","../../src/utils/visibility-icons-map.js","../../src/components/poll.jsx","../../src/utils/filter-context.js","../../src/utils/filters.jsx","../../src/utils/html-content-length.js","../../src/utils/speech.js","../../src/utils/status-peek.jsx","../../src/utils/useTruncated.js","../../src/components/media.jsx","../../src/components/menu-link.jsx","../../src/components/status.jsx","../../src/components/compose.jsx","../../src/utils/useTitle.js"],"sourcesContent":["import store from './store';\r\n\r\nexport function getAccount(id) {\r\n  const accounts = store.local.getJSON('accounts') || [];\r\n  return accounts.find((a) => a.info.id === id) || accounts[0];\r\n}\r\n\r\nexport function getAccountByAccessToken(accessToken) {\r\n  const accounts = store.local.getJSON('accounts') || [];\r\n  return accounts.find((a) => a.accessToken === accessToken);\r\n}\r\n\r\nexport function getAccountByInstance(instance) {\r\n  const accounts = store.local.getJSON('accounts') || [];\r\n  return accounts.find((a) => a.instanceURL === instance);\r\n}\r\n\r\nexport function getCurrentAccount() {\r\n  if (!window.__IGNORE_GET_ACCOUNT_ERROR__) {\r\n    // Track down getCurrentAccount() calls before account-based states are initialized\r\n    console.error('getCurrentAccount() called before states are initialized');\r\n    if (import.meta.env.DEV) console.trace();\r\n  }\r\n  const currentAccount = store.session.get('currentAccount');\r\n  const account = getAccount(currentAccount);\r\n  return account;\r\n}\r\n\r\nexport function getCurrentAccountNS() {\r\n  const account = getCurrentAccount();\r\n  const {\r\n    instanceURL,\r\n    info: { id },\r\n  } = account;\r\n  return `${id}@${instanceURL}`;\r\n}\r\n\r\nexport function saveAccount(account) {\r\n  const accounts = store.local.getJSON('accounts') || [];\r\n  const acc = accounts.find((a) => a.info.id === account.info.id);\r\n  if (acc) {\r\n    acc.info = account.info;\r\n    acc.instanceURL = account.instanceURL;\r\n    acc.accessToken = account.accessToken;\r\n    acc.vapidKey = account.vapidKey;\r\n  } else {\r\n    accounts.push(account);\r\n  }\r\n  store.local.setJSON('accounts', accounts);\r\n  store.session.set('currentAccount', account.info.id);\r\n}\r\n\r\nexport function updateAccount(accountInfo) {\r\n  // Only update if displayName or avatar or avatar_static is different\r\n  const accounts = store.local.getJSON('accounts') || [];\r\n  const acc = accounts.find((a) => a.info.id === accountInfo.id);\r\n  if (acc) {\r\n    if (\r\n      acc.info.displayName !== accountInfo.displayName ||\r\n      acc.info.avatar !== accountInfo.avatar ||\r\n      acc.info.avatar_static !== accountInfo.avatar_static\r\n    ) {\r\n      acc.info = {\r\n        ...acc.info,\r\n        ...accountInfo,\r\n      };\r\n      store.local.setJSON('accounts', accounts);\r\n    }\r\n  }\r\n}\r\n\r\nlet currentInstance = null;\r\nexport function getCurrentInstance() {\r\n  if (currentInstance) return currentInstance;\r\n  try {\r\n    const account = getCurrentAccount();\r\n    const instances = store.local.getJSON('instances');\r\n    const instance = account.instanceURL.toLowerCase();\r\n    return (currentInstance = instances[instance]);\r\n  } catch (e) {\r\n    console.error(e);\r\n    alert(`Failed to load instance configuration. Please try again.\\n\\n${e}`);\r\n    // Temporary fix for corrupted data\r\n    store.local.del('instances');\r\n    location.reload();\r\n    return {};\r\n  }\r\n}\r\n\r\n// Massage these instance configurations to match the Mastodon API\r\n// - Pleroma\r\nfunction getInstanceConfiguration(instance) {\r\n  const {\r\n    configuration,\r\n    maxMediaAttachments,\r\n    maxTootChars,\r\n    pleroma,\r\n    pollLimits,\r\n  } = instance;\r\n\r\n  const statuses = configuration?.statuses || {};\r\n  if (maxMediaAttachments) {\r\n    statuses.maxMediaAttachments ??= maxMediaAttachments;\r\n  }\r\n  if (maxTootChars) {\r\n    statuses.maxCharacters ??= maxTootChars;\r\n  }\r\n\r\n  const polls = configuration?.polls || {};\r\n  if (pollLimits) {\r\n    polls.maxCharactersPerOption ??= pollLimits.maxOptionChars;\r\n    polls.maxExpiration ??= pollLimits.maxExpiration;\r\n    polls.maxOptions ??= pollLimits.maxOptions;\r\n    polls.minExpiration ??= pollLimits.minExpiration;\r\n  }\r\n\r\n  return {\r\n    ...configuration,\r\n    statuses,\r\n    polls,\r\n  };\r\n}\r\n\r\nexport function getCurrentInstanceConfiguration() {\r\n  const instance = getCurrentInstance();\r\n  return getInstanceConfiguration(instance);\r\n}\r\n","import { getCurrentAccountNS } from './store-utils';\r\n\r\nconst local = {\r\n  get: (key) => {\r\n    try {\r\n      return localStorage.getItem(key);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  getJSON: (key) => {\r\n    try {\r\n      return JSON.parse(local.get(key));\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  set: (key, value) => {\r\n    try {\r\n      return localStorage.setItem(key, value);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  setJSON: (key, value) => {\r\n    try {\r\n      return local.set(key, JSON.stringify(value));\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  del: (key) => {\r\n    try {\r\n      return localStorage.removeItem(key);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\nconst session = {\r\n  get: (key) => {\r\n    try {\r\n      return sessionStorage.getItem(key);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  getJSON: (key) => {\r\n    try {\r\n      return JSON.parse(session.get(key));\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  set: (key, value) => {\r\n    try {\r\n      return sessionStorage.setItem(key, value);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  setJSON: (key, value) => {\r\n    try {\r\n      return session.set(key, JSON.stringify(value));\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  del: (key) => {\r\n    try {\r\n      return sessionStorage.removeItem(key);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\n// Store with account namespace (id@domain.tld) <- uses id, not username\r\nconst account = {\r\n  get: (key) => {\r\n    try {\r\n      return local.getJSON(key)[getCurrentAccountNS()];\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  set: (key, value) => {\r\n    try {\r\n      const data = local.getJSON(key) || {};\r\n      data[getCurrentAccountNS()] = value;\r\n      return local.setJSON(key, data);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n  del: (key) => {\r\n    try {\r\n      const data = local.getJSON(key) || {};\r\n      delete data[getCurrentAccountNS()];\r\n      return local.setJSON(key, data);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\nexport default { local, session, account };\r\n","import { createRestAPIClient, createStreamingAPIClient } from 'masto';\r\n\r\nimport store from './store';\r\nimport {\r\n  getAccount,\r\n  getAccountByAccessToken,\r\n  getAccountByInstance,\r\n  getCurrentAccount,\r\n  saveAccount,\r\n} from './store-utils';\r\n\r\n// Default *fallback* instance\r\nconst DEFAULT_INSTANCE = 'mastodon.social';\r\n\r\n// Per-instance masto instance\r\n// Useful when only one account is logged in\r\n// I'm not sure if I'll ever allow multiple logged-in accounts but oh well...\r\n// E.g. apis['mastodon.social']\r\nconst apis = {};\r\n\r\n// Per-account masto instance\r\n// Note: There can be many accounts per instance\r\n// Useful when multiple accounts are logged in or when certain actions require a specific account\r\n// Just in case if I need this one day.\r\n// E.g. accountApis['mastodon.social']['ACCESS_TOKEN']\r\nconst accountApis = {};\r\nwindow.__ACCOUNT_APIS__ = accountApis;\r\n\r\n// Current account masto instance\r\nlet currentAccountApi;\r\n\r\nexport function initClient({ instance, accessToken }) {\r\n  if (/^https?:\\/\\//.test(instance)) {\r\n    instance = instance\r\n      .replace(/^https?:\\/\\//, '')\r\n      .replace(/\\/+$/, '')\r\n      .toLowerCase();\r\n  }\r\n  const url = instance ? `https://${instance}` : `https://${DEFAULT_INSTANCE}`;\r\n\r\n  const masto = createRestAPIClient({\r\n    url,\r\n    accessToken, // Can be null\r\n    timeout: 30_000, // Unfortunatly this is global instead of per-request\r\n  });\r\n\r\n  const client = {\r\n    masto,\r\n    instance,\r\n    accessToken,\r\n  };\r\n  apis[instance] = client;\r\n  if (!accountApis[instance]) accountApis[instance] = {};\r\n  if (accessToken) accountApis[instance][accessToken] = client;\r\n\r\n  return client;\r\n}\r\n\r\n// Get the instance information\r\n// The config is needed for composing\r\nexport async function initInstance(client, instance) {\r\n  console.log('INIT INSTANCE', client, instance);\r\n  const { masto, accessToken } = client;\r\n  // Request v2, fallback to v1 if fail\r\n  let info;\r\n  try {\r\n    info = await masto.v2.instance.fetch();\r\n  } catch (e) {}\r\n  if (!info) {\r\n    try {\r\n      info = await masto.v1.instance.fetch();\r\n    } catch (e) {}\r\n  }\r\n  if (!info) return;\r\n  console.log(info);\r\n  const {\r\n    // v1\r\n    uri,\r\n    urls: { streamingApi } = {},\r\n    // v2\r\n    domain,\r\n    configuration: { urls: { streaming } = {} } = {},\r\n  } = info;\r\n  const instances = store.local.getJSON('instances') || {};\r\n  if (uri || domain) {\r\n    instances[\r\n      (domain || uri)\r\n        .replace(/^https?:\\/\\//, '')\r\n        .replace(/\\/+$/, '')\r\n        .toLowerCase()\r\n    ] = info;\r\n  }\r\n  if (instance) {\r\n    instances[instance.toLowerCase()] = info;\r\n  }\r\n  store.local.setJSON('instances', instances);\r\n  // This is a weird place to put this but here's updating the masto instance with the streaming API URL set in the configuration\r\n  // Reason: Streaming WebSocket URL may change, unlike the standard API REST URLs\r\n  const supportsWebSocket = 'WebSocket' in window;\r\n  if (supportsWebSocket && (streamingApi || streaming)) {\r\n    console.log('🎏 Streaming API URL:', streaming || streamingApi);\r\n    // masto.config.props.streamingApiUrl = streaming || streamingApi;\r\n    // Legacy masto.ws\r\n    const streamClient = createStreamingAPIClient({\r\n      streamingApiUrl: streaming || streamingApi,\r\n      accessToken,\r\n      implementation: WebSocket,\r\n    });\r\n    client.streaming = streamClient;\r\n    // masto.ws = streamClient;\r\n    console.log('🎏 Streaming API client:', client);\r\n  }\r\n}\r\n\r\n// Get the account information and store it\r\nexport async function initAccount(client, instance, accessToken, vapidKey) {\r\n  const { masto } = client;\r\n  const mastoAccount = await masto.v1.accounts.verifyCredentials();\r\n\r\n  console.log('CURRENTACCOUNT SET', mastoAccount.id);\r\n  store.session.set('currentAccount', mastoAccount.id);\r\n\r\n  saveAccount({\r\n    info: mastoAccount,\r\n    instanceURL: instance.toLowerCase(),\r\n    accessToken,\r\n    vapidKey,\r\n  });\r\n}\r\n\r\n// Get preferences\r\nexport async function initPreferences(client) {\r\n  try {\r\n    const { masto } = client;\r\n    const preferences = await masto.v1.preferences.fetch();\r\n    store.account.set('preferences', preferences);\r\n  } catch (e) {\r\n    // silently fail\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n// Get the masto instance\r\n// If accountID is provided, get the masto instance for that account\r\nexport function api({ instance, accessToken, accountID, account } = {}) {\r\n  // Always lowercase and trim the instance\r\n  if (instance) {\r\n    instance = instance.toLowerCase().trim();\r\n  }\r\n\r\n  // If instance and accessToken are provided, get the masto instance for that account\r\n  if (instance && accessToken) {\r\n    const client =\r\n      accountApis[instance]?.[accessToken] ||\r\n      initClient({ instance, accessToken });\r\n    const { masto, streaming } = client;\r\n    return {\r\n      masto,\r\n      streaming,\r\n      client,\r\n      authenticated: true,\r\n      instance,\r\n    };\r\n  }\r\n\r\n  if (accessToken) {\r\n    // If only accessToken is provided, get the masto instance for that accessToken\r\n    console.log('X 1', accountApis);\r\n    for (const instance in accountApis) {\r\n      if (accountApis[instance][accessToken]) {\r\n        console.log('X 2', accountApis, instance, accessToken);\r\n        const client = accountApis[instance][accessToken];\r\n        const { masto, streaming } = client;\r\n        return {\r\n          masto,\r\n          streaming,\r\n          client,\r\n          authenticated: true,\r\n          instance,\r\n        };\r\n      } else {\r\n        console.log('X 3', accountApis, instance, accessToken);\r\n        const account = getAccountByAccessToken(accessToken);\r\n        if (account) {\r\n          const accessToken = account.accessToken;\r\n          const instance = account.instanceURL.toLowerCase().trim();\r\n          const client = initClient({ instance, accessToken });\r\n          const { masto, streaming } = client;\r\n          return {\r\n            masto,\r\n            streaming,\r\n            client,\r\n            authenticated: true,\r\n            instance,\r\n          };\r\n        } else {\r\n          throw new Error(`Access token not found`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If account is provided, get the masto instance for that account\r\n  if (account || accountID) {\r\n    account = account || getAccount(accountID);\r\n    if (account) {\r\n      const accessToken = account.accessToken;\r\n      const instance = account.instanceURL.toLowerCase().trim();\r\n      const client =\r\n        accountApis[instance]?.[accessToken] ||\r\n        initClient({ instance, accessToken });\r\n      const { masto, streaming } = client;\r\n      return {\r\n        masto,\r\n        streaming,\r\n        client,\r\n        authenticated: true,\r\n        instance,\r\n      };\r\n    } else {\r\n      throw new Error(`Account ${accountID} not found`);\r\n    }\r\n  }\r\n\r\n  const currentAccount = getCurrentAccount();\r\n\r\n  // If only instance is provided, get the masto instance for that instance\r\n  if (instance) {\r\n    if (currentAccountApi?.instance === instance) {\r\n      return {\r\n        masto: currentAccountApi.masto,\r\n        streaming: currentAccountApi.streaming,\r\n        client: currentAccountApi,\r\n        authenticated: true,\r\n        instance,\r\n      };\r\n    }\r\n\r\n    if (currentAccount?.instanceURL === instance) {\r\n      const { accessToken } = currentAccount;\r\n      currentAccountApi =\r\n        accountApis[instance]?.[accessToken] ||\r\n        initClient({ instance, accessToken });\r\n      return {\r\n        masto: currentAccountApi.masto,\r\n        streaming: currentAccountApi.streaming,\r\n        client: currentAccountApi,\r\n        authenticated: true,\r\n        instance,\r\n      };\r\n    }\r\n\r\n    const instanceAccount = getAccountByInstance(instance);\r\n    if (instanceAccount) {\r\n      const accessToken = instanceAccount.accessToken;\r\n      const client =\r\n        accountApis[instance]?.[accessToken] ||\r\n        initClient({ instance, accessToken });\r\n      const { masto, streaming } = client;\r\n      return {\r\n        masto,\r\n        streaming,\r\n        client,\r\n        authenticated: true,\r\n        instance,\r\n      };\r\n    }\r\n\r\n    const client = apis[instance] || initClient({ instance });\r\n    const { masto, streaming, accessToken } = client;\r\n    return {\r\n      masto,\r\n      streaming,\r\n      client,\r\n      authenticated: !!accessToken,\r\n      instance,\r\n    };\r\n  }\r\n\r\n  // If no instance is provided, get the masto instance for the current account\r\n  if (currentAccountApi) {\r\n    return {\r\n      masto: currentAccountApi.masto,\r\n      streaming: currentAccountApi.streaming,\r\n      client: currentAccountApi,\r\n      authenticated: true,\r\n      instance: currentAccountApi.instance,\r\n    };\r\n  }\r\n  if (currentAccount) {\r\n    const { accessToken, instanceURL: instance } = currentAccount;\r\n    currentAccountApi =\r\n      accountApis[instance]?.[accessToken] ||\r\n      initClient({ instance, accessToken });\r\n    return {\r\n      masto: currentAccountApi.masto,\r\n      streaming: currentAccountApi.streaming,\r\n      client: currentAccountApi,\r\n      authenticated: true,\r\n      instance,\r\n    };\r\n  }\r\n\r\n  // If no instance is provided and no account is logged in, get the masto instance for DEFAULT_INSTANCE\r\n  const client =\r\n    apis[DEFAULT_INSTANCE] || initClient({ instance: DEFAULT_INSTANCE });\r\n  const { masto, streaming } = client;\r\n  return {\r\n    masto,\r\n    streaming,\r\n    client,\r\n    authenticated: false,\r\n    instance: DEFAULT_INSTANCE,\r\n  };\r\n}\r\n\r\nwindow.__API__ = {\r\n  currentAccountApi,\r\n  apis,\r\n  accountApis,\r\n};\r\n","import Toastify from 'toastify-js';\r\n\r\nwindow._showToast = showToast;\r\n\r\nfunction showToast(props) {\r\n  if (typeof props === 'string') {\r\n    props = { text: props };\r\n  }\r\n  const { onClick, delay, ...rest } = props;\r\n  const toast = Toastify({\r\n    className: `${onClick || props.destination ? 'shiny-pill' : ''}`,\r\n    gravity: 'bottom',\r\n    position: 'center',\r\n    ...rest,\r\n    onClick: () => {\r\n      onClick?.(toast); // Pass in the object itself!\r\n    },\r\n  });\r\n  if (delay) {\r\n    setTimeout(() => {\r\n      toast.showToast();\r\n    }, delay);\r\n  } else {\r\n    toast.showToast();\r\n  }\r\n  return toast;\r\n}\r\n\r\nexport default showToast;\r\n","export default function isMastodonLinkMaybe(url) {\r\n  try {\r\n    const { pathname, hash } = new URL(url);\r\n    return (\r\n      /^\\/.*\\/\\d+$/i.test(pathname) ||\r\n      /^\\/(@[^/]+|users\\/[^/]+)\\/(statuses|posts)\\/\\w+\\/?$/i.test(pathname) || // GoToSocial, Takahe\r\n      /^\\/notes\\/[a-z0-9]+$/i.test(pathname) || // Misskey, Firefish\r\n      /^\\/(notice|objects)\\/[a-z0-9-]+$/i.test(pathname) || // Pleroma\r\n      /#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(hash) // Phanpy 🫣\r\n    );\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n","import moize from 'moize';\r\n\r\nwindow._moize = moize;\r\n\r\nexport default function mem(fn, opts = {}) {\r\n  return moize(fn, { ...opts, maxSize: 50, isDeepEqual: true });\r\n}\r\n","import mem from './mem';\r\n\r\nexport default function pmem(fn, opts = {}) {\r\n  return mem(fn, { isPromise: true, ...opts });\r\n}\r\n","// Rate limit repeated function calls and queue them to set interval\r\nexport default function rateLimit(fn, interval) {\r\n  let queue = [];\r\n  let isRunning = false;\r\n\r\n  function executeNext() {\r\n    if (queue.length === 0) {\r\n      isRunning = false;\r\n      return;\r\n    }\r\n\r\n    const nextFn = queue.shift();\r\n    nextFn();\r\n    setTimeout(executeNext, interval);\r\n  }\r\n\r\n  return function (...args) {\r\n    const callFn = () => fn.apply(this, args);\r\n    queue.push(callFn);\r\n\r\n    if (!isRunning) {\r\n      isRunning = true;\r\n      setTimeout(executeNext, interval);\r\n    }\r\n  };\r\n}\r\n","import pThrottle from 'p-throttle';\r\nimport { snapshot } from 'valtio/vanilla';\r\n\r\nimport { api } from './api';\r\nimport states, { saveStatus } from './states';\r\n\r\nexport const throttle = pThrottle({\r\n  limit: 1,\r\n  interval: 1000,\r\n});\r\n\r\nconst denylistDomains = /(twitter|github)\\.com/i;\r\nconst failedUnfurls = {};\r\nfunction _unfurlMastodonLink(instance, url) {\r\n  const snapStates = snapshot(states);\r\n  if (denylistDomains.test(url)) {\r\n    return;\r\n  }\r\n  if (failedUnfurls[url]) {\r\n    return;\r\n  }\r\n  const instanceRegex = new RegExp(instance + '/');\r\n  if (instanceRegex.test(snapStates.unfurledLinks[url]?.url)) {\r\n    return Promise.resolve(snapStates.unfurledLinks[url]);\r\n  }\r\n  console.debug('🦦 Unfurling URL', url);\r\n\r\n  let remoteInstanceFetch;\r\n  let theURL = url;\r\n\r\n  // https://elk.zone/domain.com/@stest/123 -> https://domain.com/@stest/123\r\n  if (/\\/\\/elk\\.[^\\/]+\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\r\n    theURL = theURL.replace(/elk\\.[^\\/]+\\//i, '');\r\n  }\r\n\r\n  // https://trunks.social/status/domain.com/@stest/123 -> https://domain.com/@stest/123\r\n  if (/\\/\\/trunks\\.[^\\/]+\\/status\\/[^\\/]+\\.[^\\/]+/i.test(theURL)) {\r\n    theURL = theURL.replace(/trunks\\.[^\\/]+\\/status\\//i, '');\r\n  }\r\n\r\n  // https://phanpy.social/#/domain.com/s/123 -> https://domain.com/statuses/123\r\n  if (/\\/#\\/[^\\/]+\\.[^\\/]+\\/s\\/.+/i.test(theURL)) {\r\n    const urlAfterHash = theURL.split('/#/')[1];\r\n    const finalURL = urlAfterHash.replace(/\\/s\\//i, '/@fakeUsername/');\r\n    theURL = `https://${finalURL}`;\r\n  }\r\n\r\n  let urlObj;\r\n  try {\r\n    urlObj = new URL(theURL);\r\n  } catch (e) {\r\n    return;\r\n  }\r\n  const domain = urlObj.hostname;\r\n  const path = urlObj.pathname;\r\n  // Regex /:username/:id, where username = @username or @username@domain, id = number\r\n  const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/(\\d+)$/i;\r\n  const statusMatch = statusRegex.exec(path);\r\n  if (statusMatch) {\r\n    const id = statusMatch[3];\r\n    const { masto } = api({ instance: domain });\r\n    remoteInstanceFetch = masto.v1.statuses\r\n      .$select(id)\r\n      .fetch()\r\n      .then((status) => {\r\n        if (status?.id) {\r\n          return {\r\n            status,\r\n            instance: domain,\r\n          };\r\n        } else {\r\n          throw new Error('No results');\r\n        }\r\n      });\r\n  }\r\n\r\n  const { masto } = api({ instance });\r\n  const mastoSearchFetch = masto.v2.search\r\n    .fetch({\r\n      q: theURL,\r\n      type: 'statuses',\r\n      resolve: true,\r\n      limit: 1,\r\n    })\r\n    .then((results) => {\r\n      if (results.statuses.length > 0) {\r\n        const status = results.statuses[0];\r\n        return {\r\n          status,\r\n          instance,\r\n        };\r\n      } else {\r\n        throw new Error('No results');\r\n      }\r\n    });\r\n\r\n  function handleFulfill(result) {\r\n    const { status, instance } = result;\r\n    const { id } = status;\r\n    const selfURL = `/${instance}/s/${id}`;\r\n    console.debug('🦦 Unfurled URL', url, id, selfURL);\r\n    const data = {\r\n      id,\r\n      instance,\r\n      url: selfURL,\r\n    };\r\n    states.unfurledLinks[url] = data;\r\n    saveStatus(status, instance, {\r\n      skipThreading: true,\r\n    });\r\n    return data;\r\n  }\r\n  function handleCatch(e) {\r\n    failedUnfurls[url] = true;\r\n  }\r\n\r\n  if (remoteInstanceFetch) {\r\n    // return Promise.any([remoteInstanceFetch, mastoSearchFetch])\r\n    //   .then(handleFulfill)\r\n    //   .catch(handleCatch);\r\n    // If mastoSearchFetch is fulfilled within 3s, return it, else return remoteInstanceFetch\r\n    const finalPromise = Promise.race([\r\n      mastoSearchFetch,\r\n      new Promise((resolve, reject) => setTimeout(reject, 3000)),\r\n    ]).catch(() => {\r\n      // If remoteInstanceFetch is fullfilled, return it, else return mastoSearchFetch\r\n      return remoteInstanceFetch.catch(() => mastoSearchFetch);\r\n    });\r\n    return finalPromise.then(handleFulfill).catch(handleCatch);\r\n  } else {\r\n    return mastoSearchFetch.then(handleFulfill).catch(handleCatch);\r\n  }\r\n}\r\n\r\nconst unfurlMastodonLink = throttle(_unfurlMastodonLink);\r\nexport default unfurlMastodonLink;\r\n","import { deepEqual } from 'fast-equals';\r\nimport { proxy, subscribe } from 'valtio';\r\nimport { subscribeKey } from 'valtio/utils';\r\n\r\nimport { api } from './api';\r\nimport isMastodonLinkMaybe from './isMastodonLinkMaybe';\r\nimport pmem from './pmem';\r\nimport rateLimit from './ratelimit';\r\nimport store from './store';\r\nimport unfurlMastodonLink from './unfurl-link';\r\n\r\nconst states = proxy({\r\n  appVersion: {},\r\n  // history: [],\r\n  prevLocation: null,\r\n  currentLocation: null,\r\n  statuses: {},\r\n  statusThreadNumber: {},\r\n  home: [],\r\n  // specialHome: [],\r\n  homeNew: [],\r\n  homeLast: null, // Last item in 'home' list\r\n  homeLastFetchTime: null,\r\n  notifications: [],\r\n  notificationsLast: null, // Last read notification\r\n  notificationsNew: [],\r\n  notificationsShowNew: false,\r\n  notificationsLastFetchTime: null,\r\n  reloadStatusPage: 0,\r\n  reloadGenericAccounts: {\r\n    id: null,\r\n    counter: 0,\r\n  },\r\n  spoilers: {},\r\n  spoilersMedia: {},\r\n  scrollPositions: {},\r\n  unfurledLinks: {},\r\n  statusQuotes: {},\r\n  statusFollowedTags: {},\r\n  accounts: {},\r\n  routeNotification: null,\r\n  // Modals\r\n  showCompose: false,\r\n  showSettings: false,\r\n  showAccount: false,\r\n  showAccounts: false,\r\n  showDrafts: false,\r\n  showMediaModal: false,\r\n  showShortcutsSettings: false,\r\n  showKeyboardShortcutsHelp: false,\r\n  showGenericAccounts: false,\r\n  showMediaAlt: false,\r\n  showEmbedModal: false,\r\n  // Shortcuts\r\n  shortcuts: [],\r\n  // Settings\r\n  settings: {\r\n    autoRefresh: false,\r\n    shortcutsViewMode: null,\r\n    shortcutsColumnsMode: false,\r\n    boostsCarousel: true,\r\n    contentTranslation: true,\r\n    contentTranslationTargetLanguage: null,\r\n    contentTranslationHideLanguages: [],\r\n    contentTranslationAutoInline: false,\r\n    mediaAltGenerator: false,\r\n    cloakMode: false,\r\n  },\r\n});\r\n\r\nexport default states;\r\n\r\nexport function initStates() {\r\n  // init all account based states\r\n  // all keys that uses store.account.get() should be initialized here\r\n  states.notificationsLast = store.account.get('notificationsLast') || null;\r\n  states.shortcuts = store.account.get('shortcuts') ?? [];\r\n  states.settings.autoRefresh =\r\n    store.account.get('settings-autoRefresh') ?? false;\r\n  states.settings.shortcutsViewMode =\r\n    store.account.get('settings-shortcutsViewMode') ?? null;\r\n  if (store.account.get('settings-shortcutsColumnsMode')) {\r\n    states.settings.shortcutsColumnsMode = true;\r\n  }\r\n  states.settings.boostsCarousel =\r\n    store.account.get('settings-boostsCarousel') ?? true;\r\n  states.settings.contentTranslation =\r\n    store.account.get('settings-contentTranslation') ?? true;\r\n  states.settings.contentTranslationTargetLanguage =\r\n    store.account.get('settings-contentTranslationTargetLanguage') || null;\r\n  states.settings.contentTranslationHideLanguages =\r\n    store.account.get('settings-contentTranslationHideLanguages') || [];\r\n  states.settings.contentTranslationAutoInline =\r\n    store.account.get('settings-contentTranslationAutoInline') ?? false;\r\n  states.settings.mediaAltGenerator =\r\n    store.account.get('settings-mediaAltGenerator') ?? false;\r\n  states.settings.cloakMode = store.account.get('settings-cloakMode') ?? false;\r\n}\r\n\r\nsubscribeKey(states, 'notificationsLast', (v) => {\r\n  console.log('CHANGE', v);\r\n  store.account.set('notificationsLast', states.notificationsLast);\r\n});\r\nsubscribe(states, (changes) => {\r\n  console.debug('STATES change', changes);\r\n  for (const [action, path, value, prevValue] of changes) {\r\n    if (path.join('.') === 'settings.autoRefresh') {\r\n      store.account.set('settings-autoRefresh', !!value);\r\n    }\r\n    if (path.join('.') === 'settings.boostsCarousel') {\r\n      store.account.set('settings-boostsCarousel', !!value);\r\n    }\r\n    if (path.join('.') === 'settings.shortcutsViewMode') {\r\n      store.account.set('settings-shortcutsViewMode', value);\r\n    }\r\n    if (path.join('.') === 'settings.contentTranslation') {\r\n      store.account.set('settings-contentTranslation', !!value);\r\n    }\r\n    if (path.join('.') === 'settings.contentTranslationAutoInline') {\r\n      store.account.set('settings-contentTranslationAutoInline', !!value);\r\n    }\r\n    if (path.join('.') === 'settings.contentTranslationTargetLanguage') {\r\n      console.log('SET', value);\r\n      store.account.set('settings-contentTranslationTargetLanguage', value);\r\n    }\r\n    if (/^settings\\.contentTranslationHideLanguages/i.test(path.join('.'))) {\r\n      store.account.set(\r\n        'settings-contentTranslationHideLanguages',\r\n        states.settings.contentTranslationHideLanguages,\r\n      );\r\n    }\r\n    if (path.join('.') === 'settings.mediaAltGenerator') {\r\n      store.account.set('settings-mediaAltGenerator', !!value);\r\n    }\r\n    if (path?.[0] === 'shortcuts') {\r\n      store.account.set('shortcuts', states.shortcuts);\r\n    }\r\n    if (path.join('.') === 'settings.cloakMode') {\r\n      store.account.set('settings-cloakMode', !!value);\r\n    }\r\n  }\r\n});\r\n\r\nexport function hideAllModals() {\r\n  states.showCompose = false;\r\n  states.showSettings = false;\r\n  states.showAccount = false;\r\n  states.showAccounts = false;\r\n  states.showDrafts = false;\r\n  states.showMediaModal = false;\r\n  states.showShortcutsSettings = false;\r\n  states.showKeyboardShortcutsHelp = false;\r\n  states.showGenericAccounts = false;\r\n  states.showMediaAlt = false;\r\n  states.showEmbedModal = false;\r\n}\r\n\r\nexport function statusKey(id, instance) {\r\n  if (!id) return;\r\n  return instance ? `${instance}/${id}` : id;\r\n}\r\n\r\nexport function getStatus(statusID, instance) {\r\n  if (instance) {\r\n    const key = statusKey(statusID, instance);\r\n    return states.statuses[key];\r\n  }\r\n  return states.statuses[statusID];\r\n}\r\n\r\nexport function saveStatus(status, instance, opts) {\r\n  if (typeof instance === 'object') {\r\n    opts = instance;\r\n    instance = null;\r\n  }\r\n  const {\r\n    override = true,\r\n    skipThreading = false,\r\n    skipUnfurling = false,\r\n  } = opts || {};\r\n  if (!status) return;\r\n  const oldStatus = getStatus(status.id, instance);\r\n  if (!override && oldStatus) return;\r\n  if (deepEqual(status, oldStatus)) return;\r\n  queueMicrotask(() => {\r\n    const key = statusKey(status.id, instance);\r\n    if (oldStatus?._pinned) status._pinned = oldStatus._pinned;\r\n    // if (oldStatus?._filtered) status._filtered = oldStatus._filtered;\r\n    states.statuses[key] = status;\r\n    if (status.reblog) {\r\n      const key = statusKey(status.reblog.id, instance);\r\n      states.statuses[key] = status.reblog;\r\n    }\r\n  });\r\n\r\n  // THREAD TRAVERSER\r\n  if (!skipThreading) {\r\n    queueMicrotask(() => {\r\n      threadifyStatus(status.reblog || status, instance);\r\n    });\r\n  }\r\n\r\n  // UNFURLER\r\n  if (!skipUnfurling) {\r\n    queueMicrotask(() => {\r\n      unfurlStatus(status.reblog || status, instance);\r\n    });\r\n  }\r\n}\r\n\r\nfunction _threadifyStatus(status, propInstance) {\r\n  const { masto, instance } = api({ instance: propInstance });\r\n  // Return all statuses in the thread, via inReplyToId, if inReplyToAccountId === account.id\r\n  let fetchIndex = 0;\r\n  async function traverse(status, index = 0) {\r\n    const { inReplyToId, inReplyToAccountId } = status;\r\n    if (!inReplyToId || inReplyToAccountId !== status.account.id) {\r\n      return [status];\r\n    }\r\n    if (inReplyToId && inReplyToAccountId !== status.account.id) {\r\n      throw 'Not a thread';\r\n      // Possibly thread of replies by multiple people?\r\n    }\r\n    const key = statusKey(inReplyToId, instance);\r\n    let prevStatus = states.statuses[key];\r\n    if (!prevStatus) {\r\n      if (fetchIndex++ > 3) throw 'Too many fetches for thread'; // Some people revive old threads\r\n      await new Promise((r) => setTimeout(r, 500 * fetchIndex)); // Be nice to rate limits\r\n      // prevStatus = await masto.v1.statuses.$.select(inReplyToId).fetch();\r\n      prevStatus = await fetchStatus(inReplyToId, masto);\r\n      saveStatus(prevStatus, instance, { skipThreading: true });\r\n    }\r\n    // Prepend so that first status in thread will be index 0\r\n    return [...(await traverse(prevStatus, ++index)), status];\r\n  }\r\n  return traverse(status)\r\n    .then((statuses) => {\r\n      if (statuses.length > 1) {\r\n        console.debug('THREAD', statuses);\r\n        statuses.forEach((status, index) => {\r\n          const key = statusKey(status.id, instance);\r\n          states.statusThreadNumber[key] = index + 1;\r\n        });\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error(e, status);\r\n    });\r\n}\r\nexport const threadifyStatus = rateLimit(_threadifyStatus, 100);\r\n\r\nconst fauxDiv = document.createElement('div');\r\nexport function unfurlStatus(status, instance) {\r\n  const { instance: currentInstance } = api();\r\n  const content = status?.content;\r\n  const hasLink = /<a/i.test(content);\r\n  if (hasLink) {\r\n    const sKey = statusKey(status?.id, instance);\r\n    fauxDiv.innerHTML = content;\r\n    const links = fauxDiv.querySelectorAll(\r\n      'a[href]:not(.u-url):not(.mention):not(.hashtag)',\r\n    );\r\n    [...links]\r\n      .filter((a) => {\r\n        const url = a.href;\r\n        const isPostItself = url === status.url || url === status.uri;\r\n        return !isPostItself && isMastodonLinkMaybe(url);\r\n      })\r\n      .forEach((a, i) => {\r\n        unfurlMastodonLink(currentInstance, a.href).then((result) => {\r\n          if (!result) return;\r\n          if (!sKey) return;\r\n          if (!Array.isArray(states.statusQuotes[sKey])) {\r\n            states.statusQuotes[sKey] = [];\r\n          }\r\n          if (!states.statusQuotes[sKey][i]) {\r\n            states.statusQuotes[sKey].splice(i, 0, result);\r\n          }\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nconst fetchStatus = pmem((statusID, masto) => {\r\n  return masto.v1.statuses.$select(statusID).fetch();\r\n});\r\n","import { useEffect, useRef } from 'preact/hooks';\r\n\r\nfunction useInterval(fn, delay, deps, immediate) {\r\n  const savedCallback = useRef(fn);\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn, deps]);\r\n\r\n  useEffect(() => {\r\n    if (!immediate || delay === null || delay === false) return;\r\n    savedCallback.current();\r\n  }, [immediate]);\r\n\r\n  useEffect(() => {\r\n    if (delay === null || delay === false) return;\r\n    const tick = () => savedCallback.current();\r\n    const id = setInterval(tick, delay);\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","export default function openCompose(opts) {\r\n  const url = new URL('/compose/', window.location);\r\n  const { width: screenWidth, height: screenHeight } = window.screen;\r\n  const left = Math.max(0, (screenWidth - 600) / 2);\r\n  const top = Math.max(0, (screenHeight - 450) / 2);\r\n  const width = Math.min(screenWidth, 600);\r\n  const height = Math.min(screenHeight, 450);\r\n  const winUID = opts?.uid || Math.random();\r\n  const newWin = window.open(\r\n    url,\r\n    'compose' + winUID,\r\n    `width=${width},height=${height},left=${left},top=${top}`,\r\n  );\r\n\r\n  if (newWin) {\r\n    // if (masto) {\r\n    //   newWin.masto = masto;\r\n    // }\r\n\r\n    newWin.__COMPOSE__ = opts;\r\n  } else {\r\n    alert('Looks like your browser is blocking popups.');\r\n  }\r\n\r\n  return newWin;\r\n}\r\n","import moize from 'moize';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\n\r\nconst SIZES = {\r\n  s: 12,\r\n  m: 16,\r\n  l: 20,\r\n  xl: 24,\r\n  xxl: 32,\r\n};\r\n\r\nexport const ICONS = {\r\n  x: () => import('@iconify-icons/mingcute/close-line'),\r\n  heart: () => import('@iconify-icons/mingcute/heart-line'),\r\n  bookmark: () => import('@iconify-icons/mingcute/bookmark-line'),\r\n  'check-circle': () => import('@iconify-icons/mingcute/check-circle-line'),\r\n  'x-circle': () => import('@iconify-icons/mingcute/close-circle-line'),\r\n  transfer: () => import('@iconify-icons/mingcute/transfer-4-line'),\r\n  rocket: () => import('@iconify-icons/mingcute/rocket-line'),\r\n  'arrow-left': () => import('@iconify-icons/mingcute/arrow-left-line'),\r\n  'arrow-right': () => import('@iconify-icons/mingcute/arrow-right-line'),\r\n  'arrow-up': () => import('@iconify-icons/mingcute/arrow-up-line'),\r\n  'arrow-down': () => import('@iconify-icons/mingcute/arrow-down-line'),\r\n  earth: () => import('@iconify-icons/mingcute/earth-line'),\r\n  lock: () => import('@iconify-icons/mingcute/lock-line'),\r\n  unlock: () => import('@iconify-icons/mingcute/unlock-line'),\r\n  'eye-close': () => import('@iconify-icons/mingcute/eye-close-line'),\r\n  'eye-open': () => import('@iconify-icons/mingcute/eye-2-line'),\r\n  message: () => import('@iconify-icons/mingcute/mail-line'),\r\n  comment: () => import('@iconify-icons/mingcute/chat-3-line'),\r\n  comment2: () => import('@iconify-icons/mingcute/comment-2-line'),\r\n  home: () => import('@iconify-icons/mingcute/home-3-line'),\r\n  notification: () => import('@iconify-icons/mingcute/notification-line'),\r\n  follow: () => import('@iconify-icons/mingcute/user-follow-line'),\r\n  'follow-add': () => import('@iconify-icons/mingcute/user-add-line'),\r\n  poll: [() => import('@iconify-icons/mingcute/chart-bar-line'), '90deg'],\r\n  pencil: () => import('@iconify-icons/mingcute/pencil-line'),\r\n  quill: () => import('@iconify-icons/mingcute/quill-pen-line'),\r\n  at: () => import('@iconify-icons/mingcute/at-line'),\r\n  attachment: () => import('@iconify-icons/mingcute/attachment-line'),\r\n  upload: () => import('@iconify-icons/mingcute/upload-3-line'),\r\n  gear: () => import('@iconify-icons/mingcute/settings-3-line'),\r\n  more: () => import('@iconify-icons/mingcute/more-3-line'),\r\n  external: () => import('@iconify-icons/mingcute/external-link-line'),\r\n  popout: () => import('@iconify-icons/mingcute/external-link-line'),\r\n  popin: [() => import('@iconify-icons/mingcute/external-link-line'), '180deg'],\r\n  plus: () => import('@iconify-icons/mingcute/add-circle-line'),\r\n  'chevron-left': () => import('@iconify-icons/mingcute/left-line'),\r\n  'chevron-right': () => import('@iconify-icons/mingcute/right-line'),\r\n  'chevron-down': () => import('@iconify-icons/mingcute/down-line'),\r\n  reply: [\r\n    () => import('@iconify-icons/mingcute/share-forward-line'),\r\n    '180deg',\r\n    'horizontal',\r\n  ],\r\n  thread: () => import('@iconify-icons/mingcute/route-line'),\r\n  group: () => import('@iconify-icons/mingcute/group-line'),\r\n  bot: () => import('@iconify-icons/mingcute/android-2-line'),\r\n  menu: () => import('@iconify-icons/mingcute/rows-4-line'),\r\n  list: () => import('@iconify-icons/mingcute/list-check-line'),\r\n  search: () => import('@iconify-icons/mingcute/search-2-line'),\r\n  hashtag: () => import('@iconify-icons/mingcute/hashtag-line'),\r\n  info: () => import('@iconify-icons/mingcute/information-line'),\r\n  shortcut: () => import('@iconify-icons/mingcute/lightning-line'),\r\n  user: () => import('@iconify-icons/mingcute/user-4-line'),\r\n  following: () => import('@iconify-icons/mingcute/walk-line'),\r\n  pin: () => import('@iconify-icons/mingcute/pin-line'),\r\n  bus: () => import('@iconify-icons/mingcute/bus-2-line'),\r\n  link: () => import('@iconify-icons/mingcute/link-2-line'),\r\n  history: () => import('@iconify-icons/mingcute/history-line'),\r\n  share: () => import('@iconify-icons/mingcute/share-2-line'),\r\n  sparkles: () => import('@iconify-icons/mingcute/sparkles-line'),\r\n  sparkles2: () => import('@iconify-icons/mingcute/sparkles-2-line'),\r\n  exit: () => import('@iconify-icons/mingcute/exit-line'),\r\n  translate: () => import('@iconify-icons/mingcute/translate-line'),\r\n  play: () => import('@iconify-icons/mingcute/play-fill'),\r\n  trash: () => import('@iconify-icons/mingcute/delete-2-line'),\r\n  mute: () => import('@iconify-icons/mingcute/volume-mute-line'),\r\n  unmute: () => import('@iconify-icons/mingcute/volume-line'),\r\n  block: () => import('@iconify-icons/mingcute/forbid-circle-line'),\r\n  unblock: [\r\n    () => import('@iconify-icons/mingcute/forbid-circle-line'),\r\n    '180deg',\r\n  ],\r\n  flag: () => import('@iconify-icons/mingcute/flag-4-line'),\r\n  time: () => import('@iconify-icons/mingcute/time-line'),\r\n  refresh: () => import('@iconify-icons/mingcute/refresh-2-line'),\r\n  emoji2: () => import('@iconify-icons/mingcute/emoji-2-line'),\r\n  filter: () => import('@iconify-icons/mingcute/filter-2-line'),\r\n  chart: () => import('@iconify-icons/mingcute/chart-line-line'),\r\n  react: () => import('@iconify-icons/mingcute/react-line'),\r\n  layout4: () => import('@iconify-icons/mingcute/layout-4-line'),\r\n  layout5: () => import('@iconify-icons/mingcute/layout-5-line'),\r\n  announce: () => import('@iconify-icons/mingcute/announcement-line'),\r\n  alert: () => import('@iconify-icons/mingcute/alert-line'),\r\n  round: () => import('@iconify-icons/mingcute/round-fill'),\r\n  'arrow-up-circle': () =>\r\n    import('@iconify-icons/mingcute/arrow-up-circle-line'),\r\n  'arrow-down-circle': () =>\r\n    import('@iconify-icons/mingcute/arrow-down-circle-line'),\r\n  clipboard: () => import('@iconify-icons/mingcute/clipboard-line'),\r\n  'account-edit': () => import('@iconify-icons/mingcute/user-edit-line'),\r\n  'account-warning': () => import('@iconify-icons/mingcute/user-warning-line'),\r\n  keyboard: () => import('@iconify-icons/mingcute/keyboard-line'),\r\n  cloud: () => import('@iconify-icons/mingcute/cloud-line'),\r\n  month: () => import('@iconify-icons/mingcute/calendar-month-line'),\r\n  media: () => import('@iconify-icons/mingcute/photo-album-line'),\r\n  speak: () => import('@iconify-icons/mingcute/radar-line'),\r\n  building: () => import('@iconify-icons/mingcute/building-5-line'),\r\n};\r\n\r\nconst ICONDATA = {};\r\n\r\n// Memoize the dangerouslySetInnerHTML of the SVGs\r\nconst SVGICon = moize(\r\n  function ({ size, width, height, body, rotate, flip }) {\r\n    return (\r\n      <svg\r\n        width={size}\r\n        height={size}\r\n        viewBox={`0 0 ${width} ${height}`}\r\n        dangerouslySetInnerHTML={{ __html: body }}\r\n        style={{\r\n          transform: `${rotate ? `rotate(${rotate})` : ''} ${\r\n            flip ? `scaleX(-1)` : ''\r\n          }`,\r\n        }}\r\n      />\r\n    );\r\n  },\r\n  {\r\n    isShallowEqual: true,\r\n    maxSize: Object.keys(ICONS).length,\r\n  },\r\n);\r\n\r\nfunction Icon({\r\n  icon,\r\n  size = 'm',\r\n  alt,\r\n  title,\r\n  class: className = '',\r\n  style = {},\r\n}) {\r\n  if (!icon) return null;\r\n\r\n  const iconSize = SIZES[size];\r\n  let iconBlock = ICONS[icon];\r\n  if (!iconBlock) {\r\n    console.warn(`Icon ${icon} not found`);\r\n    return null;\r\n  }\r\n\r\n  let rotate, flip;\r\n  if (Array.isArray(iconBlock)) {\r\n    [iconBlock, rotate, flip] = iconBlock;\r\n  }\r\n\r\n  const [iconData, setIconData] = useState(ICONDATA[icon]);\r\n  const currentIcon = useRef(icon);\r\n  useEffect(() => {\r\n    if (iconData && currentIcon.current === icon) return;\r\n    (async () => {\r\n      const iconB = await iconBlock();\r\n      setIconData(iconB.default);\r\n      ICONDATA[icon] = iconB.default;\r\n    })();\r\n    currentIcon.current = icon;\r\n  }, [icon]);\r\n\r\n  return (\r\n    <span\r\n      class={`icon ${className}`}\r\n      title={title || alt}\r\n      style={{\r\n        width: `${iconSize}px`,\r\n        height: `${iconSize}px`,\r\n        ...style,\r\n      }}\r\n    >\r\n      {iconData && (\r\n        // <svg\r\n        //   width={iconSize}\r\n        //   height={iconSize}\r\n        //   viewBox={`0 0 ${iconData.width} ${iconData.height}`}\r\n        //   dangerouslySetInnerHTML={{ __html: iconData.body }}\r\n        //   style={{\r\n        //     transform: `${rotate ? `rotate(${rotate})` : ''} ${\r\n        //       flip ? `scaleX(-1)` : ''\r\n        //     }`,\r\n        //   }}\r\n        // />\r\n        <SVGICon\r\n          size={iconSize}\r\n          width={iconData.width}\r\n          height={iconData.height}\r\n          body={iconData.body}\r\n          rotate={rotate}\r\n          flip={flip}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Icon;\r\n","import { useEffect } from 'preact/hooks';\r\n\r\nfunction useCloseWatcher(fn, deps = []) {\r\n  if (!fn || typeof fn !== 'function') return;\r\n  useEffect(() => {\r\n    const watcher = new CloseWatcher();\r\n    watcher.addEventListener('close', fn);\r\n    return () => {\r\n      watcher.destroy();\r\n    };\r\n  }, deps);\r\n}\r\n\r\nexport default window.CloseWatcher ? useCloseWatcher : () => {};\r\n","import './modal.css';\r\n\r\nimport { createPortal } from 'preact/compat';\r\nimport { useEffect, useRef } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\nimport useCloseWatcher from '../utils/useCloseWatcher';\r\n\r\nconst $modalContainer = document.getElementById('modal-container');\r\n\r\nfunction Modal({ children, onClose, onClick, class: className }) {\r\n  if (!children) return null;\r\n\r\n  const modalRef = useRef();\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => {\r\n      const focusElement = modalRef.current?.querySelector('[tabindex=\"-1\"]');\r\n      if (focusElement) {\r\n        focusElement.focus();\r\n      }\r\n    }, 100);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const supportsCloseWatcher = window.CloseWatcher;\r\n  const escRef = useHotkeys(\r\n    'esc',\r\n    () => {\r\n      setTimeout(() => {\r\n        onClose?.();\r\n      }, 0);\r\n    },\r\n    {\r\n      enabled: !supportsCloseWatcher && !!onClose,\r\n      // Using keyup and setTimeout above\r\n      // This will run \"later\" to prevent clash with esc handlers from other components\r\n      keydown: false,\r\n      keyup: true,\r\n    },\r\n    [onClose],\r\n  );\r\n  useCloseWatcher(onClose, [onClose]);\r\n\r\n  const Modal = (\r\n    <div\r\n      ref={(node) => {\r\n        modalRef.current = node;\r\n        escRef.current = node?.querySelector?.('[tabindex=\"-1\"]') || node;\r\n      }}\r\n      className={className}\r\n      onClick={(e) => {\r\n        onClick?.(e);\r\n        if (e.target === e.currentTarget) {\r\n          onClose?.(e);\r\n        }\r\n      }}\r\n      tabIndex=\"-1\"\r\n      onFocus={(e) => {\r\n        if (e.target === e.currentTarget) {\r\n          modalRef.current?.querySelector?.('[tabindex=\"-1\"]')?.focus?.();\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n\r\n  return createPortal(Modal, $modalContainer);\r\n\r\n  // return createPortal(children, $modalContainer);\r\n}\r\n\r\nexport default Modal;\r\n","import './loader.css';\r\n\r\nfunction Loader({ abrupt, hidden, ...props }) {\r\n  return (\r\n    <span\r\n      {...props}\r\n      class={`loader-container ${abrupt ? 'abrupt' : ''} ${\r\n        hidden ? 'hidden' : ''\r\n      }`}\r\n    >\r\n      <span class=\"loader\" />\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import './avatar.css';\r\n\r\nimport { useRef } from 'preact/hooks';\r\n\r\nimport mem from '../utils/mem';\r\n\r\nconst SIZES = {\r\n  s: 16,\r\n  m: 20,\r\n  l: 24,\r\n  xl: 32,\r\n  xxl: 50,\r\n  xxxl: 64,\r\n};\r\n\r\nconst alphaCache = {};\r\n\r\nconst canvas = window.OffscreenCanvas\r\n  ? new OffscreenCanvas(1, 1)\r\n  : document.createElement('canvas');\r\nconst ctx = canvas.getContext('2d', {\r\n  willReadFrequently: true,\r\n});\r\n\r\nfunction Avatar({ url, size, alt = '', squircle, ...props }) {\r\n  size = SIZES[size] || size || SIZES.m;\r\n  const avatarRef = useRef();\r\n  const isMissing = /missing\\.png$/.test(url);\r\n  return (\r\n    <span\r\n      ref={avatarRef}\r\n      class={`avatar ${squircle ? 'squircle' : ''} ${\r\n        alphaCache[url] ? 'has-alpha' : ''\r\n      }`}\r\n      style={{\r\n        width: size,\r\n        height: size,\r\n      }}\r\n      title={alt}\r\n      {...props}\r\n    >\r\n      {!!url && (\r\n        <img\r\n          src={url}\r\n          width={size}\r\n          height={size}\r\n          alt={alt}\r\n          loading=\"lazy\"\r\n          decoding=\"async\"\r\n          crossOrigin={\r\n            alphaCache[url] === undefined && !isMissing\r\n              ? 'anonymous'\r\n              : undefined\r\n          }\r\n          onError={(e) => {\r\n            if (e.target.crossOrigin) {\r\n              e.target.crossOrigin = null;\r\n              e.target.src = url;\r\n            }\r\n          }}\r\n          onLoad={(e) => {\r\n            if (avatarRef.current) avatarRef.current.dataset.loaded = true;\r\n            if (alphaCache[url] !== undefined) return;\r\n            if (isMissing) return;\r\n            queueMicrotask(() => {\r\n              try {\r\n                // Check if image has alpha channel\r\n                const { width, height } = e.target;\r\n                if (canvas.width !== width) canvas.width = width;\r\n                if (canvas.height !== height) canvas.height = height;\r\n                ctx.drawImage(e.target, 0, 0);\r\n                const allPixels = ctx.getImageData(0, 0, width, height);\r\n                // At least 10% of pixels have alpha <= 128\r\n                const hasAlpha =\r\n                  allPixels.data.filter(\r\n                    (pixel, i) => i % 4 === 3 && pixel <= 128,\r\n                  ).length /\r\n                    (allPixels.data.length / 4) >\r\n                  0.1;\r\n                if (hasAlpha) {\r\n                  // console.log('hasAlpha', hasAlpha, allPixels.data);\r\n                  avatarRef.current.classList.add('has-alpha');\r\n                }\r\n                alphaCache[url] = hasAlpha;\r\n                ctx.clearRect(0, 0, width, height);\r\n              } catch (e) {\r\n                // Silent fail\r\n                alphaCache[url] = false;\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default mem(Avatar);\r\n","import { forwardRef } from 'preact/compat';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport states from '../utils/states';\r\n\r\n/* NOTES\r\n   =====\r\n   Initially this uses <NavLink> from react-router-dom, but it doesn't work:\r\n   1. It interferes with nested <a> inside <a> and it's difficult to preventDefault/stopPropagation from the nested <a>\r\n   2. isActive doesn't work properly with the weird routes that's set up in this app, due to the faux \"location\" to make the modals work and prevent unmounting\r\n   3. Not using <Link state/> because it modifies history.state that *persists* across page reloads. I don't need that, so using valtio's states instead.\r\n*/\r\n\r\nconst Link = forwardRef((props, ref) => {\r\n  let routerLocation;\r\n  try {\r\n    routerLocation = useLocation();\r\n  } catch (e) {}\r\n  let hash = (location.hash || '').replace(/^#/, '').trim();\r\n  if (hash === '') hash = '/';\r\n  const { to, ...restProps } = props;\r\n\r\n  // Handle encodeURIComponent of searchParams values\r\n  if (!!hash && hash !== '/' && hash.includes('?')) {\r\n    try {\r\n      const parsedHash = new URL(hash, location.origin); // Fake base URL\r\n      if (parsedHash.searchParams.size) {\r\n        const searchParamsStr = Array.from(parsedHash.searchParams.entries())\r\n          .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n          .join('&');\r\n        hash = parsedHash.pathname + '?' + searchParamsStr;\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  const isActive = hash === to || decodeURIComponent(hash) === to;\r\n  return (\r\n    <a\r\n      ref={ref}\r\n      href={`#${to}`}\r\n      {...restProps}\r\n      class={`${props.class || ''} ${isActive ? 'is-active' : ''}`}\r\n      onClick={(e) => {\r\n        if (e.currentTarget?.parentNode?.closest('a')) {\r\n          // If this <a> is nested inside another <a>\r\n          e.stopPropagation();\r\n        }\r\n        if (routerLocation) states.prevLocation = routerLocation;\r\n        props.onClick?.(e);\r\n      }}\r\n    />\r\n  );\r\n});\r\n\r\nexport default Link;\r\n","const root = document.documentElement;\r\nconst style = getComputedStyle(root);\r\nconst defaultBoundingBoxPadding = 8;\r\n\r\nlet safeAreaInsets = [0, 0, 0, 0];\r\nfunction getSafeAreaInsets() {\r\n  // Get safe area inset variables from root\r\n  const safeAreaInsetTop = style.getPropertyValue('--sai-top');\r\n  const safeAreaInsetRight = style.getPropertyValue('--sai-right');\r\n  const safeAreaInsetBottom = style.getPropertyValue('--sai-bottom');\r\n  const safeAreaInsetLeft = style.getPropertyValue('--sai-left');\r\n  safeAreaInsets = [\r\n    // top, right, bottom, left (clockwise)\r\n    Math.max(0, parseInt(safeAreaInsetTop, 10)),\r\n    Math.max(0, parseInt(safeAreaInsetRight, 10)),\r\n    Math.max(0, parseInt(safeAreaInsetBottom, 10)),\r\n    Math.max(0, parseInt(safeAreaInsetLeft, 10)),\r\n  ];\r\n}\r\nrequestAnimationFrame(getSafeAreaInsets);\r\n\r\nfunction safeBoundingBoxPadding(paddings = []) {\r\n  const str = safeAreaInsets\r\n    .map((v, i) => (v || defaultBoundingBoxPadding) + (paddings[i] || 0))\r\n    .join(' ');\r\n  // console.log(str);\r\n  return str;\r\n}\r\n\r\n// Update safe area insets when orientation or resize\r\nif (CSS.supports('top: env(safe-area-inset-top)')) {\r\n  window.addEventListener('resize', getSafeAreaInsets, { passive: true });\r\n}\r\n\r\nexport default safeBoundingBoxPadding;\r\n","import { Menu } from '@szhsin/react-menu';\r\nimport { useWindowSize } from '@uidotdev/usehooks';\r\nimport { useRef } from 'preact/hooks';\r\n\r\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\r\n\r\n// It's like Menu but with sensible defaults, bug fixes and improvements.\r\nfunction Menu2(props) {\r\n  const { containerProps, instanceRef: _instanceRef } = props;\r\n  const size = useWindowSize();\r\n  const instanceRef = _instanceRef?.current ? _instanceRef : useRef();\r\n\r\n  return (\r\n    <Menu\r\n      boundingBoxPadding={safeBoundingBoxPadding()}\r\n      repositionFlag={`${size.width}x${size.height}`}\r\n      unmountOnClose\r\n      {...props}\r\n      instanceRef={instanceRef}\r\n      containerProps={{\r\n        onClick: (e) => {\r\n          if (e.target === e.currentTarget) {\r\n            instanceRef.current?.closeMenu?.();\r\n          }\r\n          containerProps?.onClick?.(e);\r\n        },\r\n        ...containerProps,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Menu2;\r\n","import { Menu, MenuItem, SubMenu } from '@szhsin/react-menu';\r\nimport { cloneElement } from 'preact';\r\nimport { useRef } from 'preact/hooks';\r\n\r\nimport Menu2 from './menu2';\r\n\r\nfunction MenuConfirm({\r\n  subMenu = false,\r\n  confirm = true,\r\n  confirmLabel,\r\n  menuItemClassName,\r\n  menuFooter,\r\n  ...props\r\n}) {\r\n  const { children, onClick, ...restProps } = props;\r\n  if (!confirm) {\r\n    if (subMenu) return <MenuItem {...props} />;\r\n    if (onClick) {\r\n      return cloneElement(children, {\r\n        onClick,\r\n      });\r\n    }\r\n    return children;\r\n  }\r\n  const Parent = subMenu ? SubMenu : Menu2;\r\n  const menuRef = useRef();\r\n  return (\r\n    <Parent\r\n      instanceRef={menuRef}\r\n      openTrigger=\"clickOnly\"\r\n      direction=\"bottom\"\r\n      overflow=\"auto\"\r\n      gap={-8}\r\n      shift={8}\r\n      menuClassName=\"menu-emphasized\"\r\n      {...restProps}\r\n      menuButton={subMenu ? undefined : children}\r\n      label={subMenu ? children : undefined}\r\n      // Test fix for bug; submenus not opening on Android\r\n      itemProps={{\r\n        onPointerMove: (e) => {\r\n          if (e.pointerType === 'touch') {\r\n            menuRef.current?.openMenu?.();\r\n          }\r\n        },\r\n        onPointerLeave: (e) => {\r\n          if (e.pointerType === 'touch') {\r\n            menuRef.current?.openMenu?.();\r\n          }\r\n        },\r\n      }}\r\n    >\r\n      <MenuItem className={menuItemClassName} onClick={onClick}>\r\n        {confirmLabel}\r\n      </MenuItem>\r\n      {menuFooter}\r\n    </Parent>\r\n  );\r\n}\r\n\r\nexport default MenuConfirm;\r\n","function EmojiText({ text, emojis }) {\r\n  if (!text) return '';\r\n  if (!emojis?.length) return text;\r\n  if (text.indexOf(':') === -1) return text;\r\n  const regex = new RegExp(\r\n    `:(${emojis.map((e) => e.shortcode).join('|')}):`,\r\n    'g',\r\n  );\r\n  const elements = text.split(regex).map((word) => {\r\n    const emoji = emojis.find((e) => e.shortcode === word);\r\n    if (emoji) {\r\n      const { url, staticUrl } = emoji;\r\n      return (\r\n        <picture>\r\n          <source srcset={staticUrl} media=\"(prefers-reduced-motion: reduce)\" />\r\n          <img\r\n            key={word}\r\n            src={url}\r\n            alt={word}\r\n            class=\"shortcode-emoji emoji\"\r\n            width=\"16\"\r\n            height=\"16\"\r\n            loading=\"lazy\"\r\n            decoding=\"async\"\r\n          />\r\n        </picture>\r\n      );\r\n    }\r\n    return word;\r\n  });\r\n  return elements;\r\n}\r\n\r\nexport default EmojiText;\r\n","import './name-text.css';\r\n\r\nimport { memo } from 'preact/compat';\r\n\r\nimport states from '../utils/states';\r\n\r\nimport Avatar from './avatar';\r\nimport EmojiText from './emoji-text';\r\n\r\nconst nameCollator = new Intl.Collator('en', {\r\n  sensitivity: 'base',\r\n});\r\n\r\nfunction NameText({\r\n  account,\r\n  instance,\r\n  showAvatar,\r\n  showAcct,\r\n  short,\r\n  external,\r\n  onClick,\r\n}) {\r\n  const { acct, avatar, avatarStatic, id, url, displayName, emojis, bot } =\r\n    account;\r\n  let { username } = account;\r\n  const [_, acct1, acct2] = acct.match(/([^@]+)(@.+)/i) || [, acct];\r\n\r\n  const trimmedUsername = username.toLowerCase().trim();\r\n  const trimmedDisplayName = (displayName || '').toLowerCase().trim();\r\n  const shortenedDisplayName = trimmedDisplayName\r\n    .replace(/(\\:(\\w|\\+|\\-)+\\:)(?=|[\\!\\.\\?]|$)/g, '') // Remove shortcodes, regex from https://regex101.com/r/iE9uV0/1\r\n    .replace(/\\s+/g, ''); // E.g. \"My name\" === \"myname\"\r\n  const shortenedAlphaNumericDisplayName = shortenedDisplayName.replace(\r\n    /[^a-z0-9]/gi,\r\n    '',\r\n  ); // Remove non-alphanumeric characters\r\n\r\n  if (\r\n    !short &&\r\n    (trimmedUsername === trimmedDisplayName ||\r\n      trimmedUsername === shortenedDisplayName ||\r\n      trimmedUsername === shortenedAlphaNumericDisplayName ||\r\n      nameCollator.compare(trimmedUsername, shortenedDisplayName) === 0)\r\n  ) {\r\n    username = null;\r\n  }\r\n\r\n  return (\r\n    <a\r\n      class={`name-text ${showAcct ? 'show-acct' : ''} ${short ? 'short' : ''}`}\r\n      href={url}\r\n      target={external ? '_blank' : null}\r\n      title={`${displayName ? `${displayName} ` : ''}@${acct}`}\r\n      onClick={(e) => {\r\n        if (external) return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (onClick) return onClick(e);\r\n        states.showAccount = {\r\n          account,\r\n          instance,\r\n        };\r\n      }}\r\n    >\r\n      {showAvatar && (\r\n        <>\r\n          <Avatar url={avatarStatic || avatar} squircle={bot} />{' '}\r\n        </>\r\n      )}\r\n      {displayName && !short ? (\r\n        <>\r\n          <b>\r\n            <EmojiText text={displayName} emojis={emojis} />\r\n          </b>\r\n          {!showAcct && username && (\r\n            <>\r\n              {' '}\r\n              <i>@{username}</i>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : short ? (\r\n        <i>{username}</i>\r\n      ) : (\r\n        <b>{username}</b>\r\n      )}\r\n      {showAcct && (\r\n        <>\r\n          <br />\r\n          <i>\r\n            @{acct1}\r\n            <span class=\"ib\">{acct2}</span>\r\n          </i>\r\n        </>\r\n      )}\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default memo(NameText);\r\n","// Twitter-style relative time component\r\n// Seconds = 1s\r\n// Minutes = 1m\r\n// Hours = 1h\r\n// Days = 1d\r\n// After 7 days, use DD/MM/YYYY or MM/DD/YYYY\r\nimport dayjs from 'dayjs';\r\nimport dayjsTwitter from 'dayjs-twitter';\r\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n\r\ndayjs.extend(dayjsTwitter);\r\ndayjs.extend(localizedFormat);\r\ndayjs.extend(relativeTime);\r\n\r\nconst dtf = new Intl.DateTimeFormat();\r\n\r\nexport default function RelativeTime({ datetime, format }) {\r\n  if (!datetime) return null;\r\n  const date = dayjs(datetime);\r\n  let dateStr;\r\n  if (format === 'micro') {\r\n    // If date <= 1 day ago or day is within this year\r\n    const now = dayjs();\r\n    const dayDiff = now.diff(date, 'day');\r\n    if (dayDiff <= 1 || now.year() === date.year()) {\r\n      dateStr = date.twitter();\r\n    } else {\r\n      dateStr = dtf.format(date.toDate());\r\n    }\r\n  } else {\r\n    dateStr = date.fromNow();\r\n  }\r\n\r\n  return (\r\n    <time datetime={date.toISOString()} title={date.format('LLLL')}>\r\n      {dateStr}\r\n    </time>\r\n  );\r\n}\r\n","import { match } from '@formatjs/intl-localematcher';\r\n\r\nimport mem from './mem';\r\n\r\nfunction _localeMatch(...args) {\r\n  // Wrap in try/catch because localeMatcher throws on invalid locales\r\n  try {\r\n    return match(...args);\r\n  } catch (e) {\r\n    const defaultLocale = args[2];\r\n    return defaultLocale || false;\r\n  }\r\n}\r\nconst localeMatch = mem(_localeMatch);\r\n\r\nexport default localeMatch;\r\n","import translationTargetLanguages from '../data/lingva-target-languages';\r\n\r\nimport localeMatch from './locale-match';\r\nimport states from './states';\r\n\r\nconst locales = [\r\n  new Intl.DateTimeFormat().resolvedOptions().locale,\r\n  ...navigator.languages,\r\n];\r\n\r\nconst localeTargetLanguages = localeMatch(\r\n  locales,\r\n  translationTargetLanguages.map((l) => l.code.replace('_', '-')), // The underscore will fail Intl.Locale inside `match`\r\n  'en',\r\n);\r\n\r\nfunction getTranslateTargetLanguage(fromSettings = false) {\r\n  if (fromSettings) {\r\n    const { contentTranslationTargetLanguage } = states.settings;\r\n    if (contentTranslationTargetLanguage) {\r\n      return contentTranslationTargetLanguage;\r\n    }\r\n  }\r\n  return localeTargetLanguages;\r\n}\r\n\r\nexport default getTranslateTargetLanguage;\r\n","export default function localeCode2Text(code) {\r\n  try {\r\n    return new Intl.DisplayNames(navigator.languages, {\r\n      type: 'language',\r\n    }).of(code);\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n","function emojifyText(text, emojis = []) {\r\n  if (!text) return '';\r\n  if (!emojis.length) return text;\r\n  if (text.indexOf(':') === -1) return text;\r\n  // Replace shortcodes in text with emoji\r\n  // emojis = [{ shortcode: 'smile', url: 'https://example.com/emoji.png' }]\r\n  emojis.forEach((emoji) => {\r\n    const { shortcode, staticUrl, url } = emoji;\r\n    text = text.replace(\r\n      new RegExp(`:${shortcode}:`, 'g'),\r\n      `<picture><source srcset=\"${staticUrl}\" media=\"(prefers-reduced-motion: reduce)\"></source><img class=\"shortcode-emoji emoji\" src=\"${url}\" alt=\":${shortcode}:\" width=\"16\" height=\"16\" loading=\"lazy\" decoding=\"async\" /></picture>`,\r\n    );\r\n  });\r\n  // console.log(text, emojis);\r\n  return text;\r\n}\r\n\r\nexport default emojifyText;\r\n","import emojifyText from './emojify-text';\r\nimport mem from './mem';\r\n\r\nconst fauxDiv = document.createElement('div');\r\nconst whitelistLinkClasses = ['u-url', 'mention', 'hashtag'];\r\n\r\nfunction _enhanceContent(content, opts = {}) {\r\n  const { emojis, postEnhanceDOM = () => {} } = opts;\r\n  let enhancedContent = content;\r\n  const dom = document.createElement('div');\r\n  dom.innerHTML = enhancedContent;\r\n  const hasLink = /<a/i.test(enhancedContent);\r\n  const hasCodeBlock = enhancedContent.includes('```');\r\n\r\n  if (hasLink) {\r\n    // Add target=\"_blank\" to all links with no target=\"_blank\"\r\n    // E.g. `note` in `account`\r\n    const noTargetBlankLinks = dom.querySelectorAll('a:not([target=\"_blank\"])');\r\n    noTargetBlankLinks.forEach((link) => {\r\n      link.setAttribute('target', '_blank');\r\n    });\r\n\r\n    // Remove all classes except `u-url`, `mention`, `hashtag`\r\n    const links = dom.querySelectorAll('a[class]');\r\n    links.forEach((link) => {\r\n      link.classList.forEach((c) => {\r\n        if (!whitelistLinkClasses.includes(c)) {\r\n          link.classList.remove(c);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Add 'has-url-text' to all links that contains a url\r\n  if (hasLink) {\r\n    const links = dom.querySelectorAll('a[href]');\r\n    links.forEach((link) => {\r\n      if (/^https?:\\/\\//i.test(link.textContent.trim())) {\r\n        link.classList.add('has-url-text');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Spanify un-spanned mentions\r\n  if (hasLink) {\r\n    const links = dom.querySelectorAll('a[href]');\r\n    const usernames = [];\r\n    links.forEach((link) => {\r\n      const text = link.innerText.trim();\r\n      const hasChildren = link.querySelector('*');\r\n      // If text looks like @username@domain, then it's a mention\r\n      if (/^@[^@]+(@[^@]+)?$/g.test(text)) {\r\n        // Only show @username\r\n        const [_, username, domain] = text.split('@');\r\n        if (!hasChildren) {\r\n          if (\r\n            !usernames.some(([u]) => u === username) ||\r\n            usernames.some(([u, d]) => u === username && d === domain)\r\n          ) {\r\n            link.innerHTML = `@<span>${username}</span>`;\r\n            usernames.push([username, domain]);\r\n          } else {\r\n            link.innerHTML = `@<span>${username}@${domain}</span>`;\r\n          }\r\n        }\r\n        link.classList.add('mention');\r\n      }\r\n      // If text looks like #hashtag, then it's a hashtag\r\n      if (/^#[^#]+$/g.test(text)) {\r\n        if (!hasChildren) link.innerHTML = `#<span>${text.slice(1)}</span>`;\r\n        link.classList.add('mention', 'hashtag');\r\n      }\r\n    });\r\n  }\r\n\r\n  // EMOJIS\r\n  // ======\r\n  // Convert :shortcode: to <img />\r\n  let textNodes;\r\n  if (enhancedContent.includes(':')) {\r\n    textNodes = extractTextNodes(dom);\r\n    textNodes.forEach((node) => {\r\n      let html = node.nodeValue\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n      if (emojis) {\r\n        html = emojifyText(html, emojis);\r\n      }\r\n      fauxDiv.innerHTML = html;\r\n      // const nodes = [...fauxDiv.childNodes];\r\n      node.replaceWith(...fauxDiv.childNodes);\r\n    });\r\n  }\r\n\r\n  // CODE BLOCKS\r\n  // ===========\r\n  // Convert ```code``` to <pre><code>code</code></pre>\r\n  if (hasCodeBlock) {\r\n    const blocks = [...dom.querySelectorAll('p')].filter((p) =>\r\n      /^```[^]+```$/g.test(p.innerText.trim()),\r\n    );\r\n    blocks.forEach((block) => {\r\n      const pre = document.createElement('pre');\r\n      // Replace <br /> with newlines\r\n      block.querySelectorAll('br').forEach((br) => br.replaceWith('\\n'));\r\n      pre.innerHTML = `<code>${block.innerHTML.trim()}</code>`;\r\n      block.replaceWith(pre);\r\n    });\r\n  }\r\n\r\n  // Convert multi-paragraph code blocks to <pre><code>code</code></pre>\r\n  if (hasCodeBlock) {\r\n    const paragraphs = [...dom.querySelectorAll('p')];\r\n    // Filter out paragraphs with ``` in beginning only\r\n    const codeBlocks = paragraphs.filter((p) => /^```/g.test(p.innerText));\r\n    // For each codeBlocks, get all paragraphs until the last paragraph with ``` at the end only\r\n    codeBlocks.forEach((block) => {\r\n      const nextParagraphs = [block];\r\n      let hasCodeBlock = false;\r\n      let currentBlock = block;\r\n      while (currentBlock.nextElementSibling) {\r\n        const next = currentBlock.nextElementSibling;\r\n        if (next && next.tagName === 'P') {\r\n          if (/```$/g.test(next.innerText)) {\r\n            nextParagraphs.push(next);\r\n            hasCodeBlock = true;\r\n            break;\r\n          } else {\r\n            nextParagraphs.push(next);\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n        currentBlock = next;\r\n      }\r\n      if (hasCodeBlock) {\r\n        const pre = document.createElement('pre');\r\n        nextParagraphs.forEach((p) => {\r\n          // Replace <br /> with newlines\r\n          p.querySelectorAll('br').forEach((br) => br.replaceWith('\\n'));\r\n        });\r\n        const codeText = nextParagraphs.map((p) => p.innerHTML).join('\\n\\n');\r\n        pre.innerHTML = `<code tabindex=\"0\">${codeText}</code>`;\r\n        block.replaceWith(pre);\r\n        nextParagraphs.forEach((p) => p.remove());\r\n      }\r\n    });\r\n  }\r\n\r\n  // INLINE CODE\r\n  // ===========\r\n  // Convert `code` to <code>code</code>\r\n  if (enhancedContent.includes('`')) {\r\n    textNodes = extractTextNodes(dom);\r\n    textNodes.forEach((node) => {\r\n      let html = node.nodeValue\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n      if (/`[^`]+`/g.test(html)) {\r\n        html = html.replaceAll(/(`[^]+?`)/g, '<code>$1</code>');\r\n      }\r\n      fauxDiv.innerHTML = html;\r\n      // const nodes = [...fauxDiv.childNodes];\r\n      node.replaceWith(...fauxDiv.childNodes);\r\n    });\r\n  }\r\n\r\n  // TWITTER USERNAMES\r\n  // =================\r\n  // Convert @username@twitter.com to <a href=\"https://twitter.com/username\">@username@twitter.com</a>\r\n  if (/twitter\\.com/i.test(enhancedContent)) {\r\n    textNodes = extractTextNodes(dom, {\r\n      rejectFilter: ['A'],\r\n    });\r\n    textNodes.forEach((node) => {\r\n      let html = node.nodeValue\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n      if (/@[a-zA-Z0-9_]+@twitter\\.com/g.test(html)) {\r\n        html = html.replaceAll(\r\n          /(@([a-zA-Z0-9_]+)@twitter\\.com)/g,\r\n          '<a href=\"https://twitter.com/$2\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">$1</a>',\r\n        );\r\n      }\r\n      fauxDiv.innerHTML = html;\r\n      // const nodes = [...fauxDiv.childNodes];\r\n      node.replaceWith(...fauxDiv.childNodes);\r\n    });\r\n  }\r\n\r\n  // HASHTAG STUFFING\r\n  // ================\r\n  // Get the <p> that contains a lot of hashtags, add a class to it\r\n  if (enhancedContent.includes('#')) {\r\n    let prevIndex = null;\r\n    const hashtagStuffedParagraphs = [...dom.querySelectorAll('p')].filter(\r\n      (p, index) => {\r\n        let hashtagCount = 0;\r\n        for (let i = 0; i < p.childNodes.length; i++) {\r\n          const node = p.childNodes[i];\r\n\r\n          if (node.nodeType === Node.TEXT_NODE) {\r\n            const text = node.textContent.trim();\r\n            if (text !== '') {\r\n              return false;\r\n            }\r\n          } else if (node.tagName === 'BR') {\r\n            // Ignore <br />\r\n          } else if (node.tagName === 'A') {\r\n            const linkText = node.textContent.trim();\r\n            if (!linkText || !linkText.startsWith('#')) {\r\n              return false;\r\n            } else {\r\n              hashtagCount++;\r\n            }\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n        // Only consider \"stuffing\" if:\r\n        // - there are more than 3 hashtags\r\n        // - there are more than 1 hashtag in adjacent paragraphs\r\n        if (hashtagCount > 3) {\r\n          prevIndex = index;\r\n          return true;\r\n        }\r\n        if (hashtagCount > 1 && prevIndex && index === prevIndex + 1) {\r\n          prevIndex = index;\r\n          return true;\r\n        }\r\n      },\r\n    );\r\n    if (hashtagStuffedParagraphs?.length) {\r\n      hashtagStuffedParagraphs.forEach((p) => {\r\n        p.classList.add('hashtag-stuffing');\r\n        p.title = p.innerText;\r\n      });\r\n    }\r\n  }\r\n\r\n  if (postEnhanceDOM) {\r\n    queueMicrotask(() => postEnhanceDOM(dom));\r\n    // postEnhanceDOM(dom); // mutate dom\r\n  }\r\n\r\n  enhancedContent = dom.innerHTML;\r\n\r\n  return enhancedContent;\r\n}\r\nconst enhanceContent = mem(_enhanceContent);\r\n\r\nconst defaultRejectFilter = [\r\n  // Document metadata\r\n  'STYLE',\r\n  // Image and multimedia\r\n  'IMG',\r\n  'VIDEO',\r\n  'AUDIO',\r\n  'AREA',\r\n  'MAP',\r\n  'TRACK',\r\n  // Embedded content\r\n  'EMBED',\r\n  'IFRAME',\r\n  'OBJECT',\r\n  'PICTURE',\r\n  'PORTAL',\r\n  'SOURCE',\r\n  // SVG and MathML\r\n  'SVG',\r\n  'MATH',\r\n  // Scripting\r\n  'CANVAS',\r\n  'NOSCRIPT',\r\n  'SCRIPT',\r\n  // Forms\r\n  'INPUT',\r\n  'OPTION',\r\n  'TEXTAREA',\r\n  // Web Components\r\n  'SLOT',\r\n  'TEMPLATE',\r\n];\r\nconst defaultRejectFilterMap = Object.fromEntries(\r\n  defaultRejectFilter.map((nodeName) => [nodeName, true]),\r\n);\r\nfunction extractTextNodes(dom, opts = {}) {\r\n  const textNodes = [];\r\n  const rejectFilterMap = Object.assign(\r\n    {},\r\n    defaultRejectFilterMap,\r\n    opts.rejectFilter?.reduce((acc, cur) => {\r\n      acc[cur] = true;\r\n      return acc;\r\n    }, {}),\r\n  );\r\n  const walk = document.createTreeWalker(\r\n    dom,\r\n    NodeFilter.SHOW_TEXT,\r\n    {\r\n      acceptNode(node) {\r\n        if (rejectFilterMap[node.parentNode.nodeName]) {\r\n          return NodeFilter.FILTER_REJECT;\r\n        }\r\n        return NodeFilter.FILTER_ACCEPT;\r\n      },\r\n    },\r\n    false,\r\n  );\r\n  let node;\r\n  while ((node = walk.nextNode())) {\r\n    textNodes.push(node);\r\n  }\r\n  return textNodes;\r\n}\r\n\r\nexport default enhanceContent;\r\n","import mem from './mem';\r\n\r\nconst div = document.createElement('div');\r\nfunction getHTMLText(html) {\r\n  if (!html) return '';\r\n  div.innerHTML = html\r\n    .replace(/<\\/p>/g, '</p>\\n\\n')\r\n    .replace(/<\\/li>/g, '</li>\\n');\r\n  div.querySelectorAll('br').forEach((br) => {\r\n    br.replaceWith('\\n');\r\n  });\r\n  return div.innerText.replace(/[\\r\\n]{3,}/g, '\\n\\n').trim();\r\n}\r\n\r\nexport default mem(getHTMLText);\r\n","import states from './states';\r\n\r\nfunction handleContentLinks(opts) {\r\n  const { mentions = [], instance, previewMode, statusURL } = opts || {};\r\n  return (e) => {\r\n    let { target } = e;\r\n    target = target.closest('a');\r\n    if (!target) return;\r\n\r\n    // If cmd/ctrl/shift/alt key is pressed or middle-click, let the browser handle it\r\n    if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey || e.which === 2) {\r\n      return;\r\n    }\r\n\r\n    const prevText = target.previousSibling?.textContent;\r\n    const textBeforeLinkIsAt = prevText?.endsWith('@');\r\n    const textStartsWithAt = target.innerText.startsWith('@');\r\n    if (\r\n      (target.classList.contains('u-url') && textStartsWithAt) ||\r\n      (textBeforeLinkIsAt && !textStartsWithAt)\r\n    ) {\r\n      const targetText = (\r\n        target.querySelector('span') || target\r\n      ).innerText.trim();\r\n      const username = targetText.replace(/^@/, '');\r\n      const url = target.getAttribute('href');\r\n      const mention = mentions.find(\r\n        (mention) =>\r\n          mention.username === username ||\r\n          mention.acct === username ||\r\n          mention.url === url,\r\n      );\r\n      if (mention) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        states.showAccount = {\r\n          account: mention.acct,\r\n          instance,\r\n        };\r\n      } else if (!/^http/i.test(targetText)) {\r\n        console.log('mention not found', targetText);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const href = target.getAttribute('href');\r\n        states.showAccount = {\r\n          account: href,\r\n          instance,\r\n        };\r\n      }\r\n    } else if (!previewMode) {\r\n      const textBeforeLinkIsHash = prevText?.endsWith('#');\r\n      if (target.classList.contains('hashtag') || textBeforeLinkIsHash) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const tag = target.innerText.replace(/^#/, '').trim();\r\n        const hashURL = instance ? `#/${instance}/t/${tag}` : `#/t/${tag}`;\r\n        console.log({ hashURL });\r\n        location.hash = hashURL;\r\n      } else if (\r\n        states.unfurledLinks[target.href]?.url &&\r\n        statusURL !== target.href\r\n      ) {\r\n        // If unfurled AND not self-referential\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        states.prevLocation = {\r\n          pathname: location.hash.replace(/^#/, ''),\r\n        };\r\n        location.hash = `#${states.unfurledLinks[target.href].url}`;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default handleContentLinks;\r\n","import mem from './mem';\r\n\r\nconst { locale } = new Intl.DateTimeFormat().resolvedOptions();\r\n\r\nconst _DateTimeFormat = (opts) => {\r\n  const { dateYear, hideTime, formatOpts } = opts || {};\r\n  const currentYear = new Date().getFullYear();\r\n  return Intl.DateTimeFormat(locale, {\r\n    // Show year if not current year\r\n    year: dateYear === currentYear ? undefined : 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    // Hide time if requested\r\n    hour: hideTime ? undefined : 'numeric',\r\n    minute: hideTime ? undefined : 'numeric',\r\n    ...formatOpts,\r\n  });\r\n};\r\nconst DateTimeFormat = mem(_DateTimeFormat);\r\n\r\nfunction niceDateTime(date, dtfOpts) {\r\n  if (!(date instanceof Date)) {\r\n    date = new Date(date);\r\n  }\r\n  const DTF = DateTimeFormat({\r\n    dateYear: date.getFullYear(),\r\n    ...dtfOpts,\r\n  });\r\n  const dateText = DTF.format(date);\r\n  return dateText;\r\n}\r\n\r\nexport default niceDateTime;\r\n","const { locale } = Intl.NumberFormat().resolvedOptions();\r\nconst shortenNumber = Intl.NumberFormat(locale, {\r\n  notation: 'compact',\r\n}).format;\r\nexport default shortenNumber;\r\n","import './account-block.css';\r\n\r\n// import { useNavigate } from 'react-router-dom';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport states from '../utils/states';\r\n\r\nimport Avatar from './avatar';\r\nimport EmojiText from './emoji-text';\r\nimport Icon from './icon';\r\n\r\nfunction AccountBlock({\r\n  skeleton,\r\n  account,\r\n  avatarSize = 'xl',\r\n  useAvatarStatic = false,\r\n  instance,\r\n  external,\r\n  internal,\r\n  onClick,\r\n  showActivity = false,\r\n  showStats = false,\r\n  accountInstance,\r\n  hideDisplayName = false,\r\n  relationship = {},\r\n  excludeRelationshipAttrs = [],\r\n}) {\r\n  if (skeleton) {\r\n    return (\r\n      <div class=\"account-block skeleton\">\r\n        <Avatar size={avatarSize} />\r\n        <span>\r\n          <b>████████</b>\r\n          <br />\r\n          <span class=\"account-block-acct\">@██████</span>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!account) {\r\n    return null;\r\n  }\r\n\r\n  // const navigate = useNavigate();\r\n\r\n  const {\r\n    id,\r\n    acct,\r\n    avatar,\r\n    avatarStatic,\r\n    displayName,\r\n    username,\r\n    emojis,\r\n    url,\r\n    statusesCount,\r\n    lastStatusAt,\r\n    bot,\r\n    fields,\r\n    note,\r\n    group,\r\n    followersCount,\r\n  } = account;\r\n  let [_, acct1, acct2] = acct.match(/([^@]+)(@.+)/i) || [, acct];\r\n  if (accountInstance) {\r\n    acct2 = `@${accountInstance}`;\r\n  }\r\n\r\n  const verifiedField = fields?.find((f) => !!f.verifiedAt && !!f.value);\r\n\r\n  const excludedRelationship = {};\r\n  for (const r in relationship) {\r\n    if (!excludeRelationshipAttrs.includes(r)) {\r\n      excludedRelationship[r] = relationship[r];\r\n    }\r\n  }\r\n  const hasRelationship =\r\n    excludedRelationship.following ||\r\n    excludedRelationship.followedBy ||\r\n    excludedRelationship.requested;\r\n\r\n  return (\r\n    <a\r\n      class=\"account-block\"\r\n      href={url}\r\n      target={external ? '_blank' : null}\r\n      title={`@${acct}`}\r\n      onClick={(e) => {\r\n        if (external) return;\r\n        e.preventDefault();\r\n        if (onClick) return onClick(e);\r\n        if (internal) {\r\n          // navigate(`/${instance}/a/${id}`);\r\n          location.hash = `/${instance}/a/${id}`;\r\n        } else {\r\n          states.showAccount = {\r\n            account,\r\n            instance,\r\n          };\r\n        }\r\n      }}\r\n    >\r\n      <Avatar\r\n        url={useAvatarStatic ? avatarStatic : avatar || avatarStatic}\r\n        size={avatarSize}\r\n        squircle={bot}\r\n      />\r\n      <span class=\"account-block-content\">\r\n        {!hideDisplayName && (\r\n          <>\r\n            {displayName ? (\r\n              <b>\r\n                <EmojiText text={displayName} emojis={emojis} />\r\n              </b>\r\n            ) : (\r\n              <b>{username}</b>\r\n            )}\r\n          </>\r\n        )}{' '}\r\n        <span class=\"account-block-acct\">\r\n          @{acct1}\r\n          <wbr />\r\n          {acct2}\r\n        </span>\r\n        {showActivity && (\r\n          <>\r\n            <br />\r\n            <small class=\"last-status-at insignificant\">\r\n              Posts: {statusesCount}\r\n              {!!lastStatusAt && (\r\n                <>\r\n                  {' '}\r\n                  &middot; Last posted:{' '}\r\n                  {niceDateTime(lastStatusAt, {\r\n                    hideTime: true,\r\n                  })}\r\n                </>\r\n              )}\r\n            </small>\r\n          </>\r\n        )}\r\n        {showStats && (\r\n          <div class=\"account-block-stats\">\r\n            {bot && (\r\n              <>\r\n                <span class=\"tag collapsed\">\r\n                  <Icon icon=\"bot\" /> Automated\r\n                </span>\r\n              </>\r\n            )}\r\n            {!!group && (\r\n              <>\r\n                <span class=\"tag collapsed\">\r\n                  <Icon icon=\"group\" /> Group\r\n                </span>\r\n              </>\r\n            )}\r\n            {hasRelationship && (\r\n              <div key={relationship.id} class=\"shazam-container-horizontal\">\r\n                <div class=\"shazam-container-inner\">\r\n                  {excludedRelationship.following &&\r\n                  excludedRelationship.followedBy ? (\r\n                    <span class=\"tag minimal\">Mutual</span>\r\n                  ) : excludedRelationship.requested ? (\r\n                    <span class=\"tag minimal\">Requested</span>\r\n                  ) : excludedRelationship.following ? (\r\n                    <span class=\"tag minimal\">Following</span>\r\n                  ) : excludedRelationship.followedBy ? (\r\n                    <span class=\"tag minimal\">Follows you</span>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {!!followersCount && (\r\n              <span class=\"ib\">\r\n                {shortenNumber(followersCount)}{' '}\r\n                {followersCount === 1 ? 'follower' : 'followers'}\r\n              </span>\r\n            )}\r\n            {!!verifiedField && (\r\n              <span class=\"verified-field\">\r\n                <Icon icon=\"check-circle\" size=\"s\" />{' '}\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: enhanceContent(verifiedField.value, { emojis }),\r\n                  }}\r\n                />\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n      </span>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default AccountBlock;\r\n","import { satisfies } from 'compare-versions';\r\n\r\nimport features from '../data/features.json';\r\n\r\nimport { getCurrentInstance } from './store-utils';\r\n\r\nconst supportsCache = {};\r\n\r\nfunction supports(feature) {\r\n  try {\r\n    const { version, domain } = getCurrentInstance();\r\n    const key = `${domain}-${feature}`;\r\n    if (supportsCache[key]) return supportsCache[key];\r\n    const range = features[feature];\r\n    if (!range) return false;\r\n    return (supportsCache[key] = satisfies(version, range, {\r\n      includePrerelease: true,\r\n      loose: true,\r\n    }));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default supports;\r\n","import './translation-block.css';\r\n\r\nimport pRetry from 'p-retry';\r\nimport pThrottle from 'p-throttle';\r\nimport { useEffect, useRef, useState } from 'preact/hooks';\r\n\r\nimport sourceLanguages from '../data/lingva-source-languages';\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport localeCode2Text from '../utils/localeCode2Text';\r\nimport pmem from '../utils/pmem';\r\n\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\n\r\nconst { PHANPY_LINGVA_INSTANCES } = import.meta.env;\r\nconst LINGVA_INSTANCES = PHANPY_LINGVA_INSTANCES\r\n  ? PHANPY_LINGVA_INSTANCES.split(/\\s+/)\r\n  : [];\r\n\r\nconst throttle = pThrottle({\r\n  limit: 1,\r\n  interval: 2000,\r\n});\r\n\r\nlet currentLingvaInstance = 0;\r\n\r\nfunction _lingvaTranslate(text, source, target) {\r\n  console.log('TRANSLATE', text, source, target);\r\n  const fetchCall = () => {\r\n    let instance = LINGVA_INSTANCES[currentLingvaInstance];\r\n    return fetch(\r\n      `https://${instance}/api/v1/${source}/${target}/${encodeURIComponent(\r\n        text,\r\n      )}`,\r\n    )\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.statusText);\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        return {\r\n          provider: 'lingva',\r\n          content: res.translation,\r\n          detectedSourceLanguage: res.info?.detectedSource,\r\n          info: res.info,\r\n        };\r\n      });\r\n  };\r\n  return pRetry(fetchCall, {\r\n    retries: 3,\r\n    onFailedAttempt: (e) => {\r\n      currentLingvaInstance =\r\n        (currentLingvaInstance + 1) % LINGVA_INSTANCES.length;\r\n      console.log(\r\n        'Retrying translation with another instance',\r\n        currentLingvaInstance,\r\n      );\r\n    },\r\n  });\r\n  // return masto.v1.statuses.$select(id).translate({\r\n  //   lang: DEFAULT_LANG,\r\n  // });\r\n}\r\nconst TRANSLATED_MAX_AGE = 1000 * 60 * 60; // 1 hour\r\nconst lingvaTranslate = pmem(_lingvaTranslate, {\r\n  maxAge: TRANSLATED_MAX_AGE,\r\n});\r\nconst throttledLingvaTranslate = pmem(throttle(lingvaTranslate), {\r\n  // I know, this is double-layered memoization\r\n  maxAge: TRANSLATED_MAX_AGE,\r\n});\r\n\r\nfunction TranslationBlock({\r\n  forceTranslate,\r\n  sourceLanguage,\r\n  onTranslate,\r\n  text = '',\r\n  mini,\r\n}) {\r\n  const targetLang = getTranslateTargetLanguage(true);\r\n  const [uiState, setUIState] = useState('default');\r\n  const [pronunciationContent, setPronunciationContent] = useState(null);\r\n  const [translatedContent, setTranslatedContent] = useState(null);\r\n  const [detectedLang, setDetectedLang] = useState(null);\r\n  const detailsRef = useRef();\r\n\r\n  const sourceLangText = sourceLanguage\r\n    ? localeCode2Text(sourceLanguage)\r\n    : null;\r\n  const targetLangText = localeCode2Text(targetLang);\r\n  const apiSourceLang = useRef('auto');\r\n\r\n  if (!onTranslate) {\r\n    onTranslate = mini ? throttledLingvaTranslate : lingvaTranslate;\r\n  }\r\n\r\n  const translate = async () => {\r\n    setUIState('loading');\r\n    try {\r\n      const { content, detectedSourceLanguage, provider, error, ...props } =\r\n        await onTranslate(text, apiSourceLang.current, targetLang);\r\n      if (content) {\r\n        if (detectedSourceLanguage) {\r\n          const detectedLangText = localeCode2Text(detectedSourceLanguage);\r\n          setDetectedLang(detectedLangText);\r\n        }\r\n        if (provider === 'lingva') {\r\n          const pronunciation = props?.info?.pronunciation?.query;\r\n          if (pronunciation) {\r\n            setPronunciationContent(pronunciation);\r\n          }\r\n        }\r\n        setTranslatedContent(content);\r\n        setUIState('default');\r\n        if (!mini && content.trim() !== text.trim()) {\r\n          detailsRef.current.open = true;\r\n          detailsRef.current.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'nearest',\r\n          });\r\n        }\r\n      } else {\r\n        if (error) console.error(error);\r\n        setUIState('error');\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      setUIState('error');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (forceTranslate) {\r\n      translate();\r\n    }\r\n  }, [forceTranslate]);\r\n\r\n  if (mini) {\r\n    if (\r\n      !!translatedContent &&\r\n      translatedContent.trim() !== text.trim() &&\r\n      detectedLang !== targetLangText\r\n    ) {\r\n      return (\r\n        <div class=\"shazam-container\">\r\n          <div class=\"shazam-container-inner\">\r\n            <div class=\"status-translation-block-mini\">\r\n              <Icon\r\n                icon=\"translate\"\r\n                alt={`Auto-translated from ${sourceLangText}`}\r\n              />\r\n              <output\r\n                lang={targetLang}\r\n                dir=\"auto\"\r\n                title={pronunciationContent || ''}\r\n              >\r\n                {translatedContent}\r\n              </output>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      class=\"status-translation-block\"\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <details ref={detailsRef}>\r\n        <summary>\r\n          <button\r\n            type=\"button\"\r\n            onClick={async (e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              detailsRef.current.open = !detailsRef.current.open;\r\n              if (uiState === 'loading') return;\r\n              if (!translatedContent) translate();\r\n            }}\r\n          >\r\n            <Icon icon=\"translate\" />{' '}\r\n            <span>\r\n              {uiState === 'loading'\r\n                ? 'Translating…'\r\n                : sourceLanguage && sourceLangText && !detectedLang\r\n                ? `Translate from ${sourceLangText}`\r\n                : `Translate`}\r\n            </span>\r\n          </button>\r\n        </summary>\r\n        <div class=\"translated-block\">\r\n          <div class=\"translation-info insignificant\">\r\n            <select\r\n              class=\"translated-source-select\"\r\n              disabled={uiState === 'loading'}\r\n              onChange={(e) => {\r\n                apiSourceLang.current = e.target.value;\r\n                translate();\r\n              }}\r\n            >\r\n              {sourceLanguages.map((l) => (\r\n                <option value={l.code}>\r\n                  {l.code === 'auto' ? `Auto (${detectedLang ?? '…'})` : l.name}\r\n                </option>\r\n              ))}\r\n            </select>{' '}\r\n            <span>→ {targetLangText}</span>\r\n            <Loader abrupt hidden={uiState !== 'loading'} />\r\n          </div>\r\n          {uiState === 'error' ? (\r\n            <p class=\"ui-state\">Failed to translate</p>\r\n          ) : (\r\n            !!translatedContent && (\r\n              <>\r\n                <output class=\"translated-content\" lang={targetLang} dir=\"auto\">\r\n                  {translatedContent}\r\n                </output>\r\n                {!!pronunciationContent && (\r\n                  <output\r\n                    class=\"translated-pronunciation-content\"\r\n                    tabIndex={-1}\r\n                    onClick={(e) => {\r\n                      e.target.classList.toggle('expand');\r\n                    }}\r\n                  >\r\n                    {pronunciationContent}\r\n                  </output>\r\n                )}\r\n              </>\r\n            )\r\n          )}\r\n        </div>\r\n      </details>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LINGVA_INSTANCES?.length ? TranslationBlock : () => null;\r\n","import {\r\n  clear,\r\n  createStore,\r\n  del,\r\n  delMany,\r\n  get,\r\n  getMany,\r\n  keys,\r\n  set,\r\n} from 'idb-keyval';\r\n\r\nconst draftsStore = createStore('drafts-db', 'drafts-store');\r\n\r\n// Add additonal `draftsStore` parameter to all methods\r\n\r\nconst drafts = {\r\n  set: (key, val) => set(key, val, draftsStore),\r\n  get: (key) => get(key, draftsStore),\r\n  getMany: (keys) => getMany(keys, draftsStore),\r\n  del: (key) => del(key, draftsStore),\r\n  delMany: (keys) => delMany(keys, draftsStore),\r\n  clear: () => clear(draftsStore),\r\n  keys: () => keys(draftsStore),\r\n};\r\n\r\nexport default {\r\n  drafts,\r\n};\r\n","export default {\r\n  public: 'earth',\r\n  unlisted: 'group',\r\n  private: 'lock',\r\n  direct: 'message',\r\n};\r\n","import { useState } from 'preact/hooks';\r\n\r\nimport shortenNumber from '../utils/shorten-number';\r\n\r\nimport EmojiText from './emoji-text';\r\nimport Icon from './icon';\r\nimport RelativeTime from './relative-time';\r\n\r\nexport default function Poll({\r\n  poll,\r\n  lang,\r\n  readOnly,\r\n  refresh = () => {},\r\n  votePoll = () => {},\r\n}) {\r\n  const [uiState, setUIState] = useState('default');\r\n  const {\r\n    expired,\r\n    expiresAt,\r\n    id,\r\n    multiple,\r\n    options,\r\n    ownVotes,\r\n    voted,\r\n    votersCount,\r\n    votesCount,\r\n    emojis,\r\n  } = poll;\r\n  const expiresAtDate = !!expiresAt && new Date(expiresAt); // Update poll at point of expiry\r\n  // NOTE: Disable this because setTimeout runs immediately if delay is too large\r\n  // https://stackoverflow.com/a/56718027/20838\r\n  // useEffect(() => {\r\n  //   let timeout;\r\n  //   if (!expired && expiresAtDate) {\r\n  //     const ms = expiresAtDate.getTime() - Date.now() + 1; // +1 to give it a little buffer\r\n  //     if (ms > 0) {\r\n  //       timeout = setTimeout(() => {\r\n  //         setUIState('loading');\r\n  //         (async () => {\r\n  //           // await refresh();\r\n  //           setUIState('default');\r\n  //         })();\r\n  //       }, ms);\r\n  //     }\r\n  //   }\r\n  //   return () => {\r\n  //     clearTimeout(timeout);\r\n  //   };\r\n  // }, [expired, expiresAtDate]);\r\n\r\n  const pollVotesCount = votersCount || votesCount;\r\n  let roundPrecision = 0;\r\n\r\n  if (pollVotesCount <= 1000) {\r\n    roundPrecision = 0;\r\n  } else if (pollVotesCount <= 10000) {\r\n    roundPrecision = 1;\r\n  } else if (pollVotesCount <= 100000) {\r\n    roundPrecision = 2;\r\n  }\r\n\r\n  const [showResults, setShowResults] = useState(false);\r\n  const optionsHaveVoteCounts = options.every((o) => o.votesCount !== null);\r\n\r\n  return (\r\n    <div\r\n      lang={lang}\r\n      dir=\"auto\"\r\n      class={`poll ${readOnly ? 'read-only' : ''} ${\r\n        uiState === 'loading' ? 'loading' : ''\r\n      }`}\r\n    >\r\n      {(showResults && optionsHaveVoteCounts) || voted || expired ? (\r\n        <>\r\n          <div class=\"poll-options\">\r\n            {options.map((option, i) => {\r\n              const { title, votesCount: optionVotesCount } = option;\r\n              const percentage = pollVotesCount\r\n                ? ((optionVotesCount / pollVotesCount) * 100).toFixed(\r\n                    roundPrecision,\r\n                  )\r\n                : 0; // check if current poll choice is the leading one\r\n\r\n              const isLeading =\r\n                optionVotesCount > 0 &&\r\n                optionVotesCount ===\r\n                  Math.max(...options.map((o) => o.votesCount));\r\n              return (\r\n                <div\r\n                  key={`${i}-${title}-${optionVotesCount}`}\r\n                  class={`poll-option poll-result ${\r\n                    isLeading ? 'poll-option-leading' : ''\r\n                  }`}\r\n                  style={{\r\n                    '--percentage': `${percentage}%`,\r\n                  }}\r\n                >\r\n                  <div class=\"poll-option-title\">\r\n                    <span>\r\n                      <EmojiText text={title} emojis={emojis} />\r\n                    </span>\r\n                    {voted && ownVotes.includes(i) && (\r\n                      <>\r\n                        {' '}\r\n                        <Icon icon=\"check-circle\" />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                  <div\r\n                    class=\"poll-option-votes\"\r\n                    title={`${optionVotesCount} vote${\r\n                      optionVotesCount === 1 ? '' : 's'\r\n                    }`}\r\n                  >\r\n                    {percentage}%\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {!expired && !voted && (\r\n            <button\r\n              class=\"poll-vote-button plain2\"\r\n              disabled={uiState === 'loading'}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setShowResults(false);\r\n              }}\r\n            >\r\n              <Icon icon=\"arrow-left\" size=\"s\" /> Hide results\r\n            </button>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <form\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n            const form = e.target;\r\n            const formData = new FormData(form);\r\n            const choices = [];\r\n            formData.forEach((value, key) => {\r\n              if (key === 'poll') {\r\n                choices.push(value);\r\n              }\r\n            });\r\n            if (!choices.length) return;\r\n            setUIState('loading');\r\n            await votePoll(choices);\r\n            setUIState('default');\r\n          }}\r\n        >\r\n          <div class=\"poll-options\">\r\n            {options.map((option, i) => {\r\n              const { title } = option;\r\n              return (\r\n                <div class=\"poll-option\">\r\n                  <label class=\"poll-label\">\r\n                    <input\r\n                      type={multiple ? 'checkbox' : 'radio'}\r\n                      name=\"poll\"\r\n                      value={i}\r\n                      disabled={uiState === 'loading'}\r\n                      readOnly={readOnly}\r\n                    />\r\n                    <span class=\"poll-option-title\">\r\n                      <EmojiText text={title} emojis={emojis} />\r\n                    </span>\r\n                  </label>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {!readOnly && (\r\n            <button\r\n              class=\"poll-vote-button\"\r\n              type=\"submit\"\r\n              disabled={uiState === 'loading'}\r\n            >\r\n              Vote\r\n            </button>\r\n          )}\r\n        </form>\r\n      )}\r\n      <p class=\"poll-meta\">\r\n        {!expired && !readOnly && (\r\n          <button\r\n            type=\"button\"\r\n            class=\"plain small\"\r\n            disabled={uiState === 'loading'}\r\n            style={{\r\n              marginLeft: -8,\r\n            }}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setUIState('loading');\r\n\r\n              (async () => {\r\n                await refresh();\r\n                setUIState('default');\r\n              })();\r\n            }}\r\n            title=\"Refresh\"\r\n          >\r\n            <Icon icon=\"refresh\" alt=\"Refresh\" />\r\n          </button>\r\n        )}\r\n        {!voted && !expired && !readOnly && optionsHaveVoteCounts && (\r\n          <button\r\n            type=\"button\"\r\n            class=\"plain small\"\r\n            disabled={uiState === 'loading'}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setShowResults(!showResults);\r\n            }}\r\n            title={showResults ? 'Hide results' : 'Show results'}\r\n          >\r\n            <Icon\r\n              icon={showResults ? 'eye-open' : 'eye-close'}\r\n              alt={showResults ? 'Hide results' : 'Show results'}\r\n            />{' '}\r\n          </button>\r\n        )}\r\n        {!expired && !readOnly && ' '}\r\n        <span title={votesCount}>{shortenNumber(votesCount)}</span> vote\r\n        {votesCount === 1 ? '' : 's'}\r\n        {!!votersCount && votersCount !== votesCount && (\r\n          <>\r\n            {' '}\r\n            &bull; <span title={votersCount}>\r\n              {shortenNumber(votersCount)}\r\n            </span>{' '}\r\n            voter\r\n            {votersCount === 1 ? '' : 's'}\r\n          </>\r\n        )}{' '}\r\n        &bull; {expired ? 'Ended' : 'Ending'}{' '}\r\n        {!!expiresAtDate && <RelativeTime datetime={expiresAtDate} />}\r\n      </p>{' '}\r\n    </div>\r\n  );\r\n}\r\n","import { createContext } from 'preact';\r\n\r\nconst FilterContext = createContext();\r\nexport default FilterContext;\r\n","import mem from './mem';\r\nimport store from './store';\r\n\r\nfunction _isFiltered(filtered, filterContext) {\r\n  if (!filtered?.length) return false;\r\n  const appliedFilters = filtered.filter((f) => {\r\n    const { filter } = f;\r\n    const hasContext = filter.context.includes(filterContext);\r\n    if (!hasContext) return false;\r\n    if (!filter.expiresAt) return hasContext;\r\n    return new Date(filter.expiresAt) > new Date();\r\n  });\r\n  if (!appliedFilters.length) return false;\r\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\r\n  if (isHidden)\r\n    return {\r\n      action: 'hide',\r\n    };\r\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\r\n  if (isWarn) {\r\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\r\n    return {\r\n      action: 'warn',\r\n      titles: filterTitles,\r\n      titlesStr: filterTitles.join(' • '),\r\n    };\r\n  }\r\n  return false;\r\n}\r\nexport const isFiltered = mem(_isFiltered);\r\n\r\nexport function filteredItem(item, filterContext, currentAccountID) {\r\n  const { filtered } = item;\r\n  if (!filtered?.length) return true;\r\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\r\n  if (isSelf) return true;\r\n  const filterState = isFiltered(filtered, filterContext);\r\n  if (!filterState) return true;\r\n  if (filterState.action === 'hide') return false;\r\n  // item._filtered = filterState;\r\n  return true;\r\n}\r\nexport function filteredItems(items, filterContext) {\r\n  if (!items?.length) return [];\r\n  if (!filterContext) return items;\r\n  const currentAccountID = store.session.get('currentAccount');\r\n  return items.filter((item) =>\r\n    filteredItem(item, filterContext, currentAccountID),\r\n  );\r\n}\r\n","const div = document.createElement('div');\r\nexport default function htmlContentLength(html) {\r\n  if (!html) return 0;\r\n  div.innerHTML = html;\r\n  // .invisible spans for links\r\n  // e.g. <span class=\"invisible\">https://</span>mastodon.social\r\n  div.querySelectorAll('.invisible').forEach((el) => {\r\n    el.remove();\r\n  });\r\n  return div.innerText.length;\r\n}\r\n","export const supportsTTS = 'speechSynthesis' in window;\r\n\r\nexport function speak(text, lang) {\r\n  if (!supportsTTS) return;\r\n  try {\r\n    if (speechSynthesis.speaking) {\r\n      speechSynthesis.cancel();\r\n    }\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (lang) utterance.lang = lang;\r\n    speechSynthesis.speak(utterance);\r\n  } catch (e) {\r\n    alert(e);\r\n  }\r\n}\r\n","import getHTMLText from './getHTMLText';\r\n\r\nfunction statusPeek(status) {\r\n  const { spoilerText, content, poll, mediaAttachments } = status;\r\n  let text = '';\r\n  if (spoilerText?.trim()) {\r\n    text += spoilerText;\r\n  } else {\r\n    text += getHTMLText(content);\r\n  }\r\n  text = text.trim();\r\n  if (poll) {\r\n    text += ' 📊';\r\n  }\r\n  if (mediaAttachments?.length) {\r\n    text +=\r\n      ' ' +\r\n      mediaAttachments\r\n        .map(\r\n          (m) =>\r\n            ({\r\n              image: '🖼️',\r\n              gifv: '🎞️',\r\n              video: '📹',\r\n              audio: '🎵',\r\n              unknown: '',\r\n            }[m.type] || ''),\r\n        )\r\n        .join('');\r\n  }\r\n  return text;\r\n}\r\n\r\nexport default statusPeek;\r\n","import { useRef } from 'preact/hooks';\r\nimport { useThrottledCallback } from 'use-debounce';\r\nimport useResizeObserver from 'use-resize-observer';\r\n\r\nexport default function useTruncated({ className = 'truncated' } = {}) {\r\n  const ref = useRef();\r\n  const onResize = useThrottledCallback(({ height }) => {\r\n    if (ref.current) {\r\n      const { scrollHeight } = ref.current;\r\n      let truncated = scrollHeight > height;\r\n      if (truncated) {\r\n        const { height: _height, maxHeight } = getComputedStyle(ref.current);\r\n        const computedHeight = parseInt(maxHeight || _height, 10);\r\n        truncated = scrollHeight > computedHeight;\r\n      }\r\n      ref.current.classList.toggle(className, truncated);\r\n    }\r\n  }, 300);\r\n  useResizeObserver({\r\n    ref,\r\n    box: 'border-box',\r\n    onResize,\r\n  });\r\n  return ref;\r\n}\r\n","import { getBlurHashAverageColor } from 'fast-blurhash';\r\nimport { Fragment } from 'preact';\r\nimport {\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport QuickPinchZoom, { make3dTransformValue } from 'react-quick-pinch-zoom';\r\n\r\nimport mem from '../utils/mem';\r\nimport states from '../utils/states';\r\n\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport { formatDuration } from './status';\r\n\r\nconst isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // https://stackoverflow.com/a/23522755\r\n\r\n/*\r\nMedia type\r\n===\r\nunknown = unsupported or unrecognized file type\r\nimage = Static image\r\ngifv = Looping, soundless animation\r\nvideo = Video clip\r\naudio = Audio track\r\n*/\r\n\r\nconst dataAltLabel = 'ALT';\r\nconst AltBadge = (props) => {\r\n  const { alt, lang, index, ...rest } = props;\r\n  if (!alt || !alt.trim()) return null;\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      class=\"alt-badge clickable\"\r\n      {...rest}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        states.showMediaAlt = {\r\n          alt,\r\n          lang,\r\n        };\r\n      }}\r\n      title=\"Media description\"\r\n    >\r\n      {dataAltLabel}\r\n      {!!index && <sup>{index}</sup>}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst MEDIA_CAPTION_LIMIT = 140;\r\nexport const isMediaCaptionLong = mem((caption) =>\r\n  caption?.length\r\n    ? caption.length > MEDIA_CAPTION_LIMIT ||\r\n      /[\\n\\r].*[\\n\\r]/.test(caption.trim())\r\n    : false,\r\n);\r\n\r\nfunction Media({\r\n  class: className = '',\r\n  media,\r\n  to,\r\n  lang,\r\n  showOriginal,\r\n  autoAnimate,\r\n  showCaption,\r\n  altIndex,\r\n  onClick = () => {},\r\n}) {\r\n  const {\r\n    blurhash,\r\n    description,\r\n    meta,\r\n    previewRemoteUrl,\r\n    previewUrl,\r\n    remoteUrl,\r\n    url,\r\n    type,\r\n  } = media;\r\n  const { original = {}, small, focus } = meta || {};\r\n\r\n  const width = showOriginal ? original?.width : small?.width;\r\n  const height = showOriginal ? original?.height : small?.height;\r\n  const mediaURL = showOriginal ? url : previewUrl || url;\r\n  const remoteMediaURL = showOriginal\r\n    ? remoteUrl\r\n    : previewRemoteUrl || remoteUrl;\r\n  const orientation = width >= height ? 'landscape' : 'portrait';\r\n\r\n  const rgbAverageColor = blurhash ? getBlurHashAverageColor(blurhash) : null;\r\n\r\n  const videoRef = useRef();\r\n\r\n  let focalPosition;\r\n  if (focus) {\r\n    // Convert focal point to CSS background position\r\n    // Formula from jquery-focuspoint\r\n    // x = -1, y = 1 => 0% 0%\r\n    // x = 0, y = 0 => 50% 50%\r\n    // x = 1, y = -1 => 100% 100%\r\n    const x = ((focus.x + 1) / 2) * 100;\r\n    const y = ((1 - focus.y) / 2) * 100;\r\n    focalPosition = `${x.toFixed(0)}% ${y.toFixed(0)}%`;\r\n  }\r\n\r\n  const mediaRef = useRef();\r\n  const onUpdate = useCallback(({ x, y, scale }) => {\r\n    const { current: media } = mediaRef;\r\n\r\n    if (media) {\r\n      const value = make3dTransformValue({ x, y, scale });\r\n\r\n      if (scale === 1) {\r\n        media.style.removeProperty('transform');\r\n      } else {\r\n        media.style.setProperty('transform', value);\r\n      }\r\n\r\n      media.closest('.media-zoom').style.touchAction =\r\n        scale <= 1.01 ? 'pan-x' : '';\r\n    }\r\n  }, []);\r\n\r\n  const [pinchZoomEnabled, setPinchZoomEnabled] = useState(false);\r\n  const quickPinchZoomProps = {\r\n    enabled: pinchZoomEnabled,\r\n    draggableUnZoomed: false,\r\n    inertiaFriction: 0.9,\r\n    doubleTapZoomOutOnMaxScale: true,\r\n    containerProps: {\r\n      className: 'media-zoom',\r\n      style: {\r\n        overflow: 'visible',\r\n        //   width: 'inherit',\r\n        //   height: 'inherit',\r\n        //   justifyContent: 'inherit',\r\n        //   alignItems: 'inherit',\r\n        //   display: 'inherit',\r\n      },\r\n    },\r\n    onUpdate,\r\n  };\r\n\r\n  const Parent = useMemo(\r\n    () => (to ? (props) => <Link to={to} {...props} /> : 'div'),\r\n    [to],\r\n  );\r\n\r\n  const isVideoMaybe =\r\n    type === 'unknown' &&\r\n    /\\.(mp4|m4a|m4p|m4b|m4r|m4v|mov|webm)$/i.test(remoteMediaURL);\r\n  const isImage =\r\n    type === 'image' || (type === 'unknown' && previewUrl && !isVideoMaybe);\r\n\r\n  const parentRef = useRef();\r\n  const [imageSmallerThanParent, setImageSmallerThanParent] = useState(false);\r\n  useLayoutEffect(() => {\r\n    if (!isImage) return;\r\n    if (!showOriginal) return;\r\n    if (!parentRef.current) return;\r\n    const { offsetWidth, offsetHeight } = parentRef.current;\r\n    const smaller = width < offsetWidth && height < offsetHeight;\r\n    if (smaller) setImageSmallerThanParent(smaller);\r\n  }, [width, height]);\r\n\r\n  const maxAspectHeight =\r\n    window.innerHeight * (orientation === 'portrait' ? 0.45 : 0.33);\r\n  const maxHeight = orientation === 'portrait' ? 0 : 160;\r\n  const averageColorStyle = {\r\n    '--average-color': rgbAverageColor && `rgb(${rgbAverageColor.join(',')})`,\r\n  };\r\n  const mediaStyles =\r\n    width && height\r\n      ? {\r\n          '--width': `${width}px`,\r\n          '--height': `${height}px`,\r\n          // Calculate '--aspectWidth' based on aspect ratio calculated from '--width' and '--height', max height has to be 160px\r\n          '--aspectWidth': `${\r\n            (width / height) * Math.max(maxHeight, maxAspectHeight)\r\n          }px`,\r\n          aspectRatio: `${width} / ${height}`,\r\n          ...averageColorStyle,\r\n        }\r\n      : {\r\n          ...averageColorStyle,\r\n        };\r\n\r\n  const longDesc = isMediaCaptionLong(description);\r\n  const showInlineDesc =\r\n    !!showCaption && !showOriginal && !!description && !longDesc;\r\n  const Figure = !showInlineDesc\r\n    ? Fragment\r\n    : (props) => {\r\n        const { children, ...restProps } = props;\r\n        return (\r\n          <figure {...restProps}>\r\n            {children}\r\n            <figcaption\r\n              class=\"media-caption\"\r\n              lang={lang}\r\n              dir=\"auto\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                states.showMediaAlt = {\r\n                  alt: description,\r\n                  lang,\r\n                };\r\n              }}\r\n            >\r\n              {description}\r\n            </figcaption>\r\n          </figure>\r\n        );\r\n      };\r\n\r\n  if (isImage) {\r\n    // Note: type: unknown might not have width/height\r\n    quickPinchZoomProps.containerProps.style.display = 'inherit';\r\n\r\n    useLayoutEffect(() => {\r\n      if (!isSafari) return;\r\n      if (!showOriginal) return;\r\n      (async () => {\r\n        try {\r\n          await fetch(mediaURL, { mode: 'no-cors' });\r\n          mediaRef.current.src = mediaURL;\r\n        } catch (e) {\r\n          // Ignore\r\n        }\r\n      })();\r\n    }, [mediaURL]);\r\n\r\n    return (\r\n      <Figure>\r\n        <Parent\r\n          ref={parentRef}\r\n          class={`media media-image ${className}`}\r\n          onClick={onClick}\r\n          data-orientation={orientation}\r\n          data-has-alt={!showInlineDesc}\r\n          style={\r\n            showOriginal\r\n              ? {\r\n                  backgroundImage: `url(${previewUrl})`,\r\n                  backgroundSize: imageSmallerThanParent\r\n                    ? `${width}px ${height}px`\r\n                    : undefined,\r\n                  ...averageColorStyle,\r\n                }\r\n              : mediaStyles\r\n          }\r\n        >\r\n          {showOriginal ? (\r\n            <QuickPinchZoom {...quickPinchZoomProps}>\r\n              <img\r\n                ref={mediaRef}\r\n                src={mediaURL}\r\n                alt={description}\r\n                width={width}\r\n                height={height}\r\n                data-orientation={orientation}\r\n                loading=\"eager\"\r\n                decoding=\"sync\"\r\n                onLoad={(e) => {\r\n                  e.target.closest('.media-image').style.backgroundImage = '';\r\n                  e.target.closest('.media-zoom').style.display = '';\r\n                  setPinchZoomEnabled(true);\r\n                }}\r\n                onError={(e) => {\r\n                  const { src } = e.target;\r\n                  if (src === mediaURL && mediaURL !== remoteMediaURL) {\r\n                    e.target.src = remoteMediaURL;\r\n                  }\r\n                }}\r\n              />\r\n            </QuickPinchZoom>\r\n          ) : (\r\n            <>\r\n              <img\r\n                src={mediaURL}\r\n                alt={showInlineDesc ? '' : description}\r\n                width={width}\r\n                height={height}\r\n                data-orientation={orientation}\r\n                loading=\"lazy\"\r\n                style={{\r\n                  // backgroundColor:\r\n                  //   rgbAverageColor && `rgb(${rgbAverageColor.join(',')})`,\r\n                  // backgroundPosition: focalBackgroundPosition || 'center',\r\n                  // Duration based on width or height in pixels\r\n                  objectPosition: focalPosition || 'center',\r\n                  // 100px per second (rough estimate)\r\n                  // Clamp between 5s and 120s\r\n                  '--anim-duration': `${Math.min(\r\n                    Math.max(Math.max(width, height) / 100, 5),\r\n                    120,\r\n                  )}s`,\r\n                }}\r\n                onLoad={(e) => {\r\n                  // e.target.closest('.media-image').style.backgroundImage = '';\r\n                  e.target.dataset.loaded = true;\r\n                }}\r\n                onError={(e) => {\r\n                  const { src } = e.target;\r\n                  if (src === mediaURL && mediaURL !== remoteMediaURL) {\r\n                    e.target.src = remoteMediaURL;\r\n                  }\r\n                }}\r\n              />\r\n              {!showInlineDesc && (\r\n                <AltBadge alt={description} lang={lang} index={altIndex} />\r\n              )}\r\n            </>\r\n          )}\r\n        </Parent>\r\n      </Figure>\r\n    );\r\n  } else if (type === 'gifv' || type === 'video' || isVideoMaybe) {\r\n    const shortDuration = original.duration < 31;\r\n    const isGIF = type === 'gifv' && shortDuration;\r\n    // If GIF is too long, treat it as a video\r\n    const loopable = original.duration < 61;\r\n    const formattedDuration = formatDuration(original.duration);\r\n    const hoverAnimate = !showOriginal && !autoAnimate && isGIF;\r\n    const autoGIFAnimate = !showOriginal && autoAnimate && isGIF;\r\n    const showProgress = original.duration > 5;\r\n\r\n    const videoHTML = `\r\n    <video\r\n      src=\"${url}\"\r\n      poster=\"${previewUrl}\"\r\n      width=\"${width}\"\r\n      height=\"${height}\"\r\n      data-orientation=\"${orientation}\"\r\n      preload=\"auto\"\r\n      autoplay\r\n      muted=\"${isGIF}\"\r\n      ${isGIF ? '' : 'controls'}\r\n      playsinline\r\n      loop=\"${loopable}\"\r\n      ${isGIF ? 'ondblclick=\"this.paused ? this.play() : this.pause()\"' : ''}\r\n      ${\r\n        isGIF && showProgress\r\n          ? \"ontimeupdate=\\\"this.closest('.media-gif') && this.closest('.media-gif').style.setProperty('--progress', `${~~((this.currentTime / this.duration) * 100)}%`)\\\"\"\r\n          : ''\r\n      }\r\n    ></video>\r\n  `;\r\n\r\n    return (\r\n      <Figure>\r\n        <Parent\r\n          class={`media ${className} media-${isGIF ? 'gif' : 'video'} ${\r\n            autoGIFAnimate ? 'media-contain' : ''\r\n          } ${hoverAnimate ? 'media-hover-animate' : ''}`}\r\n          data-orientation={orientation}\r\n          data-formatted-duration={\r\n            !showOriginal ? formattedDuration : undefined\r\n          }\r\n          data-label={isGIF && !showOriginal && !autoGIFAnimate ? 'GIF' : ''}\r\n          data-has-alt={!showInlineDesc}\r\n          // style={{\r\n          //   backgroundColor:\r\n          //     rgbAverageColor && `rgb(${rgbAverageColor.join(',')})`,\r\n          // }}\r\n          style={!showOriginal && mediaStyles}\r\n          onClick={(e) => {\r\n            if (hoverAnimate) {\r\n              try {\r\n                videoRef.current.pause();\r\n              } catch (e) {}\r\n            }\r\n            onClick(e);\r\n          }}\r\n          onMouseEnter={() => {\r\n            if (hoverAnimate) {\r\n              try {\r\n                videoRef.current.play();\r\n              } catch (e) {}\r\n            }\r\n          }}\r\n          onMouseLeave={() => {\r\n            if (hoverAnimate) {\r\n              try {\r\n                videoRef.current.pause();\r\n              } catch (e) {}\r\n            }\r\n          }}\r\n          onFocus={() => {\r\n            if (hoverAnimate) {\r\n              try {\r\n                videoRef.current.play();\r\n              } catch (e) {}\r\n            }\r\n          }}\r\n          onBlur={() => {\r\n            if (hoverAnimate) {\r\n              try {\r\n                videoRef.current.pause();\r\n              } catch (e) {}\r\n            }\r\n          }}\r\n        >\r\n          {showOriginal || autoGIFAnimate ? (\r\n            isGIF && showOriginal ? (\r\n              <QuickPinchZoom {...quickPinchZoomProps} enabled>\r\n                <div\r\n                  ref={mediaRef}\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: videoHTML,\r\n                  }}\r\n                />\r\n              </QuickPinchZoom>\r\n            ) : (\r\n              <div\r\n                class=\"video-container\"\r\n                dangerouslySetInnerHTML={{\r\n                  __html: videoHTML,\r\n                }}\r\n              />\r\n            )\r\n          ) : isGIF ? (\r\n            <video\r\n              ref={videoRef}\r\n              src={url}\r\n              poster={previewUrl}\r\n              width={width}\r\n              height={height}\r\n              data-orientation={orientation}\r\n              preload=\"auto\"\r\n              // controls\r\n              playsinline\r\n              loop\r\n              muted\r\n              onTimeUpdate={\r\n                showProgress\r\n                  ? (e) => {\r\n                      const { target } = e;\r\n                      const container = target?.closest('.media-gif');\r\n                      if (container) {\r\n                        const percentage =\r\n                          (target.currentTime / target.duration) * 100;\r\n                        container.style.setProperty(\r\n                          '--progress',\r\n                          `${percentage}%`,\r\n                        );\r\n                      }\r\n                    }\r\n                  : undefined\r\n              }\r\n            />\r\n          ) : (\r\n            <>\r\n              <img\r\n                src={previewUrl}\r\n                alt={showInlineDesc ? '' : description}\r\n                width={width}\r\n                height={height}\r\n                data-orientation={orientation}\r\n                loading=\"lazy\"\r\n              />\r\n              <div class=\"media-play\">\r\n                <Icon icon=\"play\" size=\"xl\" />\r\n              </div>\r\n            </>\r\n          )}\r\n          {!showOriginal && !showInlineDesc && (\r\n            <AltBadge alt={description} lang={lang} index={altIndex} />\r\n          )}\r\n        </Parent>\r\n      </Figure>\r\n    );\r\n  } else if (type === 'audio') {\r\n    const formattedDuration = formatDuration(original.duration);\r\n    return (\r\n      <Figure>\r\n        <Parent\r\n          class={`media media-audio ${className}`}\r\n          data-formatted-duration={\r\n            !showOriginal ? formattedDuration : undefined\r\n          }\r\n          data-has-alt={!showInlineDesc}\r\n          onClick={onClick}\r\n          style={!showOriginal && mediaStyles}\r\n        >\r\n          {showOriginal ? (\r\n            <audio src={remoteUrl || url} preload=\"none\" controls autoplay />\r\n          ) : previewUrl ? (\r\n            <img\r\n              src={previewUrl}\r\n              alt={showInlineDesc ? '' : description}\r\n              width={width}\r\n              height={height}\r\n              data-orientation={orientation}\r\n              loading=\"lazy\"\r\n            />\r\n          ) : null}\r\n          {!showOriginal && (\r\n            <>\r\n              <div class=\"media-play\">\r\n                <Icon icon=\"play\" size=\"xl\" />\r\n              </div>\r\n              {!showInlineDesc && (\r\n                <AltBadge alt={description} lang={lang} index={altIndex} />\r\n              )}\r\n            </>\r\n          )}\r\n        </Parent>\r\n      </Figure>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Media;\r\n","import { FocusableItem } from '@szhsin/react-menu';\r\n\r\nimport Link from './link';\r\n\r\nfunction MenuLink(props) {\r\n  return (\r\n    <FocusableItem>\r\n      {({ ref, closeMenu }) => (\r\n        <Link\r\n          {...props}\r\n          ref={ref}\r\n          onClick={({ detail }) =>\r\n            closeMenu(detail === 0 ? 'Enter' : undefined)\r\n          }\r\n        />\r\n      )}\r\n    </FocusableItem>\r\n  );\r\n}\r\n\r\nexport default MenuLink;\r\n","import './status.css';\r\n\r\nimport '@justinribeiro/lite-youtube';\r\nimport {\r\n  ControlledMenu,\r\n  Menu,\r\n  MenuDivider,\r\n  MenuHeader,\r\n  MenuItem,\r\n} from '@szhsin/react-menu';\r\nimport { decodeBlurHash, getBlurHashAverageColor } from 'fast-blurhash';\r\nimport { shallowEqual } from 'fast-equals';\r\nimport { memo } from 'preact/compat';\r\nimport {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { useLongPress } from 'use-long-press';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport AccountBlock from '../components/account-block';\r\nimport EmojiText from '../components/emoji-text';\r\nimport Loader from '../components/loader';\r\nimport Menu2 from '../components/menu2';\r\nimport MenuConfirm from '../components/menu-confirm';\r\nimport Modal from '../components/modal';\r\nimport NameText from '../components/name-text';\r\nimport Poll from '../components/poll';\r\nimport { api } from '../utils/api';\r\nimport emojifyText from '../utils/emojify-text';\r\nimport enhanceContent from '../utils/enhance-content';\r\nimport FilterContext from '../utils/filter-context';\r\nimport { isFiltered } from '../utils/filters';\r\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\r\nimport getHTMLText from '../utils/getHTMLText';\r\nimport handleContentLinks from '../utils/handle-content-links';\r\nimport htmlContentLength from '../utils/html-content-length';\r\nimport isMastodonLinkMaybe from '../utils/isMastodonLinkMaybe';\r\nimport localeMatch from '../utils/locale-match';\r\nimport niceDateTime from '../utils/nice-date-time';\r\nimport openCompose from '../utils/open-compose';\r\nimport pmem from '../utils/pmem';\r\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport showToast from '../utils/show-toast';\r\nimport { speak, supportsTTS } from '../utils/speech';\r\nimport states, { getStatus, saveStatus, statusKey } from '../utils/states';\r\nimport statusPeek from '../utils/status-peek';\r\nimport store from '../utils/store';\r\nimport unfurlMastodonLink from '../utils/unfurl-link';\r\nimport useTruncated from '../utils/useTruncated';\r\nimport visibilityIconsMap from '../utils/visibility-icons-map';\r\n\r\nimport Avatar from './avatar';\r\nimport Icon from './icon';\r\nimport Link from './link';\r\nimport Media from './media';\r\nimport { isMediaCaptionLong } from './media';\r\nimport MenuLink from './menu-link';\r\nimport RelativeTime from './relative-time';\r\nimport TranslationBlock from './translation-block';\r\n\r\nconst SHOW_COMMENT_COUNT_LIMIT = 280;\r\nconst INLINE_TRANSLATE_LIMIT = 140;\r\n\r\nfunction fetchAccount(id, masto) {\r\n  return masto.v1.accounts.$select(id).fetch();\r\n}\r\nconst memFetchAccount = pmem(fetchAccount);\r\n\r\nconst visibilityText = {\r\n  public: 'Public',\r\n  unlisted: 'Unlisted',\r\n  private: 'Followers only',\r\n  direct: 'Private mention',\r\n};\r\n\r\nconst isIOS =\r\n  window.ontouchstart !== undefined &&\r\n  /iPad|iPhone|iPod/.test(navigator.userAgent);\r\n\r\nconst REACTIONS_LIMIT = 80;\r\n\r\nfunction getPollText(poll) {\r\n  if (!poll?.options?.length) return '';\r\n  return `📊:\\n${poll.options\r\n    .map(\r\n      (option) =>\r\n        `- ${option.title}${\r\n          option.votesCount >= 0 ? ` (${option.votesCount})` : ''\r\n        }`,\r\n    )\r\n    .join('\\n')}`;\r\n}\r\nfunction getPostText(status) {\r\n  const { spoilerText, content, poll } = status;\r\n  return (\r\n    (spoilerText ? `${spoilerText}\\n\\n` : '') +\r\n    getHTMLText(content) +\r\n    getPollText(poll)\r\n  );\r\n}\r\n\r\nfunction Status({\r\n  statusID,\r\n  status,\r\n  instance: propInstance,\r\n  size = 'm',\r\n  contentTextWeight,\r\n  readOnly,\r\n  enableCommentHint,\r\n  withinContext,\r\n  skeleton,\r\n  enableTranslate,\r\n  forceTranslate: _forceTranslate,\r\n  previewMode,\r\n  // allowFilters,\r\n  onMediaClick,\r\n  quoted,\r\n  onStatusLinkClick = () => {},\r\n  showFollowedTags,\r\n}) {\r\n  if (skeleton) {\r\n    return (\r\n      <div class=\"status skeleton\">\r\n        <Avatar size=\"xxl\" />\r\n        <div class=\"container\">\r\n          <div class=\"meta\">███ ████████</div>\r\n          <div class=\"content-container\">\r\n            <div class=\"content\">\r\n              <p>████ ████████</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const { masto, instance, authenticated } = api({ instance: propInstance });\r\n  const { instance: currentInstance } = api();\r\n  const sameInstance = instance === currentInstance;\r\n\r\n  let sKey = statusKey(statusID || status?.id, instance);\r\n  const snapStates = useSnapshot(states);\r\n  if (!status) {\r\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\r\n    sKey = statusKey(status?.id, instance);\r\n  }\r\n  if (!status) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    account: {\r\n      acct,\r\n      avatar,\r\n      avatarStatic,\r\n      id: accountId,\r\n      url: accountURL,\r\n      displayName,\r\n      username,\r\n      emojis: accountEmojis,\r\n      bot,\r\n      group,\r\n    },\r\n    id,\r\n    repliesCount,\r\n    reblogged,\r\n    reblogsCount,\r\n    favourited,\r\n    favouritesCount,\r\n    bookmarked,\r\n    poll,\r\n    muted,\r\n    sensitive,\r\n    spoilerText,\r\n    visibility, // public, unlisted, private, direct\r\n    language,\r\n    editedAt,\r\n    filtered,\r\n    card,\r\n    createdAt,\r\n    inReplyToId,\r\n    inReplyToAccountId,\r\n    content,\r\n    mentions,\r\n    mediaAttachments,\r\n    reblog,\r\n    uri,\r\n    url,\r\n    emojis,\r\n    tags,\r\n    // Non-API props\r\n    _deleted,\r\n    _pinned,\r\n    // _filtered,\r\n  } = status;\r\n\r\n  const currentAccount = useMemo(() => {\r\n    return store.session.get('currentAccount');\r\n  }, []);\r\n  const isSelf = useMemo(() => {\r\n    return currentAccount && currentAccount === accountId;\r\n  }, [accountId, currentAccount]);\r\n\r\n  const filterContext = useContext(FilterContext);\r\n  const filterInfo =\r\n    !isSelf && !readOnly && !previewMode && isFiltered(filtered, filterContext);\r\n\r\n  if (filterInfo?.action === 'hide') {\r\n    return null;\r\n  }\r\n\r\n  console.debug('RENDER Status', id, status?.account.displayName, quoted);\r\n\r\n  const debugHover = (e) => {\r\n    if (e.shiftKey) {\r\n      console.log({\r\n        ...status,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (/*allowFilters && */ size !== 'l' && filterInfo) {\r\n    return (\r\n      <FilteredStatus\r\n        status={status}\r\n        filterInfo={filterInfo}\r\n        instance={instance}\r\n        containerProps={{\r\n          onMouseEnter: debugHover,\r\n        }}\r\n        showFollowedTags\r\n      />\r\n    );\r\n  }\r\n\r\n  const createdAtDate = new Date(createdAt);\r\n  const editedAtDate = new Date(editedAt);\r\n\r\n  let inReplyToAccountRef = mentions?.find(\r\n    (mention) => mention.id === inReplyToAccountId,\r\n  );\r\n  if (!inReplyToAccountRef && inReplyToAccountId === id) {\r\n    inReplyToAccountRef = { url: accountURL, username, displayName };\r\n  }\r\n  const [inReplyToAccount, setInReplyToAccount] = useState(inReplyToAccountRef);\r\n  if (!withinContext && !inReplyToAccount && inReplyToAccountId) {\r\n    const account = states.accounts[inReplyToAccountId];\r\n    if (account) {\r\n      setInReplyToAccount(account);\r\n    } else {\r\n      memFetchAccount(inReplyToAccountId, masto)\r\n        .then((account) => {\r\n          setInReplyToAccount(account);\r\n          states.accounts[account.id] = account;\r\n        })\r\n        .catch((e) => {});\r\n    }\r\n  }\r\n  const mentionSelf =\r\n    inReplyToAccountId === currentAccount ||\r\n    mentions?.find((mention) => mention.id === currentAccount);\r\n\r\n  const readingExpandSpoilers = useMemo(() => {\r\n    const prefs = store.account.get('preferences') || {};\r\n    return !!prefs['reading:expand:spoilers'];\r\n  }, []);\r\n  const readingExpandMedia = useMemo(() => {\r\n    // default | show_all | hide_all\r\n    // Ignore hide_all because it means hide *ALL* media including non-sensitive ones\r\n    const prefs = store.account.get('preferences') || {};\r\n    return prefs['reading:expand:media'] || 'default';\r\n  }, []);\r\n  // FOR TESTING:\r\n  // const readingExpandSpoilers = true;\r\n  // const readingExpandMedia = 'show_all';\r\n  const showSpoiler =\r\n    previewMode || readingExpandSpoilers || !!snapStates.spoilers[id];\r\n  const showSpoilerMedia =\r\n    previewMode ||\r\n    readingExpandMedia === 'show_all' ||\r\n    !!snapStates.spoilersMedia[id];\r\n\r\n  if (reblog) {\r\n    // If has statusID, means useItemID (cached in states)\r\n\r\n    if (group) {\r\n      return (\r\n        <div\r\n          data-state-post-id={sKey}\r\n          class=\"status-group\"\r\n          onMouseEnter={debugHover}\r\n        >\r\n          <div class=\"status-pre-meta\">\r\n            <Icon icon=\"group\" size=\"l\" alt=\"Group\" />{' '}\r\n            <NameText account={status.account} instance={instance} showAvatar />\r\n          </div>\r\n          <Status\r\n            status={statusID ? null : reblog}\r\n            statusID={statusID ? reblog.id : null}\r\n            instance={instance}\r\n            size={size}\r\n            contentTextWeight={contentTextWeight}\r\n            readOnly={readOnly}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        data-state-post-id={sKey}\r\n        class=\"status-reblog\"\r\n        onMouseEnter={debugHover}\r\n      >\r\n        <div class=\"status-pre-meta\">\r\n          <Icon icon=\"rocket\" size=\"l\" />{' '}\r\n          <NameText account={status.account} instance={instance} showAvatar />{' '}\r\n          <span>boosted</span>\r\n        </div>\r\n        <Status\r\n          status={statusID ? null : reblog}\r\n          statusID={statusID ? reblog.id : null}\r\n          instance={instance}\r\n          size={size}\r\n          contentTextWeight={contentTextWeight}\r\n          readOnly={readOnly}\r\n          enableCommentHint\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check followedTags\r\n  if (showFollowedTags && !!snapStates.statusFollowedTags[sKey]?.length) {\r\n    return (\r\n      <div\r\n        data-state-post-id={sKey}\r\n        class=\"status-followed-tags\"\r\n        onMouseEnter={debugHover}\r\n      >\r\n        <div class=\"status-pre-meta\">\r\n          <Icon icon=\"hashtag\" size=\"l\" />{' '}\r\n          {snapStates.statusFollowedTags[sKey].slice(0, 3).map((tag) => (\r\n            <Link\r\n              key={tag}\r\n              to={instance ? `/${instance}/t/${tag}` : `/t/${tag}`}\r\n              class=\"status-followed-tag-item\"\r\n            >\r\n              {tag}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n        <Status\r\n          status={statusID ? null : status}\r\n          statusID={statusID ? status.id : null}\r\n          instance={instance}\r\n          size={size}\r\n          contentTextWeight={contentTextWeight}\r\n          readOnly={readOnly}\r\n          enableCommentHint\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const isSizeLarge = size === 'l';\r\n\r\n  const [forceTranslate, setForceTranslate] = useState(_forceTranslate);\r\n  const targetLanguage = getTranslateTargetLanguage(true);\r\n  const contentTranslationHideLanguages =\r\n    snapStates.settings.contentTranslationHideLanguages || [];\r\n  const { contentTranslation, contentTranslationAutoInline } =\r\n    snapStates.settings;\r\n  if (!contentTranslation) enableTranslate = false;\r\n  const inlineTranslate = useMemo(() => {\r\n    if (\r\n      !contentTranslation ||\r\n      !contentTranslationAutoInline ||\r\n      readOnly ||\r\n      (withinContext && !isSizeLarge) ||\r\n      previewMode ||\r\n      spoilerText ||\r\n      sensitive ||\r\n      poll ||\r\n      card ||\r\n      mediaAttachments?.length\r\n    ) {\r\n      return false;\r\n    }\r\n    const contentLength = htmlContentLength(content);\r\n    return contentLength > 0 && contentLength <= INLINE_TRANSLATE_LIMIT;\r\n  }, [\r\n    contentTranslation,\r\n    contentTranslationAutoInline,\r\n    readOnly,\r\n    withinContext,\r\n    isSizeLarge,\r\n    previewMode,\r\n    spoilerText,\r\n    sensitive,\r\n    poll,\r\n    card,\r\n    mediaAttachments,\r\n    content,\r\n  ]);\r\n\r\n  const [showEdited, setShowEdited] = useState(false);\r\n\r\n  const spoilerContentRef = useTruncated();\r\n  const contentRef = useTruncated();\r\n  const mediaContainerRef = useTruncated();\r\n  const readMoreText = 'Read more →';\r\n\r\n  const statusRef = useRef(null);\r\n\r\n  const unauthInteractionErrorMessage = `Sorry, your current logged-in instance can't interact with this post from another instance.`;\r\n\r\n  const textWeight = useCallback(\r\n    () =>\r\n      Math.max(\r\n        Math.round((spoilerText.length + htmlContentLength(content)) / 140) ||\r\n          1,\r\n        1,\r\n      ),\r\n    [spoilerText, content],\r\n  );\r\n\r\n  const createdDateText = niceDateTime(createdAtDate);\r\n  const editedDateText = editedAt && niceDateTime(editedAtDate);\r\n\r\n  // Can boost if:\r\n  // - authenticated AND\r\n  // - visibility != direct OR\r\n  // - visibility = private AND isSelf\r\n  let canBoost =\r\n    authenticated && visibility !== 'direct' && visibility !== 'private';\r\n  if (visibility === 'private' && isSelf) {\r\n    canBoost = true;\r\n  }\r\n\r\n  const replyStatus = (e) => {\r\n    if (!sameInstance || !authenticated) {\r\n      return alert(unauthInteractionErrorMessage);\r\n    }\r\n    // syntheticEvent comes from MenuItem\r\n    if (e?.shiftKey || e?.syntheticEvent?.shiftKey) {\r\n      const newWin = openCompose({\r\n        replyToStatus: status,\r\n      });\r\n      if (newWin) return;\r\n    }\r\n    states.showCompose = {\r\n      replyToStatus: status,\r\n    };\r\n  };\r\n\r\n  // Check if media has no descriptions\r\n  const mediaNoDesc = useMemo(() => {\r\n    return mediaAttachments.some(\r\n      (attachment) => !attachment.description?.trim?.(),\r\n    );\r\n  }, [mediaAttachments]);\r\n  const boostStatus = async () => {\r\n    if (!sameInstance || !authenticated) {\r\n      alert(unauthInteractionErrorMessage);\r\n      return false;\r\n    }\r\n    try {\r\n      if (!reblogged) {\r\n        let confirmText = 'Boost this post?';\r\n        if (mediaNoDesc) {\r\n          confirmText += '\\n\\n⚠️ Some media have no descriptions.';\r\n        }\r\n        const yes = confirm(confirmText);\r\n        if (!yes) {\r\n          return false;\r\n        }\r\n      }\r\n      // Optimistic\r\n      states.statuses[sKey] = {\r\n        ...status,\r\n        reblogged: !reblogged,\r\n        reblogsCount: reblogsCount + (reblogged ? -1 : 1),\r\n      };\r\n      if (reblogged) {\r\n        const newStatus = await masto.v1.statuses.$select(id).unreblog();\r\n        saveStatus(newStatus, instance);\r\n        return true;\r\n      } else {\r\n        const newStatus = await masto.v1.statuses.$select(id).reblog();\r\n        saveStatus(newStatus, instance);\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      // Revert optimistism\r\n      states.statuses[sKey] = status;\r\n      return false;\r\n    }\r\n  };\r\n  const confirmBoostStatus = async () => {\r\n    if (!sameInstance || !authenticated) {\r\n      alert(unauthInteractionErrorMessage);\r\n      return false;\r\n    }\r\n    try {\r\n      // Optimistic\r\n      states.statuses[sKey] = {\r\n        ...status,\r\n        reblogged: !reblogged,\r\n        reblogsCount: reblogsCount + (reblogged ? -1 : 1),\r\n      };\r\n      if (reblogged) {\r\n        const newStatus = await masto.v1.statuses.$select(id).unreblog();\r\n        saveStatus(newStatus, instance);\r\n        return true;\r\n      } else {\r\n        const newStatus = await masto.v1.statuses.$select(id).reblog();\r\n        saveStatus(newStatus, instance);\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      // Revert optimistism\r\n      states.statuses[sKey] = status;\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const favouriteStatus = async () => {\r\n    if (!sameInstance || !authenticated) {\r\n      return alert(unauthInteractionErrorMessage);\r\n    }\r\n    try {\r\n      // Optimistic\r\n      states.statuses[sKey] = {\r\n        ...status,\r\n        favourited: !favourited,\r\n        favouritesCount: favouritesCount + (favourited ? -1 : 1),\r\n      };\r\n      if (favourited) {\r\n        const newStatus = await masto.v1.statuses.$select(id).unfavourite();\r\n        saveStatus(newStatus, instance);\r\n      } else {\r\n        const newStatus = await masto.v1.statuses.$select(id).favourite();\r\n        saveStatus(newStatus, instance);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      // Revert optimistism\r\n      states.statuses[sKey] = status;\r\n    }\r\n  };\r\n\r\n  const bookmarkStatus = async () => {\r\n    if (!sameInstance || !authenticated) {\r\n      return alert(unauthInteractionErrorMessage);\r\n    }\r\n    try {\r\n      // Optimistic\r\n      states.statuses[sKey] = {\r\n        ...status,\r\n        bookmarked: !bookmarked,\r\n      };\r\n      if (bookmarked) {\r\n        const newStatus = await masto.v1.statuses.$select(id).unbookmark();\r\n        saveStatus(newStatus, instance);\r\n      } else {\r\n        const newStatus = await masto.v1.statuses.$select(id).bookmark();\r\n        saveStatus(newStatus, instance);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      // Revert optimistism\r\n      states.statuses[sKey] = status;\r\n    }\r\n  };\r\n\r\n  const differentLanguage =\r\n    !!language &&\r\n    language !== targetLanguage &&\r\n    !localeMatch([language], [targetLanguage]) &&\r\n    !contentTranslationHideLanguages.find(\r\n      (l) => language === l || localeMatch([language], [l]),\r\n    );\r\n\r\n  const reblogIterator = useRef();\r\n  const favouriteIterator = useRef();\r\n  async function fetchBoostedLikedByAccounts(firstLoad) {\r\n    if (firstLoad) {\r\n      reblogIterator.current = masto.v1.statuses\r\n        .$select(statusID)\r\n        .rebloggedBy.list({\r\n          limit: REACTIONS_LIMIT,\r\n        });\r\n      favouriteIterator.current = masto.v1.statuses\r\n        .$select(statusID)\r\n        .favouritedBy.list({\r\n          limit: REACTIONS_LIMIT,\r\n        });\r\n    }\r\n    const [{ value: reblogResults }, { value: favouriteResults }] =\r\n      await Promise.allSettled([\r\n        reblogIterator.current.next(),\r\n        favouriteIterator.current.next(),\r\n      ]);\r\n    if (reblogResults.value?.length || favouriteResults.value?.length) {\r\n      const accounts = [];\r\n      if (reblogResults.value?.length) {\r\n        accounts.push(\r\n          ...reblogResults.value.map((a) => {\r\n            a._types = ['reblog'];\r\n            return a;\r\n          }),\r\n        );\r\n      }\r\n      if (favouriteResults.value?.length) {\r\n        accounts.push(\r\n          ...favouriteResults.value.map((a) => {\r\n            a._types = ['favourite'];\r\n            return a;\r\n          }),\r\n        );\r\n      }\r\n      return {\r\n        value: accounts,\r\n        done: reblogResults.done && favouriteResults.done,\r\n      };\r\n    }\r\n    return {\r\n      value: [],\r\n      done: true,\r\n    };\r\n  }\r\n\r\n  const menuInstanceRef = useRef();\r\n  const StatusMenuItems = (\r\n    <>\r\n      {!isSizeLarge && (\r\n        <>\r\n          <MenuHeader>\r\n            <span class=\"ib\">\r\n              <Icon icon={visibilityIconsMap[visibility]} size=\"s\" />{' '}\r\n              <span>{visibilityText[visibility]}</span>\r\n            </span>{' '}\r\n            <span class=\"ib\">\r\n              {repliesCount > 0 && (\r\n                <span>\r\n                  <Icon icon=\"comment2\" alt=\"Replies\" size=\"s\" />{' '}\r\n                  <span>{shortenNumber(repliesCount)}</span>\r\n                </span>\r\n              )}{' '}\r\n              {reblogsCount > 0 && (\r\n                <span>\r\n                  <Icon icon=\"rocket\" alt=\"Boosts\" size=\"s\" />{' '}\r\n                  <span>{shortenNumber(reblogsCount)}</span>\r\n                </span>\r\n              )}{' '}\r\n              {favouritesCount > 0 && (\r\n                <span>\r\n                  <Icon icon=\"heart\" alt=\"Likes\" size=\"s\" />{' '}\r\n                  <span>{shortenNumber(favouritesCount)}</span>\r\n                </span>\r\n              )}\r\n            </span>\r\n            <br />\r\n            {createdDateText}\r\n          </MenuHeader>\r\n          <MenuLink\r\n            to={instance ? `/${instance}/s/${id}` : `/s/${id}`}\r\n            onClick={(e) => {\r\n              onStatusLinkClick(e, status);\r\n            }}\r\n          >\r\n            <Icon icon=\"arrow-right\" />\r\n            <span>View post by @{username || acct}</span>\r\n          </MenuLink>\r\n        </>\r\n      )}\r\n      {!!editedAt && (\r\n        <MenuItem\r\n          onClick={() => {\r\n            setShowEdited(id);\r\n          }}\r\n        >\r\n          <Icon icon=\"history\" />\r\n          <span>\r\n            Show Edit History\r\n            <br />\r\n            <small class=\"more-insignificant\">Edited: {editedDateText}</small>\r\n          </span>\r\n        </MenuItem>\r\n      )}\r\n      {(!isSizeLarge || !!editedAt) && <MenuDivider />}\r\n      {isSizeLarge && (\r\n        <MenuItem\r\n          onClick={() => {\r\n            states.showGenericAccounts = {\r\n              heading: 'Boosted/Liked by…',\r\n              fetchAccounts: fetchBoostedLikedByAccounts,\r\n              instance,\r\n              showReactions: true,\r\n            };\r\n          }}\r\n        >\r\n          <Icon icon=\"react\" />\r\n          <span>\r\n            Boosted/Liked by<span class=\"more-insignificant\">…</span>\r\n          </span>\r\n        </MenuItem>\r\n      )}\r\n      {!isSizeLarge && sameInstance && (\r\n        <>\r\n          <div class=\"menu-horizontal\">\r\n            <MenuConfirm\r\n              subMenu\r\n              confirmLabel={\r\n                <>\r\n                  <Icon icon=\"rocket\" />\r\n                  <span>{reblogged ? 'Unboost?' : 'Boost to everyone?'}</span>\r\n                </>\r\n              }\r\n              menuFooter={\r\n                mediaNoDesc &&\r\n                !reblogged && (\r\n                  <div class=\"footer\">\r\n                    <Icon icon=\"alert\" />\r\n                    Some media have no descriptions.\r\n                  </div>\r\n                )\r\n              }\r\n              disabled={!canBoost}\r\n              onClick={async () => {\r\n                try {\r\n                  const done = await confirmBoostStatus();\r\n                  if (!isSizeLarge && done) {\r\n                    showToast(\r\n                      reblogged\r\n                        ? `Unboosted @${username || acct}'s post`\r\n                        : `Boosted @${username || acct}'s post`,\r\n                    );\r\n                  }\r\n                } catch (e) {}\r\n              }}\r\n            >\r\n              <Icon\r\n                icon=\"rocket\"\r\n                style={{\r\n                  color: reblogged && 'var(--reblog-color)',\r\n                }}\r\n              />\r\n              <span>{reblogged ? 'Unboost' : 'Boost…'}</span>\r\n            </MenuConfirm>\r\n            <MenuItem\r\n              onClick={() => {\r\n                try {\r\n                  favouriteStatus();\r\n                  if (!isSizeLarge) {\r\n                    showToast(\r\n                      favourited\r\n                        ? `Unliked @${username || acct}'s post`\r\n                        : `Liked @${username || acct}'s post`,\r\n                    );\r\n                  }\r\n                } catch (e) {}\r\n              }}\r\n            >\r\n              <Icon\r\n                icon=\"heart\"\r\n                style={{\r\n                  color: favourited && 'var(--favourite-color)',\r\n                }}\r\n              />\r\n              <span>{favourited ? 'Unlike' : 'Like'}</span>\r\n            </MenuItem>\r\n          </div>\r\n          <div class=\"menu-horizontal\">\r\n            <MenuItem onClick={replyStatus}>\r\n              <Icon icon=\"reply\" />\r\n              <span>Reply</span>\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={() => {\r\n                try {\r\n                  bookmarkStatus();\r\n                  if (!isSizeLarge) {\r\n                    showToast(\r\n                      bookmarked\r\n                        ? `Unbookmarked @${username || acct}'s post`\r\n                        : `Bookmarked @${username || acct}'s post`,\r\n                    );\r\n                  }\r\n                } catch (e) {}\r\n              }}\r\n            >\r\n              <Icon\r\n                icon=\"bookmark\"\r\n                style={{\r\n                  color: bookmarked && 'var(--link-color)',\r\n                }}\r\n              />\r\n              <span>{bookmarked ? 'Unbookmark' : 'Bookmark'}</span>\r\n            </MenuItem>\r\n          </div>\r\n        </>\r\n      )}\r\n      {enableTranslate ? (\r\n        <div class={supportsTTS ? 'menu-horizontal' : ''}>\r\n          <MenuItem\r\n            disabled={forceTranslate}\r\n            onClick={() => {\r\n              setForceTranslate(true);\r\n            }}\r\n          >\r\n            <Icon icon=\"translate\" />\r\n            <span>Translate</span>\r\n          </MenuItem>\r\n          {supportsTTS && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                const postText = getPostText(status);\r\n                if (postText) {\r\n                  speak(postText, language);\r\n                }\r\n              }}\r\n            >\r\n              <Icon icon=\"speak\" />\r\n              <span>Speak</span>\r\n            </MenuItem>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        (!language || differentLanguage) && (\r\n          <div class={supportsTTS ? 'menu-horizontal' : ''}>\r\n            <MenuLink\r\n              to={`${instance ? `/${instance}` : ''}/s/${id}?translate=1`}\r\n            >\r\n              <Icon icon=\"translate\" />\r\n              <span>Translate</span>\r\n            </MenuLink>\r\n            {supportsTTS && (\r\n              <MenuItem\r\n                onClick={() => {\r\n                  const postText = getPostText(status);\r\n                  if (postText) {\r\n                    speak(postText, language);\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"speak\" />\r\n                <span>Speak</span>\r\n              </MenuItem>\r\n            )}\r\n          </div>\r\n        )\r\n      )}\r\n      {((!isSizeLarge && sameInstance) || enableTranslate) && <MenuDivider />}\r\n      <MenuItem href={url} target=\"_blank\">\r\n        <Icon icon=\"external\" />\r\n        <small class=\"menu-double-lines\">{nicePostURL(url)}</small>\r\n      </MenuItem>\r\n      <div class=\"menu-horizontal\">\r\n        <MenuItem\r\n          onClick={() => {\r\n            // Copy url to clipboard\r\n            try {\r\n              navigator.clipboard.writeText(url);\r\n              showToast('Link copied');\r\n            } catch (e) {\r\n              console.error(e);\r\n              showToast('Unable to copy link');\r\n            }\r\n          }}\r\n        >\r\n          <Icon icon=\"link\" />\r\n          <span>Copy</span>\r\n        </MenuItem>\r\n        {navigator?.share &&\r\n          navigator?.canShare?.({\r\n            url,\r\n          }) && (\r\n            <MenuItem\r\n              onClick={() => {\r\n                try {\r\n                  navigator.share({\r\n                    url,\r\n                  });\r\n                } catch (e) {\r\n                  console.error(e);\r\n                  alert(\"Sharing doesn't seem to work.\");\r\n                }\r\n              }}\r\n            >\r\n              <Icon icon=\"share\" />\r\n              <span>Share…</span>\r\n            </MenuItem>\r\n          )}\r\n      </div>\r\n      {(isSelf || mentionSelf) && <MenuDivider />}\r\n      {(isSelf || mentionSelf) && (\r\n        <MenuItem\r\n          onClick={async () => {\r\n            try {\r\n              const newStatus = await masto.v1.statuses\r\n                .$select(id)\r\n                [muted ? 'unmute' : 'mute']();\r\n              saveStatus(newStatus, instance);\r\n              showToast(muted ? 'Conversation unmuted' : 'Conversation muted');\r\n            } catch (e) {\r\n              console.error(e);\r\n              showToast(\r\n                muted\r\n                  ? 'Unable to unmute conversation'\r\n                  : 'Unable to mute conversation',\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          {muted ? (\r\n            <>\r\n              <Icon icon=\"unmute\" />\r\n              <span>Unmute conversation</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Icon icon=\"mute\" />\r\n              <span>Mute conversation</span>\r\n            </>\r\n          )}\r\n        </MenuItem>\r\n      )}\r\n      {isSelf && (\r\n        <div class=\"menu-horizontal\">\r\n          <MenuItem\r\n            onClick={() => {\r\n              states.showCompose = {\r\n                editStatus: status,\r\n              };\r\n            }}\r\n          >\r\n            <Icon icon=\"pencil\" />\r\n            <span>Edit</span>\r\n          </MenuItem>\r\n          {isSizeLarge && (\r\n            <MenuConfirm\r\n              subMenu\r\n              confirmLabel={\r\n                <>\r\n                  <Icon icon=\"trash\" />\r\n                  <span>Delete this post?</span>\r\n                </>\r\n              }\r\n              menuItemClassName=\"danger\"\r\n              onClick={() => {\r\n                // const yes = confirm('Delete this post?');\r\n                // if (yes) {\r\n                (async () => {\r\n                  try {\r\n                    await masto.v1.statuses.$select(id).remove();\r\n                    const cachedStatus = getStatus(id, instance);\r\n                    cachedStatus._deleted = true;\r\n                    showToast('Deleted');\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                    showToast('Unable to delete');\r\n                  }\r\n                })();\r\n                // }\r\n              }}\r\n            >\r\n              <Icon icon=\"trash\" />\r\n              <span>Delete…</span>\r\n            </MenuConfirm>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  const contextMenuRef = useRef();\r\n  const [isContextMenuOpen, setIsContextMenuOpen] = useState(false);\r\n  const [contextMenuProps, setContextMenuProps] = useState({});\r\n\r\n  const showContextMenu = !isSizeLarge && !previewMode && !_deleted && !quoted;\r\n\r\n  // Only iOS/iPadOS browsers don't support contextmenu\r\n  // Some comments report iPadOS might support contextmenu if a mouse is connected\r\n  const bindLongPressContext = useLongPress(\r\n    isIOS && showContextMenu\r\n      ? (e) => {\r\n          if (e.pointerType === 'mouse') return;\r\n          // There's 'pen' too, but not sure if contextmenu event would trigger from a pen\r\n\r\n          const { clientX, clientY } = e.touches?.[0] || e;\r\n          // link detection copied from onContextMenu because here it works\r\n          const link = e.target.closest('a');\r\n          if (link && /^https?:\\/\\//.test(link.getAttribute('href'))) return;\r\n          e.preventDefault();\r\n          setContextMenuProps({\r\n            anchorPoint: {\r\n              x: clientX,\r\n              y: clientY,\r\n            },\r\n            direction: 'right',\r\n          });\r\n          setIsContextMenuOpen(true);\r\n        }\r\n      : null,\r\n    {\r\n      threshold: 600,\r\n      captureEvent: true,\r\n      detect: 'touch',\r\n      cancelOnMovement: 2, // true allows movement of up to 25 pixels\r\n    },\r\n  );\r\n\r\n  const hotkeysEnabled = !readOnly && !previewMode && !quoted;\r\n  const rRef = useHotkeys('r, shift+r', replyStatus, {\r\n    enabled: hotkeysEnabled,\r\n  });\r\n  const fRef = useHotkeys(\r\n    'f, l',\r\n    () => {\r\n      try {\r\n        favouriteStatus();\r\n        if (!isSizeLarge) {\r\n          showToast(\r\n            favourited\r\n              ? `Unliked @${username || acct}'s post`\r\n              : `Liked @${username || acct}'s post`,\r\n          );\r\n        }\r\n      } catch (e) {}\r\n    },\r\n    {\r\n      enabled: hotkeysEnabled,\r\n    },\r\n  );\r\n  const dRef = useHotkeys(\r\n    'd',\r\n    () => {\r\n      try {\r\n        bookmarkStatus();\r\n        if (!isSizeLarge) {\r\n          showToast(\r\n            bookmarked\r\n              ? `Unbookmarked @${username || acct}'s post`\r\n              : `Bookmarked @${username || acct}'s post`,\r\n          );\r\n        }\r\n      } catch (e) {}\r\n    },\r\n    {\r\n      enabled: hotkeysEnabled,\r\n    },\r\n  );\r\n  const bRef = useHotkeys(\r\n    'shift+b',\r\n    () => {\r\n      (async () => {\r\n        try {\r\n          const done = await confirmBoostStatus();\r\n          if (!isSizeLarge && done) {\r\n            showToast(\r\n              reblogged\r\n                ? `Unboosted @${username || acct}'s post`\r\n                : `Boosted @${username || acct}'s post`,\r\n            );\r\n          }\r\n        } catch (e) {}\r\n      })();\r\n    },\r\n    {\r\n      enabled: hotkeysEnabled && canBoost,\r\n    },\r\n  );\r\n  const xRef = useHotkeys('x', (e) => {\r\n    const activeStatus = document.activeElement.closest(\r\n      '.status-link, .status-focus',\r\n    );\r\n    if (activeStatus) {\r\n      const spoilerButton = activeStatus.querySelector(\r\n        '.spoiler-button:not(.spoiling)',\r\n      );\r\n      if (spoilerButton) {\r\n        e.stopPropagation();\r\n        spoilerButton.click();\r\n      } else {\r\n        const spoilerMediaButton = activeStatus.querySelector(\r\n          '.spoiler-media-button:not(.spoiling)',\r\n        );\r\n        if (spoilerMediaButton) {\r\n          e.stopPropagation();\r\n          spoilerMediaButton.click();\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const displayedMediaAttachments = mediaAttachments.slice(\r\n    0,\r\n    isSizeLarge ? undefined : 4,\r\n  );\r\n  const showMultipleMediaCaptions =\r\n    mediaAttachments.length > 1 &&\r\n    displayedMediaAttachments.some(\r\n      (media) => !!media.description && !isMediaCaptionLong(media.description),\r\n    );\r\n  const captionChildren = useMemo(() => {\r\n    if (!showMultipleMediaCaptions) return null;\r\n    const attachments = [];\r\n    displayedMediaAttachments.forEach((media, i) => {\r\n      if (!media.description) return;\r\n      const index = attachments.findIndex(\r\n        (attachment) => attachment.media.description === media.description,\r\n      );\r\n      if (index === -1) {\r\n        attachments.push({\r\n          media,\r\n          indices: [i],\r\n        });\r\n      } else {\r\n        attachments[index].indices.push(i);\r\n      }\r\n    });\r\n    return attachments.map(({ media, indices }) => (\r\n      <div\r\n        key={media.id}\r\n        data-caption-index={indices.map((i) => i + 1).join(' ')}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          states.showMediaAlt = {\r\n            alt: media.description,\r\n            lang: language,\r\n          };\r\n        }}\r\n        title={media.description}\r\n      >\r\n        <sup>{indices.map((i) => i + 1).join(' ')}</sup> {media.description}\r\n      </div>\r\n    ));\r\n\r\n    // return displayedMediaAttachments.map(\r\n    //   (media, i) =>\r\n    //     !!media.description && (\r\n    //       <div\r\n    //         key={media.id}\r\n    //         data-caption-index={i + 1}\r\n    //         onClick={(e) => {\r\n    //           e.preventDefault();\r\n    //           e.stopPropagation();\r\n    //           states.showMediaAlt = {\r\n    //             alt: media.description,\r\n    //             lang: language,\r\n    //           };\r\n    //         }}\r\n    //         title={media.description}\r\n    //       >\r\n    //         <sup>{i + 1}</sup> {media.description}\r\n    //       </div>\r\n    //     ),\r\n    // );\r\n  }, [showMultipleMediaCaptions, displayedMediaAttachments, language]);\r\n\r\n  const isThread = useMemo(() => {\r\n    return (\r\n      (!!inReplyToId && inReplyToAccountId === status.account?.id) ||\r\n      !!snapStates.statusThreadNumber[sKey]\r\n    );\r\n  }, [\r\n    inReplyToId,\r\n    inReplyToAccountId,\r\n    status.account?.id,\r\n    snapStates.statusThreadNumber[sKey],\r\n  ]);\r\n\r\n  const showCommentHint = useMemo(() => {\r\n    return (\r\n      enableCommentHint &&\r\n      !isThread &&\r\n      !withinContext &&\r\n      !inReplyToId &&\r\n      visibility === 'public' &&\r\n      repliesCount > 0\r\n    );\r\n  }, [\r\n    enableCommentHint,\r\n    isThread,\r\n    withinContext,\r\n    inReplyToId,\r\n    repliesCount,\r\n    visibility,\r\n  ]);\r\n  const showCommentCount = useMemo(() => {\r\n    if (\r\n      card ||\r\n      poll ||\r\n      sensitive ||\r\n      spoilerText ||\r\n      mediaAttachments?.length ||\r\n      isThread ||\r\n      withinContext ||\r\n      inReplyToId ||\r\n      repliesCount <= 0\r\n    ) {\r\n      return false;\r\n    }\r\n    const questionRegex = /[??？︖❓❔⁇⁈⁉¿‽؟]/;\r\n    const containsQuestion = questionRegex.test(content);\r\n    if (!containsQuestion) return false;\r\n    const contentLength = htmlContentLength(content);\r\n    if (contentLength > 0 && contentLength <= SHOW_COMMENT_COUNT_LIMIT) {\r\n      return true;\r\n    }\r\n  }, [\r\n    card,\r\n    poll,\r\n    sensitive,\r\n    spoilerText,\r\n    mediaAttachments,\r\n    reblog,\r\n    isThread,\r\n    withinContext,\r\n    inReplyToId,\r\n    repliesCount,\r\n    content,\r\n  ]);\r\n\r\n  return (\r\n    <article\r\n      data-state-post-id={sKey}\r\n      ref={(node) => {\r\n        statusRef.current = node;\r\n        // Use parent node if it's in focus\r\n        // Use case: <a><status /></a>\r\n        // When navigating (j/k), the <a> is focused instead of <status />\r\n        // Hotkey binding doesn't bubble up thus this hack\r\n        const nodeRef =\r\n          node?.closest?.(\r\n            '.timeline-item, .timeline-item-alt, .status-link, .status-focus',\r\n          ) || node;\r\n        rRef.current = nodeRef;\r\n        fRef.current = nodeRef;\r\n        dRef.current = nodeRef;\r\n        bRef.current = nodeRef;\r\n        xRef.current = nodeRef;\r\n      }}\r\n      tabindex=\"-1\"\r\n      class={`status ${\r\n        !withinContext && inReplyToId && inReplyToAccount\r\n          ? 'status-reply-to'\r\n          : ''\r\n      } visibility-${visibility} ${_pinned ? 'status-pinned' : ''} ${\r\n        {\r\n          s: 'small',\r\n          m: 'medium',\r\n          l: 'large',\r\n        }[size]\r\n      } ${_deleted ? 'status-deleted' : ''} ${quoted ? 'status-card' : ''}`}\r\n      onMouseEnter={debugHover}\r\n      onContextMenu={(e) => {\r\n        // FIXME: this code isn't getting called on Chrome at all?\r\n        if (!showContextMenu) return;\r\n        if (e.metaKey) return;\r\n        // console.log('context menu', e);\r\n        const link = e.target.closest('a');\r\n        if (link && /^https?:\\/\\//.test(link.getAttribute('href'))) return;\r\n        e.preventDefault();\r\n        setContextMenuProps({\r\n          anchorPoint: {\r\n            x: e.clientX,\r\n            y: e.clientY,\r\n          },\r\n          direction: 'right',\r\n        });\r\n        setIsContextMenuOpen(true);\r\n      }}\r\n      {...(showContextMenu ? bindLongPressContext() : {})}\r\n    >\r\n      {showContextMenu && (\r\n        <ControlledMenu\r\n          ref={contextMenuRef}\r\n          state={isContextMenuOpen ? 'open' : undefined}\r\n          {...contextMenuProps}\r\n          onClose={(e) => {\r\n            setIsContextMenuOpen(false);\r\n            // statusRef.current?.focus?.();\r\n            if (e?.reason === 'click') {\r\n              statusRef.current?.closest('[tabindex]')?.focus?.();\r\n            }\r\n          }}\r\n          portal={{\r\n            target: document.body,\r\n          }}\r\n          containerProps={{\r\n            style: {\r\n              // Higher than the backdrop\r\n              zIndex: 1001,\r\n            },\r\n            onClick: () => {\r\n              contextMenuRef.current?.closeMenu?.();\r\n            },\r\n          }}\r\n          overflow=\"auto\"\r\n          boundingBoxPadding={safeBoundingBoxPadding()}\r\n          unmountOnClose\r\n        >\r\n          {StatusMenuItems}\r\n        </ControlledMenu>\r\n      )}\r\n      {size !== 'l' && (\r\n        <div class=\"status-badge\">\r\n          {reblogged && <Icon class=\"reblog\" icon=\"rocket\" size=\"s\" />}\r\n          {favourited && <Icon class=\"favourite\" icon=\"heart\" size=\"s\" />}\r\n          {bookmarked && <Icon class=\"bookmark\" icon=\"bookmark\" size=\"s\" />}\r\n          {_pinned && <Icon class=\"pin\" icon=\"pin\" size=\"s\" />}\r\n        </div>\r\n      )}\r\n      {size !== 's' && (\r\n        <a\r\n          href={accountURL}\r\n          tabindex=\"-1\"\r\n          // target=\"_blank\"\r\n          title={`@${acct}`}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            states.showAccount = {\r\n              account: status.account,\r\n              instance,\r\n            };\r\n          }}\r\n        >\r\n          <Avatar url={avatarStatic || avatar} size=\"xxl\" squircle={bot} />\r\n        </a>\r\n      )}\r\n      <div class=\"container\">\r\n        <div class=\"meta\">\r\n          <span class=\"meta-name\">\r\n            <NameText\r\n              account={status.account}\r\n              instance={instance}\r\n              showAvatar={size === 's'}\r\n              showAcct={isSizeLarge}\r\n            />\r\n          </span>\r\n          {/* {inReplyToAccount && !withinContext && size !== 's' && (\r\n              <>\r\n                {' '}\r\n                <span class=\"ib\">\r\n                  <Icon icon=\"arrow-right\" class=\"arrow\" />{' '}\r\n                  <NameText account={inReplyToAccount} instance={instance} short />\r\n                </span>\r\n              </>\r\n            )} */}\r\n          {/* </span> */}{' '}\r\n          {size !== 'l' &&\r\n            (_deleted ? (\r\n              <span class=\"status-deleted-tag\">Deleted</span>\r\n            ) : url && !previewMode && !quoted ? (\r\n              <Link\r\n                to={instance ? `/${instance}/s/${id}` : `/s/${id}`}\r\n                onClick={(e) => {\r\n                  if (\r\n                    e.metaKey ||\r\n                    e.ctrlKey ||\r\n                    e.shiftKey ||\r\n                    e.altKey ||\r\n                    e.which === 2\r\n                  ) {\r\n                    return;\r\n                  }\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  onStatusLinkClick?.(e, status);\r\n                  setContextMenuProps({\r\n                    anchorRef: {\r\n                      current: e.currentTarget,\r\n                    },\r\n                    align: 'end',\r\n                    direction: 'bottom',\r\n                    gap: 4,\r\n                  });\r\n                  setIsContextMenuOpen(true);\r\n                }}\r\n                class={`time ${\r\n                  isContextMenuOpen && contextMenuProps?.anchorRef\r\n                    ? 'is-open'\r\n                    : ''\r\n                }`}\r\n              >\r\n                {showCommentHint && !showCommentCount ? (\r\n                  <Icon\r\n                    icon=\"comment2\"\r\n                    size=\"s\"\r\n                    alt={`${repliesCount} ${\r\n                      repliesCount === 1 ? 'reply' : 'replies'\r\n                    }`}\r\n                  />\r\n                ) : (\r\n                  <Icon\r\n                    icon={visibilityIconsMap[visibility]}\r\n                    alt={visibilityText[visibility]}\r\n                    size=\"s\"\r\n                  />\r\n                )}{' '}\r\n                <RelativeTime datetime={createdAtDate} format=\"micro\" />\r\n              </Link>\r\n            ) : (\r\n              // <Menu\r\n              //   instanceRef={menuInstanceRef}\r\n              //   portal={{\r\n              //     target: document.body,\r\n              //   }}\r\n              //   containerProps={{\r\n              //     style: {\r\n              //       // Higher than the backdrop\r\n              //       zIndex: 1001,\r\n              //     },\r\n              //     onClick: (e) => {\r\n              //       if (e.target === e.currentTarget)\r\n              //         menuInstanceRef.current?.closeMenu?.();\r\n              //     },\r\n              //   }}\r\n              //   align=\"end\"\r\n              //   gap={4}\r\n              //   overflow=\"auto\"\r\n              //   viewScroll=\"close\"\r\n              //   boundingBoxPadding=\"8 8 8 8\"\r\n              //   unmountOnClose\r\n              //   menuButton={({ open }) => (\r\n              //     <Link\r\n              //       to={instance ? `/${instance}/s/${id}` : `/s/${id}`}\r\n              //       onClick={(e) => {\r\n              //         e.preventDefault();\r\n              //         e.stopPropagation();\r\n              //         onStatusLinkClick?.(e, status);\r\n              //       }}\r\n              //       class={`time ${open ? 'is-open' : ''}`}\r\n              //     >\r\n              //       <Icon\r\n              //         icon={visibilityIconsMap[visibility]}\r\n              //         alt={visibilityText[visibility]}\r\n              //         size=\"s\"\r\n              //       />{' '}\r\n              //       <RelativeTime datetime={createdAtDate} format=\"micro\" />\r\n              //     </Link>\r\n              //   )}\r\n              // >\r\n              //   {StatusMenuItems}\r\n              // </Menu>\r\n              <span class=\"time\">\r\n                <Icon\r\n                  icon={visibilityIconsMap[visibility]}\r\n                  alt={visibilityText[visibility]}\r\n                  size=\"s\"\r\n                />{' '}\r\n                <RelativeTime datetime={createdAtDate} format=\"micro\" />\r\n              </span>\r\n            ))}\r\n        </div>\r\n        {visibility === 'direct' && (\r\n          <>\r\n            <div class=\"status-direct-badge\">Private mention</div>{' '}\r\n          </>\r\n        )}\r\n        {!withinContext && (\r\n          <>\r\n            {isThread ? (\r\n              <div class=\"status-thread-badge\">\r\n                <Icon icon=\"thread\" size=\"s\" />\r\n                Thread\r\n                {snapStates.statusThreadNumber[sKey]\r\n                  ? ` ${snapStates.statusThreadNumber[sKey]}/X`\r\n                  : ''}\r\n              </div>\r\n            ) : (\r\n              !!inReplyToId &&\r\n              !!inReplyToAccount &&\r\n              (!!spoilerText ||\r\n                !mentions.find((mention) => {\r\n                  return mention.id === inReplyToAccountId;\r\n                })) && (\r\n                <div class=\"status-reply-badge\">\r\n                  <Icon icon=\"reply\" />{' '}\r\n                  <NameText\r\n                    account={inReplyToAccount}\r\n                    instance={instance}\r\n                    short\r\n                  />\r\n                </div>\r\n              )\r\n            )}\r\n          </>\r\n        )}\r\n        <div\r\n          class={`content-container ${\r\n            spoilerText || sensitive ? 'has-spoiler' : ''\r\n          } ${showSpoiler ? 'show-spoiler' : ''} ${\r\n            showSpoilerMedia ? 'show-media' : ''\r\n          }`}\r\n          data-content-text-weight={contentTextWeight ? textWeight() : null}\r\n          style={\r\n            (isSizeLarge || contentTextWeight) && {\r\n              '--content-text-weight': textWeight(),\r\n            }\r\n          }\r\n        >\r\n          {!!spoilerText && (\r\n            <>\r\n              <div\r\n                class=\"content spoiler-content\"\r\n                lang={language}\r\n                dir=\"auto\"\r\n                ref={spoilerContentRef}\r\n                data-read-more={readMoreText}\r\n              >\r\n                <p>\r\n                  <EmojiText text={spoilerText} emojis={emojis} />\r\n                </p>\r\n              </div>\r\n              {readingExpandSpoilers || previewMode ? (\r\n                <div class=\"spoiler-divider\">\r\n                  <Icon icon=\"eye-open\" /> Content warning\r\n                </div>\r\n              ) : (\r\n                <button\r\n                  class={`light spoiler-button ${\r\n                    showSpoiler ? 'spoiling' : ''\r\n                  }`}\r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    if (showSpoiler) {\r\n                      delete states.spoilers[id];\r\n                      if (!readingExpandSpoilers) {\r\n                        delete states.spoilersMedia[id];\r\n                      }\r\n                    } else {\r\n                      states.spoilers[id] = true;\r\n                      if (!readingExpandSpoilers) {\r\n                        states.spoilersMedia[id] = true;\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  <Icon icon={showSpoiler ? 'eye-open' : 'eye-close'} />{' '}\r\n                  {showSpoiler ? 'Show less' : 'Show content'}\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n          {!!content && (\r\n            <div class=\"content\" ref={contentRef} data-read-more={readMoreText}>\r\n              <div\r\n                lang={language}\r\n                dir=\"auto\"\r\n                class=\"inner-content\"\r\n                onClick={handleContentLinks({\r\n                  mentions,\r\n                  instance,\r\n                  previewMode,\r\n                  statusURL: url,\r\n                })}\r\n                dangerouslySetInnerHTML={{\r\n                  __html: enhanceContent(content, {\r\n                    emojis,\r\n                    postEnhanceDOM: (dom) => {\r\n                      // Remove target=\"_blank\" from links\r\n                      dom\r\n                        .querySelectorAll('a.u-url[target=\"_blank\"]')\r\n                        .forEach((a) => {\r\n                          if (!/http/i.test(a.innerText.trim())) {\r\n                            a.removeAttribute('target');\r\n                          }\r\n                        });\r\n                      // if (previewMode) return;\r\n                      // Unfurl Mastodon links\r\n                      // Array.from(\r\n                      //   dom.querySelectorAll(\r\n                      //     'a[href]:not(.u-url):not(.mention):not(.hashtag)',\r\n                      //   ),\r\n                      // )\r\n                      //   .filter((a) => {\r\n                      //     const url = a.href;\r\n                      //     const isPostItself =\r\n                      //       url === status.url || url === status.uri;\r\n                      //     return !isPostItself && isMastodonLinkMaybe(url);\r\n                      //   })\r\n                      //   .forEach((a, i) => {\r\n                      //     unfurlMastodonLink(currentInstance, a.href).then(\r\n                      //       (result) => {\r\n                      //         if (!result) return;\r\n                      //         a.removeAttribute('target');\r\n                      //         if (!sKey) return;\r\n                      //         if (!Array.isArray(states.statusQuotes[sKey])) {\r\n                      //           states.statusQuotes[sKey] = [];\r\n                      //         }\r\n                      //         if (!states.statusQuotes[sKey][i]) {\r\n                      //           states.statusQuotes[sKey].splice(i, 0, result);\r\n                      //         }\r\n                      //       },\r\n                      //     );\r\n                      //   });\r\n                    },\r\n                  }),\r\n                }}\r\n              />\r\n              <QuoteStatuses id={id} instance={instance} level={quoted} />\r\n            </div>\r\n          )}\r\n          {!!poll && (\r\n            <Poll\r\n              lang={language}\r\n              poll={poll}\r\n              readOnly={readOnly || !sameInstance || !authenticated}\r\n              onUpdate={(newPoll) => {\r\n                states.statuses[sKey].poll = newPoll;\r\n              }}\r\n              refresh={() => {\r\n                return masto.v1.polls\r\n                  .$select(poll.id)\r\n                  .fetch()\r\n                  .then((pollResponse) => {\r\n                    states.statuses[sKey].poll = pollResponse;\r\n                  })\r\n                  .catch((e) => {}); // Silently fail\r\n              }}\r\n              votePoll={(choices) => {\r\n                return masto.v1.polls\r\n                  .$select(poll.id)\r\n                  .votes.create({\r\n                    choices,\r\n                  })\r\n                  .then((pollResponse) => {\r\n                    states.statuses[sKey].poll = pollResponse;\r\n                  })\r\n                  .catch((e) => {}); // Silently fail\r\n              }}\r\n            />\r\n          )}\r\n          {(((enableTranslate || inlineTranslate) &&\r\n            !!content.trim() &&\r\n            !!getHTMLText(emojifyText(content, emojis)) &&\r\n            differentLanguage) ||\r\n            forceTranslate) && (\r\n            <TranslationBlock\r\n              forceTranslate={forceTranslate || inlineTranslate}\r\n              mini={!isSizeLarge && !withinContext}\r\n              sourceLanguage={language}\r\n              text={getPostText(status)}\r\n            />\r\n          )}\r\n          {!previewMode &&\r\n            sensitive &&\r\n            !!mediaAttachments.length &&\r\n            readingExpandMedia !== 'show_all' && (\r\n              <button\r\n                class={`plain spoiler-media-button ${\r\n                  showSpoilerMedia ? 'spoiling' : ''\r\n                }`}\r\n                type=\"button\"\r\n                hidden={!readingExpandSpoilers && !!spoilerText}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  if (showSpoilerMedia) {\r\n                    delete states.spoilersMedia[id];\r\n                  } else {\r\n                    states.spoilersMedia[id] = true;\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon={showSpoilerMedia ? 'eye-open' : 'eye-close'} />{' '}\r\n                {showSpoilerMedia ? 'Show less' : 'Show media'}\r\n              </button>\r\n            )}\r\n          {!!mediaAttachments.length && (\r\n            <MultipleMediaFigure\r\n              lang={language}\r\n              enabled={showMultipleMediaCaptions}\r\n              captionChildren={captionChildren}\r\n            >\r\n              <div\r\n                ref={mediaContainerRef}\r\n                class={`media-container media-eq${mediaAttachments.length} ${\r\n                  mediaAttachments.length > 2 ? 'media-gt2' : ''\r\n                } ${mediaAttachments.length > 4 ? 'media-gt4' : ''}`}\r\n              >\r\n                {displayedMediaAttachments.map((media, i) => (\r\n                  <Media\r\n                    key={media.id}\r\n                    media={media}\r\n                    autoAnimate={isSizeLarge}\r\n                    showCaption={mediaAttachments.length === 1}\r\n                    lang={language}\r\n                    altIndex={\r\n                      showMultipleMediaCaptions && !!media.description && i + 1\r\n                    }\r\n                    to={`/${instance}/s/${id}?${\r\n                      withinContext ? 'media' : 'media-only'\r\n                    }=${i + 1}`}\r\n                    onClick={\r\n                      onMediaClick\r\n                        ? (e) => {\r\n                            onMediaClick(e, i, media, status);\r\n                          }\r\n                        : undefined\r\n                    }\r\n                  />\r\n                ))}\r\n              </div>\r\n            </MultipleMediaFigure>\r\n          )}\r\n          {!!card &&\r\n            /^https/i.test(card?.url) &&\r\n            !sensitive &&\r\n            !spoilerText &&\r\n            !poll &&\r\n            !mediaAttachments.length &&\r\n            !snapStates.statusQuotes[sKey] && (\r\n              <Card\r\n                card={card}\r\n                selfReferential={\r\n                  card?.url === status.url || card?.url === status.uri\r\n                }\r\n                instance={currentInstance}\r\n              />\r\n            )}\r\n        </div>\r\n        {!isSizeLarge && showCommentCount && (\r\n          <div class=\"content-comment-hint insignificant\">\r\n            <Icon icon=\"comment2\" alt=\"Replies\" /> {repliesCount}\r\n          </div>\r\n        )}\r\n        {isSizeLarge && (\r\n          <>\r\n            <div class=\"extra-meta\">\r\n              {_deleted ? (\r\n                <span class=\"status-deleted-tag\">Deleted</span>\r\n              ) : (\r\n                <>\r\n                  <Icon\r\n                    icon={visibilityIconsMap[visibility]}\r\n                    alt={visibilityText[visibility]}\r\n                  />{' '}\r\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <time\r\n                      class=\"created\"\r\n                      datetime={createdAtDate.toISOString()}\r\n                      title={createdAtDate.toLocaleString()}\r\n                    >\r\n                      {createdDateText}\r\n                    </time>\r\n                  </a>\r\n                  {editedAt && (\r\n                    <>\r\n                      {' '}\r\n                      &bull; <Icon icon=\"pencil\" alt=\"Edited\" />{' '}\r\n                      <time\r\n                        tabIndex=\"0\"\r\n                        class=\"edited\"\r\n                        datetime={editedAtDate.toISOString()}\r\n                        onClick={() => {\r\n                          setShowEdited(id);\r\n                        }}\r\n                      >\r\n                        {editedDateText}\r\n                      </time>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n            <div class={`actions ${_deleted ? 'disabled' : ''}`}>\r\n              <div class=\"action has-count\">\r\n                <StatusButton\r\n                  title=\"Reply\"\r\n                  alt=\"Comments\"\r\n                  class=\"reply-button\"\r\n                  icon=\"comment\"\r\n                  count={repliesCount}\r\n                  onClick={replyStatus}\r\n                />\r\n              </div>\r\n              {/* <div class=\"action has-count\">\r\n                <StatusButton\r\n                  checked={reblogged}\r\n                  title={['Boost', 'Unboost']}\r\n                  alt={['Boost', 'Boosted']}\r\n                  class=\"reblog-button\"\r\n                  icon=\"rocket\"\r\n                  count={reblogsCount}\r\n                  onClick={boostStatus}\r\n                  disabled={!canBoost}\r\n                />\r\n              </div> */}\r\n              <MenuConfirm\r\n                disabled={!canBoost}\r\n                onClick={confirmBoostStatus}\r\n                confirmLabel={\r\n                  <>\r\n                    <Icon icon=\"rocket\" />\r\n                    <span>{reblogged ? 'Unboost?' : 'Boost to everyone?'}</span>\r\n                  </>\r\n                }\r\n                menuFooter={\r\n                  mediaNoDesc &&\r\n                  !reblogged && (\r\n                    <div class=\"footer\">\r\n                      <Icon icon=\"alert\" />\r\n                      Some media have no descriptions.\r\n                    </div>\r\n                  )\r\n                }\r\n              >\r\n                <div class=\"action has-count\">\r\n                  <StatusButton\r\n                    checked={reblogged}\r\n                    title={['Boost', 'Unboost']}\r\n                    alt={['Boost', 'Boosted']}\r\n                    class=\"reblog-button\"\r\n                    icon=\"rocket\"\r\n                    count={reblogsCount}\r\n                    // onClick={boostStatus}\r\n                    disabled={!canBoost}\r\n                  />\r\n                </div>\r\n              </MenuConfirm>\r\n              <div class=\"action has-count\">\r\n                <StatusButton\r\n                  checked={favourited}\r\n                  title={['Like', 'Unlike']}\r\n                  alt={['Like', 'Liked']}\r\n                  class=\"favourite-button\"\r\n                  icon=\"heart\"\r\n                  count={favouritesCount}\r\n                  onClick={favouriteStatus}\r\n                />\r\n              </div>\r\n              <div class=\"action\">\r\n                <StatusButton\r\n                  checked={bookmarked}\r\n                  title={['Bookmark', 'Unbookmark']}\r\n                  alt={['Bookmark', 'Bookmarked']}\r\n                  class=\"bookmark-button\"\r\n                  icon=\"bookmark\"\r\n                  onClick={bookmarkStatus}\r\n                />\r\n              </div>\r\n              <Menu2\r\n                portal={{\r\n                  target:\r\n                    document.querySelector('.status-deck') || document.body,\r\n                }}\r\n                align=\"end\"\r\n                gap={4}\r\n                overflow=\"auto\"\r\n                viewScroll=\"close\"\r\n                menuButton={\r\n                  <div class=\"action\">\r\n                    <button\r\n                      type=\"button\"\r\n                      title=\"More\"\r\n                      class=\"plain more-button\"\r\n                    >\r\n                      <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n                    </button>\r\n                  </div>\r\n                }\r\n              >\r\n                {StatusMenuItems}\r\n              </Menu2>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      {!!showEdited && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowEdited(false);\r\n              // statusRef.current?.focus();\r\n            }\r\n          }}\r\n        >\r\n          <EditedAtModal\r\n            statusID={showEdited}\r\n            instance={instance}\r\n            fetchStatusHistory={() => {\r\n              return masto.v1.statuses.$select(showEdited).history.list();\r\n            }}\r\n            onClose={() => {\r\n              setShowEdited(false);\r\n              statusRef.current?.focus();\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </article>\r\n  );\r\n}\r\n\r\nfunction MultipleMediaFigure(props) {\r\n  const { enabled, children, lang, captionChildren } = props;\r\n  if (!enabled || !captionChildren) return children;\r\n  return (\r\n    <figure class=\"media-figure-multiple\">\r\n      {children}\r\n      <figcaption lang={lang} dir=\"auto\">\r\n        {captionChildren}\r\n      </figcaption>\r\n    </figure>\r\n  );\r\n}\r\n\r\nfunction Card({ card, selfReferential, instance }) {\r\n  const snapStates = useSnapshot(states);\r\n  const {\r\n    blurhash,\r\n    title,\r\n    description,\r\n    html,\r\n    providerName,\r\n    providerUrl,\r\n    authorName,\r\n    authorUrl,\r\n    width,\r\n    height,\r\n    image,\r\n    imageDescription,\r\n    url,\r\n    type,\r\n    embedUrl,\r\n    language,\r\n    publishedAt,\r\n  } = card;\r\n\r\n  /* type\r\n  link = Link OEmbed\r\n  photo = Photo OEmbed\r\n  video = Video OEmbed\r\n  rich = iframe OEmbed. Not currently accepted, so won’t show up in practice.\r\n  */\r\n\r\n  const hasText = title || providerName || authorName;\r\n  const isLandscape = width / height >= 1.2;\r\n  const size = isLandscape ? 'large' : '';\r\n\r\n  const [cardStatusURL, setCardStatusURL] = useState(null);\r\n  // const [cardStatusID, setCardStatusID] = useState(null);\r\n  useEffect(() => {\r\n    if (hasText && image && !selfReferential && isMastodonLinkMaybe(url)) {\r\n      unfurlMastodonLink(instance, url).then((result) => {\r\n        if (!result) return;\r\n        const { id, url } = result;\r\n        setCardStatusURL('#' + url);\r\n\r\n        // NOTE: This is for quote post\r\n        // (async () => {\r\n        //   const { masto } = api({ instance });\r\n        //   const status = await masto.v1.statuses.$select(id).fetch();\r\n        //   saveStatus(status, instance);\r\n        //   setCardStatusID(id);\r\n        // })();\r\n      });\r\n    }\r\n  }, [hasText, image, selfReferential]);\r\n\r\n  // if (cardStatusID) {\r\n  //   return (\r\n  //     <Status statusID={cardStatusID} instance={instance} size=\"s\" readOnly />\r\n  //   );\r\n  // }\r\n\r\n  if (snapStates.unfurledLinks[url]) return null;\r\n\r\n  const hasIframeHTML = /<iframe/i.test(html);\r\n  const handleClick = useCallback(\r\n    (e) => {\r\n      if (hasIframeHTML) {\r\n        e.preventDefault();\r\n        states.showEmbedModal = {\r\n          html,\r\n          url: url || embedUrl,\r\n        };\r\n      }\r\n    },\r\n    [hasIframeHTML],\r\n  );\r\n\r\n  if (hasText && (image || (type === 'photo' && blurhash))) {\r\n    const domain = new URL(url).hostname\r\n      .replace(/^www\\./, '')\r\n      .replace(/\\/$/, '');\r\n    let blurhashImage;\r\n    const rgbAverageColor =\r\n      image && blurhash ? getBlurHashAverageColor(blurhash) : null;\r\n    if (!image) {\r\n      const w = 44;\r\n      const h = 44;\r\n      const blurhashPixels = decodeBlurHash(blurhash, w, h);\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = w;\r\n      canvas.height = h;\r\n      const ctx = canvas.getContext('2d');\r\n      const imageData = ctx.createImageData(w, h);\r\n      imageData.data.set(blurhashPixels);\r\n      ctx.putImageData(imageData, 0, 0);\r\n      blurhashImage = canvas.toDataURL();\r\n    }\r\n    return (\r\n      <a\r\n        href={cardStatusURL || url}\r\n        target={cardStatusURL ? null : '_blank'}\r\n        rel=\"nofollow noopener noreferrer\"\r\n        class={`card link ${blurhashImage ? '' : size}`}\r\n        lang={language}\r\n        dir=\"auto\"\r\n        style={{\r\n          '--average-color':\r\n            rgbAverageColor && `rgb(${rgbAverageColor.join(',')})`,\r\n        }}\r\n        onClick={handleClick}\r\n      >\r\n        <div class=\"card-image\">\r\n          <img\r\n            src={image || blurhashImage}\r\n            width={width}\r\n            height={height}\r\n            loading=\"lazy\"\r\n            alt={imageDescription || ''}\r\n            onError={(e) => {\r\n              try {\r\n                e.target.style.display = 'none';\r\n              } catch (e) {}\r\n            }}\r\n          />\r\n        </div>\r\n        <div class=\"meta-container\">\r\n          <p class=\"meta domain\" dir=\"auto\">\r\n            {domain}\r\n          </p>\r\n          <p class=\"title\" dir=\"auto\">\r\n            {title}\r\n          </p>\r\n          <p class=\"meta\" dir=\"auto\">\r\n            {description ||\r\n              (!!publishedAt && (\r\n                <RelativeTime datetime={publishedAt} format=\"micro\" />\r\n              ))}\r\n          </p>\r\n        </div>\r\n      </a>\r\n    );\r\n  } else if (type === 'photo') {\r\n    return (\r\n      <a\r\n        href={url}\r\n        target=\"_blank\"\r\n        rel=\"nofollow noopener noreferrer\"\r\n        class=\"card photo\"\r\n        onClick={handleClick}\r\n      >\r\n        <img\r\n          src={embedUrl}\r\n          width={width}\r\n          height={height}\r\n          alt={title || description}\r\n          loading=\"lazy\"\r\n          style={{\r\n            height: 'auto',\r\n            aspectRatio: `${width}/${height}`,\r\n          }}\r\n        />\r\n      </a>\r\n    );\r\n  } else {\r\n    if (type === 'video') {\r\n      if (/youtube/i.test(providerName)) {\r\n        // Get ID from e.g. https://www.youtube.com/watch?v=[VIDEO_ID]\r\n        const videoID = url.match(/watch\\?v=([^&]+)/)?.[1];\r\n        if (videoID) {\r\n          return <lite-youtube videoid={videoID} nocookie></lite-youtube>;\r\n        }\r\n      }\r\n      // return (\r\n      //   <div\r\n      //     class=\"card video\"\r\n      //     style={{\r\n      //       aspectRatio: `${width}/${height}`,\r\n      //     }}\r\n      //     dangerouslySetInnerHTML={{ __html: html }}\r\n      //   />\r\n      // );\r\n    }\r\n    if (hasText && !image) {\r\n      const domain = new URL(url).hostname.replace(/^www\\./, '');\r\n      return (\r\n        <a\r\n          href={cardStatusURL || url}\r\n          target={cardStatusURL ? null : '_blank'}\r\n          rel=\"nofollow noopener noreferrer\"\r\n          class={`card link no-image`}\r\n          lang={language}\r\n          onClick={handleClick}\r\n        >\r\n          <div class=\"meta-container\">\r\n            <p class=\"meta domain\">\r\n              <Icon icon=\"link\" size=\"s\" /> <span>{domain}</span>\r\n            </p>\r\n            <p class=\"title\">{title}</p>\r\n            <p class=\"meta\">{description || providerName || authorName}</p>\r\n          </div>\r\n        </a>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction EditedAtModal({\r\n  statusID,\r\n  instance,\r\n  fetchStatusHistory = () => {},\r\n  onClose,\r\n}) {\r\n  const [uiState, setUIState] = useState('default');\r\n  const [editHistory, setEditHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const editHistory = await fetchStatusHistory();\r\n        console.log(editHistory);\r\n        setEditHistory(editHistory);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        console.error(e);\r\n        setUIState('error');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"edit-history\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <h2>Edit History</h2>\r\n        {uiState === 'error' && <p>Failed to load history</p>}\r\n        {uiState === 'loading' && (\r\n          <p>\r\n            <Loader abrupt /> Loading&hellip;\r\n          </p>\r\n        )}\r\n      </header>\r\n      <main tabIndex=\"-1\">\r\n        {editHistory.length > 0 && (\r\n          <ol>\r\n            {editHistory.map((status) => {\r\n              const { createdAt } = status;\r\n              const createdAtDate = new Date(createdAt);\r\n              return (\r\n                <li key={createdAt} class=\"history-item\">\r\n                  <h3>\r\n                    <time>\r\n                      {niceDateTime(createdAtDate, {\r\n                        formatOpts: {\r\n                          weekday: 'short',\r\n                          second: 'numeric',\r\n                        },\r\n                      })}\r\n                    </time>\r\n                  </h3>\r\n                  <Status\r\n                    status={status}\r\n                    instance={instance}\r\n                    size=\"s\"\r\n                    withinContext\r\n                    readOnly\r\n                    previewMode\r\n                  />\r\n                </li>\r\n              );\r\n            })}\r\n          </ol>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StatusButton({\r\n  checked,\r\n  count,\r\n  class: className,\r\n  title,\r\n  alt,\r\n  icon,\r\n  onClick,\r\n  ...props\r\n}) {\r\n  if (typeof title === 'string') {\r\n    title = [title, title];\r\n  }\r\n  if (typeof alt === 'string') {\r\n    alt = [alt, alt];\r\n  }\r\n\r\n  const [buttonTitle, setButtonTitle] = useState(title[0] || '');\r\n  const [iconAlt, setIconAlt] = useState(alt[0] || '');\r\n\r\n  useEffect(() => {\r\n    if (checked) {\r\n      setButtonTitle(title[1] || '');\r\n      setIconAlt(alt[1] || '');\r\n    } else {\r\n      setButtonTitle(title[0] || '');\r\n      setIconAlt(alt[0] || '');\r\n    }\r\n  }, [checked, title, alt]);\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      title={buttonTitle}\r\n      class={`plain ${className} ${checked ? 'checked' : ''}`}\r\n      onClick={(e) => {\r\n        if (!onClick) return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onClick(e);\r\n      }}\r\n      {...props}\r\n    >\r\n      <Icon icon={icon} size=\"l\" alt={iconAlt} />\r\n      {!!count && (\r\n        <>\r\n          {' '}\r\n          <small title={count}>{shortenNumber(count)}</small>\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function formatDuration(time) {\r\n  if (!time) return;\r\n  let hours = Math.floor(time / 3600);\r\n  let minutes = Math.floor((time % 3600) / 60);\r\n  let seconds = Math.round(time % 60);\r\n\r\n  if (hours === 0) {\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  } else {\r\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds\r\n      .toString()\r\n      .padStart(2, '0')}`;\r\n  }\r\n}\r\n\r\nfunction nicePostURL(url) {\r\n  if (!url) return;\r\n  const urlObj = new URL(url);\r\n  const { host, pathname } = urlObj;\r\n  const path = pathname.replace(/\\/$/, '');\r\n  // split only first slash\r\n  const [_, username, restPath] = path.match(/\\/(@[^\\/]+)\\/(.*)/) || [];\r\n  return (\r\n    <>\r\n      {host}\r\n      {username ? (\r\n        <>\r\n          /{username}\r\n          <wbr />\r\n          <span class=\"more-insignificant\">/{restPath}</span>\r\n        </>\r\n      ) : (\r\n        <span class=\"more-insignificant\">{path}</span>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction FilteredStatus({\r\n  status,\r\n  filterInfo,\r\n  instance,\r\n  containerProps = {},\r\n  showFollowedTags,\r\n}) {\r\n  const snapStates = useSnapshot(states);\r\n  const {\r\n    id: statusID,\r\n    account: { avatar, avatarStatic, bot, group },\r\n    createdAt,\r\n    visibility,\r\n    reblog,\r\n  } = status;\r\n  const isReblog = !!reblog;\r\n  const filterTitleStr = filterInfo?.titlesStr || '';\r\n  const createdAtDate = new Date(createdAt);\r\n  const statusPeekText = statusPeek(status.reblog || status);\r\n\r\n  const [showPeek, setShowPeek] = useState(false);\r\n  const bindLongPressPeek = useLongPress(\r\n    () => {\r\n      setShowPeek(true);\r\n    },\r\n    {\r\n      threshold: 600,\r\n      captureEvent: true,\r\n      detect: 'touch',\r\n      cancelOnMovement: 2, // true allows movement of up to 25 pixels\r\n    },\r\n  );\r\n\r\n  const statusPeekRef = useTruncated();\r\n  const sKey = statusKey(status.id, instance);\r\n  const ssKey =\r\n    statusKey(status.id, instance) +\r\n    ' ' +\r\n    (statusKey(reblog?.id, instance) || '');\r\n\r\n  const actualStatusID = reblog?.id || statusID;\r\n  const url = instance\r\n    ? `/${instance}/s/${actualStatusID}`\r\n    : `/s/${actualStatusID}`;\r\n  const isFollowedTags =\r\n    showFollowedTags && !!snapStates.statusFollowedTags[sKey]?.length;\r\n\r\n  return (\r\n    <div\r\n      class={\r\n        isReblog\r\n          ? group\r\n            ? 'status-group'\r\n            : 'status-reblog'\r\n          : isFollowedTags\r\n          ? 'status-followed-tags'\r\n          : ''\r\n      }\r\n      {...containerProps}\r\n      title={statusPeekText}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        setShowPeek(true);\r\n      }}\r\n      {...bindLongPressPeek()}\r\n    >\r\n      <article data-state-post-id={ssKey} class=\"status filtered\" tabindex=\"-1\">\r\n        <b\r\n          class=\"status-filtered-badge clickable badge-meta\"\r\n          title={filterTitleStr}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            setShowPeek(true);\r\n          }}\r\n        >\r\n          <span>Filtered</span>\r\n          <span>{filterTitleStr}</span>\r\n        </b>{' '}\r\n        <Avatar url={avatarStatic || avatar} squircle={bot} />\r\n        <span class=\"status-filtered-info\">\r\n          <span class=\"status-filtered-info-1\">\r\n            <NameText account={status.account} instance={instance} />{' '}\r\n            <Icon\r\n              icon={visibilityIconsMap[visibility]}\r\n              alt={visibilityText[visibility]}\r\n              size=\"s\"\r\n            />{' '}\r\n            {isReblog ? (\r\n              'boosted'\r\n            ) : isFollowedTags ? (\r\n              <span>\r\n                {snapStates.statusFollowedTags[sKey].slice(0, 3).map((tag) => (\r\n                  <span key={tag} class=\"status-followed-tag-item\">\r\n                    #{tag}\r\n                  </span>\r\n                ))}\r\n              </span>\r\n            ) : (\r\n              <RelativeTime datetime={createdAtDate} format=\"micro\" />\r\n            )}\r\n          </span>\r\n          <span class=\"status-filtered-info-2\">\r\n            {isReblog && (\r\n              <>\r\n                <Avatar\r\n                  url={reblog.account.avatarStatic || reblog.account.avatar}\r\n                  squircle={bot}\r\n                />{' '}\r\n              </>\r\n            )}\r\n            {statusPeekText}\r\n          </span>\r\n        </span>\r\n      </article>\r\n      {!!showPeek && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowPeek(false);\r\n            }\r\n          }}\r\n        >\r\n          <div id=\"filtered-status-peek\" class=\"sheet\">\r\n            <button\r\n              type=\"button\"\r\n              class=\"sheet-close\"\r\n              onClick={() => setShowPeek(false)}\r\n            >\r\n              <Icon icon=\"x\" />\r\n            </button>\r\n            <header>\r\n              <b class=\"status-filtered-badge\">Filtered</b> {filterTitleStr}\r\n            </header>\r\n            <main tabIndex=\"-1\">\r\n              <Link\r\n                ref={statusPeekRef}\r\n                class=\"status-link\"\r\n                to={url}\r\n                onClick={() => {\r\n                  setShowPeek(false);\r\n                }}\r\n                data-read-more=\"Read more →\"\r\n              >\r\n                <Status status={status} instance={instance} size=\"s\" readOnly />\r\n              </Link>\r\n            </main>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst QuoteStatuses = memo(({ id, instance, level = 0 }) => {\r\n  if (!id || !instance) return;\r\n  const snapStates = useSnapshot(states);\r\n  const sKey = statusKey(id, instance);\r\n  const quotes = snapStates.statusQuotes[sKey];\r\n  const uniqueQuotes = quotes?.filter(\r\n    (q, i, arr) => arr.findIndex((q2) => q2.url === q.url) === i,\r\n  );\r\n\r\n  if (!uniqueQuotes?.length) return;\r\n  if (level > 2) return;\r\n\r\n  return uniqueQuotes.map((q) => {\r\n    return (\r\n      <Link\r\n        key={q.instance + q.id}\r\n        to={`${q.instance ? `/${q.instance}` : ''}/s/${q.id}`}\r\n        class=\"status-card-link\"\r\n        data-read-more=\"Read more →\"\r\n      >\r\n        <Status\r\n          statusID={q.id}\r\n          instance={q.instance}\r\n          size=\"s\"\r\n          quoted={level + 1}\r\n          enableCommentHint\r\n        />\r\n      </Link>\r\n    );\r\n  });\r\n});\r\n\r\nexport default memo(Status, (oldProps, newProps) => {\r\n  // Shallow equal all props except 'status'\r\n  // This will be pure static until status ID changes\r\n  const { status, ...restOldProps } = oldProps;\r\n  const { status: newStatus, ...restNewProps } = newProps;\r\n  return (\r\n    status?.id === newStatus?.id && shallowEqual(restOldProps, restNewProps)\r\n  );\r\n});\r\n","import './compose.css';\r\n\r\nimport '@github/text-expander-element';\r\nimport { MenuItem } from '@szhsin/react-menu';\r\nimport { deepEqual } from 'fast-equals';\r\nimport { forwardRef } from 'preact/compat';\r\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport { substring } from 'runes2';\r\nimport stringLength from 'string-length';\r\nimport { uid } from 'uid/single';\r\nimport { useDebouncedCallback, useThrottledCallback } from 'use-debounce';\r\nimport { useSnapshot } from 'valtio';\r\n\r\nimport Menu2 from '../components/menu2';\r\nimport supportedLanguages from '../data/status-supported-languages';\r\nimport urlRegex from '../data/url-regex';\r\nimport { api } from '../utils/api';\r\nimport db from '../utils/db';\r\nimport emojifyText from '../utils/emojify-text';\r\nimport localeMatch from '../utils/locale-match';\r\nimport openCompose from '../utils/open-compose';\r\nimport shortenNumber from '../utils/shorten-number';\r\nimport showToast from '../utils/show-toast';\r\nimport states, { saveStatus } from '../utils/states';\r\nimport store from '../utils/store';\r\nimport {\r\n  getCurrentAccount,\r\n  getCurrentAccountNS,\r\n  getCurrentInstance,\r\n  getCurrentInstanceConfiguration,\r\n} from '../utils/store-utils';\r\nimport supports from '../utils/supports';\r\nimport useCloseWatcher from '../utils/useCloseWatcher';\r\nimport useInterval from '../utils/useInterval';\r\nimport visibilityIconsMap from '../utils/visibility-icons-map';\r\n\r\nimport AccountBlock from './account-block';\r\n// import Avatar from './avatar';\r\nimport Icon from './icon';\r\nimport Loader from './loader';\r\nimport Modal from './modal';\r\nimport Status from './status';\r\n\r\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\r\n\r\nconst supportedLanguagesMap = supportedLanguages.reduce((acc, l) => {\r\n  const [code, common, native] = l;\r\n  acc[code] = {\r\n    common,\r\n    native,\r\n  };\r\n  return acc;\r\n}, {});\r\n\r\n/* NOTES:\r\n  - Max character limit includes BOTH status text and Content Warning text\r\n*/\r\n\r\nconst expiryOptions = {\r\n  '5 minutes': 5 * 60,\r\n  '30 minutes': 30 * 60,\r\n  '1 hour': 60 * 60,\r\n  '6 hours': 6 * 60 * 60,\r\n  '12 hours': 12 * 60 * 60,\r\n  '1 day': 24 * 60 * 60,\r\n  '3 days': 3 * 24 * 60 * 60,\r\n  '7 days': 7 * 24 * 60 * 60,\r\n};\r\nconst expirySeconds = Object.values(expiryOptions);\r\nconst oneDay = 24 * 60 * 60;\r\n\r\nconst expiresInFromExpiresAt = (expiresAt) => {\r\n  if (!expiresAt) return oneDay;\r\n  const delta = (new Date(expiresAt).getTime() - Date.now()) / 1000;\r\n  return expirySeconds.find((s) => s >= delta) || oneDay;\r\n};\r\n\r\nconst menu = document.createElement('ul');\r\nmenu.role = 'listbox';\r\nmenu.className = 'text-expander-menu';\r\n\r\n// Set IntersectionObserver on menu, reposition it because text-expander doesn't handle it\r\nconst windowMargin = 16;\r\nconst observer = new IntersectionObserver((entries) => {\r\n  entries.forEach((entry) => {\r\n    if (entry.isIntersecting) {\r\n      const { left, width } = entry.boundingClientRect;\r\n      const { innerWidth } = window;\r\n      if (left + width > innerWidth) {\r\n        menu.style.left = innerWidth - width - windowMargin + 'px';\r\n      }\r\n    }\r\n  });\r\n});\r\nobserver.observe(menu);\r\n\r\nconst DEFAULT_LANG = localeMatch(\r\n  [new Intl.DateTimeFormat().resolvedOptions().locale, ...navigator.languages],\r\n  supportedLanguages.map((l) => l[0]),\r\n  'en',\r\n);\r\n\r\n// https://github.com/mastodon/mastodon/blob/c4a429ed47e85a6bbf0d470a41cc2f64cf120c19/app/javascript/mastodon/features/compose/util/counter.js\r\nconst urlRegexObj = new RegExp(urlRegex.source, urlRegex.flags);\r\nconst usernameRegex = /(^|[^\\/\\w])@(([a-z0-9_]+)@[a-z0-9\\.\\-]+[a-z0-9]+)/gi;\r\nconst urlPlaceholder = '$2xxxxxxxxxxxxxxxxxxxxxxx';\r\nfunction countableText(inputText) {\r\n  return inputText\r\n    .replace(urlRegexObj, urlPlaceholder)\r\n    .replace(usernameRegex, '$1@$3');\r\n}\r\n\r\n// https://github.com/mastodon/mastodon/blob/c03bd2a238741a012aa4b98dc4902d6cf948ab63/app/models/account.rb#L69\r\nconst USERNAME_RE = /[a-z0-9_]+([a-z0-9_.-]+[a-z0-9_]+)?/i;\r\nconst MENTION_RE = new RegExp(\r\n  `(^|[^=\\\\/\\\\w])(@${USERNAME_RE.source}(?:@[\\\\p{L}\\\\w.-]+[\\\\w]+)?)`,\r\n  'uig',\r\n);\r\n\r\n// AI-generated, all other regexes are too complicated\r\nconst HASHTAG_RE = new RegExp(\r\n  `(^|[^=\\\\/\\\\w])(#[a-z0-9_]+([a-z0-9_.-]+[a-z0-9_]+)?)(?![\\\\/\\\\w])`,\r\n  'ig',\r\n);\r\n\r\n// https://github.com/mastodon/mastodon/blob/23e32a4b3031d1da8b911e0145d61b4dd47c4f96/app/models/custom_emoji.rb#L31\r\nconst SHORTCODE_RE_FRAGMENT = '[a-zA-Z0-9_]{2,}';\r\nconst SCAN_RE = new RegExp(\r\n  `([^A-Za-z0-9_:\\\\n]|^)(:${SHORTCODE_RE_FRAGMENT}:)(?=[^A-Za-z0-9_:]|$)`,\r\n  'g',\r\n);\r\n\r\nfunction highlightText(text, { maxCharacters = Infinity }) {\r\n  // Accept text string, return formatted HTML string\r\n  let html = text;\r\n  // Exceeded characters limit\r\n  const { composerCharacterCount } = states;\r\n  let leftoverHTML = '';\r\n  if (composerCharacterCount > maxCharacters) {\r\n    // NOTE: runes2 substring considers surrogate pairs\r\n    // const leftoverCount = composerCharacterCount - maxCharacters;\r\n    // Highlight exceeded characters\r\n    leftoverHTML =\r\n      '<mark class=\"compose-highlight-exceeded\">' +\r\n      // html.slice(-leftoverCount) +\r\n      substring(html, maxCharacters) +\r\n      '</mark>';\r\n    // html = html.slice(0, -leftoverCount);\r\n    html = substring(html, 0, maxCharacters);\r\n    return html + leftoverHTML;\r\n  }\r\n\r\n  return html\r\n    .replace(urlRegexObj, '$2<mark class=\"compose-highlight-url\">$3</mark>') // URLs\r\n    .replace(MENTION_RE, '$1<mark class=\"compose-highlight-mention\">$2</mark>') // Mentions\r\n    .replace(HASHTAG_RE, '$1<mark class=\"compose-highlight-hashtag\">$2</mark>') // Hashtags\r\n    .replace(\r\n      SCAN_RE,\r\n      '$1<mark class=\"compose-highlight-emoji-shortcode\">$2</mark>',\r\n    ); // Emoji shortcodes\r\n}\r\n\r\nfunction Compose({\r\n  onClose,\r\n  replyToStatus,\r\n  editStatus,\r\n  draftStatus,\r\n  standalone,\r\n  hasOpener,\r\n}) {\r\n  console.warn('RENDER COMPOSER');\r\n  const { masto, instance } = api();\r\n  const [uiState, setUIState] = useState('default');\r\n  const UID = useRef(draftStatus?.uid || uid());\r\n  console.log('Compose UID', UID.current);\r\n\r\n  const currentAccount = getCurrentAccount();\r\n  const currentAccountInfo = currentAccount.info;\r\n\r\n  const configuration = getCurrentInstanceConfiguration();\r\n  console.log('⚙️ Configuration', configuration);\r\n\r\n  const {\r\n    statuses: {\r\n      maxCharacters,\r\n      maxMediaAttachments,\r\n      charactersReservedPerUrl,\r\n    } = {},\r\n    mediaAttachments: {\r\n      supportedMimeTypes = [],\r\n      imageSizeLimit,\r\n      imageMatrixLimit,\r\n      videoSizeLimit,\r\n      videoMatrixLimit,\r\n      videoFrameRateLimit,\r\n    } = {},\r\n    polls: {\r\n      maxOptions,\r\n      maxCharactersPerOption,\r\n      maxExpiration,\r\n      minExpiration,\r\n    } = {},\r\n  } = configuration || {};\r\n\r\n  const textareaRef = useRef();\r\n  const spoilerTextRef = useRef();\r\n  const [visibility, setVisibility] = useState('public');\r\n  const [sensitive, setSensitive] = useState(false);\r\n  const [language, setLanguage] = useState(\r\n    store.session.get('currentLanguage') || DEFAULT_LANG,\r\n  );\r\n  const prevLanguage = useRef(language);\r\n  const [mediaAttachments, setMediaAttachments] = useState([]);\r\n  const [poll, setPoll] = useState(null);\r\n\r\n  const prefs = store.account.get('preferences') || {};\r\n\r\n  const oninputTextarea = () => {\r\n    if (!textareaRef.current) return;\r\n    textareaRef.current.dispatchEvent(new Event('input'));\r\n  };\r\n  const focusTextarea = () => {\r\n    setTimeout(() => {\r\n      console.debug('FOCUS textarea');\r\n      textareaRef.current?.focus();\r\n    }, 300);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (replyToStatus) {\r\n      const { spoilerText, visibility, language, sensitive } = replyToStatus;\r\n      if (spoilerText && spoilerTextRef.current) {\r\n        spoilerTextRef.current.value = spoilerText;\r\n      }\r\n      const mentions = new Set([\r\n        replyToStatus.account.acct,\r\n        ...replyToStatus.mentions.map((m) => m.acct),\r\n      ]);\r\n      const allMentions = [...mentions].filter(\r\n        (m) => m !== currentAccountInfo.acct,\r\n      );\r\n      if (allMentions.length > 0) {\r\n        textareaRef.current.value = `${allMentions\r\n          .map((m) => `@${m}`)\r\n          .join(' ')} `;\r\n        oninputTextarea();\r\n      }\r\n      focusTextarea();\r\n      setVisibility(\r\n        visibility === 'public' && prefs['posting:default:visibility']\r\n          ? prefs['posting:default:visibility']\r\n          : visibility,\r\n      );\r\n      setLanguage(language || prefs.postingDefaultLanguage || DEFAULT_LANG);\r\n      setSensitive(sensitive && !!spoilerText);\r\n    } else if (editStatus) {\r\n      const { visibility, language, sensitive, poll, mediaAttachments } =\r\n        editStatus;\r\n      const composablePoll = !!poll?.options && {\r\n        ...poll,\r\n        options: poll.options.map((o) => o?.title || o),\r\n        expiresIn: poll?.expiresIn || expiresInFromExpiresAt(poll.expiresAt),\r\n      };\r\n      setUIState('loading');\r\n      (async () => {\r\n        try {\r\n          const statusSource = await masto.v1.statuses\r\n            .$select(editStatus.id)\r\n            .source.fetch();\r\n          console.log({ statusSource });\r\n          const { text, spoilerText } = statusSource;\r\n          textareaRef.current.value = text;\r\n          textareaRef.current.dataset.source = text;\r\n          oninputTextarea();\r\n          focusTextarea();\r\n          spoilerTextRef.current.value = spoilerText;\r\n          setVisibility(visibility);\r\n          setLanguage(language || presf.postingDefaultLanguage || DEFAULT_LANG);\r\n          setSensitive(sensitive);\r\n          setPoll(composablePoll);\r\n          setMediaAttachments(mediaAttachments);\r\n          setUIState('default');\r\n        } catch (e) {\r\n          console.error(e);\r\n          alert(e?.reason || e);\r\n          setUIState('error');\r\n        }\r\n      })();\r\n    } else {\r\n      focusTextarea();\r\n      console.log('Apply prefs', prefs);\r\n      if (prefs['posting:default:visibility']) {\r\n        setVisibility(prefs['posting:default:visibility']);\r\n      }\r\n      if (prefs['posting:default:language']) {\r\n        setLanguage(prefs['posting:default:language']);\r\n      }\r\n      if (prefs['posting:default:sensitive']) {\r\n        setSensitive(prefs['posting:default:sensitive']);\r\n      }\r\n    }\r\n    if (draftStatus) {\r\n      const {\r\n        status,\r\n        spoilerText,\r\n        visibility,\r\n        language,\r\n        sensitive,\r\n        poll,\r\n        mediaAttachments,\r\n      } = draftStatus;\r\n      const composablePoll = !!poll?.options && {\r\n        ...poll,\r\n        options: poll.options.map((o) => o?.title || o),\r\n        expiresIn: poll?.expiresIn || expiresInFromExpiresAt(poll.expiresAt),\r\n      };\r\n      textareaRef.current.value = status;\r\n      oninputTextarea();\r\n      focusTextarea();\r\n      if (spoilerText) spoilerTextRef.current.value = spoilerText;\r\n      if (visibility) setVisibility(visibility);\r\n      setLanguage(language || prefs.postingDefaultLanguage || DEFAULT_LANG);\r\n      if (sensitive !== null) setSensitive(sensitive);\r\n      if (composablePoll) setPoll(composablePoll);\r\n      if (mediaAttachments) setMediaAttachments(mediaAttachments);\r\n    }\r\n  }, [draftStatus, editStatus, replyToStatus]);\r\n\r\n  const formRef = useRef();\r\n\r\n  const beforeUnloadCopy = 'You have unsaved changes. Discard this post?';\r\n  const canClose = () => {\r\n    const { value, dataset } = textareaRef.current;\r\n\r\n    // check if loading\r\n    if (uiState === 'loading') {\r\n      console.log('canClose', { uiState });\r\n      return false;\r\n    }\r\n\r\n    // check for status and media attachments\r\n    const hasMediaAttachments = mediaAttachments.length > 0;\r\n    if (!value && !hasMediaAttachments) {\r\n      console.log('canClose', { value, mediaAttachments });\r\n      return true;\r\n    }\r\n\r\n    // check if all media attachments have IDs\r\n    const hasIDMediaAttachments =\r\n      mediaAttachments.length > 0 &&\r\n      mediaAttachments.every((media) => media.id);\r\n    if (hasIDMediaAttachments) {\r\n      console.log('canClose', { hasIDMediaAttachments });\r\n      return true;\r\n    }\r\n\r\n    // check if status contains only \"@acct\", if replying\r\n    const isSelf = replyToStatus?.account.id === currentAccountInfo.id;\r\n    const hasOnlyAcct =\r\n      replyToStatus && value.trim() === `@${replyToStatus.account.acct}`;\r\n    // TODO: check for mentions, or maybe just generic \"@username<space>\", including multiple mentions like \"@username1<space>@username2<space>\"\r\n    if (!isSelf && hasOnlyAcct) {\r\n      console.log('canClose', { isSelf, hasOnlyAcct });\r\n      return true;\r\n    }\r\n\r\n    // check if status is same with source\r\n    const sameWithSource = value === dataset?.source;\r\n    if (sameWithSource) {\r\n      console.log('canClose', { sameWithSource });\r\n      return true;\r\n    }\r\n\r\n    console.log('canClose', {\r\n      value,\r\n      hasMediaAttachments,\r\n      hasIDMediaAttachments,\r\n      poll,\r\n      isSelf,\r\n      hasOnlyAcct,\r\n      sameWithSource,\r\n      uiState,\r\n    });\r\n\r\n    return false;\r\n  };\r\n\r\n  const confirmClose = () => {\r\n    if (!canClose()) {\r\n      const yes = confirm(beforeUnloadCopy);\r\n      return yes;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Show warning if user tries to close window with unsaved changes\r\n    const handleBeforeUnload = (e) => {\r\n      if (!canClose()) {\r\n        e.preventDefault();\r\n        e.returnValue = beforeUnloadCopy;\r\n      }\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload, {\r\n      capture: true,\r\n    });\r\n    return () =>\r\n      window.removeEventListener('beforeunload', handleBeforeUnload, {\r\n        capture: true,\r\n      });\r\n  }, []);\r\n\r\n  const getCharCount = () => {\r\n    const { value } = textareaRef.current;\r\n    const { value: spoilerText } = spoilerTextRef.current;\r\n    return stringLength(countableText(value)) + stringLength(spoilerText);\r\n  };\r\n  const updateCharCount = () => {\r\n    const count = getCharCount();\r\n    states.composerCharacterCount = count;\r\n  };\r\n  useEffect(updateCharCount, []);\r\n\r\n  const supportsCloseWatcher = window.CloseWatcher;\r\n  const escDownRef = useRef(false);\r\n  useHotkeys(\r\n    'esc',\r\n    () => {\r\n      escDownRef.current = true;\r\n      // This won't be true if this event is already handled and not propagated 🤞\r\n    },\r\n    {\r\n      enabled: !supportsCloseWatcher,\r\n      enableOnFormTags: true,\r\n    },\r\n  );\r\n  useHotkeys(\r\n    'esc',\r\n    () => {\r\n      if (!standalone && escDownRef.current && confirmClose()) {\r\n        onClose();\r\n      }\r\n      escDownRef.current = false;\r\n    },\r\n    {\r\n      enabled: !supportsCloseWatcher,\r\n      enableOnFormTags: true,\r\n      // Use keyup because Esc keydown will close the confirm dialog on Safari\r\n      keyup: true,\r\n      ignoreEventWhen: (e) => {\r\n        const modals = document.querySelectorAll('#modal-container > *');\r\n        const hasModal = !!modals;\r\n        const hasOnlyComposer =\r\n          modals.length === 1 && modals[0].querySelector('#compose-container');\r\n        return hasModal && !hasOnlyComposer;\r\n      },\r\n    },\r\n  );\r\n  useCloseWatcher(() => {\r\n    if (!standalone && confirmClose()) {\r\n      onClose();\r\n    }\r\n  }, [standalone, confirmClose, onClose]);\r\n\r\n  const prevBackgroundDraft = useRef({});\r\n  const draftKey = () => {\r\n    const ns = getCurrentAccountNS();\r\n    return `${ns}#${UID.current}`;\r\n  };\r\n  const saveUnsavedDraft = () => {\r\n    // Not enabling this for editing status\r\n    // I don't think this warrant a draft mode for a status that's already posted\r\n    // Maybe it could be a big edit change but it should be rare\r\n    if (editStatus) return;\r\n    const key = draftKey();\r\n    const backgroundDraft = {\r\n      key,\r\n      replyTo: replyToStatus\r\n        ? {\r\n            /* Smaller payload of replyToStatus. Reasons:\r\n              - No point storing whole thing\r\n              - Could have media attachments\r\n              - Could be deleted/edited later\r\n            */\r\n            id: replyToStatus.id,\r\n            account: {\r\n              id: replyToStatus.account.id,\r\n              username: replyToStatus.account.username,\r\n              acct: replyToStatus.account.acct,\r\n            },\r\n          }\r\n        : null,\r\n      draftStatus: {\r\n        uid: UID.current,\r\n        status: textareaRef.current.value,\r\n        spoilerText: spoilerTextRef.current.value,\r\n        visibility,\r\n        language,\r\n        sensitive,\r\n        poll,\r\n        mediaAttachments,\r\n      },\r\n    };\r\n    if (\r\n      !deepEqual(backgroundDraft, prevBackgroundDraft.current) &&\r\n      !canClose()\r\n    ) {\r\n      console.debug('not equal', backgroundDraft, prevBackgroundDraft.current);\r\n      db.drafts\r\n        .set(key, {\r\n          ...backgroundDraft,\r\n          state: 'unsaved',\r\n          updatedAt: Date.now(),\r\n        })\r\n        .then(() => {\r\n          console.debug('DRAFT saved', key, backgroundDraft);\r\n        })\r\n        .catch((e) => {\r\n          console.error('DRAFT failed', key, e);\r\n        });\r\n      prevBackgroundDraft.current = structuredClone(backgroundDraft);\r\n    }\r\n  };\r\n  useInterval(saveUnsavedDraft, 5000); // background save every 5s\r\n  useEffect(() => {\r\n    saveUnsavedDraft();\r\n    // If unmounted, means user discarded the draft\r\n    // Also means pop-out 🙈, but it's okay because the pop-out will persist the ID and re-create the draft\r\n    return () => {\r\n      db.drafts.del(draftKey());\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleItems = (e) => {\r\n      const { items } = e.clipboardData || e.dataTransfer;\r\n      const files = [];\r\n      for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (item.kind === 'file') {\r\n          const file = item.getAsFile();\r\n          if (file && supportedMimeTypes.includes(file.type)) {\r\n            files.push(file);\r\n          }\r\n        }\r\n      }\r\n      if (files.length > 0 && mediaAttachments.length >= maxMediaAttachments) {\r\n        alert(`You can only attach up to ${maxMediaAttachments} files.`);\r\n        return;\r\n      }\r\n      console.log({ files });\r\n      if (files.length > 0) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // Auto-cut-off files to avoid exceeding maxMediaAttachments\r\n        const max = maxMediaAttachments - mediaAttachments.length;\r\n        const allowedFiles = files.slice(0, max);\r\n        if (allowedFiles.length <= 0) {\r\n          alert(`You can only attach up to ${maxMediaAttachments} files.`);\r\n          return;\r\n        }\r\n        const mediaFiles = allowedFiles.map((file) => ({\r\n          file,\r\n          type: file.type,\r\n          size: file.size,\r\n          url: URL.createObjectURL(file),\r\n          id: null,\r\n          description: null,\r\n        }));\r\n        setMediaAttachments([...mediaAttachments, ...mediaFiles]);\r\n      }\r\n    };\r\n    window.addEventListener('paste', handleItems);\r\n    const handleDragover = (e) => {\r\n      // Prevent default if there's files\r\n      if (e.dataTransfer.items.length > 0) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n    };\r\n    window.addEventListener('dragover', handleDragover);\r\n    window.addEventListener('drop', handleItems);\r\n    return () => {\r\n      window.removeEventListener('paste', handleItems);\r\n      window.removeEventListener('dragover', handleDragover);\r\n      window.removeEventListener('drop', handleItems);\r\n    };\r\n  }, [mediaAttachments]);\r\n\r\n  const [showEmoji2Picker, setShowEmoji2Picker] = useState(false);\r\n\r\n  const [topSupportedLanguages, restSupportedLanguages] = useMemo(() => {\r\n    const topLanguages = [];\r\n    const restLanguages = [];\r\n    const { contentTranslationHideLanguages = [] } = states.settings;\r\n    supportedLanguages.forEach((l) => {\r\n      const [code] = l;\r\n      if (\r\n        code === language ||\r\n        code === prevLanguage.current ||\r\n        code === DEFAULT_LANG ||\r\n        contentTranslationHideLanguages.includes(code)\r\n      ) {\r\n        topLanguages.push(l);\r\n      } else {\r\n        restLanguages.push(l);\r\n      }\r\n    });\r\n    topLanguages.sort(([codeA, commonA], [codeB, commonB]) => {\r\n      if (codeA === language) return -1;\r\n      if (codeB === language) return 1;\r\n      return commonA.localeCompare(commonB);\r\n    });\r\n    restLanguages.sort(([codeA, commonA], [codeB, commonB]) =>\r\n      commonA.localeCompare(commonB),\r\n    );\r\n    return [topLanguages, restLanguages];\r\n  }, [language]);\r\n\r\n  return (\r\n    <div id=\"compose-container-outer\">\r\n      <div id=\"compose-container\" class={standalone ? 'standalone' : ''}>\r\n        <div class=\"compose-top\">\r\n          {currentAccountInfo?.avatarStatic && (\r\n            // <Avatar\r\n            //   url={currentAccountInfo.avatarStatic}\r\n            //   size=\"xl\"\r\n            //   alt={currentAccountInfo.username}\r\n            //   squircle={currentAccountInfo?.bot}\r\n            // />\r\n            <AccountBlock\r\n              account={currentAccountInfo}\r\n              accountInstance={currentAccount.instanceURL}\r\n              hideDisplayName\r\n              useAvatarStatic\r\n            />\r\n          )}\r\n          {!standalone ? (\r\n            <span>\r\n              <button\r\n                type=\"button\"\r\n                class=\"light pop-button\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  // If there are non-ID media attachments (not yet uploaded), show confirmation dialog because they are not going to be passed to the new window\r\n                  // const containNonIDMediaAttachments =\r\n                  //   mediaAttachments.length > 0 &&\r\n                  //   mediaAttachments.some((media) => !media.id);\r\n                  // if (containNonIDMediaAttachments) {\r\n                  //   const yes = confirm(\r\n                  //     'You have media attachments that are not yet uploaded. Opening a new window will discard them and you will need to re-attach them. Are you sure you want to continue?',\r\n                  //   );\r\n                  //   if (!yes) {\r\n                  //     return;\r\n                  //   }\r\n                  // }\r\n\r\n                  // const mediaAttachmentsWithIDs = mediaAttachments.filter(\r\n                  //   (media) => media.id,\r\n                  // );\r\n\r\n                  const newWin = openCompose({\r\n                    editStatus,\r\n                    replyToStatus,\r\n                    draftStatus: {\r\n                      uid: UID.current,\r\n                      status: textareaRef.current.value,\r\n                      spoilerText: spoilerTextRef.current.value,\r\n                      visibility,\r\n                      language,\r\n                      sensitive,\r\n                      poll,\r\n                      mediaAttachments,\r\n                    },\r\n                  });\r\n\r\n                  if (!newWin) {\r\n                    return;\r\n                  }\r\n\r\n                  onClose();\r\n                }}\r\n              >\r\n                <Icon icon=\"popout\" alt=\"Pop out\" />\r\n              </button>{' '}\r\n              <button\r\n                type=\"button\"\r\n                class=\"light close-button\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  if (confirmClose()) {\r\n                    onClose();\r\n                  }\r\n                }}\r\n              >\r\n                <Icon icon=\"x\" />\r\n              </button>\r\n            </span>\r\n          ) : (\r\n            hasOpener && (\r\n              <button\r\n                type=\"button\"\r\n                class=\"light pop-button\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  // If there are non-ID media attachments (not yet uploaded), show confirmation dialog because they are not going to be passed to the new window\r\n                  // const containNonIDMediaAttachments =\r\n                  //   mediaAttachments.length > 0 &&\r\n                  //   mediaAttachments.some((media) => !media.id);\r\n                  // if (containNonIDMediaAttachments) {\r\n                  //   const yes = confirm(\r\n                  //     'You have media attachments that are not yet uploaded. Opening a new window will discard them and you will need to re-attach them. Are you sure you want to continue?',\r\n                  //   );\r\n                  //   if (!yes) {\r\n                  //     return;\r\n                  //   }\r\n                  // }\r\n\r\n                  if (!window.opener) {\r\n                    alert('Looks like you closed the parent window.');\r\n                    return;\r\n                  }\r\n\r\n                  if (window.opener.__STATES__.showCompose) {\r\n                    const yes = confirm(\r\n                      'Looks like you already have a compose field open in the parent window. Popping in this window will discard the changes you made in the parent window. Continue?',\r\n                    );\r\n                    if (!yes) return;\r\n                  }\r\n\r\n                  // const mediaAttachmentsWithIDs = mediaAttachments.filter(\r\n                  //   (media) => media.id,\r\n                  // );\r\n\r\n                  onClose({\r\n                    fn: () => {\r\n                      const passData = {\r\n                        editStatus,\r\n                        replyToStatus,\r\n                        draftStatus: {\r\n                          uid: UID.current,\r\n                          status: textareaRef.current.value,\r\n                          spoilerText: spoilerTextRef.current.value,\r\n                          visibility,\r\n                          language,\r\n                          sensitive,\r\n                          poll,\r\n                          mediaAttachments,\r\n                        },\r\n                      };\r\n                      window.opener.__COMPOSE__ = passData; // Pass it here instead of `showCompose` due to some weird proxy issue again\r\n                      window.opener.__STATES__.showCompose = true;\r\n                    },\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon=\"popin\" alt=\"Pop in\" />\r\n              </button>\r\n            )\r\n          )}\r\n        </div>\r\n        {!!replyToStatus && (\r\n          <div class=\"status-preview\">\r\n            <Status status={replyToStatus} size=\"s\" previewMode />\r\n            <div class=\"status-preview-legend reply-to\">\r\n              Replying to @\r\n              {replyToStatus.account.acct || replyToStatus.account.username}\r\n              &rsquo;s post\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!!editStatus && (\r\n          <div class=\"status-preview\">\r\n            <Status status={editStatus} size=\"s\" previewMode />\r\n            <div class=\"status-preview-legend\">Editing source post</div>\r\n          </div>\r\n        )}\r\n        <form\r\n          ref={formRef}\r\n          class={`form-visibility-${visibility}`}\r\n          style={{\r\n            pointerEvents: uiState === 'loading' ? 'none' : 'auto',\r\n            opacity: uiState === 'loading' ? 0.5 : 1,\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\r\n              formRef.current.dispatchEvent(\r\n                new Event('submit', { cancelable: true }),\r\n              );\r\n            }\r\n          }}\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n\r\n            const formData = new FormData(e.target);\r\n            const entries = Object.fromEntries(formData.entries());\r\n            console.log('ENTRIES', entries);\r\n            let { status, visibility, sensitive, spoilerText } = entries;\r\n\r\n            // Pre-cleanup\r\n            sensitive = sensitive === 'on'; // checkboxes return \"on\" if checked\r\n\r\n            // Validation\r\n            /* Let the backend validate this\r\n          if (stringLength(status) > maxCharacters) {\r\n            alert(`Status is too long! Max characters: ${maxCharacters}`);\r\n            return;\r\n          }\r\n          if (\r\n            sensitive &&\r\n            stringLength(status) + stringLength(spoilerText) > maxCharacters\r\n          ) {\r\n            alert(\r\n              `Status and content warning is too long! Max characters: ${maxCharacters}`,\r\n            );\r\n            return;\r\n          }\r\n          */\r\n            if (poll) {\r\n              if (poll.options.length < 2) {\r\n                alert('Poll must have at least 2 options');\r\n                return;\r\n              }\r\n              if (poll.options.some((option) => option === '')) {\r\n                alert('Some poll choices are empty');\r\n                return;\r\n              }\r\n            }\r\n            // TODO: check for URLs and use `charactersReservedPerUrl` to calculate max characters\r\n\r\n            if (mediaAttachments.length > 0) {\r\n              // If there are media attachments, check if they have no descriptions\r\n              const hasNoDescriptions = mediaAttachments.some(\r\n                (media) => !media.description?.trim?.(),\r\n              );\r\n              if (hasNoDescriptions) {\r\n                const yes = confirm(\r\n                  'Some media have no descriptions. Continue?',\r\n                );\r\n                if (!yes) return;\r\n              }\r\n            }\r\n\r\n            // Post-cleanup\r\n            spoilerText = (sensitive && spoilerText) || undefined;\r\n            status = status === '' ? undefined : status;\r\n\r\n            setUIState('loading');\r\n            (async () => {\r\n              try {\r\n                console.log('MEDIA ATTACHMENTS', mediaAttachments);\r\n                if (mediaAttachments.length > 0) {\r\n                  // Upload media attachments first\r\n                  const mediaPromises = mediaAttachments.map((attachment) => {\r\n                    const { file, description, id } = attachment;\r\n                    console.log('UPLOADING', attachment);\r\n                    if (id) {\r\n                      // If already uploaded\r\n                      return attachment;\r\n                    } else {\r\n                      const params = removeNullUndefined({\r\n                        file,\r\n                        description,\r\n                      });\r\n                      return masto.v2.media.create(params).then((res) => {\r\n                        if (res.id) {\r\n                          attachment.id = res.id;\r\n                        }\r\n                        return res;\r\n                      });\r\n                    }\r\n                  });\r\n                  const results = await Promise.allSettled(mediaPromises);\r\n\r\n                  // If any failed, return\r\n                  if (\r\n                    results.some((result) => {\r\n                      return result.status === 'rejected' || !result.value?.id;\r\n                    })\r\n                  ) {\r\n                    setUIState('error');\r\n                    // Alert all the reasons\r\n                    results.forEach((result) => {\r\n                      if (result.status === 'rejected') {\r\n                        console.error(result);\r\n                        alert(result.reason || `Attachment #${i} failed`);\r\n                      }\r\n                    });\r\n                    return;\r\n                  }\r\n\r\n                  console.log({ results, mediaAttachments });\r\n                }\r\n\r\n                /* NOTE:\r\n                Using snakecase here because masto.js's `isObject` returns false for `params`, ONLY happens when opening in pop-out window. This is maybe due to `window.masto` variable being passed from the parent window. The check that failed is `x.constructor === Object`, so maybe the `Object` in new window is different than parent window's?\r\n                Code: https://github.com/neet/masto.js/blob/dd0d649067b6a2b6e60fbb0a96597c373a255b00/src/serializers/is-object.ts#L2\r\n\r\n                // TODO: Note above is no longer true in Masto.js v6. Revisit this.\r\n              */\r\n                let params = {\r\n                  status,\r\n                  // spoilerText,\r\n                  spoiler_text: spoilerText,\r\n                  language,\r\n                  sensitive,\r\n                  poll,\r\n                  // mediaIds: mediaAttachments.map((attachment) => attachment.id),\r\n                  media_ids: mediaAttachments.map(\r\n                    (attachment) => attachment.id,\r\n                  ),\r\n                };\r\n                if (editStatus && supports('@mastodon/edit-media-attributes')) {\r\n                  params.media_attributes = mediaAttachments.map(\r\n                    (attachment) => {\r\n                      return {\r\n                        id: attachment.id,\r\n                        description: attachment.description,\r\n                        // focus\r\n                        // thumbnail\r\n                      };\r\n                    },\r\n                  );\r\n                } else if (!editStatus) {\r\n                  params.visibility = visibility;\r\n                  // params.inReplyToId = replyToStatus?.id || undefined;\r\n                  params.in_reply_to_id = replyToStatus?.id || undefined;\r\n                }\r\n                params = removeNullUndefined(params);\r\n                console.log('POST', params);\r\n\r\n                let newStatus;\r\n                if (editStatus) {\r\n                  newStatus = await masto.v1.statuses\r\n                    .$select(editStatus.id)\r\n                    .update(params);\r\n                  saveStatus(newStatus, instance, {\r\n                    skipThreading: true,\r\n                  });\r\n                } else {\r\n                  try {\r\n                    newStatus = await masto.v1.statuses.create(params, {\r\n                      idempotencyKey: UID.current,\r\n                    });\r\n                  } catch (_) {\r\n                    // If idempotency key fails, try again without it\r\n                    newStatus = await masto.v1.statuses.create(params);\r\n                  }\r\n                }\r\n                setUIState('default');\r\n\r\n                // Close\r\n                onClose({\r\n                  // type: post, reply, edit\r\n                  type: editStatus ? 'edit' : replyToStatus ? 'reply' : 'post',\r\n                  newStatus,\r\n                  instance,\r\n                });\r\n              } catch (e) {\r\n                console.error(e);\r\n                alert(e?.reason || e);\r\n                setUIState('error');\r\n              }\r\n            })();\r\n          }}\r\n        >\r\n          <div class=\"toolbar stretch\">\r\n            <input\r\n              ref={spoilerTextRef}\r\n              type=\"text\"\r\n              name=\"spoilerText\"\r\n              placeholder=\"Content warning\"\r\n              disabled={uiState === 'loading'}\r\n              class=\"spoiler-text-field\"\r\n              lang={language}\r\n              spellCheck=\"true\"\r\n              dir=\"auto\"\r\n              style={{\r\n                opacity: sensitive ? 1 : 0,\r\n                pointerEvents: sensitive ? 'auto' : 'none',\r\n              }}\r\n              onInput={() => {\r\n                updateCharCount();\r\n              }}\r\n            />\r\n            <label\r\n              class={`toolbar-button ${sensitive ? 'highlight' : ''}`}\r\n              title=\"Content warning or sensitive media\"\r\n            >\r\n              <input\r\n                name=\"sensitive\"\r\n                type=\"checkbox\"\r\n                checked={sensitive}\r\n                disabled={uiState === 'loading'}\r\n                onChange={(e) => {\r\n                  const sensitive = e.target.checked;\r\n                  setSensitive(sensitive);\r\n                  if (sensitive) {\r\n                    spoilerTextRef.current?.focus();\r\n                  } else {\r\n                    textareaRef.current?.focus();\r\n                  }\r\n                }}\r\n              />\r\n              <Icon icon={`eye-${sensitive ? 'close' : 'open'}`} />\r\n            </label>{' '}\r\n            <label\r\n              class={`toolbar-button ${\r\n                visibility !== 'public' && !sensitive ? 'show-field' : ''\r\n              } ${visibility !== 'public' ? 'highlight' : ''}`}\r\n              title={`Visibility: ${visibility}`}\r\n            >\r\n              <Icon icon={visibilityIconsMap[visibility]} alt={visibility} />\r\n              <select\r\n                name=\"visibility\"\r\n                value={visibility}\r\n                onChange={(e) => {\r\n                  setVisibility(e.target.value);\r\n                }}\r\n                disabled={uiState === 'loading' || !!editStatus}\r\n              >\r\n                <option value=\"public\">\r\n                  Public <Icon icon=\"earth\" />\r\n                </option>\r\n                <option value=\"unlisted\">Unlisted</option>\r\n                <option value=\"private\">Followers only</option>\r\n                <option value=\"direct\">Private mention</option>\r\n              </select>\r\n            </label>{' '}\r\n          </div>\r\n          <Textarea\r\n            ref={textareaRef}\r\n            placeholder={\r\n              replyToStatus\r\n                ? 'Post your reply'\r\n                : editStatus\r\n                ? 'Edit your post'\r\n                : 'What are you doing?'\r\n            }\r\n            required={mediaAttachments?.length === 0}\r\n            disabled={uiState === 'loading'}\r\n            lang={language}\r\n            onInput={() => {\r\n              updateCharCount();\r\n            }}\r\n            maxCharacters={maxCharacters}\r\n            performSearch={(params) => {\r\n              const { type, q, limit } = params;\r\n              if (type === 'accounts') {\r\n                return masto.v1.accounts.search.list({\r\n                  q,\r\n                  limit,\r\n                  resolve: false,\r\n                });\r\n              }\r\n              return masto.v2.search.fetch(params);\r\n            }}\r\n          />\r\n          {mediaAttachments?.length > 0 && (\r\n            <div class=\"media-attachments\">\r\n              {mediaAttachments.map((attachment, i) => {\r\n                const { id, file } = attachment;\r\n                const fileID = file?.size + file?.type + file?.name;\r\n                return (\r\n                  <MediaAttachment\r\n                    key={id || fileID || i}\r\n                    attachment={attachment}\r\n                    disabled={uiState === 'loading'}\r\n                    lang={language}\r\n                    onDescriptionChange={(value) => {\r\n                      setMediaAttachments((attachments) => {\r\n                        const newAttachments = [...attachments];\r\n                        newAttachments[i].description = value;\r\n                        return newAttachments;\r\n                      });\r\n                    }}\r\n                    onRemove={() => {\r\n                      setMediaAttachments((attachments) => {\r\n                        return attachments.filter((_, j) => j !== i);\r\n                      });\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n              <label class=\"media-sensitive\">\r\n                <input\r\n                  name=\"sensitive\"\r\n                  type=\"checkbox\"\r\n                  checked={sensitive}\r\n                  disabled={uiState === 'loading'}\r\n                  onChange={(e) => {\r\n                    const sensitive = e.target.checked;\r\n                    setSensitive(sensitive);\r\n                  }}\r\n                />{' '}\r\n                <span>Mark media as sensitive</span>{' '}\r\n                <Icon icon={`eye-${sensitive ? 'close' : 'open'}`} />\r\n              </label>\r\n            </div>\r\n          )}\r\n          {!!poll && (\r\n            <Poll\r\n              lang={language}\r\n              maxOptions={maxOptions}\r\n              maxExpiration={maxExpiration}\r\n              minExpiration={minExpiration}\r\n              maxCharactersPerOption={maxCharactersPerOption}\r\n              poll={poll}\r\n              disabled={uiState === 'loading'}\r\n              onInput={(poll) => {\r\n                if (poll) {\r\n                  const newPoll = { ...poll };\r\n                  setPoll(newPoll);\r\n                } else {\r\n                  setPoll(null);\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n          <div\r\n            class=\"toolbar wrap\"\r\n            style={{\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <span>\r\n              <label class=\"toolbar-button\">\r\n                <input\r\n                  type=\"file\"\r\n                  accept={supportedMimeTypes.join(',')}\r\n                  multiple={mediaAttachments.length < maxMediaAttachments - 1}\r\n                  disabled={\r\n                    uiState === 'loading' ||\r\n                    mediaAttachments.length >= maxMediaAttachments ||\r\n                    !!poll\r\n                  }\r\n                  onChange={(e) => {\r\n                    const files = e.target.files;\r\n                    if (!files) return;\r\n\r\n                    const mediaFiles = Array.from(files).map((file) => ({\r\n                      file,\r\n                      type: file.type,\r\n                      size: file.size,\r\n                      url: URL.createObjectURL(file),\r\n                      id: null, // indicate uploaded state\r\n                      description: null,\r\n                    }));\r\n                    console.log('MEDIA ATTACHMENTS', files, mediaFiles);\r\n\r\n                    // Validate max media attachments\r\n                    if (\r\n                      mediaAttachments.length + mediaFiles.length >\r\n                      maxMediaAttachments\r\n                    ) {\r\n                      alert(\r\n                        `You can only attach up to ${maxMediaAttachments} files.`,\r\n                      );\r\n                    } else {\r\n                      setMediaAttachments((attachments) => {\r\n                        return attachments.concat(mediaFiles);\r\n                      });\r\n                    }\r\n                    // Reset\r\n                    e.target.value = '';\r\n                  }}\r\n                />\r\n                <Icon icon=\"attachment\" />\r\n              </label>{' '}\r\n              <button\r\n                type=\"button\"\r\n                class=\"toolbar-button\"\r\n                disabled={\r\n                  uiState === 'loading' || !!poll || !!mediaAttachments.length\r\n                }\r\n                onClick={() => {\r\n                  setPoll({\r\n                    options: ['', ''],\r\n                    expiresIn: 24 * 60 * 60, // 1 day\r\n                    multiple: false,\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon=\"poll\" alt=\"Add poll\" />\r\n              </button>{' '}\r\n              <button\r\n                type=\"button\"\r\n                class=\"toolbar-button\"\r\n                disabled={uiState === 'loading'}\r\n                onClick={() => {\r\n                  setShowEmoji2Picker(true);\r\n                }}\r\n              >\r\n                <Icon icon=\"emoji2\" />\r\n              </button>\r\n            </span>\r\n            <div class=\"spacer\" />\r\n            {uiState === 'loading' ? (\r\n              <Loader abrupt />\r\n            ) : (\r\n              <CharCountMeter\r\n                maxCharacters={maxCharacters}\r\n                hidden={uiState === 'loading'}\r\n              />\r\n            )}\r\n            <label\r\n              class={`toolbar-button ${\r\n                language !== prevLanguage.current ? 'highlight' : ''\r\n              }`}\r\n            >\r\n              <span class=\"icon-text\">\r\n                {supportedLanguagesMap[language]?.native}\r\n              </span>\r\n              <select\r\n                name=\"language\"\r\n                value={language}\r\n                onChange={(e) => {\r\n                  const { value } = e.target;\r\n                  setLanguage(value || DEFAULT_LANG);\r\n                  store.session.set('currentLanguage', value || DEFAULT_LANG);\r\n                }}\r\n                disabled={uiState === 'loading'}\r\n              >\r\n                {topSupportedLanguages.map(([code, common, native]) => (\r\n                  <option value={code} key={code}>\r\n                    {common} ({native})\r\n                  </option>\r\n                ))}\r\n                <hr />\r\n                {restSupportedLanguages.map(([code, common, native]) => (\r\n                  <option value={code} key={code}>\r\n                    {common} ({native})\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </label>{' '}\r\n            <button\r\n              type=\"submit\"\r\n              class=\"large\"\r\n              disabled={uiState === 'loading'}\r\n            >\r\n              {replyToStatus ? 'Reply' : editStatus ? 'Update' : 'Post'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {showEmoji2Picker && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowEmoji2Picker(false);\r\n            }\r\n          }}\r\n        >\r\n          <CustomEmojisModal\r\n            masto={masto}\r\n            instance={instance}\r\n            onClose={() => {\r\n              setShowEmoji2Picker(false);\r\n            }}\r\n            onSelect={(emoji) => {\r\n              const emojiWithSpace = ` ${emoji} `;\r\n              const textarea = textareaRef.current;\r\n              if (!textarea) return;\r\n              const { selectionStart, selectionEnd } = textarea;\r\n              const text = textarea.value;\r\n              const newText =\r\n                text.slice(0, selectionStart) +\r\n                emojiWithSpace +\r\n                text.slice(selectionEnd);\r\n              textarea.value = newText;\r\n              textarea.selectionStart = textarea.selectionEnd =\r\n                selectionEnd + emojiWithSpace.length;\r\n              textarea.focus();\r\n              textarea.dispatchEvent(new Event('input'));\r\n            }}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction autoResizeTextarea(textarea) {\r\n  if (!textarea) return;\r\n  const { value, offsetHeight, scrollHeight, clientHeight } = textarea;\r\n  if (offsetHeight < window.innerHeight) {\r\n    // NOTE: This check is needed because the offsetHeight return 50000 (really large number) on first render\r\n    // No idea why it does that, will re-investigate in far future\r\n    const offset = offsetHeight - clientHeight;\r\n    const height = value ? scrollHeight + offset + 'px' : null;\r\n    textarea.style.height = height;\r\n  }\r\n}\r\n\r\nconst Textarea = forwardRef((props, ref) => {\r\n  const { masto } = api();\r\n  const [text, setText] = useState(ref.current?.value || '');\r\n  const { maxCharacters, performSearch = () => {}, ...textareaProps } = props;\r\n  // const snapStates = useSnapshot(states);\r\n  // const charCount = snapStates.composerCharacterCount;\r\n\r\n  const customEmojis = useRef();\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const emojis = await masto.v1.customEmojis.list();\r\n        console.log({ emojis });\r\n        customEmojis.current = emojis;\r\n      } catch (e) {\r\n        // silent fail\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const textExpanderRef = useRef();\r\n  const textExpanderTextRef = useRef('');\r\n  useEffect(() => {\r\n    let handleChange, handleValue, handleCommited;\r\n    if (textExpanderRef.current) {\r\n      handleChange = (e) => {\r\n        // console.log('text-expander-change', e);\r\n        const { key, provide, text } = e.detail;\r\n        textExpanderTextRef.current = text;\r\n\r\n        if (text === '') {\r\n          provide(\r\n            Promise.resolve({\r\n              matched: false,\r\n            }),\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (key === ':') {\r\n          // const emojis = customEmojis.current.filter((emoji) =>\r\n          //   emoji.shortcode.startsWith(text),\r\n          // );\r\n          const emojis = filterShortcodes(customEmojis.current, text);\r\n          let html = '';\r\n          emojis.forEach((emoji) => {\r\n            const { shortcode, url } = emoji;\r\n            html += `\r\n                <li role=\"option\" data-value=\"${encodeHTML(shortcode)}\">\r\n                <img src=\"${encodeHTML(\r\n                  url,\r\n                )}\" width=\"16\" height=\"16\" alt=\"\" loading=\"lazy\" /> \r\n                :${encodeHTML(shortcode)}:\r\n              </li>`;\r\n          });\r\n          // console.log({ emojis, html });\r\n          menu.innerHTML = html;\r\n          provide(\r\n            Promise.resolve({\r\n              matched: emojis.length > 0,\r\n              fragment: menu,\r\n            }),\r\n          );\r\n          return;\r\n        }\r\n\r\n        const type = {\r\n          '@': 'accounts',\r\n          '#': 'hashtags',\r\n        }[key];\r\n        provide(\r\n          new Promise((resolve) => {\r\n            const searchResults = performSearch({\r\n              type,\r\n              q: text,\r\n              limit: 5,\r\n            });\r\n            searchResults.then((value) => {\r\n              if (text !== textExpanderTextRef.current) {\r\n                return;\r\n              }\r\n              console.log({ value, type, v: value[type] });\r\n              const results = value[type] || value;\r\n              console.log('RESULTS', value, results);\r\n              let html = '';\r\n              results.forEach((result) => {\r\n                const {\r\n                  name,\r\n                  avatarStatic,\r\n                  displayName,\r\n                  username,\r\n                  acct,\r\n                  emojis,\r\n                  history,\r\n                } = result;\r\n                const displayNameWithEmoji = emojifyText(displayName, emojis);\r\n                // const item = menuItem.cloneNode();\r\n                if (acct) {\r\n                  html += `\r\n                    <li role=\"option\" data-value=\"${encodeHTML(acct)}\">\r\n                      <span class=\"avatar\">\r\n                        <img src=\"${encodeHTML(\r\n                          avatarStatic,\r\n                        )}\" width=\"16\" height=\"16\" alt=\"\" loading=\"lazy\" />\r\n                      </span>\r\n                      <span>\r\n                        <b>${displayNameWithEmoji || username}</b>\r\n                        <br>@${encodeHTML(acct)}\r\n                      </span>\r\n                    </li>\r\n                  `;\r\n                } else {\r\n                  const total = history?.reduce?.(\r\n                    (acc, cur) => acc + +cur.uses,\r\n                    0,\r\n                  );\r\n                  html += `\r\n                    <li role=\"option\" data-value=\"${encodeHTML(name)}\">\r\n                      <span class=\"grow\">#<b>${encodeHTML(name)}</b></span>\r\n                      ${\r\n                        total\r\n                          ? `<span class=\"count\">${shortenNumber(total)}</span>`\r\n                          : ''\r\n                      }\r\n                    </li>\r\n                  `;\r\n                }\r\n                menu.innerHTML = html;\r\n              });\r\n              console.log('MENU', results, menu);\r\n              resolve({\r\n                matched: results.length > 0,\r\n                fragment: menu,\r\n              });\r\n            });\r\n          }),\r\n        );\r\n      };\r\n\r\n      textExpanderRef.current.addEventListener(\r\n        'text-expander-change',\r\n        handleChange,\r\n      );\r\n\r\n      handleValue = (e) => {\r\n        const { key, item } = e.detail;\r\n        if (key === ':') {\r\n          e.detail.value = `:${item.dataset.value}:`;\r\n        } else {\r\n          e.detail.value = `${key}${item.dataset.value}`;\r\n        }\r\n      };\r\n\r\n      textExpanderRef.current.addEventListener(\r\n        'text-expander-value',\r\n        handleValue,\r\n      );\r\n\r\n      handleCommited = (e) => {\r\n        const { input } = e.detail;\r\n        setText(input.value);\r\n        // fire input event\r\n        if (ref.current) {\r\n          const event = new Event('input', { bubbles: true });\r\n          ref.current.dispatchEvent(event);\r\n        }\r\n      };\r\n\r\n      textExpanderRef.current.addEventListener(\r\n        'text-expander-committed',\r\n        handleCommited,\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (textExpanderRef.current) {\r\n        textExpanderRef.current.removeEventListener(\r\n          'text-expander-change',\r\n          handleChange,\r\n        );\r\n        textExpanderRef.current.removeEventListener(\r\n          'text-expander-value',\r\n          handleValue,\r\n        );\r\n        textExpanderRef.current.removeEventListener(\r\n          'text-expander-committed',\r\n          handleCommited,\r\n        );\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Resize observer for textarea\r\n    const textarea = ref.current;\r\n    if (!textarea) return;\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      // Get height of textarea, set height to textExpander\r\n      if (textExpanderRef.current) {\r\n        const { height } = textarea.getBoundingClientRect();\r\n        textExpanderRef.current.style.height = height + 'px';\r\n      }\r\n    });\r\n    resizeObserver.observe(textarea);\r\n  }, []);\r\n\r\n  const slowHighlightPerf = useRef(0); // increment if slow\r\n  const composeHighlightRef = useRef();\r\n  const throttleHighlightText = useThrottledCallback((text) => {\r\n    if (!composeHighlightRef.current) return;\r\n    if (slowHighlightPerf.current > 3) {\r\n      // After 3 times of lag, disable highlighting\r\n      composeHighlightRef.current.innerHTML = '';\r\n      composeHighlightRef.current = null; // Destroy the whole thing\r\n      throttleHighlightText?.cancel?.();\r\n      return;\r\n    }\r\n    let start;\r\n    let end;\r\n    if (slowHighlightPerf.current <= 3) start = Date.now();\r\n    composeHighlightRef.current.innerHTML =\r\n      highlightText(text, {\r\n        maxCharacters,\r\n      }) + '\\n';\r\n    if (slowHighlightPerf.current <= 3) end = Date.now();\r\n    console.debug('HIGHLIGHT PERF', { start, end, diff: end - start });\r\n    if (start && end && end - start > 50) {\r\n      // if slow, increment\r\n      slowHighlightPerf.current++;\r\n    }\r\n    // Newline to prevent multiple line breaks at the end from being collapsed, no idea why\r\n  }, 500);\r\n\r\n  return (\r\n    <text-expander\r\n      ref={textExpanderRef}\r\n      keys=\"@ # :\"\r\n      class=\"compose-field-container\"\r\n    >\r\n      <textarea\r\n        class=\"compose-field\"\r\n        autoCapitalize=\"sentences\"\r\n        autoComplete=\"on\"\r\n        autoCorrect=\"on\"\r\n        spellCheck=\"true\"\r\n        dir=\"auto\"\r\n        rows=\"6\"\r\n        cols=\"50\"\r\n        {...textareaProps}\r\n        ref={ref}\r\n        name=\"status\"\r\n        value={text}\r\n        onKeyDown={(e) => {\r\n          // Get line before cursor position after pressing 'Enter'\r\n          const { key, target } = e;\r\n          if (key === 'Enter') {\r\n            try {\r\n              const { value, selectionStart } = target;\r\n              const textBeforeCursor = value.slice(0, selectionStart);\r\n              const lastLine = textBeforeCursor.split('\\n').slice(-1)[0];\r\n              if (lastLine) {\r\n                // If line starts with \"- \" or \"12. \"\r\n                if (/^\\s*(-|\\d+\\.)\\s/.test(lastLine)) {\r\n                  // insert \"- \" at cursor position\r\n                  const [_, preSpaces, bullet, postSpaces, anything] =\r\n                    lastLine.match(/^(\\s*)(-|\\d+\\.)(\\s+)(.+)?/) || [];\r\n                  if (anything) {\r\n                    e.preventDefault();\r\n                    const [number] = bullet.match(/\\d+/) || [];\r\n                    const newBullet = number ? `${+number + 1}.` : '-';\r\n                    const text = `\\n${preSpaces}${newBullet}${postSpaces}`;\r\n                    target.setRangeText(text, selectionStart, selectionStart);\r\n                    const pos = selectionStart + text.length;\r\n                    target.setSelectionRange(pos, pos);\r\n                  } else {\r\n                    // trim the line before the cursor, then insert new line\r\n                    const pos = selectionStart - lastLine.length;\r\n                    target.setRangeText('', pos, selectionStart);\r\n                  }\r\n                  autoResizeTextarea(target);\r\n                  target.dispatchEvent(new Event('input'));\r\n                }\r\n              }\r\n            } catch (e) {\r\n              // silent fail\r\n              console.error(e);\r\n            }\r\n          }\r\n          if (composeHighlightRef.current) {\r\n            composeHighlightRef.current.scrollTop = target.scrollTop;\r\n          }\r\n        }}\r\n        onInput={(e) => {\r\n          const { target } = e;\r\n          const text = target.value;\r\n          setText(text);\r\n          autoResizeTextarea(target);\r\n          props.onInput?.(e);\r\n          throttleHighlightText(text);\r\n        }}\r\n        style={{\r\n          width: '100%',\r\n          height: '4em',\r\n          // '--text-weight': (1 + charCount / 140).toFixed(1) || 1,\r\n        }}\r\n        onScroll={(e) => {\r\n          if (composeHighlightRef.current) {\r\n            const { scrollTop } = e.target;\r\n            composeHighlightRef.current.scrollTop = scrollTop;\r\n          }\r\n        }}\r\n      />\r\n      <div\r\n        ref={composeHighlightRef}\r\n        class=\"compose-highlight\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </text-expander>\r\n  );\r\n});\r\n\r\nfunction CharCountMeter({ maxCharacters = 500, hidden }) {\r\n  const snapStates = useSnapshot(states);\r\n  const charCount = snapStates.composerCharacterCount;\r\n  const leftChars = maxCharacters - charCount;\r\n  if (hidden) {\r\n    return <meter class=\"donut\" hidden />;\r\n  }\r\n  return (\r\n    <meter\r\n      class={`donut ${\r\n        leftChars <= -10\r\n          ? 'explode'\r\n          : leftChars <= 0\r\n          ? 'danger'\r\n          : leftChars <= 20\r\n          ? 'warning'\r\n          : ''\r\n      }`}\r\n      value={charCount}\r\n      max={maxCharacters}\r\n      data-left={leftChars}\r\n      title={`${leftChars}/${maxCharacters}`}\r\n      style={{\r\n        '--percentage': (charCount / maxCharacters) * 100,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nfunction MediaAttachment({\r\n  attachment,\r\n  disabled,\r\n  lang,\r\n  onDescriptionChange = () => {},\r\n  onRemove = () => {},\r\n}) {\r\n  const [uiState, setUIState] = useState('default');\r\n  const supportsEdit = supports('@mastodon/edit-media-attributes');\r\n  const { type, id, file } = attachment;\r\n  const url = useMemo(\r\n    () => (file ? URL.createObjectURL(file) : attachment.url),\r\n    [file, attachment.url],\r\n  );\r\n  console.log({ attachment });\r\n  const [description, setDescription] = useState(attachment.description);\r\n  const [suffixType, subtype] = type.split('/');\r\n  const debouncedOnDescriptionChange = useDebouncedCallback(\r\n    onDescriptionChange,\r\n    250,\r\n  );\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const textareaRef = useRef(null);\r\n  useEffect(() => {\r\n    let timer;\r\n    if (showModal && textareaRef.current) {\r\n      timer = setTimeout(() => {\r\n        textareaRef.current.focus();\r\n      }, 100);\r\n    }\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [showModal]);\r\n\r\n  const descTextarea = (\r\n    <>\r\n      {!!id && !supportsEdit ? (\r\n        <div class=\"media-desc\">\r\n          <span class=\"tag\">Uploaded</span>\r\n          <p title={description}>\r\n            {attachment.description || <i>No description</i>}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <textarea\r\n          ref={textareaRef}\r\n          value={description || ''}\r\n          lang={lang}\r\n          placeholder={\r\n            {\r\n              image: 'Image description',\r\n              video: 'Video description',\r\n              audio: 'Audio description',\r\n            }[suffixType]\r\n          }\r\n          autoCapitalize=\"sentences\"\r\n          autoComplete=\"on\"\r\n          autoCorrect=\"on\"\r\n          spellCheck=\"true\"\r\n          dir=\"auto\"\r\n          disabled={disabled || uiState === 'loading'}\r\n          class={uiState === 'loading' ? 'loading' : ''}\r\n          maxlength=\"1500\" // Not unicode-aware :(\r\n          // TODO: Un-hard-code this maxlength, ref: https://github.com/mastodon/mastodon/blob/b59fb28e90bc21d6fd1a6bafd13cfbd81ab5be54/app/models/media_attachment.rb#L39\r\n          onInput={(e) => {\r\n            const { value } = e.target;\r\n            setDescription(value);\r\n            debouncedOnDescriptionChange(value);\r\n          }}\r\n        ></textarea>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  const toastRef = useRef(null);\r\n  useEffect(() => {\r\n    return () => {\r\n      toastRef.current?.hideToast?.();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div class=\"media-attachment\">\r\n        <div\r\n          class=\"media-preview\"\r\n          tabIndex=\"0\"\r\n          onClick={() => {\r\n            setShowModal(true);\r\n          }}\r\n        >\r\n          {suffixType === 'image' ? (\r\n            <img src={url} alt=\"\" />\r\n          ) : suffixType === 'video' || suffixType === 'gifv' ? (\r\n            <video src={url} playsinline muted />\r\n          ) : suffixType === 'audio' ? (\r\n            <audio src={url} controls />\r\n          ) : null}\r\n        </div>\r\n        {descTextarea}\r\n        <div class=\"media-aside\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"plain close-button\"\r\n            disabled={disabled}\r\n            onClick={onRemove}\r\n          >\r\n            <Icon icon=\"x\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {showModal && (\r\n        <Modal\r\n          class=\"light\"\r\n          onClick={(e) => {\r\n            if (e.target === e.currentTarget) {\r\n              setShowModal(false);\r\n            }\r\n          }}\r\n        >\r\n          <div id=\"media-sheet\" class=\"sheet sheet-max\">\r\n            <button\r\n              type=\"button\"\r\n              class=\"sheet-close\"\r\n              onClick={() => {\r\n                setShowModal(false);\r\n              }}\r\n            >\r\n              <Icon icon=\"x\" />\r\n            </button>\r\n            <header>\r\n              <h2>\r\n                {\r\n                  {\r\n                    image: 'Edit image description',\r\n                    video: 'Edit video description',\r\n                    audio: 'Edit audio description',\r\n                  }[suffixType]\r\n                }\r\n              </h2>\r\n            </header>\r\n            <main tabIndex=\"-1\">\r\n              <div class=\"media-preview\">\r\n                {suffixType === 'image' ? (\r\n                  <img src={url} alt=\"\" />\r\n                ) : suffixType === 'video' || suffixType === 'gifv' ? (\r\n                  <video src={url} playsinline controls />\r\n                ) : suffixType === 'audio' ? (\r\n                  <audio src={url} controls />\r\n                ) : null}\r\n              </div>\r\n              <div class=\"media-form\">\r\n                {descTextarea}\r\n                <footer>\r\n                  {suffixType === 'image' &&\r\n                    /^(png|jpe?g|gif|webp)$/i.test(subtype) &&\r\n                    !!states.settings.mediaAltGenerator &&\r\n                    !!IMG_ALT_API_URL && (\r\n                      <Menu2\r\n                        portal={{\r\n                          target: document.body,\r\n                        }}\r\n                        containerProps={{\r\n                          style: {\r\n                            zIndex: 1001,\r\n                          },\r\n                        }}\r\n                        align=\"center\"\r\n                        position=\"anchor\"\r\n                        overflow=\"auto\"\r\n                        menuButton={\r\n                          <button type=\"button\" title=\"More\" class=\"plain\">\r\n                            <Icon icon=\"more\" size=\"l\" alt=\"More\" />\r\n                          </button>\r\n                        }\r\n                      >\r\n                        <MenuItem\r\n                          disabled={uiState === 'loading'}\r\n                          onClick={() => {\r\n                            setUIState('loading');\r\n                            toastRef.current = showToast({\r\n                              text: 'Generating description. Please wait...',\r\n                              duration: -1,\r\n                            });\r\n                            // POST with multipart\r\n                            (async function () {\r\n                              try {\r\n                                const body = new FormData();\r\n                                body.append('image', file);\r\n                                const response = await fetch(IMG_ALT_API_URL, {\r\n                                  method: 'POST',\r\n                                  body,\r\n                                }).then((r) => r.json());\r\n                                if (response.error) {\r\n                                  throw new Error(response.error);\r\n                                }\r\n                                setDescription(response.description);\r\n                              } catch (e) {\r\n                                console.error(e);\r\n                                showToast(\r\n                                  `Failed to generate description${\r\n                                    e?.message ? `: ${e.message}` : ''\r\n                                  }`,\r\n                                );\r\n                              } finally {\r\n                                setUIState('default');\r\n                                toastRef.current?.hideToast?.();\r\n                              }\r\n                            })();\r\n                          }}\r\n                        >\r\n                          <Icon icon=\"sparkles2\" />\r\n                          <span>Generate description…</span>\r\n                        </MenuItem>\r\n                      </Menu2>\r\n                    )}\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"light block\"\r\n                    onClick={() => {\r\n                      setShowModal(false);\r\n                    }}\r\n                    disabled={uiState === 'loading'}\r\n                  >\r\n                    Done\r\n                  </button>\r\n                </footer>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Poll({\r\n  lang,\r\n  poll,\r\n  disabled,\r\n  onInput = () => {},\r\n  maxOptions,\r\n  maxExpiration,\r\n  minExpiration,\r\n  maxCharactersPerOption,\r\n}) {\r\n  const { options, expiresIn, multiple } = poll;\r\n\r\n  return (\r\n    <div class={`poll ${multiple ? 'multiple' : ''}`}>\r\n      <div class=\"poll-choices\">\r\n        {options.map((option, i) => (\r\n          <div class=\"poll-choice\" key={i}>\r\n            <input\r\n              required\r\n              type=\"text\"\r\n              value={option}\r\n              disabled={disabled}\r\n              maxlength={maxCharactersPerOption}\r\n              placeholder={`Choice ${i + 1}`}\r\n              lang={lang}\r\n              spellCheck=\"true\"\r\n              dir=\"auto\"\r\n              onInput={(e) => {\r\n                const { value } = e.target;\r\n                options[i] = value;\r\n                onInput(poll);\r\n              }}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              class=\"plain2 poll-button\"\r\n              disabled={disabled || options.length <= 1}\r\n              onClick={() => {\r\n                options.splice(i, 1);\r\n                onInput(poll);\r\n              }}\r\n            >\r\n              <Icon icon=\"x\" size=\"s\" />\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div class=\"poll-toolbar\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"plain2 poll-button\"\r\n          disabled={disabled || options.length >= maxOptions}\r\n          onClick={() => {\r\n            options.push('');\r\n            onInput(poll);\r\n          }}\r\n        >\r\n          +\r\n        </button>{' '}\r\n        <label class=\"multiple-choices\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={multiple}\r\n            disabled={disabled}\r\n            onChange={(e) => {\r\n              const { checked } = e.target;\r\n              poll.multiple = checked;\r\n              onInput(poll);\r\n            }}\r\n          />{' '}\r\n          Multiple choices\r\n        </label>\r\n        <label class=\"expires-in\">\r\n          Duration{' '}\r\n          <select\r\n            value={expiresIn}\r\n            disabled={disabled}\r\n            onChange={(e) => {\r\n              const { value } = e.target;\r\n              poll.expiresIn = value;\r\n              onInput(poll);\r\n            }}\r\n          >\r\n            {Object.entries(expiryOptions)\r\n              .filter(([label, value]) => {\r\n                return value >= minExpiration && value <= maxExpiration;\r\n              })\r\n              .map(([label, value]) => (\r\n                <option value={value} key={value}>\r\n                  {label}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n      <div class=\"poll-toolbar\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"plain remove-poll-button\"\r\n          disabled={disabled}\r\n          onClick={() => {\r\n            onInput(null);\r\n          }}\r\n        >\r\n          Remove poll\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction filterShortcodes(emojis, searchTerm) {\r\n  searchTerm = searchTerm.toLowerCase();\r\n\r\n  // Return an array of shortcodes that start with or contain the search term, sorted by relevance and limited to the first 5\r\n  return emojis\r\n    .sort((a, b) => {\r\n      let aLower = a.shortcode.toLowerCase();\r\n      let bLower = b.shortcode.toLowerCase();\r\n\r\n      let aStartsWith = aLower.startsWith(searchTerm);\r\n      let bStartsWith = bLower.startsWith(searchTerm);\r\n      let aContains = aLower.includes(searchTerm);\r\n      let bContains = bLower.includes(searchTerm);\r\n      let bothStartWith = aStartsWith && bStartsWith;\r\n      let bothContain = aContains && bContains;\r\n\r\n      return bothStartWith\r\n        ? a.length - b.length\r\n        : aStartsWith\r\n        ? -1\r\n        : bStartsWith\r\n        ? 1\r\n        : bothContain\r\n        ? a.length - b.length\r\n        : aContains\r\n        ? -1\r\n        : bContains\r\n        ? 1\r\n        : 0;\r\n    })\r\n    .slice(0, 5);\r\n}\r\n\r\nfunction encodeHTML(str) {\r\n  return str.replace(/[&<>\"']/g, function (char) {\r\n    return '&#' + char.charCodeAt(0) + ';';\r\n  });\r\n}\r\n\r\nfunction removeNullUndefined(obj) {\r\n  for (let key in obj) {\r\n    if (obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction CustomEmojisModal({\r\n  masto,\r\n  instance,\r\n  onClose = () => {},\r\n  onSelect = () => {},\r\n}) {\r\n  const [uiState, setUIState] = useState('default');\r\n  const customEmojisList = useRef([]);\r\n  const [customEmojis, setCustomEmojis] = useState({});\r\n  const recentlyUsedCustomEmojis = useMemo(\r\n    () => store.account.get('recentlyUsedCustomEmojis') || [],\r\n  );\r\n  useEffect(() => {\r\n    setUIState('loading');\r\n    (async () => {\r\n      try {\r\n        const emojis = await masto.v1.customEmojis.list();\r\n        // Group emojis by category\r\n        const emojisCat = {\r\n          '--recent--': recentlyUsedCustomEmojis.filter((emoji) =>\r\n            emojis.find((e) => e.shortcode === emoji.shortcode),\r\n          ),\r\n        };\r\n        const othersCat = [];\r\n        emojis.forEach((emoji) => {\r\n          if (!emoji.visibleInPicker) return;\r\n          customEmojisList.current?.push?.(emoji);\r\n          if (!emoji.category) {\r\n            othersCat.push(emoji);\r\n            return;\r\n          }\r\n          if (!emojisCat[emoji.category]) {\r\n            emojisCat[emoji.category] = [];\r\n          }\r\n          emojisCat[emoji.category].push(emoji);\r\n        });\r\n        if (othersCat.length) {\r\n          emojisCat['--others--'] = othersCat;\r\n        }\r\n        setCustomEmojis(emojisCat);\r\n        setUIState('default');\r\n      } catch (e) {\r\n        setUIState('error');\r\n        console.error(e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"custom-emojis-sheet\" class=\"sheet\">\r\n      {!!onClose && (\r\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\r\n          <Icon icon=\"x\" />\r\n        </button>\r\n      )}\r\n      <header>\r\n        <b>Custom emojis</b>{' '}\r\n        {uiState === 'loading' ? (\r\n          <Loader />\r\n        ) : (\r\n          <small class=\"insignificant\"> • {instance}</small>\r\n        )}\r\n      </header>\r\n      <main>\r\n        <div class=\"custom-emojis-list\">\r\n          {uiState === 'error' && (\r\n            <div class=\"ui-state\">\r\n              <p>Error loading custom emojis</p>\r\n            </div>\r\n          )}\r\n          {uiState === 'default' &&\r\n            Object.entries(customEmojis).map(\r\n              ([category, emojis]) =>\r\n                !!emojis?.length && (\r\n                  <>\r\n                    <div class=\"section-header\">\r\n                      {{\r\n                        '--recent--': 'Recently used',\r\n                        '--others--': 'Others',\r\n                      }[category] || category}\r\n                    </div>\r\n                    <section>\r\n                      {emojis.map((emoji) => (\r\n                        <button\r\n                          key={emoji}\r\n                          type=\"button\"\r\n                          class=\"plain4\"\r\n                          onClick={() => {\r\n                            onClose();\r\n                            requestAnimationFrame(() => {\r\n                              onSelect(`:${emoji.shortcode}:`);\r\n                            });\r\n                            let recentlyUsedCustomEmojis =\r\n                              store.account.get('recentlyUsedCustomEmojis') ||\r\n                              [];\r\n                            const recentlyUsedEmojiIndex =\r\n                              recentlyUsedCustomEmojis.findIndex(\r\n                                (e) => e.shortcode === emoji.shortcode,\r\n                              );\r\n                            if (recentlyUsedEmojiIndex !== -1) {\r\n                              // Move emoji to index 0\r\n                              recentlyUsedCustomEmojis.splice(\r\n                                recentlyUsedEmojiIndex,\r\n                                1,\r\n                              );\r\n                              recentlyUsedCustomEmojis.unshift(emoji);\r\n                            } else {\r\n                              recentlyUsedCustomEmojis.unshift(emoji);\r\n                              // Remove unavailable ones\r\n                              recentlyUsedCustomEmojis =\r\n                                recentlyUsedCustomEmojis.filter((e) =>\r\n                                  customEmojisList.current?.find?.(\r\n                                    (emoji) => emoji.shortcode === e.shortcode,\r\n                                  ),\r\n                                );\r\n                              // Limit to 10\r\n                              recentlyUsedCustomEmojis =\r\n                                recentlyUsedCustomEmojis.slice(0, 10);\r\n                            }\r\n\r\n                            // Store back\r\n                            store.account.set(\r\n                              'recentlyUsedCustomEmojis',\r\n                              recentlyUsedCustomEmojis,\r\n                            );\r\n                          }}\r\n                          title={`:${emoji.shortcode}:`}\r\n                        >\r\n                          <picture>\r\n                            {!!emoji.staticUrl && (\r\n                              <source\r\n                                srcset={emoji.staticUrl}\r\n                                media=\"(prefers-reduced-motion: reduce)\"\r\n                              />\r\n                            )}\r\n                            <img\r\n                              class=\"shortcode-emoji\"\r\n                              src={emoji.url || emoji.staticUrl}\r\n                              alt={emoji.shortcode}\r\n                              width=\"16\"\r\n                              height=\"16\"\r\n                              loading=\"lazy\"\r\n                              decoding=\"async\"\r\n                            />\r\n                          </picture>\r\n                        </button>\r\n                      ))}\r\n                    </section>\r\n                  </>\r\n                ),\r\n            )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Compose;\r\n","import { useLayoutEffect } from 'preact/hooks';\r\nimport { matchPath } from 'react-router-dom';\r\nimport { subscribeKey } from 'valtio/utils';\r\n\r\nimport states from './states';\r\n\r\nconst { PHANPY_CLIENT_NAME: CLIENT_NAME } = import.meta.env;\r\n\r\nexport default function useTitle(title, path) {\r\n  function setTitle() {\r\n    const { currentLocation } = states;\r\n    const hasPaths = Array.isArray(path);\r\n    let paths = hasPaths ? path : [];\r\n    // Workaround for matchPath not working for optional path segments\r\n    // https://github.com/remix-run/react-router/discussions/9862\r\n    if (!hasPaths && /:?\\w+\\?/.test(path)) {\r\n      paths.push(path.replace(/(:\\w+)\\?/g, '$1'));\r\n      paths.push(path.replace(/\\/?:\\w+\\?/g, ''));\r\n    }\r\n    let matched = false;\r\n    if (paths.length) {\r\n      matched = paths.some((p) => matchPath(p, currentLocation));\r\n    } else if (path) {\r\n      matched = matchPath(path, currentLocation);\r\n    }\r\n    console.debug('setTitle', { title, path, currentLocation, paths, matched });\r\n    if (matched) {\r\n      document.title = title ? `${title} / ${CLIENT_NAME}` : CLIENT_NAME;\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    const unsub = subscribeKey(states, 'currentLocation', setTitle);\r\n    setTitle();\r\n    return unsub;\r\n  }, [title, path]);\r\n}\r\n"],"file":"assets/useTitle-tYrc2SF5.js"}